[
        {
                "data_len": 21
        },
        [
                {
                        "id": "test_api-misuse-repair-complete_data_779",
                        "content": "private static <T extends AbstractJaxb> boolean execute(String id, T target, java.lang.Object replace) throws TagTypeUnmatchException { TagEnum tagEnum = TagEnum.valueOf(target.getClass().getSimpleName().toUpperCase()); if (id.equals(target.getId())) { return false; } switch(tagEnum) { case A: A a = (A) target; if (a.isSetContent()) { return replaceByIdWithinObjectList(id, a.getContent(), replace); } break; case ABBR: Abbr abbr = (Abbr) target; if (abbr.isSetContent()) { return replaceByIdWithinObjectList(id, abbr.getContent(), replace); } break; case ACRONYM: Acronym acronym = (Acronym) target; if (acronym.isSetContent()) { return replaceByIdWithinObjectList(id, acronym.getContent(), replace); } break; case ADDRESS: Address address = (Address) target; if (address.isSetContent()) { return replaceByIdWithinObjectList(id, address.getContent(), replace); } break; case APPLET: Applet applet = (Applet) target; if (applet.isSetContent()) { return replaceByIdWithinObjectList(id, applet.getContent(), replace); } break; case AREA: break; case B: B b = (B) target; if (b.isSetContent()) { return replaceByIdWithinObjectList(id, b.getContent(), replace); } break; case BASE: break; case BASEFONT: break; case BDO: Bdo bdo = (Bdo) target; if (bdo.isSetContent()) { return replaceByIdWithinObjectList(id, bdo.getContent(), replace); } break; case BIG: Big big = (Big) target; if (big.isSetContent()) { return replaceByIdWithinObjectList(id, big.getContent(), replace); } break; case BLOCKQUOTE: Blockquote blockquote = (Blockquote) target; if (blockquote.isSetContent()) { return replaceByIdWithinObjectList(id, blockquote.getContent(), replace); } break; case BODY: Body body = (Body) target; if (body.isSetContent()) { return replaceByIdWithinObjectList(id, body.getContent(), replace); } break; case BR: break; case BUTTON: Button button = (Button) target; if (button.isSetContent()) { return replaceByIdWithinObjectList(id, button.getContent(), replace); } break; case CAPTION: Caption caption = (Caption) target; if (caption.isSetContent()) { return replaceByIdWithinObjectList(id, caption.getContent(), replace); } break; case CENTER: Center center = (Center) target; if (center.isSetContent()) { return replaceByIdWithinObjectList(id, center.getContent(), replace); } break; case CITE: Cite cite = (Cite) target; if (cite.isSetContent()) { return replaceByIdWithinObjectList(id, cite.getContent(), replace); } break; case CODE: Code code = (Code) target; if (code.isSetContent()) { return replaceByIdWithinObjectList(id, code.getContent(), replace); } break; case COL: break; case COLGROUP: Colgroup colgroup = (Colgroup) target; if (colgroup.isSetCol()) { for (int i = 0; i < colgroup.getCol().size(); i++) { Col col1 = colgroup.getCol().get(i); if (col1.isSetId() && col1.getId().equals(col1)) { if (replace instanceof Col) { colgroup.getCol().set(i, (Col) replace); return true; } else { throw new TagTypeUnmatchException(Col.class, replace.getClass()); } } } } break; case DD: Dd dd = (Dd) target; if (dd.isSetContent()) { return replaceByIdWithinObjectList(id, dd.getContent(), replace); } break; case DEL: Del del = (Del) target; if (del.isSetContent()) { return replaceByIdWithinObjectList(id, del.getContent(), replace); } break; case DFN: Dfn dfn = (Dfn) target; if (dfn.isSetContent()) { return replaceByIdWithinObjectList(id, dfn.getContent(), replace); } break; case DIR: Dir dir = (Dir) target; if (dir.isSetLi()) { for (int i = 0; i < dir.getLi().size(); i++) { Li li = dir.getLi().get(i); if (li.isSetId() && li.getId().equals(id)) { if (replace instanceof Li) { dir.getLi().set(i, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li, replace)) { return true; } } } } break; case DIV: Div div = (Div) target; if (div.isSetContent()) { return replaceByIdWithinObjectList(id, div.getContent(), replace); } break; case DL: Dl dl = (Dl) target; if (dl.isSetDtOrDd()) { for (int i = 0; i < dl.getDtOrDd().size(); i++) { AbstractJaxb obj = dl.getDtOrDd().get(i); if (id.equals(obj.getId())) { if (obj instanceof Dt || obj instanceof Dd) { dl.getDtOrDd().set(i, (AbstractJaxb) replace); return true; } else { throw new TagTypeUnmatchException(Dd.class, obj.getClass()); } } else { if (execute(id, obj, replace)) { return true; } } } } break; case DT: Dt dt = (Dt) target; if (dt.isSetContent()) { return replaceByIdWithinObjectList(id, dt.getContent(), replace); } break; case EM: Em em = (Em) target; if (em.isSetContent()) { return replaceByIdWithinObjectList(id, em.getContent(), replace); } break; case FIELDSET: Fieldset fieldset = (Fieldset) target; if (fieldset.isSetContent()) { return replaceByIdWithinObjectList(id, fieldset.getContent(), replace); } break; case FONT: Font font = (Font) target; if (font.isSetContent()) { return replaceByIdWithinObjectList(id, font.getContent(), replace); } break; case FORM: Form form = (Form) target; if (form.isSetContent()) { return replaceByIdWithinObjectList(id, form.getContent(), replace); } break; case H1: H1 h1 = (H1) target; if (h1.isSetContent()) { return replaceByIdWithinObjectList(id, h1.getContent(), replace); } break; case H2: H2 h2 = (H2) target; if (h2.isSetContent()) { return replaceByIdWithinObjectList(id, h2.getContent(), replace); } break; case H3: H3 h3 = (H3) target; if (h3.isSetContent()) { return replaceByIdWithinObjectList(id, h3.getContent(), replace); } break; case H4: H4 h4 = (H4) target; if (h4.isSetContent()) { return replaceByIdWithinObjectList(id, h4.getContent(), replace); } break; case H5: H5 h5 = (H5) target; if (h5.isSetContent()) { return replaceByIdWithinObjectList(id, h5.getContent(), replace); } break; case H6: H6 h6 = (H6) target; if (h6.isSetContent()) { return replaceByIdWithinObjectList(id, h6.getContent(), replace); } break; case HGROUP: Hgroup hgroup = (Hgroup) target; if (hgroup.isSetH1OrH2OrH3()) { for (AbstractJaxb aj : hgroup.getH1OrH2OrH3()) { if (execute(id, aj, replace)) { return true; } } } break; case HEAD: Head head = (Head) target; for (AbstractJaxb obj : head.getContent()) { if (execute(id, obj, replace)) { return true; } } break; case HR: break; case HTML: Html html = (Html) target; if (html.isSetHead()) { if (execute(id, html.getHead(), replace)) { return true; } } if (html.isSetBody()) { if (execute(id, html.getBody(), replace)) { return true; } } break; case I: I i = (I) target; if (i.isSetContent()) { return replaceByIdWithinObjectList(id, i.getContent(), replace); } break; case IFRAME: Iframe iframe = (Iframe) target; if (iframe.isSetContent()) { return replaceByIdWithinObjectList(id, iframe.getContent(), replace); } break; case IMG: break; case INPUT: break; case INS: Ins ins = (Ins) target; if (ins.isSetContent()) { return replaceByIdWithinObjectList(id, ins.getContent(), replace); } break; case ISINDEX: break; case KBD: Kbd kbd = (Kbd) target; if (kbd.isSetContent()) { return replaceByIdWithinObjectList(id, kbd.getContent(), replace); } break; case LABEL: Label label = (Label) target; if (label.isSetContent()) { return replaceByIdWithinObjectList(id, label.getContent(), replace); } break; case LEGEND: Legend legend = (Legend) target; if (legend.isSetContent()) { return replaceByIdWithinObjectList(id, legend.getContent(), replace); } break; case LI: Li li = (Li) target; if (li.isSetContent()) { return replaceByIdWithinObjectList(id, li.getContent(), replace); } break; case LINK: break; case MAP: Map map = (Map) target; if (map.isSetArea()) { for (int j = 0; j < map.getArea().size(); j++) { Area area2 = map.getArea().get(j); if (area2.isSetId() && id.equals(area2.getId())) { map.getArea().set(j, (Area) replace); return true; } } } if (map.isSetPOrH1OrH2()) { for (int k = 0; k < map.getPOrH1OrH2().size(); k++) { AbstractJaxb obj = map.getPOrH1OrH2().get(k); if (id.equals(obj.getId())) { map.getPOrH1OrH2().set(k, (AbstractJaxb) replace); return true; } else { if (execute(id, obj, replace)) { return true; } } } } break; case MENU: Menu menu = (Menu) target; if (menu.isSetContent()) { return replaceByIdWithinObjectList(id, menu.getContent(), replace); } break; case META: break; case NOFRAMES: Noframes noframes = (Noframes) target; if (noframes.isSetContent()) { return replaceByIdWithinObjectList(id, noframes.getContent(), replace); } break; case NOSCRIPT: Noscript noscript = (Noscript) target; if (noscript.isSetContent()) { return replaceByIdWithinObjectList(id, noscript.getContent(), replace); } break; case OBJECT: org.mixer2.jaxb.xhtml.Object object = (org.mixer2.jaxb.xhtml.Object) target; if (object.isSetContent()) { return replaceByIdWithinObjectList(id, object.getContent(), replace); } break; case OL: Ol ol = (Ol) target; if (ol.isSetLi()) { for (int j = 0; j < ol.getLi().size(); j++) { Li li2 = ol.getLi().get(j); if (li2.isSetId() && li2.getId().equals(id)) { if (replace instanceof Li) { ol.getLi().set(j, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li2, replace)) { return true; } } } } break; case OPTGROUP: Optgroup optgroup = (Optgroup) target; if (optgroup.isSetOption()) { for (int j = 0; j < optgroup.getOption().size(); j++) { Option option = optgroup.getOption().get(j); if (option.isSetId() && option.getId().equals(id)) { if (replace instanceof Option) { optgroup.getOption().set(j, (Option) replace); return true; } else { throw new TagTypeUnmatchException(Option.class, replace.getClass()); } } else { if (execute(id, option, replace)) { return true; } } } } break; case OPTION: break; case P: P p = (P) target; if (p.isSetContent()) { return replaceByIdWithinObjectList(id, p.getContent(), replace); } break; case PARAM: break; case PRE: Pre pre = (Pre) target; if (pre.isSetContent()) { return replaceByIdWithinObjectList(id, pre.getContent(), replace); } break; case Q: Q q = (Q) target; if (q.isSetContent()) { return replaceByIdWithinObjectList(id, q.getContent(), replace); } break; case S: S s = (S) target; if (s.isSetContent()) { return replaceByIdWithinObjectList(id, s.getContent(), replace); } break; case SAMP: Samp samp = (Samp) target; if (samp.isSetContent()) { return replaceByIdWithinObjectList(id, samp.getContent(), replace); } break; case SCRIPT: break; case SELECT: Select select = (Select) target; if (select.isSetOptgroupOrOption()) { for (int j = 0; j < select.getOptgroupOrOption().size(); j++) { AbstractJaxb obj = select.getOptgroupOrOption().get(j); if (id.equals(obj.getId())) { if (obj.getClass().equals(Optgroup.class) || obj.getClass().equals(Option.class)) { select.getOptgroupOrOption().set(j, (AbstractJaxb) replace); } else { throw new TagTypeUnmatchException(\"Option or Optgroup expected, but replace is \" + replace.getClass()); } return true; } else { if (execute(id, obj, replace)) { return true; } } } } break; case SMALL: Small small = (Small) target; if (small.isSetContent()) { return replaceByIdWithinObjectList(id, small.getContent(), replace); } break; case SPAN: Span span = (Span) target; if (span.isSetContent()) { return replaceByIdWithinObjectList(id, span.getContent(), replace); } break; case STRIKE: Strike strike = (Strike) target; if (strike.isSetContent()) { return replaceByIdWithinObjectList(id, strike.getContent(), replace); } break; case STRONG: Strong strong = (Strong) target; if (strong.isSetContent()) { return replaceByIdWithinObjectList(id, strong.getContent(), replace); } break; case STYLE: break; case SUB: Sub sub = (Sub) target; if (sub.isSetContent()) { return replaceByIdWithinObjectList(id, sub.getContent(), replace); } break; case SUP: Sup sup = (Sup) target; if (sup.isSetContent()) { return replaceByIdWithinObjectList(id, sup.getContent(), replace); } break; case TABLE: Table table = (Table) target; if (table.isSetCaption()) { Caption capt = table.getCaption(); if (capt.isSetId() && id.equals(capt.getId())) { if (replace instanceof Caption) { table.setCaption((Caption) replace); return true; } else { throw new TagTypeUnmatchException(Caption.class, replace.getClass()); } } else { if (replaceByIdWithinObjectList(id, capt.getContent(), replace)) { return true; } } } if (table.isSetCol()) { for (int j = 0; j < table.getCol().size(); j++) { Col col2 = table.getCol().get(j); if (col2.isSetId() && col2.getId().equals(id)) { if (replace instanceof Col) { table.getCol().set(j, (Col) replace); return true; } else { throw new TagTypeUnmatchException(Col.class, replace.getClass()); } } } } if (table.isSetColgroup()) { for (int j = 0; j < table.getColgroup().size(); j++) { Colgroup cg = table.getColgroup().get(j); if (cg.isSetId() && cg.getId().equals(id)) { if (replace instanceof Colgroup) { table.getColgroup().set(j, (Colgroup) replace); return true; } else { throw new TagTypeUnmatchException(Colgroup.class, replace.getClass()); } } else { if (execute(id, cg, replace)) { return true; } } } } if (table.isSetTbody()) { for (int j = 0; j < table.getTbody().size(); j++) { Tbody tbody = table.getTbody().get(j); if (tbody.isSetId() && tbody.getId().equals(tbody)) { if (replace instanceof Tbody) { table.getTbody().set(j, (Tbody) replace); return true; } else { throw new TagTypeUnmatchException(Tbody.class, replace.getClass()); } } else { if (execute(id, tbody, replace)) { return true; } } } } if (table.isSetThead()) { Thead thead = table.getThead(); if (thead.isSetId() && thead.getId().equals(id)) { if (replace instanceof Thead) { table.setThead((Thead) replace); return true; } else { throw new TagTypeUnmatchException(Thead.class, replace.getClass()); } } else { if (execute(id, thead, replace)) { return true; } } } if (table.isSetTfoot()) { Tfoot tfoot = table.getTfoot(); if (tfoot.isSetId() && tfoot.getId().equals(id)) { if (replace instanceof Tfoot) { table.setTfoot((Tfoot) replace); return true; } else { throw new TagTypeUnmatchException(Tfoot.class, replace.getClass()); } } else { if (execute(id, tfoot, replace)) { return true; } } } if (table.isSetTr()) { for (int j = 0; j < table.getTr().size(); j++) { Tr tr = table.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { table.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TBODY: Tbody tbody = (Tbody) target; if (tbody.isSetTr()) { for (int j = 0; j < tbody.getTr().size(); j++) { Tr tr = tbody.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { tbody.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TD: Td td = (Td) target; if (td.isSetContent()) { return replaceByIdWithinObjectList(id, td.getContent(), replace); } break; case TEXTAREA: break; case TFOOT: Tfoot tfoot = (Tfoot) target; if (tfoot.isSetTr()) { for (int j = 0; j < tfoot.getTr().size(); j++) { Tr tr = tfoot.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { tfoot.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TH: Th th = (Th) target; if (th.isSetContent()) { return replaceByIdWithinObjectList(id, th.getContent(), replace); } break; case THEAD: Thead thead = (Thead) target; if (thead.isSetTr()) { for (int j = 0; j < thead.getTr().size(); j++) { Tr tr = thead.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { thead.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TITLE: break; case TR: Tr tr = (Tr) target; if (tr.isSetThOrTd()) { for (int j = 0; j < tr.getThOrTd().size(); j++) { Flow obj = tr.getThOrTd().get(j); if (id.equals(obj.getId())) { if (replace.getClass().equals(Td.class)) { tr.getThOrTd().set(j, (Td) replace); return true; } else if (replace.getClass().equals(Th.class)) { tr.getThOrTd().set(j, (Th) replace); return true; } else { throw new TagTypeUnmatchException(\"Td or Th expected, but replace is \" + replace.getClass()); } } else { if (execute(id, obj, replace)) { return true; } } } } break; case TT: Tt tt = (Tt) target; if (tt.isSetContent()) { return replaceByIdWithinObjectList(id, tt.getContent(), replace); } break; case U: U u = (U) target; if (u.isSetContent()) { return replaceByIdWithinObjectList(id, u.getContent(), replace); } break; case UL: Ul ul = (Ul) target; if (ul.isSetLi()) { for (int j = 0; j < ul.getLi().size(); j++) { Li li2 = ul.getLi().get(j); if (li2.isSetId() && li2.getId().equals(id)) { if (replace instanceof Li) { ul.getLi().set(j, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li2, replace)) { return true; } } } } break; case VAR: Var var = (Var) target; if (var.isSetContent()) { return replaceByIdWithinObjectList(id, var.getContent(), replace); } break; case ARTICLE: Article article = (Article) target; if (article.isSetContent()) { return replaceByIdWithinObjectList(id, article.getContent(), replace); } break; case ASIDE: Aside aside = (Aside) target; if (aside.isSetContent()) { return replaceByIdWithinObjectList(id, aside.getContent(), replace); } break; case AUDIO: Audio audio = (Audio) target; if (audio.isSetContent()) { return replaceByIdWithinObjectList(id, audio.getContent(), replace); } break; case BDI: Bdi bdi = (Bdi) target; if (bdi.isSetContent()) { return replaceByIdWithinObjectList(id, bdi.getContent(), replace); } break; case CANVAS: Canvas canvas = (Canvas) target; if (canvas.isSetContent()) { return replaceByIdWithinObjectList(id, canvas.getContent(), replace); } break; case COMMAND: break; case DATALIST: Datalist datalist = (Datalist) target; if (datalist.isSetContent()) { return replaceByIdWithinObjectList(id, datalist.getContent(), replace); } break; case DETAILS: Details details = (Details) target; if (details.isSetContent()) { return replaceByIdWithinObjectList(id, details.getContent(), replace); } break; case EMBED: break; case FIGCAPTION: Figcaption figcaption = (Figcaption) target; if (figcaption.isSetContent()) { return replaceByIdWithinObjectList(id, figcaption.getContent(), replace); } break; case FIGURE: Figure figure = (Figure) target; if (figure.isSetContent()) { return replaceByIdWithinObjectList(id, figure.getContent(), replace); } break; case FOOTER: Footer footer = (Footer) target; if (footer.isSetContent()) { return replaceByIdWithinObjectList(id, footer.getContent(), replace); } break; case HEADER: Header header = (Header) target; if (header.isSetContent()) { return replaceByIdWithinObjectList(id, header.getContent(), replace); } break; case KEYGEN: break; case MARK: Mark mark = (Mark) target; if (mark.isSetContent()) { return replaceByIdWithinObjectList(id, mark.getContent(), replace); } break; case METER: Meter meter = (Meter) target; if (meter.isSetContent()) { return replaceByIdWithinObjectList(id, meter.getContent(), replace); } break; case NAV: Nav nav = (Nav) target; if (nav.isSetContent()) { return replaceByIdWithinObjectList(id, nav.getContent(), replace); } break; case OUTPUT: Output output = (Output) target; if (output.isSetContent()) { return replaceByIdWithinObjectList(id, output.getContent(), replace); } break; case PROGRESS: Progress progress = (Progress) target; if (progress.isSetContent()) { return replaceByIdWithinObjectList(id, progress.getContent(), replace); } break; case RP: Rp rp = (Rp) target; if (rp.isSetContent()) { return replaceByIdWithinObjectList(id, rp.getContent(), replace); } break; case RT: Rt rt = (Rt) target; if (rt.isSetContent()) { return replaceByIdWithinObjectList(id, rt.getContent(), replace); } break; case RUBY: Ruby ruby = (Ruby) target; if (ruby.isSetContent()) { return replaceByIdWithinObjectList(id, ruby.getContent(), replace); } break; case SECTION: Section section = (Section) target; if (section.isSetContent()) { return replaceByIdWithinObjectList(id, section.getContent(), replace); } break; case SOURCE: break; case SUMMARY: Summary summary = (Summary) target; if (summary.isSetContent()) { return replaceByIdWithinObjectList(id, summary.getContent(), replace); } break; case TIME: Time time = (Time) target; if (time.isSetContent()) { return replaceByIdWithinObjectList(id, time.getContent(), replace); } break; case TRACK: break; case VIDEO: Video video = (Video) target; if (video.isSetContent()) { return replaceByIdWithinObjectList(id, video.getContent(), replace); } break; case WBR: break; } return false; }\nprivate static <T extends AbstractJaxb> boolean execute(String id, T target, java.lang.Object replace) throws TagTypeUnmatchException { TagEnum tagEnum = TagEnum.valueOf(target.getClass().getSimpleName().toUpperCase()); if (id.equals(target.getId())) { return false; } switch(tagEnum) { case A: A a = (A) target; if (a.isSetContent()) { return replaceByIdWithinObjectList(id, a.getContent(), replace); } break; case ABBR: Abbr abbr = (Abbr) target; if (abbr.isSetContent()) { return replaceByIdWithinObjectList(id, abbr.getContent(), replace); } break; case ACRONYM: Acronym acronym = (Acronym) target; if (acronym.isSetContent()) { return replaceByIdWithinObjectList(id, acronym.getContent(), replace); } break; case ADDRESS: Address address = (Address) target; if (address.isSetContent()) { return replaceByIdWithinObjectList(id, address.getContent(), replace); } break; case APPLET: Applet applet = (Applet) target; if (applet.isSetContent()) { return replaceByIdWithinObjectList(id, applet.getContent(), replace); } break; case AREA: break; case B: B b = (B) target; if (b.isSetContent()) { return replaceByIdWithinObjectList(id, b.getContent(), replace); } break; case BASE: break; case BASEFONT: break; case BDO: Bdo bdo = (Bdo) target; if (bdo.isSetContent()) { return replaceByIdWithinObjectList(id, bdo.getContent(), replace); } break; case BIG: Big big = (Big) target; if (big.isSetContent()) { return replaceByIdWithinObjectList(id, big.getContent(), replace); } break; case BLOCKQUOTE: Blockquote blockquote = (Blockquote) target; if (blockquote.isSetContent()) { return replaceByIdWithinObjectList(id, blockquote.getContent(), replace); } break; case BODY: Body body = (Body) target; if (body.isSetContent()) { return replaceByIdWithinObjectList(id, body.getContent(), replace); } break; case BR: break; case BUTTON: Button button = (Button) target; if (button.isSetContent()) { return replaceByIdWithinObjectList(id, button.getContent(), replace); } break; case CAPTION: Caption caption = (Caption) target; if (caption.isSetContent()) { return replaceByIdWithinObjectList(id, caption.getContent(), replace); } break; case CENTER: Center center = (Center) target; if (center.isSetContent()) { return replaceByIdWithinObjectList(id, center.getContent(), replace); } break; case CITE: Cite cite = (Cite) target; if (cite.isSetContent()) { return replaceByIdWithinObjectList(id, cite.getContent(), replace); } break; case CODE: Code code = (Code) target; if (code.isSetContent()) { return replaceByIdWithinObjectList(id, code.getContent(), replace); } break; case COL: break; case COLGROUP: Colgroup colgroup = (Colgroup) target; if (colgroup.isSetCol()) { for (int i = 0; i < colgroup.getCol().size(); i++) { Col col1 = colgroup.getCol().get(i); if (col1.isSetId() && col1.getId().equals(col1)) { if (replace instanceof Col) { colgroup.getCol().set(i, (Col) replace); return true; } else { throw new TagTypeUnmatchException(Col.class, replace.getClass()); } } } } break; case DD: Dd dd = (Dd) target; if (dd.isSetContent()) { return replaceByIdWithinObjectList(id, dd.getContent(), replace); } break; case DEL: Del del = (Del) target; if (del.isSetContent()) { return replaceByIdWithinObjectList(id, del.getContent(), replace); } break; case DFN: Dfn dfn = (Dfn) target; if (dfn.isSetContent()) { return replaceByIdWithinObjectList(id, dfn.getContent(), replace); } break; case DIR: Dir dir = (Dir) target; if (dir.isSetLi()) { for (int i = 0; i < dir.getLi().size(); i++) { Li li = dir.getLi().get(i); if (li.isSetId() && li.getId().equals(id)) { if (replace instanceof Li) { dir.getLi().set(i, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li, replace)) { return true; } } } } break; case DIV: Div div = (Div) target; if (div.isSetContent()) { return replaceByIdWithinObjectList(id, div.getContent(), replace); } break; case DL: Dl dl = (Dl) target; if (dl.isSetDtOrDd()) { for (int i = 0; i < dl.getDtOrDd().size(); i++) { AbstractJaxb obj = dl.getDtOrDd().get(i); if (id.equals(obj.getId())) { if (obj instanceof Dt || obj instanceof Dd) { dl.getDtOrDd().set(i, (AbstractJaxb) replace); return true; } else { throw new TagTypeUnmatchException(Dd.class, obj.getClass()); } } else { if (execute(id, obj, replace)) { return true; } } } } break; case DT: Dt dt = (Dt) target; if (dt.isSetContent()) { return replaceByIdWithinObjectList(id, dt.getContent(), replace); } break; case EM: Em em = (Em) target; if (em.isSetContent()) { return replaceByIdWithinObjectList(id, em.getContent(), replace); } break; case FIELDSET: Fieldset fieldset = (Fieldset) target; if (fieldset.isSetContent()) { return replaceByIdWithinObjectList(id, fieldset.getContent(), replace); } break; case FONT: Font font = (Font) target; if (font.isSetContent()) { return replaceByIdWithinObjectList(id, font.getContent(), replace); } break; case FORM: Form form = (Form) target; if (form.isSetContent()) { return replaceByIdWithinObjectList(id, form.getContent(), replace); } break; case H1: H1 h1 = (H1) target; if (h1.isSetContent()) { return replaceByIdWithinObjectList(id, h1.getContent(), replace); } break; case H2: H2 h2 = (H2) target; if (h2.isSetContent()) { return replaceByIdWithinObjectList(id, h2.getContent(), replace); } break; case H3: H3 h3 = (H3) target; if (h3.isSetContent()) { return replaceByIdWithinObjectList(id, h3.getContent(), replace); } break; case H4: H4 h4 = (H4) target; if (h4.isSetContent()) { return replaceByIdWithinObjectList(id, h4.getContent(), replace); } break; case H5: H5 h5 = (H5) target; if (h5.isSetContent()) { return replaceByIdWithinObjectList(id, h5.getContent(), replace); } break; case H6: H6 h6 = (H6) target; if (h6.isSetContent()) { return replaceByIdWithinObjectList(id, h6.getContent(), replace); } break; case HGROUP: Hgroup hgroup = (Hgroup) target; if (hgroup.isSetH1OrH2OrH3()) { for (AbstractJaxb aj : hgroup.getH1OrH2OrH3()) { if (execute(id, aj, replace)) { return true; } } } break; case HEAD: Head head = (Head) target; for (int j = 0; j < head.getContent().size(); j++) { AbstractJaxb obj = head.getContent().get(j); if (obj.isSetId() && obj.getId().equals(id)) { head.getContent().set(j, (AbstractJaxb) replace); return true; } else { if (execute(id, obj, replace)) { return true; } } } break; case HR: break; case HTML: Html html = (Html) target; if (html.isSetHead()) { if (execute(id, html.getHead(), replace)) { return true; } } if (html.isSetBody()) { if (execute(id, html.getBody(), replace)) { return true; } } break; case I: I i = (I) target; if (i.isSetContent()) { return replaceByIdWithinObjectList(id, i.getContent(), replace); } break; case IFRAME: Iframe iframe = (Iframe) target; if (iframe.isSetContent()) { return replaceByIdWithinObjectList(id, iframe.getContent(), replace); } break; case IMG: break; case INPUT: break; case INS: Ins ins = (Ins) target; if (ins.isSetContent()) { return replaceByIdWithinObjectList(id, ins.getContent(), replace); } break; case ISINDEX: break; case KBD: Kbd kbd = (Kbd) target; if (kbd.isSetContent()) { return replaceByIdWithinObjectList(id, kbd.getContent(), replace); } break; case LABEL: Label label = (Label) target; if (label.isSetContent()) { return replaceByIdWithinObjectList(id, label.getContent(), replace); } break; case LEGEND: Legend legend = (Legend) target; if (legend.isSetContent()) { return replaceByIdWithinObjectList(id, legend.getContent(), replace); } break; case LI: Li li = (Li) target; if (li.isSetContent()) { return replaceByIdWithinObjectList(id, li.getContent(), replace); } break; case LINK: break; case MAP: Map map = (Map) target; if (map.isSetArea()) { for (int j = 0; j < map.getArea().size(); j++) { Area area2 = map.getArea().get(j); if (area2.isSetId() && id.equals(area2.getId())) { map.getArea().set(j, (Area) replace); return true; } } } if (map.isSetPOrH1OrH2()) { for (int k = 0; k < map.getPOrH1OrH2().size(); k++) { AbstractJaxb obj = map.getPOrH1OrH2().get(k); if (id.equals(obj.getId())) { map.getPOrH1OrH2().set(k, (AbstractJaxb) replace); return true; } else { if (execute(id, obj, replace)) { return true; } } } } break; case MENU: Menu menu = (Menu) target; if (menu.isSetContent()) { return replaceByIdWithinObjectList(id, menu.getContent(), replace); } break; case META: break; case NOFRAMES: Noframes noframes = (Noframes) target; if (noframes.isSetContent()) { return replaceByIdWithinObjectList(id, noframes.getContent(), replace); } break; case NOSCRIPT: Noscript noscript = (Noscript) target; if (noscript.isSetContent()) { return replaceByIdWithinObjectList(id, noscript.getContent(), replace); } break; case OBJECT: org.mixer2.jaxb.xhtml.Object object = (org.mixer2.jaxb.xhtml.Object) target; if (object.isSetContent()) { return replaceByIdWithinObjectList(id, object.getContent(), replace); } break; case OL: Ol ol = (Ol) target; if (ol.isSetLi()) { for (int j = 0; j < ol.getLi().size(); j++) { Li li2 = ol.getLi().get(j); if (li2.isSetId() && li2.getId().equals(id)) { if (replace instanceof Li) { ol.getLi().set(j, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li2, replace)) { return true; } } } } break; case OPTGROUP: Optgroup optgroup = (Optgroup) target; if (optgroup.isSetOption()) { for (int j = 0; j < optgroup.getOption().size(); j++) { Option option = optgroup.getOption().get(j); if (option.isSetId() && option.getId().equals(id)) { if (replace instanceof Option) { optgroup.getOption().set(j, (Option) replace); return true; } else { throw new TagTypeUnmatchException(Option.class, replace.getClass()); } } else { if (execute(id, option, replace)) { return true; } } } } break; case OPTION: break; case P: P p = (P) target; if (p.isSetContent()) { return replaceByIdWithinObjectList(id, p.getContent(), replace); } break; case PARAM: break; case PRE: Pre pre = (Pre) target; if (pre.isSetContent()) { return replaceByIdWithinObjectList(id, pre.getContent(), replace); } break; case Q: Q q = (Q) target; if (q.isSetContent()) { return replaceByIdWithinObjectList(id, q.getContent(), replace); } break; case S: S s = (S) target; if (s.isSetContent()) { return replaceByIdWithinObjectList(id, s.getContent(), replace); } break; case SAMP: Samp samp = (Samp) target; if (samp.isSetContent()) { return replaceByIdWithinObjectList(id, samp.getContent(), replace); } break; case SCRIPT: break; case SELECT: Select select = (Select) target; if (select.isSetOptgroupOrOption()) { for (int j = 0; j < select.getOptgroupOrOption().size(); j++) { AbstractJaxb obj = select.getOptgroupOrOption().get(j); if (id.equals(obj.getId())) { if (obj.getClass().equals(Optgroup.class) || obj.getClass().equals(Option.class)) { select.getOptgroupOrOption().set(j, (AbstractJaxb) replace); } else { throw new TagTypeUnmatchException(\"Option or Optgroup expected, but replace is \" + replace.getClass()); } return true; } else { if (execute(id, obj, replace)) { return true; } } } } break; case SMALL: Small small = (Small) target; if (small.isSetContent()) { return replaceByIdWithinObjectList(id, small.getContent(), replace); } break; case SPAN: Span span = (Span) target; if (span.isSetContent()) { return replaceByIdWithinObjectList(id, span.getContent(), replace); } break; case STRIKE: Strike strike = (Strike) target; if (strike.isSetContent()) { return replaceByIdWithinObjectList(id, strike.getContent(), replace); } break; case STRONG: Strong strong = (Strong) target; if (strong.isSetContent()) { return replaceByIdWithinObjectList(id, strong.getContent(), replace); } break; case STYLE: break; case SUB: Sub sub = (Sub) target; if (sub.isSetContent()) { return replaceByIdWithinObjectList(id, sub.getContent(), replace); } break; case SUP: Sup sup = (Sup) target; if (sup.isSetContent()) { return replaceByIdWithinObjectList(id, sup.getContent(), replace); } break; case TABLE: Table table = (Table) target; if (table.isSetCaption()) { Caption capt = table.getCaption(); if (capt.isSetId() && id.equals(capt.getId())) { if (replace instanceof Caption) { table.setCaption((Caption) replace); return true; } else { throw new TagTypeUnmatchException(Caption.class, replace.getClass()); } } else { if (replaceByIdWithinObjectList(id, capt.getContent(), replace)) { return true; } } } if (table.isSetCol()) { for (int j = 0; j < table.getCol().size(); j++) { Col col2 = table.getCol().get(j); if (col2.isSetId() && col2.getId().equals(id)) { if (replace instanceof Col) { table.getCol().set(j, (Col) replace); return true; } else { throw new TagTypeUnmatchException(Col.class, replace.getClass()); } } } } if (table.isSetColgroup()) { for (int j = 0; j < table.getColgroup().size(); j++) { Colgroup cg = table.getColgroup().get(j); if (cg.isSetId() && cg.getId().equals(id)) { if (replace instanceof Colgroup) { table.getColgroup().set(j, (Colgroup) replace); return true; } else { throw new TagTypeUnmatchException(Colgroup.class, replace.getClass()); } } else { if (execute(id, cg, replace)) { return true; } } } } if (table.isSetTbody()) { for (int j = 0; j < table.getTbody().size(); j++) { Tbody tbody = table.getTbody().get(j); if (tbody.isSetId() && tbody.getId().equals(tbody)) { if (replace instanceof Tbody) { table.getTbody().set(j, (Tbody) replace); return true; } else { throw new TagTypeUnmatchException(Tbody.class, replace.getClass()); } } else { if (execute(id, tbody, replace)) { return true; } } } } if (table.isSetThead()) { Thead thead = table.getThead(); if (thead.isSetId() && thead.getId().equals(id)) { if (replace instanceof Thead) { table.setThead((Thead) replace); return true; } else { throw new TagTypeUnmatchException(Thead.class, replace.getClass()); } } else { if (execute(id, thead, replace)) { return true; } } } if (table.isSetTfoot()) { Tfoot tfoot = table.getTfoot(); if (tfoot.isSetId() && tfoot.getId().equals(id)) { if (replace instanceof Tfoot) { table.setTfoot((Tfoot) replace); return true; } else { throw new TagTypeUnmatchException(Tfoot.class, replace.getClass()); } } else { if (execute(id, tfoot, replace)) { return true; } } } if (table.isSetTr()) { for (int j = 0; j < table.getTr().size(); j++) { Tr tr = table.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { table.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TBODY: Tbody tbody = (Tbody) target; if (tbody.isSetTr()) { for (int j = 0; j < tbody.getTr().size(); j++) { Tr tr = tbody.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { tbody.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TD: Td td = (Td) target; if (td.isSetContent()) { return replaceByIdWithinObjectList(id, td.getContent(), replace); } break; case TEXTAREA: break; case TFOOT: Tfoot tfoot = (Tfoot) target; if (tfoot.isSetTr()) { for (int j = 0; j < tfoot.getTr().size(); j++) { Tr tr = tfoot.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { tfoot.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TH: Th th = (Th) target; if (th.isSetContent()) { return replaceByIdWithinObjectList(id, th.getContent(), replace); } break; case THEAD: Thead thead = (Thead) target; if (thead.isSetTr()) { for (int j = 0; j < thead.getTr().size(); j++) { Tr tr = thead.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { thead.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TITLE: break; case TR: Tr tr = (Tr) target; if (tr.isSetThOrTd()) { for (int j = 0; j < tr.getThOrTd().size(); j++) { Flow obj = tr.getThOrTd().get(j); if (id.equals(obj.getId())) { if (replace.getClass().equals(Td.class)) { tr.getThOrTd().set(j, (Td) replace); return true; } else if (replace.getClass().equals(Th.class)) { tr.getThOrTd().set(j, (Th) replace); return true; } else { throw new TagTypeUnmatchException(\"Td or Th expected, but replace is \" + replace.getClass()); } } else { if (execute(id, obj, replace)) { return true; } } } } break; case TT: Tt tt = (Tt) target; if (tt.isSetContent()) { return replaceByIdWithinObjectList(id, tt.getContent(), replace); } break; case U: U u = (U) target; if (u.isSetContent()) { return replaceByIdWithinObjectList(id, u.getContent(), replace); } break; case UL: Ul ul = (Ul) target; if (ul.isSetLi()) { for (int j = 0; j < ul.getLi().size(); j++) { Li li2 = ul.getLi().get(j); if (li2.isSetId() && li2.getId().equals(id)) { if (replace instanceof Li) { ul.getLi().set(j, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li2, replace)) { return true; } } } } break; case VAR: Var var = (Var) target; if (var.isSetContent()) { return replaceByIdWithinObjectList(id, var.getContent(), replace); } break; case ARTICLE: Article article = (Article) target; if (article.isSetContent()) { return replaceByIdWithinObjectList(id, article.getContent(), replace); } break; case ASIDE: Aside aside = (Aside) target; if (aside.isSetContent()) { return replaceByIdWithinObjectList(id, aside.getContent(), replace); } break; case AUDIO: Audio audio = (Audio) target; if (audio.isSetContent()) { return replaceByIdWithinObjectList(id, audio.getContent(), replace); } break; case BDI: Bdi bdi = (Bdi) target; if (bdi.isSetContent()) { return replaceByIdWithinObjectList(id, bdi.getContent(), replace); } break; case CANVAS: Canvas canvas = (Canvas) target; if (canvas.isSetContent()) { return replaceByIdWithinObjectList(id, canvas.getContent(), replace); } break; case COMMAND: break; case DATALIST: Datalist datalist = (Datalist) target; if (datalist.isSetContent()) { return replaceByIdWithinObjectList(id, datalist.getContent(), replace); } break; case DETAILS: Details details = (Details) target; if (details.isSetContent()) { return replaceByIdWithinObjectList(id, details.getContent(), replace); } break; case EMBED: break; case FIGCAPTION: Figcaption figcaption = (Figcaption) target; if (figcaption.isSetContent()) { return replaceByIdWithinObjectList(id, figcaption.getContent(), replace); } break; case FIGURE: Figure figure = (Figure) target; if (figure.isSetContent()) { return replaceByIdWithinObjectList(id, figure.getContent(), replace); } break; case FOOTER: Footer footer = (Footer) target; if (footer.isSetContent()) { return replaceByIdWithinObjectList(id, footer.getContent(), replace); } break; case HEADER: Header header = (Header) target; if (header.isSetContent()) { return replaceByIdWithinObjectList(id, header.getContent(), replace); } break; case KEYGEN: break; case MARK: Mark mark = (Mark) target; if (mark.isSetContent()) { return replaceByIdWithinObjectList(id, mark.getContent(), replace); } break; case METER: Meter meter = (Meter) target; if (meter.isSetContent()) { return replaceByIdWithinObjectList(id, meter.getContent(), replace); } break; case NAV: Nav nav = (Nav) target; if (nav.isSetContent()) { return replaceByIdWithinObjectList(id, nav.getContent(), replace); } break; case OUTPUT: Output output = (Output) target; if (output.isSetContent()) { return replaceByIdWithinObjectList(id, output.getContent(), replace); } break; case PROGRESS: Progress progress = (Progress) target; if (progress.isSetContent()) { return replaceByIdWithinObjectList(id, progress.getContent(), replace); } break; case RP: Rp rp = (Rp) target; if (rp.isSetContent()) { return replaceByIdWithinObjectList(id, rp.getContent(), replace); } break; case RT: Rt rt = (Rt) target; if (rt.isSetContent()) { return replaceByIdWithinObjectList(id, rt.getContent(), replace); } break; case RUBY: Ruby ruby = (Ruby) target; if (ruby.isSetContent()) { return replaceByIdWithinObjectList(id, ruby.getContent(), replace); } break; case SECTION: Section section = (Section) target; if (section.isSetContent()) { return replaceByIdWithinObjectList(id, section.getContent(), replace); } break; case SOURCE: break; case SUMMARY: Summary summary = (Summary) target; if (summary.isSetContent()) { return replaceByIdWithinObjectList(id, summary.getContent(), replace); } break; case TIME: Time time = (Time) target; if (time.isSetContent()) { return replaceByIdWithinObjectList(id, time.getContent(), replace); } break; case TRACK: break; case VIDEO: Video video = (Video) target; if (video.isSetContent()) { return replaceByIdWithinObjectList(id, video.getContent(), replace); } break; case WBR: break; } return false; }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 778
                },
                {
                        "id": "pretrain_java_data_19375096",
                        "content": "package org.mixer2.xhtml.util;\nimport java.util.List;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.mixer2.jaxb.xhtml.*;\nimport org.mixer2.xhtml.AbstractJaxb;\nimport org.mixer2.xhtml.TagEnum;\nimport org.mixer2.xhtml.exception.TagTypeUnmatchException;\n/**\n*\n* @see org.mixer2.xhtml.AbstractJaxb#replaceById(String, String)\n* @see org.mixer2.xhtml.AbstractJaxb#replaceById(String, AbstractJaxb)\n* @author watanabe\n*\n*/\npublic class ReplaceByIdUtil {\n@SuppressWarnings(\"unused\")\nprivate static Log log = LogFactory.getLog(ReplaceByIdUtil.class);\n/**\n* target\u306e\u5b50\u5b6b\u8981\u7d20\u306e\u3046\u3061\u3001\u6307\u5b9a\u3057\u305fid\u5c5e\u6027\u3092\u6301\u3064\u8981\u7d20\u3092\u7f6e\u63db\u3057\u307e\u3059\u3002 \u306a\u304a\u3001replace\u306e\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3067\u7f6e\u63db\u3055\u308c\u307e\u3059\u3002\n* target\u81ea\u8eab\u3092\u7f6e\u63db\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n*\n* @param <T>\n* @param id\n* @param target\n* @param replace\n* @return\n* @throws TagTypeUnmatchException\n* @throws Exception\n*/\npublic static <T extends AbstractJaxb> boolean replaceById(String id,\nT target, T replace) throws TagTypeUnmatchException {\nreturn execute(id, target, replace.copy(replace.getClass()));\n}\npublic static <T extends AbstractJaxb> boolean replaceById(String id,\nT target, String replace) throws TagTypeUnmatchException {\nreturn execute(id, target, replace);\n}\n@SuppressWarnings(\"unchecked\")\nprivate static <T extends AbstractJaxb> boolean replaceByIdWithinObjectList(\nString id, List<java.lang.Object> list, java.lang.Object replace)\nthrows TagTypeUnmatchException {\nfor (int i = 0; i < list.size(); i++) {\njava.lang.Object obj = list.get(i);\nif (obj == null || obj instanceof java.lang.String) {\ncontinue;\n}\nif (id.equals(((AbstractJaxb)obj).getId())) {\nlist.set(i, replace);\nreturn true;\n} else {\nif (replace instanceof AbstractJaxb\n&& execute(id, (T) obj, (T) replace)) {\nreturn true;\n}\nif (replace instanceof String\n&& execute(id, (T) obj, (String) replace)) {\nreturn true;\n}\n}\n}\nreturn false;\n}\nprivate static <T extends AbstractJaxb> boolean execute(String id,\nT target, java.lang.Object replace) throws TagTypeUnmatchException {\nTagEnum tagEnum = TagEnum.valueOf(target.getClass().getSimpleName()\n.toUpperCase());\nif (id.equals(target.getId())) {\nreturn false;\n}\nswitch (tagEnum) {\ncase A:\nA a = (A) target;\nif (a.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, a.getContent(), replace);\n}\nbreak;\ncase ABBR:\nAbbr abbr = (Abbr) target;\nif (abbr.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, abbr.getContent(),\nreplace);\n}\nbreak;\ncase ACRONYM:\nAcronym acronym = (Acronym) target;\nif (acronym.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, acronym.getContent(),\nreplace);\n}\nbreak;\ncase ADDRESS:\nAddress address = (Address) target;\nif (address.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, address.getContent(),\nreplace);\n}\nbreak;\ncase APPLET:\nApplet applet = (Applet) target;\nif (applet.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, applet.getContent(),\nreplace);\n}\nbreak;\ncase AREA:\n// area is empty element.\nbreak;\ncase B:\nB b = (B) target;\nif (b.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, b.getContent(), replace);\n}\nbreak;\ncase BASE:\n// empty element.\nbreak;\ncase BASEFONT:\n// empty element.\nbreak;\ncase BDO:\nBdo bdo = (Bdo) target;\nif (bdo.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, bdo.getContent(),\nreplace);\n}\nbreak;\ncase BIG:\nBig big = (Big) target;\nif (big.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, big.getContent(),\nreplace);\n}\nbreak;\ncase BLOCKQUOTE:\nBlockquote blockquote = (Blockquote) target;\nif (blockquote.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, blockquote.getContent(),\nreplace);\n}\nbreak;\ncase BODY:\nBody body = (Body) target;\nif (body.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, body.getContent(),\nreplace);\n}\nbreak;\ncase BR:\n// empty element.\nbreak;\ncase BUTTON:\nButton button = (Button) target;\nif (button.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, button.getContent(),\nreplace);\n}\nbreak;\ncase CAPTION:\nCaption caption = (Caption) target;\nif (caption.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, caption.getContent(),\nreplace);\n}\nbreak;\ncase CENTER:\nCenter center = (Center) target;\nif (center.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, center.getContent(),\nreplace);\n}\nbreak;\ncase CITE:\nCite cite = (Cite) target;\nif (cite.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, cite.getContent(),\nreplace);\n}\nbreak;\ncase CODE:\nCode code = (Code) target;\nif (code.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, code.getContent(),\nreplace);\n}\nbreak;\ncase COL:\n// empty element.\nbreak;\ncase COLGROUP:\nColgroup colgroup = (Colgroup) target;\nif (colgroup.isSetCol()) {\nfor (int i = 0; i < colgroup.getCol().size(); i++) {\nCol col1 = colgroup.getCol().get(i);\nif (col1.isSetId() && col1.getId().equals(col1)) {\nif (replace instanceof Col) {\ncolgroup.getCol().set(i, (Col) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Col.class,\nreplace.getClass());\n}\n}\n}\n}\nbreak;\ncase DD:\nDd dd = (Dd) target;\nif (dd.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, dd.getContent(), replace);\n}\nbreak;\ncase DEL:\nDel del = (Del) target;\nif (del.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, del.getContent(),\nreplace);\n}\nbreak;\ncase DFN:\nDfn dfn = (Dfn) target;\nif (dfn.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, dfn.getContent(),\nreplace);\n}\nbreak;\ncase DIR:\nDir dir = (Dir) target;\nif (dir.isSetLi()) {\nfor (int i = 0; i < dir.getLi().size(); i++) {\nLi li = dir.getLi().get(i);\nif (li.isSetId() && li.getId().equals(id)) {\nif (replace instanceof Li) {\ndir.getLi().set(i, (Li) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Li.class, replace\n.getClass());\n}\n} else {\nif (execute(id, li, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase DIV:\nDiv div = (Div) target;\nif (div.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, div.getContent(),\nreplace);\n}\nbreak;\ncase DL:\nDl dl = (Dl) target;\nif (dl.isSetDtOrDd()) {\nfor (int i = 0; i < dl.getDtOrDd().size(); i++) {\nAbstractJaxb obj = dl.getDtOrDd().get(i);\nif (id.equals(obj.getId())) {\nif (obj instanceof Dt || obj instanceof Dd) {\ndl.getDtOrDd().set(i, (AbstractJaxb) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Dd.class, obj\n.getClass());\n}\n} else {\nif (execute(id, obj, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase DT:\nDt dt = (Dt) target;\nif (dt.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, dt.getContent(), replace);\n}\nbreak;\ncase EM:\nEm em = (Em) target;\nif (em.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, em.getContent(), replace);\n}\nbreak;\ncase FIELDSET:\nFieldset fieldset = (Fieldset) target;\nif (fieldset.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, fieldset.getContent(),\nreplace);\n}\nbreak;\ncase FONT:\nFont font = (Font) target;\nif (font.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, font.getContent(),\nreplace);\n}\nbreak;\ncase FORM:\nForm form = (Form) target;\nif (form.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, form.getContent(),\nreplace);\n}\nbreak;\ncase H1:\nH1 h1 = (H1) target;\nif (h1.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, h1.getContent(), replace);\n}\nbreak;\ncase H2:\nH2 h2 = (H2) target;\nif (h2.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, h2.getContent(), replace);\n}\nbreak;\ncase H3:\nH3 h3 = (H3) target;\nif (h3.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, h3.getContent(), replace);\n}\nbreak;\ncase H4:\nH4 h4 = (H4) target;\nif (h4.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, h4.getContent(), replace);\n}\nbreak;\ncase H5:\nH5 h5 = (H5) target;\nif (h5.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, h5.getContent(), replace);\n}\nbreak;\ncase H6:\nH6 h6 = (H6) target;\nif (h6.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, h6.getContent(), replace);\n}\nbreak;\ncase HGROUP:\nHgroup hgroup = (Hgroup) target;\nif (hgroup.isSetH1OrH2OrH3()) {\nfor (AbstractJaxb aj : hgroup.getH1OrH2OrH3()) {\nif (execute(id, aj, replace)) {\nreturn true;\n}\n}\n}\nbreak;\ncase HEAD:\nHead head = (Head) target;\nfor (int j = 0; j < head.getContent().size(); j++) {\nAbstractJaxb obj = head.getContent().get(j);\nif (obj.isSetId() && obj.getId().equals(id)) {\nhead.getContent().set(j, (AbstractJaxb) replace);\nreturn true;\n} else {\nif (execute(id, obj, replace)) {\nreturn true;\n}\n}\n}\nbreak;\ncase HR:\n// hr is empty element.\nbreak;\ncase HTML:\nHtml html = (Html) target;\nif (html.isSetHead()) {\nif (execute(id, html.getHead(), replace)) {\nreturn true;\n}\n}\nif (html.isSetBody()) {\nif (execute(id, html.getBody(), replace)) {\nreturn true;\n}\n}\nbreak;\ncase I:\nI i = (I) target;\nif (i.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, i.getContent(), replace);\n}\nbreak;\ncase IFRAME:\nIframe iframe = (Iframe) target;\nif (iframe.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, iframe.getContent(),\nreplace);\n}\nbreak;\ncase IMG:\n// img is empty element.\nbreak;\ncase INPUT:\n// input is empty element.\nbreak;\ncase INS:\nIns ins = (Ins) target;\nif (ins.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, ins.getContent(),\nreplace);\n}\nbreak;\ncase ISINDEX:\n// empty element.\nbreak;\ncase KBD:\nKbd kbd = (Kbd) target;\nif (kbd.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, kbd.getContent(),\nreplace);\n}\nbreak;\ncase LABEL:\nLabel label = (Label) target;\nif (label.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, label.getContent(),\nreplace);\n}\nbreak;\ncase LEGEND:\nLegend legend = (Legend) target;\nif (legend.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, legend.getContent(),\nreplace);\n}\nbreak;\ncase LI:\nLi li = (Li) target;\nif (li.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, li.getContent(), replace);\n}\nbreak;\ncase LINK:\n// empty element.\nbreak;\ncase MAP:\nMap map = (Map) target;\nif (map.isSetArea()) {\nfor (int j = 0; j < map.getArea().size(); j++) {\nArea area2 = map.getArea().get(j);\nif (area2.isSetId() && id.equals(area2.getId())) {\nmap.getArea().set(j, (Area) replace);\nreturn true;\n}\n// area has no child element.\n}\n}\nif (map.isSetPOrH1OrH2()) {\nfor (int k = 0; k < map.getPOrH1OrH2().size(); k++) {\nAbstractJaxb obj = map.getPOrH1OrH2().get(k);\nif (id.equals(obj.getId())) {\nmap.getPOrH1OrH2().set(k, (AbstractJaxb) replace);\nreturn true;\n} else {\nif (execute(id, obj, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase MENU:\nMenu menu = (Menu) target;\nif (menu.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, menu.getContent(),\nreplace);\n}\nbreak;\ncase META:\n// empty element.\nbreak;\ncase NOFRAMES:\nNoframes noframes = (Noframes) target;\nif (noframes.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, noframes.getContent(),\nreplace);\n}\nbreak;\ncase NOSCRIPT:\nNoscript noscript = (Noscript) target;\nif (noscript.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, noscript.getContent(),\nreplace);\n}\nbreak;\ncase OBJECT:\norg.mixer2.jaxb.xhtml.Object object = (org.mixer2.jaxb.xhtml.Object) target;\nif (object.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, object.getContent(),\nreplace);\n}\nbreak;\ncase OL:\nOl ol = (Ol) target;\nif (ol.isSetLi()) {\nfor (int j = 0; j < ol.getLi().size(); j++) {\nLi li2 = ol.getLi().get(j);\nif (li2.isSetId() && li2.getId().equals(id)) {\nif (replace instanceof Li) {\nol.getLi().set(j, (Li) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Li.class, replace\n.getClass());\n}\n} else {\nif (execute(id, li2, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase OPTGROUP:\nOptgroup optgroup = (Optgroup) target;\nif (optgroup.isSetOption()) {\nfor (int j = 0; j < optgroup.getOption().size(); j++) {\nOption option = optgroup.getOption().get(j);\nif (option.isSetId() && option.getId().equals(id)) {\nif (replace instanceof Option) {\noptgroup.getOption().set(j, (Option) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Option.class,\nreplace.getClass());\n}\n} else {\nif (execute(id, option, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase OPTION:\n// option tag includes no other element.\nbreak;\ncase P:\nP p = (P) target;\nif (p.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, p.getContent(), replace);\n}\nbreak;\ncase PARAM:\n// param is empty element.\nbreak;\ncase PRE:\nPre pre = (Pre) target;\nif (pre.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, pre.getContent(),\nreplace);\n}\nbreak;\ncase Q:\nQ q = (Q) target;\nif (q.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, q.getContent(), replace);\n}\nbreak;\ncase S:\nS s = (S) target;\nif (s.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, s.getContent(), replace);\n}\nbreak;\ncase SAMP:\nSamp samp = (Samp) target;\nif (samp.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, samp.getContent(),\nreplace);\n}\nbreak;\ncase SCRIPT:\n// script include no other element.\nbreak;\ncase SELECT:\nSelect select = (Select) target;\nif (select.isSetOptgroupOrOption()) {\nfor (int j = 0; j < select.getOptgroupOrOption().size(); j++) {\nAbstractJaxb obj = select.getOptgroupOrOption().get(j);\nif (id.equals(obj.getId())) {\nif (obj.getClass().equals(Optgroup.class)\n|| obj.getClass().equals(Option.class)) {\nselect.getOptgroupOrOption().set(j,\n(AbstractJaxb) replace);\n} else {\nthrow new TagTypeUnmatchException(\n\"Option or Optgroup expected, but replace is \"\n+ replace.getClass());\n}\nreturn true;\n} else {\nif (execute(id, obj, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase SMALL:\nSmall small = (Small) target;\nif (small.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, small.getContent(),\nreplace);\n}\nbreak;\ncase SPAN:\nSpan span = (Span) target;\nif (span.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, span.getContent(),\nreplace);\n}\nbreak;\ncase STRIKE:\nStrike strike = (Strike) target;\nif (strike.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, strike.getContent(),\nreplace);\n}\nbreak;\ncase STRONG:\nStrong strong = (Strong) target;\nif (strong.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, strong.getContent(),\nreplace);\n}\nbreak;\ncase STYLE:\n// has no other element.\nbreak;\ncase SUB:\nSub sub = (Sub) target;\nif (sub.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, sub.getContent(),\nreplace);\n}\nbreak;\ncase SUP:\nSup sup = (Sup) target;\nif (sup.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, sup.getContent(),\nreplace);\n}\nbreak;\ncase TABLE:\nTable table = (Table) target;\nif (table.isSetCaption()) {\nCaption capt = table.getCaption();\nif (capt.isSetId() && id.equals(capt.getId())) {\nif (replace instanceof Caption) {\ntable.setCaption((Caption) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Caption.class,\nreplace.getClass());\n}\n} else {\nif (replaceByIdWithinObjectList(id, capt.getContent(),\nreplace)) {\nreturn true;\n}\n}\n}\nif (table.isSetCol()) {\nfor (int j = 0; j < table.getCol().size(); j++) {\nCol col2 = table.getCol().get(j);\nif (col2.isSetId() && col2.getId().equals(id)) {\nif (replace instanceof Col) {\ntable.getCol().set(j, (Col) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Col.class,\nreplace.getClass());\n}\n}\n}\n}\nif (table.isSetColgroup()) {\nfor (int j = 0; j < table.getColgroup().size(); j++) {\nColgroup cg = table.getColgroup().get(j);\nif (cg.isSetId() && cg.getId().equals(id)) {\nif (replace instanceof Colgroup) {\ntable.getColgroup().set(j, (Colgroup) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Colgroup.class,\nreplace.getClass());\n}\n} else {\nif (execute(id, cg, replace)) {\nreturn true;\n}\n}\n}\n}\nif (table.isSetTbody()) {\nfor (int j = 0; j < table.getTbody().size(); j++) {\nTbody tbody = table.getTbody().get(j);\nif (tbody.isSetId() && tbody.getId().equals(tbody)) {\nif (replace instanceof Tbody) {\ntable.getTbody().set(j, (Tbody) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Tbody.class,\nreplace.getClass());\n}\n} else {\nif (execute(id, tbody, replace)) {\nreturn true;\n}\n}\n}\n}\nif (table.isSetThead()) {\nThead thead = table.getThead();\nif (thead.isSetId() && thead.getId().equals(id)) {\nif (replace instanceof Thead) {\ntable.setThead((Thead) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Thead.class, replace\n.getClass());\n}\n} else {\nif (execute(id, thead, replace)) {\nreturn true;\n}\n}\n}\nif (table.isSetTfoot()) {\nTfoot tfoot = table.getTfoot();\nif (tfoot.isSetId() && tfoot.getId().equals(id)) {\nif (replace instanceof Tfoot) {\ntable.setTfoot((Tfoot) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Tfoot.class, replace\n.getClass());\n}\n} else {\nif (execute(id, tfoot, replace)) {\nreturn true;\n}\n}\n}\nif (table.isSetTr()) {\nfor (int j = 0; j < table.getTr().size(); j++) {\nTr tr = table.getTr().get(j);\nif (tr.isSetId() && tr.getId().equals(id)) {\nif (replace instanceof Tr) {\ntable.getTr().set(j, (Tr) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Tr.class, replace\n.getClass());\n}\n} else {\nif (execute(id, tr, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase TBODY:\nTbody tbody = (Tbody) target;\nif (tbody.isSetTr()) {\nfor (int j = 0; j < tbody.getTr().size(); j++) {\nTr tr = tbody.getTr().get(j);\nif (tr.isSetId() && tr.getId().equals(id)) {\nif (replace instanceof Tr) {\ntbody.getTr().set(j, (Tr) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Tr.class, replace\n.getClass());\n}\n} else {\nif (execute(id, tr, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase TD:\nTd td = (Td) target;\nif (td.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, td.getContent(), replace);\n}\nbreak;\ncase TEXTAREA:\n// textarea has no other element.\nbreak;\ncase TFOOT:\nTfoot tfoot = (Tfoot) target;\nif (tfoot.isSetTr()) {\nfor (int j = 0; j < tfoot.getTr().size(); j++) {\nTr tr = tfoot.getTr().get(j);\nif (tr.isSetId() && tr.getId().equals(id)) {\nif (replace instanceof Tr) {\ntfoot.getTr().set(j, (Tr) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Tr.class, replace\n.getClass());\n}\n} else {\nif (execute(id, tr, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase TH:\nTh th = (Th) target;\nif (th.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, th.getContent(), replace);\n}\nbreak;\ncase THEAD:\nThead thead = (Thead) target;\nif (thead.isSetTr()) {\nfor (int j = 0; j < thead.getTr().size(); j++) {\nTr tr = thead.getTr().get(j);\nif (tr.isSetId() && tr.getId().equals(id)) {\nif (replace instanceof Tr) {\nthead.getTr().set(j, (Tr) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Tr.class, replace\n.getClass());\n}\n} else {\nif (execute(id, tr, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase TITLE:\n// has no other element.\nbreak;\ncase TR:\nTr tr = (Tr) target;\nif (tr.isSetThOrTd()) {\nfor (int j = 0; j < tr.getThOrTd().size(); j++) {\nFlow obj = tr.getThOrTd().get(j);\nif (id.equals(obj.getId())) {\nif (replace.getClass().equals(Td.class)) {\ntr.getThOrTd().set(j, (Td) replace);\nreturn true;\n} else if (replace.getClass().equals(Th.class)) {\ntr.getThOrTd().set(j, (Th) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(\n\"Td or Th expected, but replace is \"\n+ replace.getClass());\n}\n} else {\nif (execute(id, obj, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase TT:\nTt tt = (Tt) target;\nif (tt.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, tt.getContent(), replace);\n}\nbreak;\ncase U:\nU u = (U) target;\nif (u.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, u.getContent(), replace);\n}\nbreak;\ncase UL:\nUl ul = (Ul) target;\nif (ul.isSetLi()) {\nfor (int j = 0; j < ul.getLi().size(); j++) {\nLi li2 = ul.getLi().get(j);\nif (li2.isSetId() && li2.getId().equals(id)) {\nif (replace instanceof Li) {\nul.getLi().set(j, (Li) replace);\nreturn true;\n} else {\nthrow new TagTypeUnmatchException(Li.class, replace\n.getClass());\n}\n} else {\nif (execute(id, li2, replace)) {\nreturn true;\n}\n}\n}\n}\nbreak;\ncase VAR:\nVar var = (Var) target;\nif (var.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, var.getContent(),\nreplace);\n}\nbreak;\ncase ARTICLE:\nArticle article = (Article) target;\nif (article.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, article.getContent(),\nreplace);\n}\nbreak;\ncase ASIDE:\nAside aside = (Aside) target;\nif (aside.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, aside.getContent(),\nreplace);\n}\nbreak;\ncase AUDIO:\nAudio audio = (Audio) target;\nif (audio.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, audio.getContent(),\nreplace);\n}\nbreak;\ncase BDI:\nBdi bdi = (Bdi) target;\nif (bdi.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, bdi.getContent(),\nreplace);\n}\nbreak;\ncase CANVAS:\nCanvas canvas = (Canvas) target;\nif (canvas.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, canvas.getContent(),\nreplace);\n}\nbreak;\ncase COMMAND:\n// empty element\nbreak;\ncase DATALIST:\nDatalist datalist = (Datalist) target;\nif (datalist.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, datalist.getContent(),\nreplace);\n}\nbreak;\ncase DETAILS:\nDetails details = (Details) target;\nif (details.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, details.getContent(),\nreplace);\n}\nbreak;\ncase EMBED:\n// empty element\nbreak;\ncase FIGCAPTION:\nFigcaption figcaption = (Figcaption) target;\nif (figcaption.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, figcaption.getContent(),\nreplace);\n}\nbreak;\ncase FIGURE:\nFigure figure = (Figure) target;\nif (figure.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, figure.getContent(),\nreplace);\n}\nbreak;\ncase FOOTER:\nFooter footer = (Footer) target;\nif (footer.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, footer.getContent(),\nreplace);\n}\nbreak;\ncase HEADER:\nHeader header = (Header) target;\nif (header.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, header.getContent(),\nreplace);\n}\nbreak;\ncase KEYGEN:\n// empty element\nbreak;\ncase MARK:\nMark mark = (Mark) target;\nif (mark.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, mark.getContent(),\nreplace);\n}\nbreak;\ncase METER:\nMeter meter = (Meter) target;\nif (meter.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, meter.getContent(),\nreplace);\n}\nbreak;\ncase NAV:\nNav nav = (Nav) target;\nif (nav.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, nav.getContent(),\nreplace);\n}\nbreak;\ncase OUTPUT:\nOutput output = (Output) target;\nif (output.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, output.getContent(),\nreplace);\n}\nbreak;\ncase PROGRESS:\nProgress progress = (Progress) target;\nif (progress.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, progress.getContent(),\nreplace);\n}\nbreak;\ncase RP:\nRp rp = (Rp) target;\nif (rp.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, rp.getContent(), replace);\n}\nbreak;\ncase RT:\nRt rt = (Rt) target;\nif (rt.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, rt.getContent(), replace);\n}\nbreak;\ncase RUBY:\nRuby ruby = (Ruby) target;\nif (ruby.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, ruby.getContent(),\nreplace);\n}\nbreak;\ncase SECTION:\nSection section = (Section) target;\nif (section.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, section.getContent(),\nreplace);\n}\nbreak;\ncase SOURCE:\n// empty element\nbreak;\ncase SUMMARY:\nSummary summary = (Summary) target;\nif (summary.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, summary.getContent(),\nreplace);\n}\nbreak;\ncase TIME:\nTime time = (Time) target;\nif (time.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, time.getContent(),\nreplace);\n}\nbreak;\ncase TRACK:\n// empty element\nbreak;\ncase VIDEO:\nVideo video = (Video) target;\nif (video.isSetContent()) {\nreturn replaceByIdWithinObjectList(id, video.getContent(),\nreplace);\n}\nbreak;\ncase WBR:\n// empty element\nbreak;\n}\nreturn false;\n}\n}",
                        "max_stars_repo_name": "jfut/mixer2",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "src/main/java/org/mixer2/xhtml/util/ReplaceByIdUtil.java",
                        "__cluster__": 778
                },
                {
                        "real_dup": "3"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_11283921",
                        "content": "<reponame>blaketarter/add-google-account-plugin\npackage com.btarter.GoogleAccount;\nimport java.util.regex.Pattern;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.List;\nimport java.util.ArrayList;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport android.view.View;\nimport android.content.Intent;\nimport android.content.Context;\nimport android.provider.Settings;\nimport android.accounts.Account;\nimport android.accounts.AccountManager;\nimport android.app.Activity;\nimport android.app.AlarmManager;\nimport android.app.ActivityManager;\nimport android.app.ActivityManager.RunningAppProcessInfo;\nimport android.app.PendingIntent;\nimport android.util.Patterns;\nimport android.net.Uri;\nimport android.text.Html;\nimport android.view.inputmethod.InputMethodManager;\nimport android.os.Build;\nimport com.google.android.gms.common.GooglePlayServicesUtil;\nimport com.google.android.gms.common.ConnectionResult;\nimport org.apache.cordova.CallbackContext;\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.PluginResult;\n/**\n* The Class GoogleAccountPlugin.\n*/\npublic class GoogleAccountPlugin extends CordovaPlugin {\nprivate CallbackContext callbackContext = null;\n@Override\npublic boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {\nif (action.equals(\"addGoogleAccount\")) {\ntry {\ncordova.getThreadPool().execute(new Runnable() {\npublic void run() {\nIntent addAccountIntent = new Intent(android.provider.Settings.ACTION_ADD_ACCOUNT)\n.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\naddAccountIntent.putExtra(Settings.EXTRA_ACCOUNT_TYPES, new String[] {\"com.google\"});\ncordova.getActivity().getApplicationContext().startActivity(addAccountIntent);\ncallbackContext.success();\n}\n});\nreturn true;\n} catch (Error e) {\nreturn false;\n}\n} else if (action.equals(\"getGoogleAccount\")) {\ntry {\ncordova.getThreadPool().execute(new Runnable() {\npublic void run() {\nPattern emailPattern = Patterns.EMAIL_ADDRESS; // API level 8+\nAccount[] accounts = AccountManager.get(cordova.getActivity().getApplicationContext()).getAccounts();\nList<String> accountsArray = new ArrayList<String>();\nif (accounts.length > 0) {\nfor (Account account : accounts) {\nif (emailPattern.matcher(account.name).matches()) {\nString stringAccount = account.name;\naccountsArray.add(stringAccount);\n}\n}\nif (!accountsArray.isEmpty()) {\nJSONArray jsonAccounts = new JSONArray(accountsArray);\ncallbackContext.success(jsonAccounts);\n} else {\ncallbackContext.error(\"Error\");\n}\n} else {\ncallbackContext.error(\"Error\");\n}\n}\n});\nreturn true;\n} catch (Error e) {\nreturn false;\n}\n}\nelse if (action.equals(\"getLocationIntent\")) {\ntry {\nIntent getLocationIntent = new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS)\n.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\ncordova.getActivity().getApplicationContext().startActivity(getLocationIntent);\ncallbackContext.success();\n} catch (Error e) {\nreturn false;\n}\n}\nelse if (action.equals(\"getGooglePlayServices\")) {\ntry {\nint resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(cordova.getActivity());\nif (resultCode != ConnectionResult.SUCCESS) {\nif (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {\nGooglePlayServicesUtil.getErrorDialog(resultCode, cordova.getActivity(), 9000).show();\n}\nreturn false;\n}\nreturn true;\n} catch (Error e) {\nreturn false;\n}\n}\nelse if (action.equals(\"hideKeyboard\")) {\n// Check if no view has focus:\nView view = cordova.getActivity().getCurrentFocus();\nif (view != null) {\nInputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(cordova.getActivity().getApplicationContext().INPUT_METHOD_SERVICE);\ninputManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}\n}\nelse if (action.equals(\"getDetails\")) {\nString  detailsPretty =  \"VERSION.RELEASE : \"+Build.VERSION.RELEASE\n+ \"\\nVERSION.INCREMENTAL : \" + Build.VERSION.INCREMENTAL\n+ \"\\nVERSION.SDK.NUMBER : \" + Build.VERSION.SDK_INT\n+ \"\\nBOARD : \" + Build.BOARD\n+ \"\\nBOOTLOADER : \" + Build.BOOTLOADER\n+ \"\\nBRAND : \" + Build.BRAND\n+ \"\\nCPU_ABI : \" + Build.CPU_ABI\n+ \"\\nCPU_ABI2 : \" + Build.CPU_ABI2\n+ \"\\nDISPLAY : \" + Build.DISPLAY\n+ \"\\nFINGERPRINT : \" + Build.FINGERPRINT\n+ \"\\nHARDWARE : \" + Build.HARDWARE\n+ \"\\nHOST : \" + Build.HOST\n+ \"\\nID : \" + Build.ID\n+ \"\\nMANUFACTURER : \" + Build.MANUFACTURER\n+ \"\\nMODEL : \" + Build.MODEL\n+ \"\\nPRODUCT : \" + Build.PRODUCT\n+ \"\\nSERIAL : \" + Build.SERIAL\n+ \"\\nTAGS : \" + Build.TAGS\n+ \"\\nTIME : \" + Build.TIME\n+ \"\\nTYPE : \" + Build.TYPE\n+ \"\\nUNKNOWN : \" + Build.UNKNOWN\n+ \"\\nUSER : \" + Build.USER;\nJSONObject details = new JSONObject();\ntry {\ndetails.put(\"RELEASE\", Build.VERSION.RELEASE);\ndetails.put(\"INCREMENTAL\", Build.VERSION.INCREMENTAL);\ndetails.put(\"SDK\", Build.VERSION.SDK_INT);\ndetails.put(\"BOARD\", Build.BOARD);\ndetails.put(\"BOOTLOADER\", Build.BOOTLOADER);\ndetails.put(\"BRAND\", Build.BRAND);\ndetails.put(\"CPU_ABI\", Build.CPU_ABI);\ndetails.put(\"CPU_ABI2\", Build.CPU_ABI2);\ndetails.put(\"DISPLAY\", Build.DISPLAY);\ndetails.put(\"FINGERPRINT\", Build.FINGERPRINT);\ndetails.put(\"HARDWARE\", Build.HARDWARE);\ndetails.put(\"HOST\", Build.HOST);\ndetails.put(\"ID\", Build.ID);\ndetails.put(\"MANUFACTURER\", Build.MANUFACTURER);\ndetails.put(\"MODEL\", Build.MODEL);\ndetails.put(\"PRODUCT\", Build.PRODUCT);\ndetails.put(\"SERIAL\", Build.SERIAL);\ndetails.put(\"TAGS\", Build.TAGS);\ndetails.put(\"TIME\", Build.TIME);\ndetails.put(\"TYPE\", Build.TYPE);\ndetails.put(\"UNKNOWN\", Build.UNKNOWN);\ndetails.put(\"USER\", Build.USER);\ndetails.put(\"PRETTY\", detailsPretty);\ncallbackContext.success(details);\n}\ncatch (JSONException e) {\nreturn false;\n}\n}\nelse if (action.equals(\"restartApp\")) {\ncordova.getThreadPool().execute(new Runnable() {\npublic void run() {\n// Intent i = cordova.getActivity().getBaseContext().getPackageManager()\n//            .getLaunchIntentForPackage(cordova.getActivity().getBaseContext().getPackageName());\n//\n// i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n// cordova.getActivity().getApplicationContext().startActivity(i);\nPendingIntent intent = PendingIntent.getActivity(cordova.getActivity().getBaseContext(), 0, new Intent(cordova.getActivity().getIntent()), cordova.getActivity().getIntent().getFlags());\nAlarmManager manager = (AlarmManager) cordova.getActivity().getSystemService(Context.ALARM_SERVICE);\nmanager.set(AlarmManager.RTC, System.currentTimeMillis() + 500, intent);\nSystem.exit(0);\n}\n});\nreturn true;\n}\nelse if (action.equals(\"showApp\")) {\ntry {\ncordova.getThreadPool().execute(new Runnable() {\npublic void run() {\nIntent showAppIntent = new Intent(Intent.ACTION_MAIN)\n.addCategory(Intent.CATEGORY_HOME)\n.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\ncordova.getActivity().getApplicationContext().startActivity(showAppIntent);\ncallbackContext.success();\n}\n});\nreturn true;\n} catch (Error e) {\nreturn false;\n}\n} else if (action.equals(\"showRunning\")) {\ntry {\ncordova.getThreadPool().execute(new Runnable() {\npublic void run() {\nActivityManager activityManager = (ActivityManager) cordova.getActivity().getApplicationContext().getSystemService( Context.ACTIVITY_SERVICE );\nList<RunningAppProcessInfo> procInfos = activityManager.getRunningAppProcesses();\nJSONArray json = new JSONArray();\nfor (int i = 0; i < procInfos.size(); i++) {\njson.put(procInfos.get(i).processName);\n}\ncallbackContext.success(json);\n}\n});\nreturn true;\n} catch (Error e) {\nreturn false;\n}\n}\nreturn false;\n}\n}",
                        "max_stars_repo_name": "blaketarter/add-google-account-plugin",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "src/android/GoogleAccountPlugin.java",
                        "__cluster__": 8518
                },
                {
                        "id": "test_api-misuse-repair-complete_data_8519",
                        "content": "@Override public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException { if (action.equals(\"addGoogleAccount\")) { try { cordova.getThreadPool().execute(new Runnable() { public void run() { Intent addAccountIntent = new Intent(android.provider.Settings.ACTION_ADD_ACCOUNT).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); addAccountIntent.putExtra(Settings.EXTRA_ACCOUNT_TYPES, new String[] { \"com.google\" }); cordova.getActivity().getApplicationContext().startActivity(addAccountIntent); callbackContext.success(); } }); return true; } catch (Error e) { return false; } } else if (action.equals(\"getGoogleAccount\")) { try { cordova.getThreadPool().execute(new Runnable() { public void run() { Pattern emailPattern = Patterns.EMAIL_ADDRESS; Account[] accounts = AccountManager.get(cordova.getActivity().getApplicationContext()).getAccounts(); List<String> accountsArray = new ArrayList<String>(); if (accounts.length > 0) { for (Account account : accounts) { if (emailPattern.matcher(account.name).matches()) { String stringAccount = account.name; accountsArray.add(stringAccount); } } if (!accountsArray.isEmpty()) { JSONArray jsonAccounts = new JSONArray(accountsArray); callbackContext.success(jsonAccounts); } else { callbackContext.error(\"Error\"); } } else { callbackContext.error(\"Error\"); } } }); return true; } catch (Error e) { return false; } } else if (action.equals(\"getLocationIntent\")) { try { Intent getLocationIntent = new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); cordova.getActivity().getApplicationContext().startActivity(getLocationIntent); callbackContext.success(); } catch (Error e) { return false; } } else if (action.equals(\"getGooglePlayServices\")) { try { int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(cordova.getActivity()); if (resultCode != ConnectionResult.SUCCESS) { if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) { GooglePlayServicesUtil.getErrorDialog(resultCode, cordova.getActivity(), 9000).show(); } return false; } return true; } catch (Error e) { return false; } } else if (action.equals(\"hideKeyboard\")) { View view = cordova.getActivity().getCurrentFocus(); if (view != null) { InputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(cordova.getActivity().getApplicationContext().INPUT_METHOD_SERVICE); inputManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS); } } else if (action.equals(\"getDetails\")) { String detailsPretty = \"VERSION.RELEASE : \" + Build.VERSION.RELEASE + \"\\nVERSION.INCREMENTAL : \" + Build.VERSION.INCREMENTAL + \"\\nVERSION.SDK.NUMBER : \" + Build.VERSION.SDK_INT + \"\\nBOARD : \" + Build.BOARD + \"\\nBOOTLOADER : \" + Build.BOOTLOADER + \"\\nBRAND : \" + Build.BRAND + \"\\nCPU_ABI : \" + Build.CPU_ABI + \"\\nCPU_ABI2 : \" + Build.CPU_ABI2 + \"\\nDISPLAY : \" + Build.DISPLAY + \"\\nFINGERPRINT : \" + Build.FINGERPRINT + \"\\nHARDWARE : \" + Build.HARDWARE + \"\\nHOST : \" + Build.HOST + \"\\nID : \" + Build.ID + \"\\nMANUFACTURER : \" + Build.MANUFACTURER + \"\\nMODEL : \" + Build.MODEL + \"\\nPRODUCT : \" + Build.PRODUCT + \"\\nSERIAL : \" + Build.SERIAL + \"\\nTAGS : \" + Build.TAGS + \"\\nTIME : \" + Build.TIME + \"\\nTYPE : \" + Build.TYPE + \"\\nUNKNOWN : \" + Build.UNKNOWN + \"\\nUSER : \" + Build.USER; JSONObject details = new JSONObject(); try { details.put(\"RELEASE\", Build.VERSION.RELEASE); details.put(\"INCREMENTAL\", Build.VERSION.INCREMENTAL); details.put(\"SDK\", Build.VERSION.SDK_INT); details.put(\"BOARD\", Build.BOARD); details.put(\"BOOTLOADER\", Build.BOOTLOADER); details.put(\"BRAND\", Build.BRAND); details.put(\"CPU_ABI\", Build.CPU_ABI); details.put(\"CPU_ABI2\", Build.CPU_ABI2); details.put(\"DISPLAY\", Build.DISPLAY); details.put(\"FINGERPRINT\", Build.FINGERPRINT); details.put(\"HARDWARE\", Build.HARDWARE); details.put(\"HOST\", Build.HOST); details.put(\"ID\", Build.ID); details.put(\"MANUFACTURER\", Build.MANUFACTURER); details.put(\"MODEL\", Build.MODEL); details.put(\"PRODUCT\", Build.PRODUCT); details.put(\"SERIAL\", Build.SERIAL); details.put(\"TAGS\", Build.TAGS); details.put(\"TIME\", Build.TIME); details.put(\"TYPE\", Build.TYPE); details.put(\"UNKNOWN\", Build.UNKNOWN); details.put(\"USER\", Build.USER); details.put(\"PRETTY\", detailsPretty); callbackContext.success(details); } catch (JSONException e) { return false; } } else if (action.equals(\"restartApp\")) { cordova.getThreadPool().execute(new Runnable() { public void run() { PendingIntent intent = PendingIntent.getActivity(cordova.getActivity().getBaseContext(), 0, new Intent(cordova.getActivity().getIntent()), cordova.getActivity().getIntent().getFlags()); AlarmManager manager = (AlarmManager) cordova.getActivity().getSystemService(Context.ALARM_SERVICE); manager.set(AlarmManager.RTC, System.currentTimeMillis() + 500, intent); System.exit(0); } }); return true; } else if (action.equals(\"showApp\")) { try { cordova.getThreadPool().execute(new Runnable() { public void run() { Intent showAppIntent = new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_HOME).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); cordova.getActivity().getApplicationContext().startActivity(showAppIntent); callbackContext.success(); } }); return true; } catch (Error e) { return false; } } else if (action.equals(\"showRunning\")) { try { cordova.getThreadPool().execute(new Runnable() { public void run() { ActivityManager activityManager = (ActivityManager) this.getSystemService(ACTIVITY_SERVICE); List<RunningAppProcessInfo> procInfos = activityManager.getRunningAppProcesses(); JSONArray json = new JSONArray(); for (int i = 0; i < procInfos.size(); i++) { json.add(procInfos.get(i).processName); } callbackContext.success(json); } }); return true; } catch (Error e) { return false; } } return false; }\n@Override public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException { if (action.equals(\"addGoogleAccount\")) { try { cordova.getThreadPool().execute(new Runnable() { public void run() { Intent addAccountIntent = new Intent(android.provider.Settings.ACTION_ADD_ACCOUNT).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); addAccountIntent.putExtra(Settings.EXTRA_ACCOUNT_TYPES, new String[] { \"com.google\" }); cordova.getActivity().getApplicationContext().startActivity(addAccountIntent); callbackContext.success(); } }); return true; } catch (Error e) { return false; } } else if (action.equals(\"getGoogleAccount\")) { try { cordova.getThreadPool().execute(new Runnable() { public void run() { Pattern emailPattern = Patterns.EMAIL_ADDRESS; Account[] accounts = AccountManager.get(cordova.getActivity().getApplicationContext()).getAccounts(); List<String> accountsArray = new ArrayList<String>(); if (accounts.length > 0) { for (Account account : accounts) { if (emailPattern.matcher(account.name).matches()) { String stringAccount = account.name; accountsArray.add(stringAccount); } } if (!accountsArray.isEmpty()) { JSONArray jsonAccounts = new JSONArray(accountsArray); callbackContext.success(jsonAccounts); } else { callbackContext.error(\"Error\"); } } else { callbackContext.error(\"Error\"); } } }); return true; } catch (Error e) { return false; } } else if (action.equals(\"getLocationIntent\")) { try { Intent getLocationIntent = new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); cordova.getActivity().getApplicationContext().startActivity(getLocationIntent); callbackContext.success(); } catch (Error e) { return false; } } else if (action.equals(\"getGooglePlayServices\")) { try { int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(cordova.getActivity()); if (resultCode != ConnectionResult.SUCCESS) { if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) { GooglePlayServicesUtil.getErrorDialog(resultCode, cordova.getActivity(), 9000).show(); } return false; } return true; } catch (Error e) { return false; } } else if (action.equals(\"hideKeyboard\")) { View view = cordova.getActivity().getCurrentFocus(); if (view != null) { InputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(cordova.getActivity().getApplicationContext().INPUT_METHOD_SERVICE); inputManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS); } } else if (action.equals(\"getDetails\")) { String detailsPretty = \"VERSION.RELEASE : \" + Build.VERSION.RELEASE + \"\\nVERSION.INCREMENTAL : \" + Build.VERSION.INCREMENTAL + \"\\nVERSION.SDK.NUMBER : \" + Build.VERSION.SDK_INT + \"\\nBOARD : \" + Build.BOARD + \"\\nBOOTLOADER : \" + Build.BOOTLOADER + \"\\nBRAND : \" + Build.BRAND + \"\\nCPU_ABI : \" + Build.CPU_ABI + \"\\nCPU_ABI2 : \" + Build.CPU_ABI2 + \"\\nDISPLAY : \" + Build.DISPLAY + \"\\nFINGERPRINT : \" + Build.FINGERPRINT + \"\\nHARDWARE : \" + Build.HARDWARE + \"\\nHOST : \" + Build.HOST + \"\\nID : \" + Build.ID + \"\\nMANUFACTURER : \" + Build.MANUFACTURER + \"\\nMODEL : \" + Build.MODEL + \"\\nPRODUCT : \" + Build.PRODUCT + \"\\nSERIAL : \" + Build.SERIAL + \"\\nTAGS : \" + Build.TAGS + \"\\nTIME : \" + Build.TIME + \"\\nTYPE : \" + Build.TYPE + \"\\nUNKNOWN : \" + Build.UNKNOWN + \"\\nUSER : \" + Build.USER; JSONObject details = new JSONObject(); try { details.put(\"RELEASE\", Build.VERSION.RELEASE); details.put(\"INCREMENTAL\", Build.VERSION.INCREMENTAL); details.put(\"SDK\", Build.VERSION.SDK_INT); details.put(\"BOARD\", Build.BOARD); details.put(\"BOOTLOADER\", Build.BOOTLOADER); details.put(\"BRAND\", Build.BRAND); details.put(\"CPU_ABI\", Build.CPU_ABI); details.put(\"CPU_ABI2\", Build.CPU_ABI2); details.put(\"DISPLAY\", Build.DISPLAY); details.put(\"FINGERPRINT\", Build.FINGERPRINT); details.put(\"HARDWARE\", Build.HARDWARE); details.put(\"HOST\", Build.HOST); details.put(\"ID\", Build.ID); details.put(\"MANUFACTURER\", Build.MANUFACTURER); details.put(\"MODEL\", Build.MODEL); details.put(\"PRODUCT\", Build.PRODUCT); details.put(\"SERIAL\", Build.SERIAL); details.put(\"TAGS\", Build.TAGS); details.put(\"TIME\", Build.TIME); details.put(\"TYPE\", Build.TYPE); details.put(\"UNKNOWN\", Build.UNKNOWN); details.put(\"USER\", Build.USER); details.put(\"PRETTY\", detailsPretty); callbackContext.success(details); } catch (JSONException e) { return false; } } else if (action.equals(\"restartApp\")) { cordova.getThreadPool().execute(new Runnable() { public void run() { PendingIntent intent = PendingIntent.getActivity(cordova.getActivity().getBaseContext(), 0, new Intent(cordova.getActivity().getIntent()), cordova.getActivity().getIntent().getFlags()); AlarmManager manager = (AlarmManager) cordova.getActivity().getSystemService(Context.ALARM_SERVICE); manager.set(AlarmManager.RTC, System.currentTimeMillis() + 500, intent); System.exit(0); } }); return true; } else if (action.equals(\"showApp\")) { try { cordova.getThreadPool().execute(new Runnable() { public void run() { Intent showAppIntent = new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_HOME).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); cordova.getActivity().getApplicationContext().startActivity(showAppIntent); callbackContext.success(); } }); return true; } catch (Error e) { return false; } } else if (action.equals(\"showRunning\")) { try { cordova.getThreadPool().execute(new Runnable() { public void run() { ActivityManager activityManager = (ActivityManager) cordova.getActivity().getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE); List<RunningAppProcessInfo> procInfos = activityManager.getRunningAppProcesses(); JSONArray json = new JSONArray(); for (int i = 0; i < procInfos.size(); i++) { json.add(procInfos.get(i).processName); } callbackContext.success(json); } }); return true; } catch (Error e) { return false; } } return false; }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 8518
                },
                {
                        "real_dup": "3"
                }
        ],


        [
                {
                        "id": "test_api-misuse-repair-complete_data_8793",
                        "content": "public static void main(String[] args) { System.out.println(\"Hallo Welt\"); }\npublic static void main(String[] args) { System.out.println(\"Hello World\"); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 8792
                },
                {
                        "id": "pretrain_java_data_11324916",
                        "content": "\nclass Hello{\npublic static void main(String[] args) {\nSystem.out.println(\"Java: Hello, World!\");\n}\n}",
                        "max_stars_repo_name": "korbenzhang/langs_demo",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "tasks/hello/Hello.java",
                        "__cluster__": 8792
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_16489557",
                        "content": "public static void main() {\nSystemout.println(\"Hello World\");\n}",
                        "max_stars_repo_name": "yukotashina0773/Java-Tutorial-1",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "main.java",
                        "__cluster__": 9535
                },
                {
                        "id": "test_api-misuse-repair-complete_data_9536",
                        "content": "public static void main() { System.out.println(\"Hello World!\"); }\npublic static void main() { System.out.println(\"Hello World!!!!!\"); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 9535
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "pretrain_java_data_19737735",
                        "content": "<filename>Nested.java\nimport java.io.*;\nimport java.util.*;\npublic class Nested {\npublic static void main(String[] args) {\nScanner in = new Scanner(System.in);\nint d1 = in.nextInt();\nint m1 = in.nextInt();\nint y1 = in.nextInt();\nint d2 = in.nextInt();\nint m2 = in.nextInt();\nint y2 = in.nextInt();\nint fine = 0;\nif (y1 > y2) fine = 10000;\nelse if (y1 == y2) {\nif (m1 > m2) fine = (m1 - m2) * 500;\nelse if (m1 == m2 && d1 > d2) fine = (d1 - d2) * 15;\n}\nSystem.out.println(fine);\n}\n}",
                        "max_stars_repo_name": "wildchaser1703/30_days_of_code_JAVA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "Nested.java",
                        "__cluster__": 81
                },
                {
                        "id": "test_api-misuse-repair-complete_data_82",
                        "content": "public static void main(String[] args) { Scanner in = new Scanner(System.in); int d1 = in.nextInt(); int m1 = in.nextInt(); int y1 = in.nextInt(); int d2 = in.nextInt(); int m2 = in.nextInt(); int y2 = in.nextInt(); int fine = 0; if (d1 == d2 && m1 == m2 && y1 == y2) { fine = 0; } else if (d1 != d2 && m1 == m2 && y1 == y2) { fine = 15 * (d1 - d2); } else if (m1 != m2 && y1 == y2) { fine = 500 * (m1 - m2); } else if (y1 != y2) { fine = 10000; } System.out.println(fine); }\npublic static void main(String[] args) { Scanner in = new Scanner(System.in); int d1 = in.nextInt(); int m1 = in.nextInt(); int y1 = in.nextInt(); int d2 = in.nextInt(); int m2 = in.nextInt(); int y2 = in.nextInt(); int fine = 0; if (y1 > y2) { fine = 10000; } else if (m1 > m2 && y1 == y2) { fine = 500 * (m1 - m2); } else if (d1 > d2 && m1 == m2 && y1 == y2) { fine = 15 * (d1 - d2); } else { fine = 0; } System.out.println(fine); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 81
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "pretrain_java_data_5265431",
                        "content": "public class Main {\npublic static void main(){\nSystem.out.println(\"Hello World !\");\nSystem.out.println(\"Perdu\");\n}\n}",
                        "max_stars_repo_name": "asukero/JavaDevSec",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "Main.java",
                        "__cluster__": 9535
                },
                {
                        "id": "test_api-misuse-repair-complete_data_9536",
                        "content": "public static void main() { System.out.println(\"Hello World!\"); }\npublic static void main() { System.out.println(\"Hello World!!!!!\"); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 9535
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "test_api-misuse-repair-complete_data_82",
                        "content": "public static void main(String[] args) { Scanner in = new Scanner(System.in); int d1 = in.nextInt(); int m1 = in.nextInt(); int y1 = in.nextInt(); int d2 = in.nextInt(); int m2 = in.nextInt(); int y2 = in.nextInt(); int fine = 0; if (d1 == d2 && m1 == m2 && y1 == y2) { fine = 0; } else if (d1 != d2 && m1 == m2 && y1 == y2) { fine = 15 * (d1 - d2); } else if (m1 != m2 && y1 == y2) { fine = 500 * (m1 - m2); } else if (y1 != y2) { fine = 10000; } System.out.println(fine); }\npublic static void main(String[] args) { Scanner in = new Scanner(System.in); int d1 = in.nextInt(); int m1 = in.nextInt(); int y1 = in.nextInt(); int d2 = in.nextInt(); int m2 = in.nextInt(); int y2 = in.nextInt(); int fine = 0; if (y1 > y2) { fine = 10000; } else if (m1 > m2 && y1 == y2) { fine = 500 * (m1 - m2); } else if (d1 > d2 && m1 == m2 && y1 == y2) { fine = 15 * (d1 - d2); } else { fine = 0; } System.out.println(fine); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 81
                },
                {
                        "id": "pretrain_java_data_6980882",
                        "content": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\npublic class Solution {\npublic static void main(String[] args) {\nScanner in = new Scanner(System.in);\nint d1 = in.nextInt();\nint m1 = in.nextInt();\nint y1 = in.nextInt();\nint d2 = in.nextInt();\nint m2 = in.nextInt();\nint y2 = in.nextInt();\nif (y1 > y2) {\nSystem.out.println(10000);\n} else if (y2 == y1 && m1 > m2) {\nSystem.out.println(500 * (m1 - m2));\n} else if (y2 == y1 && m2 == m1 && d1 > d2) {\nSystem.out.println(15 * (d1 - d2));\n} else {\nSystem.out.println(0);\n}\n}\n}",
                        "max_stars_repo_name": "chunky123/hackerrank",
                        "max_stars_count": 1,
                        "max_stars_repo_path": "Algorithms/Implementation/LibraryFine.java",
                        "__cluster__": 81
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_18346322",
                        "content": "@Override\npublic boolean equals(Object obj) {\nif (this == obj)\nreturn true;\nif (obj == null)\nreturn false;\nif (getClass() != obj.getClass())\nreturn false;\nNode other = (Node) obj;\nif (x != other.x)\nreturn false;\nif (y != other.y)\nreturn false;\nreturn true;\n}",
                        "max_stars_repo_name": "zthang/code2vec_treelstm",
                        "max_stars_count": 1,
                        "max_stars_repo_path": "raw_dataset/61288757@equals@OK.java",
                        "__cluster__": 9576
                },
                {
                        "id": "test_api-misuse-repair-complete_data_11840",
                        "content": "@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; AbstractServerChessGame other = (AbstractServerChessGame) obj; if (id != other.id) return false; return uid != other.uid; }\n@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; AbstractServerChessGame other = (AbstractServerChessGame) obj; if (id != other.id) return false; return uid == other.uid; }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 9576
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "test_api-misuse-repair-complete_data_9931",
                        "content": "public static void main(String[] args) throws Exception { Asana asana = new AsanaImpl() { @Override public Base64 getBase64Tool() { return null; } }; asana.getAuthenticationService().setAuthenticationType(AuthenticationType.PERSONAL_ACCESS_TOKEN); asana.getAuthenticationService().setAuthenticationProperty(AuthenticationProperty.ACCESS_TOKEN, \"0/e085aec8935735ebfe43a654286f46e5\"); PagedList<Workspace> workspaces = asana.getWorkspacesClient().getWorkspaces(Pagination.FIRST_PAGE); if (workspaces.isEmpty()) { System.out.println(\"You have no workspace, it is not possible to continue.\"); System.exit(0); } Workspace workspace = workspaces.get(0); System.out.println(\"The workspace '\" + workspace.getName() + \"' will be used.\"); Project project = workspace.createProject(\"Asana4J Example project\").startUpdate().setNotes(\"This project was created from Asana4J client\").setPublic(true).setDueDate(DUE_FORMAT.format(TOMORROW)).setColor(ProjectColor.DARK_GREEN).setStatus(ProjectStatus.Color.GREEN, \"Green forecast for the project\").update(); System.out.println(\"Project '\" + project.getName() + \"' was created.\"); project.createTask().setName(\"Rate the project\").setNotes(\"Star Asana4J project on GitHub\").setDueOn(DUE_FORMAT.format(TOMORROW)).setHearted(true).setAssignee(\"me\").create(); project.createTask().setName(\"Asana4J:\").create(); project.createTask().setName(\"Hearted task\").setHearted(true).create(); project.createTask().setName(\"Task with description\").setNotes(\"Some task notes.\").create(); project.createTask().setName(\"Task assigned to me\").setAssignee(\"me\").create(); project.createTask().setName(\"Completed task\").setCompleted(true).create(); project.createTask().setName(\"Task with due date\").setDueOn(DUE_FORMAT.format(TOMORROW)).create(); Tag tag = asana.getTagsClient().createTag(workspace.getId()).setColor(ProjectColor.DARK_ORANGE).setNotes(\"Tag description\").setName(\"Asana4J-TAG\").create(); project.createTask().setName(\"Task with tag\").setTags(tag.getId()).create(); Task parentTask = project.createTask().setName(\"Task with sub-task\").create(); project.createTask().setParent(parentTask.getId()).setName(\"Child task\").create(); project.createTask().setName(\"Task with comment\").create().addComment(\"You can comment tasks from Asana4J easily!\"); project.createTask().setName(\"Task with attachment\").create().uploadAttachment(\"Asana logo.png\", CreationExample.class.getResourceAsStream(\"/logo.png\")); project.createTask().setName(\"Functional examples:\").create(); }\npublic static void main(String[] args) throws Exception { Asana asana = new AsanaImpl() { @Override public Base64 getBase64Tool() { return null; } }; asana.getAuthenticationService().setAuthenticationType(AuthenticationType.PERSONAL_ACCESS_TOKEN); asana.getAuthenticationService().setAuthenticationProperty(AuthenticationProperty.ACCESS_TOKEN, \"Your personal access token\"); PagedList<Workspace> workspaces = asana.getWorkspacesClient().getWorkspaces(Pagination.FIRST_PAGE); if (workspaces.isEmpty()) { System.out.println(\"You have no workspace, it is not possible to continue.\"); System.exit(0); } Workspace workspace = workspaces.get(0); System.out.println(\"The workspace '\" + workspace.getName() + \"' will be used.\"); Project project = workspace.createProject(\"Asana4J Example project\").startUpdate().setNotes(\"This project was created from Asana4J client\").setPublic(true).setDueDate(DUE_FORMAT.format(TOMORROW)).setColor(ProjectColor.DARK_GREEN).setStatus(ProjectStatus.Color.GREEN, \"Green forecast for the project\").update(); System.out.println(\"Project '\" + project.getName() + \"' was created.\"); project.createTask().setName(\"Rate the project\").setNotes(\"Star Asana4J project on GitHub\").setDueOn(DUE_FORMAT.format(TOMORROW)).setHearted(true).setAssignee(\"me\").create(); project.createTask().setName(\"Asana4J:\").create(); project.createTask().setName(\"Hearted task\").setHearted(true).create(); project.createTask().setName(\"Task with description\").setNotes(\"Some task notes.\").create(); project.createTask().setName(\"Task assigned to me\").setAssignee(\"me\").create(); project.createTask().setName(\"Completed task\").setCompleted(true).create(); project.createTask().setName(\"Task with due date\").setDueOn(DUE_FORMAT.format(TOMORROW)).create(); Tag tag = asana.getTagsClient().createTag(workspace.getId()).setColor(ProjectColor.DARK_ORANGE).setNotes(\"Tag description\").setName(\"Asana4J-TAG\").create(); project.createTask().setName(\"Task with tag\").setTags(tag.getId()).create(); Task parentTask = project.createTask().setName(\"Task with sub-task\").create(); project.createTask().setParent(parentTask.getId()).setName(\"Child task\").create(); project.createTask().setName(\"Task with comment\").create().addComment(\"You can comment tasks from Asana4J easily!\"); project.createTask().setName(\"Task with attachment\").create().uploadAttachment(\"Asana logo.png\", CreationExample.class.getResourceAsStream(\"/logo.png\")); project.createTask().setName(\"Functional examples:\").create(); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 9930
                },
                {
                        "id": "pretrain_java_data_8708210",
                        "content": "<reponame>asuslennikov/asana4j<gh_stars>1-10\npackage ru.jewelline.asana4j.examples;\nimport ru.jewelline.asana4j.Asana;\nimport ru.jewelline.asana4j.api.PagedList;\nimport ru.jewelline.asana4j.api.clients.modifiers.Pagination;\nimport ru.jewelline.asana4j.api.entity.Project;\nimport ru.jewelline.asana4j.api.entity.ProjectColor;\nimport ru.jewelline.asana4j.api.entity.ProjectStatus;\nimport ru.jewelline.asana4j.api.entity.Tag;\nimport ru.jewelline.asana4j.api.entity.Task;\nimport ru.jewelline.asana4j.api.entity.Workspace;\nimport ru.jewelline.asana4j.auth.AuthenticationProperty;\nimport ru.jewelline.asana4j.auth.AuthenticationType;\nimport ru.jewelline.asana4j.core.impl.AsanaImpl;\nimport ru.jewelline.asana4j.utils.Base64;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\npublic class CreationExample {\npublic static final SimpleDateFormat DUE_FORMAT = new SimpleDateFormat(\"YYYY-MM-dd\");\npublic static final Date TOMORROW = new Date(System.currentTimeMillis() + (1000 * 60 * 60 * 24));\npublic static void main(String[] args) throws Exception {\nAsana asana = new AsanaImpl() {\n@Override\npublic Base64 getBase64Tool() {\nreturn null; // We don't need the base 64 tool\n}\n};\nasana.getAuthenticationService().setAuthenticationType(AuthenticationType.PERSONAL_ACCESS_TOKEN);\n// Change to correct personal token\nasana.getAuthenticationService()\n.setAuthenticationProperty(AuthenticationProperty.ACCESS_TOKEN, \"Your personal access token\");\n// Find a workspace\nPagedList<Workspace> workspaces = asana.getWorkspacesClient().getWorkspaces(Pagination.FIRST_PAGE);\nif (workspaces.isEmpty()) {\nSystem.out.println(\"You have no workspace, it is not possible to continue.\");\nSystem.exit(0);\n}\nWorkspace workspace = workspaces.get(0);\nSystem.out.println(\"The workspace '\" + workspace.getName() + \"' will be used.\");\n// Create a project\nProject project = workspace.createProject(\"Asana4J Example project\")\n.startUpdate()\n.setNotes(\"This project was created from Asana4J client\")\n.setPublic(true)\n.setDueDate(DUE_FORMAT.format(TOMORROW))\n.setColor(ProjectColor.DARK_GREEN)\n.setStatus(ProjectStatus.Color.GREEN, \"Green forecast for the project\")\n.update();\nSystem.out.println(\"Project '\" + project.getName() + \"' was created.\");\n// Create tasks\nproject.createTask()\n.setName(\"Rate the project\")\n.setNotes(\"Star Asana4J project on GitHub\")\n.setDueOn(DUE_FORMAT.format(TOMORROW))\n.setHearted(true)\n.setAssignee(\"me\")\n.create();\nproject.createTask()\n.setName(\"Asana4J:\")\n.create();\nproject.createTask()\n.setName(\"Hearted task\")\n.setHearted(true)\n.create();\nproject.createTask()\n.setName(\"Task with description\")\n.setNotes(\"Some task notes.\")\n.create();\nproject.createTask()\n.setName(\"Task assigned to me\")\n.setAssignee(\"me\")\n.create();\nproject.createTask()\n.setName(\"Completed task\")\n.setCompleted(true)\n.create();\nproject.createTask()\n.setName(\"Task with due date\")\n.setDueOn(DUE_FORMAT.format(TOMORROW))\n.create();\nTag tag = asana.getTagsClient().createTag(workspace.getId())\n.setColor(ProjectColor.DARK_ORANGE)\n.setNotes(\"Tag description\")\n.setName(\"Asana4J-TAG\")\n.create();\nproject.createTask()\n.setName(\"Task with tag\")\n.setTags(tag.getId())\n.create();\nTask parentTask = project.createTask()\n.setName(\"Task with sub-task\")\n.create();\nproject.createTask()\n.setParent(parentTask.getId())\n.setName(\"Child task\")\n.create();\nproject.createTask()\n.setName(\"Task with comment\")\n.create()\n.addComment(\"You can comment tasks from Asana4J easily!\");\nproject.createTask()\n.setName(\"Task with attachment\")\n.create()\n.uploadAttachment(\"Asana logo.png\", CreationExample.class.getResourceAsStream(\"/logo.png\"));\nproject.createTask()\n.setName(\"Functional examples:\")\n.create();\n}\n}",
                        "max_stars_repo_name": "asuslennikov/asana4j",
                        "max_stars_count": 1,
                        "max_stars_repo_path": "examples/src/main/java/ru/jewelline/asana4j/examples/CreationExample.java",
                        "__cluster__": 9930
                },
                {
                        "real_dup": "3"
                }
        ],


        [
                {
                        "id": "test_api-misuse-repair-complete_data_6863",
                        "content": "public static void main(String[] args) { int[] num = { -1, -3, 1, -2, -1, 5, 6, 2, 1, 0 }; System.out.println(Sum.threeSum(num)); }\npublic static void main(String[] args) { int[] num = { -4, -2, -2, -2, 0, 1, 2, 2, 2, 3, 3, 4, 4, 6, 6 }; System.out.println(Sum.threeSum(num)); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 2135
                },
                {
                        "id": "pretrain_java_data_15182676",
                        "content": "<gh_stars>0\npublic class VariableCharacter {\npublic static void main(String[] args) {\nint $a = 1;\nSystem.out.println($a);\nint $2 = 2;\nSystem.out.println($2);\nint \u00e41 = 3;\nSystem.out.println(\u00e41);\nint \u00c42 = 4;\nSystem.out.println(\u00c42);\nint \u00d63 = 5;\nSystem.out.println(\u00d63);\nint \u03c01 = 6;\nSystem.out.println(\u03c01);\n}\n}",
                        "max_stars_repo_name": "wjiec/packages",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "java/again/VariableCharacter.java",
                        "__cluster__": 2135
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_api-misuse-repair-complete_data_8793",
                        "content": "public static void main(String[] args) { System.out.println(\"Hallo Welt\"); }\npublic static void main(String[] args) { System.out.println(\"Hello World\"); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 8792
                },
                {
                        "id": "pretrain_java_data_2403280",
                        "content": "\npublic  class HlloWrld{\npublic static void main(String[] args) {\nSystem.out.println(\"Hello World\");\n}\n}",
                        "max_stars_repo_name": "motorbreth/HacktoberFest",
                        "max_stars_count": 3,
                        "max_stars_repo_path": "Hello_World/HlloWrld.java",
                        "__cluster__": 8792
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_api-misuse-repair-complete_data_2474",
                        "content": "public int removeDuplicates(int[] nums) { int n = nums.length; if (n == 0 || n == 1 || n == 2) { return n; } int i = 0; for (int j = 1; j < n; j++) { if (nums[j] != nums[i] && j == i + 1) { i++; } else if (nums[j] == nums[i] && j == i + 1) { } i++; } return 0; }\npublic int removeDuplicates(int[] nums) { int n = nums.length; if (n == 0 || n == 1 || n == 2) { return n; } int i = 0; int val = 0; for (int j = 1; j < n; j++) { if (nums[j] != nums[i] && j == i + 1) { nums[i + 1] = nums[j]; } i++; } return 0; }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 2473
                },
                {
                        "id": "pretrain_java_data_12045302",
                        "content": "class Solution {\npublic int removeDuplicates(int[] nums) {\nif (nums.length < 2) return nums.length;\nint i = 0;\nfor (int j = 1; j < nums.length; j++) {\nif (nums[i] != nums[j]) {\nnums[++i] = nums[j];\n}\n}\nreturn i + 1;\n}\n}",
                        "max_stars_repo_name": "yeshengliu/leetcode",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "26-RemoveDuplicatesfromSortedArray.java",
                        "__cluster__": 2473
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_1113688",
                        "content": "<reponame>jatin-mishra/smart-text-editor\npackage spelling;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.io.PrintWriter;\npublic class NearbyWordsGraderTwo {\npublic static void main(String args[]) {\nint tests = 0;\nint incorrect = 0;\nString feedback = \"\";\nPrintWriter out;\n//        System.out.println(\"started\");\ntry {\nout = new PrintWriter(\"grader_output/module5.part2.out\");\n} catch (Exception e) {\ne.printStackTrace();\nreturn;\n}\ntry {\nDictionary d = new DictionaryHashSet();\nDictionaryLoader.loadDictionary(d, \"test_cases/dict2.txt\");\nNearbyWords nw = new NearbyWords(d);\nfeedback += \"** Test 1: 2 suggestions... \";\nList<String> d1 = nw.suggestions(\"dag\", 4);\nfeedback += \"\" + d1.size() + \" suggestions returned.\\n\";\nfeedback += \"** Test 2: Checking suggestion correctness... \";\nfeedback += \"Suggestions: \";\nfor (String i : d1) {\nfeedback += i + \", \";\n}\nfeedback += \"\\n** Test 3: 3 suggestions... \";\nd1 = nw.suggestions(\"fare\", 3);\nfeedback += \"\" + d1.size() + \" suggestions returned.\\n\";\nfeedback += \"** Test 4: Checking suggestion correctness... \";\nfeedback += \"Suggestions: \";\nfor (String i : d1) {\nfeedback += i + \", \";\n}\nfeedback += \"\\n\";\n} catch (Exception e) {\nSystem.out.println(feedback + \"Runtime error: \" + e);\nreturn;\n}\nSystem.out.println(feedback += \"Tests complete. Make sure everything looks right.\");\nSystem.out.close();\n}\n}",
                        "max_stars_repo_name": "jatin-mishra/smart-text-editor",
                        "max_stars_count": 3,
                        "max_stars_repo_path": "spelling/NearbyWordsGraderTwo.java",
                        "__cluster__": 2366
                },
                {
                        "id": "test_api-misuse-repair-complete_data_2367",
                        "content": "public static void main(String[] args) { int tests = 0; int incorrect = 0; String feedback = \"\"; PrintWriter out; try { out = new PrintWriter(\"grader_output.module5.part2.out\"); } catch (Exception e) { e.printStackTrace(); return; } try { Dictionary d = new DictionaryHashSet(); DictionaryLoader.loadDictionary(d, \"test_cases/dict2.txt\"); NearbyWords nw = new NearbyWords(d); feedback += \"** Test 1: 2 suggestions... \"; List<String> d1 = nw.suggestions(\"dag\", 4); feedback += \"\" + d1.size() + \" suggestions returned.\\n\"; feedback += \"** Test 2: Checking suggestion correctness... \"; feedback += \"Suggestions: \"; for (String i : d1) { feedback += i + \", \"; } feedback += \"\\n** Test 3: 3 suggestions... \"; d1 = nw.suggestions(\"fare\", 3); feedback += \"\" + d1.size() + \" suggestions returned.\\n\"; feedback += \"** Test 4: Checking suggestion correctness... \"; feedback += \"Suggestions: \"; for (String i : d1) { feedback += i + \", \"; } feedback += \"\\n\"; } catch (Exception e) { out.println(feedback + \"Runtime error: \" + e); return; } out.println(feedback += \"Tests complete. Make sure everything looks right.\"); out.close(); }\npublic static void main(String[] args) { int tests = 0; int incorrect = 0; String feedback = \"\"; PrintWriter out; try { out = new PrintWriter(\"grader_output/module5.part2.out\"); } catch (Exception e) { e.printStackTrace(); return; } try { Dictionary d = new DictionaryHashSet(); DictionaryLoader.loadDictionary(d, \"test_cases/dict2.txt\"); NearbyWords nw = new NearbyWords(d); feedback += \"** Test 1: 2 suggestions... \"; List<String> d1 = nw.suggestions(\"dag\", 4); feedback += \"\" + d1.size() + \" suggestions returned.\\n\"; feedback += \"** Test 2: Checking suggestion correctness... \"; feedback += \"Suggestions: \"; for (String i : d1) { feedback += i + \", \"; } feedback += \"\\n** Test 3: 3 suggestions... \"; d1 = nw.suggestions(\"fare\", 3); feedback += \"\" + d1.size() + \" suggestions returned.\\n\"; feedback += \"** Test 4: Checking suggestion correctness... \"; feedback += \"Suggestions: \"; for (String i : d1) { feedback += i + \", \"; } feedback += \"\\n\"; } catch (Exception e) { out.println(feedback + \"Runtime error: \" + e); return; } out.println(feedback += \"Tests complete. Make sure everything looks right.\"); out.close(); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 2366
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "pretrain_java_data_17134337",
                        "content": "<filename>aesthetic/src/main/java/com/afollestad/aesthetic/InflationInterceptor.java\npackage com.afollestad.aesthetic;\nimport android.content.Context;\nimport android.support.annotation.RestrictTo;\nimport android.support.v4.view.LayoutInflaterFactory;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.widget.LinearLayout;\nimport static android.support.annotation.RestrictTo.Scope.LIBRARY_GROUP;\nimport static com.afollestad.aesthetic.Util.resolveResId;\n/** @author <NAME> (afollestad) */\n@RestrictTo(LIBRARY_GROUP)\nfinal class InflationInterceptor implements LayoutInflaterFactory {\n@Override\npublic View onCreateView(View parent, final String name, Context context, AttributeSet attrs) {\nView view = null;\nfinal int viewId = resolveResId(context, attrs, android.R.attr.id);\nswitch (name) {\ncase \"ImageView\":\ncase \"android.support.v7.widget.AppCompatImageView\":\nview = new AestheticImageView(context, attrs);\nbreak;\ncase \"ImageButton\":\ncase \"android.support.v7.widget.AppCompatImageButton\":\nview = new AestheticImageButton(context, attrs);\nbreak;\ncase \"android.support.v4.widget.DrawerLayout\":\nview = new AestheticDrawerLayout(context, attrs);\nbreak;\ncase \"Toolbar\":\ncase \"android.support.v7.widget.Toolbar\":\nview = new AestheticToolbar(context, attrs);\nbreak;\ncase \"android.support.v7.widget.AppCompatTextView\":\ncase \"TextView\":\nif (viewId == R.id.snackbar_text) {\nview = null;\n} else {\nview = new AestheticTextView(context, attrs);\nif (parent instanceof LinearLayout && view.getId() == android.R.id.message) {\n// This is for a toast message\nview = null;\n}\n}\nbreak;\ncase \"Button\":\ncase \"android.support.v7.widget.AppCompatButton\":\nif (viewId == android.R.id.button1\n|| viewId == android.R.id.button2\n|| viewId == android.R.id.button3) {\nview = new AestheticDialogButton(context, attrs);\n} else if (viewId == R.id.snackbar_action) {\nview = new AestheticSnackBarButton(context, attrs);\n} else {\nview = new AestheticButton(context, attrs);\n}\nbreak;\ncase \"android.support.v7.widget.AppCompatCheckBox\":\ncase \"CheckBox\":\nview = new AestheticCheckBox(context, attrs);\nbreak;\ncase \"android.support.v7.widget.AppCompatRadioButton\":\ncase \"RadioButton\":\nview = new AestheticRadioButton(context, attrs);\nbreak;\ncase \"android.support.v7.widget.AppCompatEditText\":\ncase \"EditText\":\nview = new AestheticEditText(context, attrs);\nbreak;\ncase \"Switch\":\nview = new AestheticSwitch(context, attrs);\nbreak;\ncase \"android.support.v7.widget.SwitchCompat\":\nview = new AestheticSwitchCompat(context, attrs);\nbreak;\ncase \"android.support.v7.widget.AppCompatSeekBar\":\ncase \"SeekBar\":\nview = new AestheticSeekBar(context, attrs);\nbreak;\ncase \"ProgressBar\":\ncase \"me.zhanghai.android.materialprogressbar.MaterialProgressBar\":\nview = new AestheticProgressBar(context, attrs);\nbreak;\ncase \"android.support.v7.view.menu.ActionMenuItemView\":\nview = new AestheticActionMenuItemView(context, attrs);\nbreak;\ncase \"android.support.v7.widget.RecyclerView\":\nview = new AestheticRecyclerView(context, attrs);\nbreak;\ncase \"android.support.v4.widget.NestedScrollView\":\nview = new AestheticNestedScrollView(context, attrs);\nbreak;\ncase \"ListView\":\nview = new AestheticListView(context, attrs);\nbreak;\ncase \"ScrollView\":\nview = new AestheticScrollView(context, attrs);\nbreak;\ncase \"android.support.v4.view.ViewPager\":\nview = new AestheticViewPager(context, attrs);\nbreak;\ncase \"Spinner\":\ncase \"android.support.v7.widget.AppCompatSpinner\":\nview = new AestheticSpinner(context, attrs);\nbreak;\ncase \"android.support.design.widget.TextInputLayout\":\nview = new AestheticTextInputLayout(context, attrs);\nbreak;\ncase \"android.support.design.widget.TextInputEditText\":\nview = new AestheticTextInputEditText(context, attrs);\nbreak;\ncase \"android.support.v7.widget.CardView\":\nview = new AestheticCardView(context, attrs);\nbreak;\ncase \"android.support.design.widget.TabLayout\":\nview = new AestheticTabLayout(context, attrs);\nbreak;\ncase \"android.support.design.widget.NavigationView\":\nview = new AestheticNavigationView(context, attrs);\nbreak;\ncase \"android.support.design.widget.BottomNavigationView\":\nview = new AestheticBottomNavigationView(context, attrs);\nbreak;\ncase \"android.support.design.widget.FloatingActionButton\":\nview = new AestheticFab(context, attrs);\nbreak;\ncase \"android.support.design.widget.CoordinatorLayout\":\nview = new AestheticCoordinatorLayout(context, attrs);\nbreak;\n}\nif (view != null && view.getTag() != null && \":aesthetic_ignore\".equals(view.getTag())) {\nview = null;\n}\nreturn view;\n}\n}",
                        "max_stars_repo_name": "rasheedsulayman/musicslam",
                        "max_stars_count": 12,
                        "max_stars_repo_path": "aesthetic/src/main/java/com/afollestad/aesthetic/InflationInterceptor.java",
                        "__cluster__": 7577
                },
                {
                        "id": "test_api-misuse-repair-complete_data_7578",
                        "content": "@Override public View onCreateView(View parent, final String name, Context context, AttributeSet attrs) { View view = null; final int viewId = resolveResId(context, attrs, android.R.attr.id); switch(name) { case \"ImageView\": case \"android.support.v7.widget.AppCompatImageView\": view = new AestheticImageView(context, attrs); break; case \"ImageButton\": case \"android.support.v7.widget.AppCompatImageButton\": view = new AestheticImageButton(context, attrs); break; case \"android.support.v4.widget.DrawerLayout\": view = new AestheticDrawerLayout(context, attrs); break; case \"Toolbar\": case \"android.support.v7.widget.Toolbar\": view = new AestheticToolbar(context, attrs); break; case \"android.support.v7.widget.AppCompatTextView\": case \"TextView\": if (viewId == R.id.snackbar_text) { view = new AestheticSnackBarTextView(context, attrs); } else { view = new AestheticTextView(context, attrs); if (parent instanceof LinearLayout && view.getId() == android.R.id.message) { view = null; } } break; case \"Button\": case \"android.support.v7.widget.AppCompatButton\": if (viewId == android.R.id.button1 || viewId == android.R.id.button2 || viewId == android.R.id.button3) { view = new AestheticDialogButton(context, attrs); } else if (viewId == R.id.snackbar_action) { view = new AestheticSnackBarButton(context, attrs); } else { view = new AestheticButton(context, attrs); } break; case \"android.support.v7.widget.AppCompatCheckBox\": case \"CheckBox\": view = new AestheticCheckBox(context, attrs); break; case \"android.support.v7.widget.AppCompatRadioButton\": case \"RadioButton\": view = new AestheticRadioButton(context, attrs); break; case \"android.support.v7.widget.AppCompatEditText\": case \"EditText\": view = new AestheticEditText(context, attrs); break; case \"Switch\": view = new AestheticSwitch(context, attrs); break; case \"android.support.v7.widget.SwitchCompat\": view = new AestheticSwitchCompat(context, attrs); break; case \"android.support.v7.widget.AppCompatSeekBar\": case \"SeekBar\": view = new AestheticSeekBar(context, attrs); break; case \"ProgressBar\": case \"me.zhanghai.android.materialprogressbar.MaterialProgressBar\": view = new AestheticProgressBar(context, attrs); break; case \"android.support.v7.view.menu.ActionMenuItemView\": view = new AestheticActionMenuItemView(context, attrs); break; case \"android.support.v7.widget.RecyclerView\": view = new AestheticRecyclerView(context, attrs); break; case \"android.support.v4.widget.NestedScrollView\": view = new AestheticNestedScrollView(context, attrs); break; case \"ListView\": view = new AestheticListView(context, attrs); break; case \"ScrollView\": view = new AestheticScrollView(context, attrs); break; case \"android.support.v4.view.ViewPager\": view = new AestheticViewPager(context, attrs); break; case \"Spinner\": case \"android.support.v7.widget.AppCompatSpinner\": view = new AestheticSpinner(context, attrs); break; case \"android.support.design.widget.TextInputLayout\": view = new AestheticTextInputLayout(context, attrs); break; case \"android.support.design.widget.TextInputEditText\": view = new AestheticTextInputEditText(context, attrs); break; case \"android.support.v7.widget.CardView\": view = new AestheticCardView(context, attrs); break; case \"android.support.design.widget.TabLayout\": view = new AestheticTabLayout(context, attrs); break; case \"android.support.design.widget.NavigationView\": view = new AestheticNavigationView(context, attrs); break; case \"android.support.design.widget.BottomNavigationView\": view = new AestheticBottomNavigationView(context, attrs); break; case \"android.support.design.widget.FloatingActionButton\": view = new AestheticFab(context, attrs); break; case \"android.support.design.widget.CoordinatorLayout\": view = new AestheticCoordinatorLayout(context, attrs); break; } if (view != null && view.getTag() != null && \":aesthetic_ignore\".equals(view.getTag())) { view = null; } return view; }\n@Override public View onCreateView(View parent, final String name, Context context, AttributeSet attrs) { View view = null; final int viewId = resolveResId(context, attrs, android.R.attr.id); switch(name) { case \"ImageView\": case \"android.support.v7.widget.AppCompatImageView\": view = new AestheticImageView(context, attrs); break; case \"ImageButton\": case \"android.support.v7.widget.AppCompatImageButton\": view = new AestheticImageButton(context, attrs); break; case \"android.support.v4.widget.DrawerLayout\": view = new AestheticDrawerLayout(context, attrs); break; case \"Toolbar\": case \"android.support.v7.widget.Toolbar\": view = new AestheticToolbar(context, attrs); break; case \"android.support.v7.widget.AppCompatTextView\": case \"TextView\": if (viewId == R.id.snackbar_text) { view = null; } else { view = new AestheticTextView(context, attrs); if (parent instanceof LinearLayout && view.getId() == android.R.id.message) { view = null; } } break; case \"Button\": case \"android.support.v7.widget.AppCompatButton\": if (viewId == android.R.id.button1 || viewId == android.R.id.button2 || viewId == android.R.id.button3) { view = new AestheticDialogButton(context, attrs); } else if (viewId == R.id.snackbar_action) { view = new AestheticSnackBarButton(context, attrs); } else { view = new AestheticButton(context, attrs); } break; case \"android.support.v7.widget.AppCompatCheckBox\": case \"CheckBox\": view = new AestheticCheckBox(context, attrs); break; case \"android.support.v7.widget.AppCompatRadioButton\": case \"RadioButton\": view = new AestheticRadioButton(context, attrs); break; case \"android.support.v7.widget.AppCompatEditText\": case \"EditText\": view = new AestheticEditText(context, attrs); break; case \"Switch\": view = new AestheticSwitch(context, attrs); break; case \"android.support.v7.widget.SwitchCompat\": view = new AestheticSwitchCompat(context, attrs); break; case \"android.support.v7.widget.AppCompatSeekBar\": case \"SeekBar\": view = new AestheticSeekBar(context, attrs); break; case \"ProgressBar\": case \"me.zhanghai.android.materialprogressbar.MaterialProgressBar\": view = new AestheticProgressBar(context, attrs); break; case \"android.support.v7.view.menu.ActionMenuItemView\": view = new AestheticActionMenuItemView(context, attrs); break; case \"android.support.v7.widget.RecyclerView\": view = new AestheticRecyclerView(context, attrs); break; case \"android.support.v4.widget.NestedScrollView\": view = new AestheticNestedScrollView(context, attrs); break; case \"ListView\": view = new AestheticListView(context, attrs); break; case \"ScrollView\": view = new AestheticScrollView(context, attrs); break; case \"android.support.v4.view.ViewPager\": view = new AestheticViewPager(context, attrs); break; case \"Spinner\": case \"android.support.v7.widget.AppCompatSpinner\": view = new AestheticSpinner(context, attrs); break; case \"android.support.design.widget.TextInputLayout\": view = new AestheticTextInputLayout(context, attrs); break; case \"android.support.design.widget.TextInputEditText\": view = new AestheticTextInputEditText(context, attrs); break; case \"android.support.v7.widget.CardView\": view = new AestheticCardView(context, attrs); break; case \"android.support.design.widget.TabLayout\": view = new AestheticTabLayout(context, attrs); break; case \"android.support.design.widget.NavigationView\": view = new AestheticNavigationView(context, attrs); break; case \"android.support.design.widget.BottomNavigationView\": view = new AestheticBottomNavigationView(context, attrs); break; case \"android.support.design.widget.FloatingActionButton\": view = new AestheticFab(context, attrs); break; case \"android.support.design.widget.CoordinatorLayout\": view = new AestheticCoordinatorLayout(context, attrs); break; } if (view != null && view.getTag() != null && \":aesthetic_ignore\".equals(view.getTag())) { view = null; } return view; }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 7577
                },
                {
                        "real_dup": "3"
                }
        ],


        [
                {
                        "id": "test_api-misuse-repair-complete_data_8301",
                        "content": "public static int rank(int key, int[] a) { int lo = a[0]; int hi = a.length - 1; while (lo <= hi) { int mid = lo + (hi - lo) / 2; if (key < a[mid]) hi = mid - 1; else if (key > a[mid]) lo = mid + 1; else return a[mid]; } return -1; }\npublic static int rank(int key, int[] a) { int lo = 0; int hi = a.length - 1; while (lo <= hi) { int mid = lo + (hi - lo) / 2; if (key < a[mid]) hi = mid - 1; else if (key > a[mid]) lo = mid + 1; else return a[mid]; } return -1; }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 8300
                },
                {
                        "id": "pretrain_java_data_15421569",
                        "content": "package com.melody.util.algorithms;\npublic class BinarySearch {\npublic static int rank(int key,int[] a){\n// \u6570\u7ec4\u5fc5\u987b\u662f\u6709\u5e8f\u7684\nint lo = 0;\nint hi = a.length - 1;\nwhile (lo <= hi){\n// \u88ab\u67e5\u627e\u7684\u952e\u8981\u4e48\u4e0d\u5b58\u5728\uff0c\u8981\u4e48\u5fc5\u7136\u5b58\u5728\u4e8ea[lo.hi]\u4e4b\u4e2d\nint mid = lo + (hi - lo)/2;\nif (key < a[mid]){\nhi = mid -1;\n}else if (key > a[mid]){\nlo = mid + 1;\n}else {\nreturn mid;\n}\n}\nreturn -1;\n}\n}",
                        "max_stars_repo_name": "zhaohui90-lee/springMVCdemo",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "src/main/java/com/melody/util/algorithms/BinarySearch.java",
                        "__cluster__": 8300
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_api-misuse-repair-complete_data_6822",
                        "content": "@Override public void update(int delta, Shape containerShape) { if (dead) return; GameEvent e; int score = 0; while ((e = gse.pop(id)) != null) { switch(e.getRole()) { case CREEP: { if (e.isAlive()) { super.creeps.put(e.getId(), new Creep(e.getPosition(), ColorSwitch.getColorFromId(e.getSendId()))); } else { super.creeps.remove(e.getId()); } break; } case PLAYER: { if (!e.isAlive()) { dead = true; } if (e.getPlayerHp() != -1) { stats.setHP(e.getPlayerHp()); } if (e.getPosition() != null) { super.position = e.getPosition(); } if (e.getDirection() != null) { } if (e.getScore() != 0) { score = e.getScore(); } super.updatePosition(containerShape); break; } case BULLET: { if (e.isAlive()) { super.gun.shoot(e.getPosition()); } else { super.gun.delete(e.getId()); } break; } } } for (Creep c : super.creeps.values()) { c.update(delta); } stats.update(delta, score); super.gun.update(delta); }\n@Override public void update(int delta, Shape containerShape) { if (dead) return; GameEvent e; int score = 0; while ((e = gse.pop(id)) != null) { switch(e.getRole()) { case CREEP: { if (e.isAlive()) { super.creeps.put(e.getId(), new Creep(e.getPosition(), ColorSwitch.getColorFromId(e.getSendId()))); } else { super.creeps.remove(e.getId()); } break; } case PLAYER: { if (!e.isAlive()) { dead = true; } if (e.getPlayerHp() != -1) { stats.setHP(e.getPlayerHp()); } if (e.getPosition() != null) { super.position = e.getPosition(); } if (e.getDirection() != null) { } if (e.getScore() != -1) { score = e.getScore(); } super.updatePosition(containerShape); break; } case BULLET: { if (e.isAlive()) { super.gun.shoot(e.getPosition()); } else { super.gun.delete(e.getId()); } break; } } } for (Creep c : super.creeps.values()) { c.update(delta); } stats.update(delta, score); super.gun.update(delta); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 6821
                },
                {
                        "id": "pretrain_java_data_1261583",
                        "content": "package slimpleslickgame;\nimport org.newdawn.slick.geom.Shape;\nimport util.ColorSwitch;\nimport client.GameEvent;\nimport client.GameStatsEvents;\npublic class OpponentPlayer extends Player {\npublic OpponentPlayer(byte id, GameStatsEvents gse) {\nsuper(id, gse);\n}\n@Override\npublic void update(int delta, Shape containerShape) {\nif(dead)\nreturn;\nGameEvent e;\nint score = 0;\nwhile ((e = gse.pop(id)) != null) {\nswitch (e.getRole()) {\ncase CREEP: {\nif (e.isAlive()) {\nsuper.creeps.put(e.getId(), new Creep(e.getPosition(), ColorSwitch.getColorFromId(e.getSendId())));\n} else {\nsuper.creeps.remove(e.getId());\n}\nbreak;\n}\ncase PLAYER: {\nif (!e.isAlive()){\ndead = true;\n}\nif(e.getPlayerHp() != -1){\nstats.setHP(e.getPlayerHp());\n}\nif (e.getPosition() != null) {\nsuper.position = e.getPosition();\n}\nif (e.getDirection() != null) {\n// super.direction = e.getDirection();\n}\nif (e.getScore() > 0) {\nscore = e.getScore();\n}\nsuper.updatePosition(containerShape);\nbreak;\n}\ncase BULLET: {\nif (e.isAlive()) {\nsuper.gun.shoot(e.getPosition());\n} else {\nsuper.gun.delete(e.getId());\n}\nbreak;\n}\n}\n}\nfor (Creep c : super.creeps.values()) {\nc.update(delta);\n}\nif(score > 0){\nstats.update(delta, score);\n}\nsuper.gun.update(delta);\n}\n}",
                        "max_stars_repo_name": "Jullekungfu/SpaceDefence",
                        "max_stars_count": 2,
                        "max_stars_repo_path": "slick-game/src/slimpleslickgame/OpponentPlayer.java",
                        "__cluster__": 6821
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_4581274",
                        "content": "<reponame>Martouta/loopa\nimport org.loopa.externalservice.KafkaService;\nimport org.loopa.externalservice.MonitoredService;\nimport org.loopa.monitor.MonitorCreatorSocial;\nimport org.loopa.monitor.IMonitor;\nimport org.loopa.analyzer.AnalyzerCreatorSocial;\nimport org.loopa.analyzer.IAnalyzer;\npublic class Main {\npublic static void main(String[] args) {\nString kafkaUrl = \"172.16.31.10\", kafkaTopic = \"68d24960-5eff-4c14-8a8c-6d0c7f8ea5c3\", keywordExpression = args[1],\nmonitorID = \"MonitorSocial\", analyzerID = \"AnalizerMonitor\";\nint timeSlot = Integer.parseInt(args[2]), newTimeSlot = Integer.parseInt(args[2]), monFreq = Integer.parseInt(args[3]),\nmaxFreq = Integer.parseInt(args[4]), maxFreqChangeRate = Integer.parseInt(args[5]), iterations = Integer.parseInt(args[6]),\nidConf = Integer.parseInt(args[0]);\nif (args.length == 8) { newTimeSlot = Integer.parseInt(args[7]); }\nMonitoredService monitoredService = new MonitoredService(\"MonitoredServiceID\", idConf, \"TwitterAPI\", timeSlot, kafkaUrl, kafkaTopic, keywordExpression);\nKafkaService kafkaService = new KafkaService(\"kafkaServiceID\", monitoredService.getKafkaEndpoint(), monitoredService.getKafkaTopic(), \"kafkaTopicWrite\", monitoredService);\nIMonitor monitor = MonitorCreatorSocial.create(monitorID, kafkaService, monFreq);\nkafkaService.setMonitor(monitor);\nIAnalyzer analyzer = AnalyzerCreatorSocial.create(analyzerID, monitoredService, maxFreq, maxFreqChangeRate, iterations, newTimeSlot);\nkafkaService.setAnalyzer(analyzer);\nMonitorCreatorSocial.startMonitoring(monitor);\n}\n}",
                        "max_stars_repo_name": "Martouta/loopa",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "loopa/src/main/java/org/loopa/Main.java",
                        "__cluster__": 3895
                },
                {
                        "id": "test_api-misuse-repair-complete_data_3896",
                        "content": "public static void main(String[] args) { String kafkaUrl = \"147.83.192.53\", kafkaTopic = \"68d24960-5eff-4c14-8a8c-6d0c7f8ea5c3\", keywordExpression = args[1], monitorID = \"MonitorSocial\", analyzerID = \"AnalizerMonitor\"; int timeSlot = Integer.parseInt(args[2]), newTimeSlot = Integer.parseInt(args[2]), monFreq = Integer.parseInt(args[3]), maxFreq = Integer.parseInt(args[4]), maxFreqChangeRate = Integer.parseInt(args[5]), iterations = Integer.parseInt(args[6]), idConf = Integer.parseInt(args[0]); if (args.length == 8) { newTimeSlot = Integer.parseInt(args[7]); } MonitoredService monitoredService = new MonitoredService(\"MonitoredServiceID\", idConf, \"TwitterAPI\", timeSlot, kafkaUrl, kafkaTopic, keywordExpression); KafkaService kafkaService = new KafkaService(\"kafkaServiceID\", monitoredService.getKafkaEndpoint(), monitoredService.getKafkaTopic(), \"kafkaTopicWrite\", idConf); IMonitor monitor = MonitorCreatorSocial.create(monitorID, kafkaService, monFreq); kafkaService.setMonitor(monitor); IAnalyzer analyzer = AnalyzerCreatorSocial.create(analyzerID, monitoredService, maxFreq, maxFreqChangeRate, iterations, newTimeSlot); kafkaService.setAnalyzer(analyzer); MonitorCreatorSocial.startMonitoring(monitor); }\npublic static void main(String[] args) { String kafkaUrl = \"147.83.192.53\", kafkaTopic = \"68d24960-5eff-4c14-8a8c-6d0c7f8ea5c3\", keywordExpression = args[1], monitorID = \"MonitorSocial\", analyzerID = \"AnalizerMonitor\"; int timeSlot = Integer.parseInt(args[2]), newTimeSlot = Integer.parseInt(args[2]), monFreq = Integer.parseInt(args[3]), maxFreq = Integer.parseInt(args[4]), maxFreqChangeRate = Integer.parseInt(args[5]), iterations = Integer.parseInt(args[6]), idConf = Integer.parseInt(args[0]); if (args.length == 8) { newTimeSlot = Integer.parseInt(args[7]); } MonitoredService monitoredService = new MonitoredService(\"MonitoredServiceID\", idConf, \"TwitterAPI\", timeSlot, kafkaUrl, kafkaTopic, keywordExpression); KafkaService kafkaService = new KafkaService(\"kafkaServiceID\", monitoredService.getKafkaEndpoint(), monitoredService.getKafkaTopic(), \"kafkaTopicWrite\", monitoredService); IMonitor monitor = MonitorCreatorSocial.create(monitorID, kafkaService, monFreq); kafkaService.setMonitor(monitor); IAnalyzer analyzer = AnalyzerCreatorSocial.create(analyzerID, monitoredService, maxFreq, maxFreqChangeRate, iterations, newTimeSlot); kafkaService.setAnalyzer(analyzer); MonitorCreatorSocial.startMonitoring(monitor); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 3895
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "pretrain_java_data_9301781",
                        "content": "package biz.burli.nationalratswahl;\nimport android.content.Intent;\nimport android.support.v4.content.res.ResourcesCompat;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport com.github.mikephil.charting.animation.Easing;\nimport com.github.mikephil.charting.charts.PieChart;\nimport com.github.mikephil.charting.components.Description;\nimport com.github.mikephil.charting.components.Legend;\nimport com.github.mikephil.charting.data.PieData;\nimport com.github.mikephil.charting.data.PieDataSet;\nimport com.github.mikephil.charting.data.PieEntry;\nimport com.github.mikephil.charting.formatter.PercentFormatter;\nimport org.w3c.dom.Text;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class ResultsDetailsActivity extends AppCompatActivity {\nprivate Button btn_share;\nprivate ImageView iv_home;\nprivate ArrayList<Integer> userinputs;\nprivate PieChart pieChart;\nprivate int[] scores;\nprivate int highest_party_nr;\nprivate String party_favorite;\nprivate TextView text_head;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_results_details);\nbtn_share = (Button) findViewById(R.id.btn_share);\niv_home = (ImageView) findViewById(R.id.iv_home);\npieChart = (PieChart) findViewById(R.id.piechart);\ntext_head = (TextView) findViewById(R.id.text_head);\nscores = (int[]) getIntent().getExtras().getIntArray(\"scores\");\nhighest_party_nr = (int) getIntent().getExtras().getInt(\"highest\");\nswitch(highest_party_nr) {\ncase 1:\nparty_favorite = getResources().getString(R.string.p1);\nbreak;\ncase 2:\nparty_favorite = getResources().getString(R.string.p2);\nbreak;\ncase 3:\nparty_favorite = getResources().getString(R.string.p3);\nbreak;\ncase 4:\nparty_favorite = getResources().getString(R.string.p4);\nbreak;\ncase 5:\nparty_favorite = getResources().getString(R.string.p5);\nbreak;\ncase 6:\nparty_favorite = getResources().getString(R.string.p6);\nbreak;\n};\ntext_head.setText(\"Deine Partei ist: \" + party_favorite + \"!\");\niv_home.setOnClickListener(new View.OnClickListener() {\n@Override\npublic void onClick(View view) {\nstartActivity(new Intent(ResultsDetailsActivity.this, StartActivity.class));    // works, because i changed it in layout to 0\noverridePendingTransition(R.animator.top_in, R.animator.bottom_out);\n}\n});\nbtn_share.setOnClickListener(new View.OnClickListener() {\n@Override\npublic void onClick(View view) {\nIntent sendIntent = new Intent();\nsendIntent.setAction(Intent.ACTION_SEND);\nsendIntent.putExtra(Intent.EXTRA_TEXT, \"Die Wahlhelfer-App hat mir meine ideale Partei berechnet. \\n\\n \" +\n\"Zu \" + String.valueOf(scores[highest_party_nr-1]) +\" % bin ich der perfekte \" + party_favorite + \"-W\u00e4hler\");\nsendIntent.setType(\"text/plain\");\nif (sendIntent.resolveActivity(getPackageManager()) != null)\nstartActivity(Intent.createChooser(sendIntent, \"Share\"));\n}\n});\n// diagram shit:\nList<PieEntry> entries = new ArrayList<>();\nentries.add(new PieEntry(scores[0], \"SP\u00d6\"));    // labels nicht wichtig, nicht angezeigt, sondern unten geholt und eigens gezeigt\nentries.add(new PieEntry(scores[1], \"Liste Kurz\"));\nentries.add(new PieEntry(scores[2], \"FP\u00d6\"));\nentries.add(new PieEntry(scores[3], \"Die Gr\u00fcnen\"));\nentries.add(new PieEntry(scores[4], \"NEOS\"));\nentries.add(new PieEntry(scores[5], \"Liste Pilz\"));\nArrayList<Integer> colors = new ArrayList<>();\ncolors.add(ResourcesCompat.getColor(getResources(), R.color.spo, null));\ncolors.add(ResourcesCompat.getColor(getResources(), R.color.ovp, null));\ncolors.add(ResourcesCompat.getColor(getResources(), R.color.fpo, null));\ncolors.add(ResourcesCompat.getColor(getResources(), R.color.grun, null));\ncolors.add(ResourcesCompat.getColor(getResources(), R.color.neos, null));\ncolors.add(ResourcesCompat.getColor(getResources(), R.color.pilz, null));\nPieDataSet set = new PieDataSet(entries, \"\");\nset.setColors(colors);\nset.setSliceSpace(2f);\nset.setDrawValues(true);\n//set.setYValuePosition(PieDataSet.ValuePosition.OUTSIDE_SLICE);\nPieData data = new PieData(set);\ndata.setValueFormatter(new PercentFormatter());\ndata.setValueTextSize(12f);\n//data.setValueTextColor(Color.parseColor(\"#666666\"));\n// data.setValueTextColor(Color.parseColor(\"#ecf0f1\"));\npieChart.setData(data);\npieChart.setUsePercentValues(true);\npieChart.setHoleRadius(0);\npieChart.setTransparentCircleRadius(30f);\npieChart.setDescription(new Description());\npieChart.setDrawEntryLabels(false);\npieChart.highlightValues(null);\npieChart.invalidate();\npieChart.animateY(1400, Easing.EasingOption.EaseInOutQuad);\npieChart.getDescription().setEnabled(false);\nLegend l = pieChart.getLegend();\nl.setEnabled(false);\n//http://androidbuddys.com/pie-chartdonut-chart-using-mp-chart/\n}\n@Override\npublic void onBackPressed() {\n}\n}",
                        "max_stars_repo_name": "burliEnterprises/nationalratswahl-app",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "app/src/main/java/biz/burli/nationalratswahl/ResultsDetailsActivity.java",
                        "__cluster__": 5019
                },
                {
                        "id": "test_api-misuse-repair-complete_data_5020",
                        "content": "@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_results_details); btn_share = (Button) findViewById(R.id.btn_share); iv_home = (ImageView) findViewById(R.id.iv_home); pieChart = (PieChart) findViewById(R.id.piechart); text_head = (TextView) findViewById(R.id.text_head); scores = (int[]) getIntent().getExtras().getIntArray(\"scores\"); highest_party_nr = (int) getIntent().getExtras().getInt(\"highest\"); switch(highest_party_nr) { case 1: party_favorite = getResources().getString(R.string.p1); break; case 2: party_favorite = getResources().getString(R.string.p2); break; case 3: party_favorite = getResources().getString(R.string.p3); break; case 4: party_favorite = getResources().getString(R.string.p4); break; case 5: party_favorite = getResources().getString(R.string.p5); break; case 6: party_favorite = getResources().getString(R.string.p6); break; } ; text_head.setText(\"Deine Partei ist: \" + party_favorite + \"!\"); iv_home.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { startActivity(new Intent(ResultsDetailsActivity.this, StartActivity.class)); overridePendingTransition(R.animator.top_in, R.animator.bottom_out); } }); btn_share.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { Intent sendIntent = new Intent(); sendIntent.setAction(Intent.ACTION_SEND); sendIntent.putExtra(Intent.EXTRA_TEXT, \"Die Wahlhelfer-App hat mir meine ideale Partei berechnet. \\n\\n \" + \"Zu \" + String.valueOf(scores[highest_party_nr - 1]) + \" % bin ich der perfekte \" + party_favorite + \"-W\u00e4hler\"); sendIntent.setType(\"text/plain\"); startActivity(sendIntent); } }); List<PieEntry> entries = new ArrayList<>(); entries.add(new PieEntry(scores[0], \"SP\u00d6\")); entries.add(new PieEntry(scores[1], \"Liste Kurz\")); entries.add(new PieEntry(scores[2], \"FP\u00d6\")); entries.add(new PieEntry(scores[3], \"Die Gr\u00fcnen\")); entries.add(new PieEntry(scores[4], \"NEOS\")); entries.add(new PieEntry(scores[5], \"Liste Pilz\")); ArrayList<Integer> colors = new ArrayList<>(); colors.add(ResourcesCompat.getColor(getResources(), R.color.spo, null)); colors.add(ResourcesCompat.getColor(getResources(), R.color.ovp, null)); colors.add(ResourcesCompat.getColor(getResources(), R.color.fpo, null)); colors.add(ResourcesCompat.getColor(getResources(), R.color.grun, null)); colors.add(ResourcesCompat.getColor(getResources(), R.color.neos, null)); colors.add(ResourcesCompat.getColor(getResources(), R.color.pilz, null)); PieDataSet set = new PieDataSet(entries, \"\"); set.setColors(colors); set.setSliceSpace(2f); set.setDrawValues(true); PieData data = new PieData(set); data.setValueFormatter(new PercentFormatter()); data.setValueTextSize(12f); pieChart.setData(data); pieChart.setUsePercentValues(true); pieChart.setHoleRadius(0); pieChart.setTransparentCircleRadius(30f); pieChart.setDescription(new Description()); pieChart.setDrawEntryLabels(false); pieChart.highlightValues(null); pieChart.invalidate(); pieChart.animateY(1400, Easing.EasingOption.EaseInOutQuad); pieChart.getDescription().setEnabled(false); Legend l = pieChart.getLegend(); l.setEnabled(false); }\n@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_results_details); btn_share = (Button) findViewById(R.id.btn_share); iv_home = (ImageView) findViewById(R.id.iv_home); pieChart = (PieChart) findViewById(R.id.piechart); text_head = (TextView) findViewById(R.id.text_head); scores = (int[]) getIntent().getExtras().getIntArray(\"scores\"); highest_party_nr = (int) getIntent().getExtras().getInt(\"highest\"); switch(highest_party_nr) { case 1: party_favorite = getResources().getString(R.string.p1); break; case 2: party_favorite = getResources().getString(R.string.p2); break; case 3: party_favorite = getResources().getString(R.string.p3); break; case 4: party_favorite = getResources().getString(R.string.p4); break; case 5: party_favorite = getResources().getString(R.string.p5); break; case 6: party_favorite = getResources().getString(R.string.p6); break; } ; text_head.setText(\"Deine Partei ist: \" + party_favorite + \"!\"); iv_home.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { startActivity(new Intent(ResultsDetailsActivity.this, StartActivity.class)); overridePendingTransition(R.animator.top_in, R.animator.bottom_out); } }); btn_share.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { Intent sendIntent = new Intent(); sendIntent.setAction(Intent.ACTION_SEND); sendIntent.putExtra(Intent.EXTRA_TEXT, \"Die Wahlhelfer-App hat mir meine ideale Partei berechnet. \\n\\n \" + \"Zu \" + String.valueOf(scores[highest_party_nr - 1]) + \" % bin ich der perfekte \" + party_favorite + \"-W\u00e4hler\"); sendIntent.setType(\"text/plain\"); if (sendIntent.resolveActivity(getPackageManager()) != null) startActivity(Intent.createChooser(sendIntent, \"Share\")); } }); List<PieEntry> entries = new ArrayList<>(); entries.add(new PieEntry(scores[0], \"SP\u00d6\")); entries.add(new PieEntry(scores[1], \"Liste Kurz\")); entries.add(new PieEntry(scores[2], \"FP\u00d6\")); entries.add(new PieEntry(scores[3], \"Die Gr\u00fcnen\")); entries.add(new PieEntry(scores[4], \"NEOS\")); entries.add(new PieEntry(scores[5], \"Liste Pilz\")); ArrayList<Integer> colors = new ArrayList<>(); colors.add(ResourcesCompat.getColor(getResources(), R.color.spo, null)); colors.add(ResourcesCompat.getColor(getResources(), R.color.ovp, null)); colors.add(ResourcesCompat.getColor(getResources(), R.color.fpo, null)); colors.add(ResourcesCompat.getColor(getResources(), R.color.grun, null)); colors.add(ResourcesCompat.getColor(getResources(), R.color.neos, null)); colors.add(ResourcesCompat.getColor(getResources(), R.color.pilz, null)); PieDataSet set = new PieDataSet(entries, \"\"); set.setColors(colors); set.setSliceSpace(2f); set.setDrawValues(true); PieData data = new PieData(set); data.setValueFormatter(new PercentFormatter()); data.setValueTextSize(12f); pieChart.setData(data); pieChart.setUsePercentValues(true); pieChart.setHoleRadius(0); pieChart.setTransparentCircleRadius(30f); pieChart.setDescription(new Description()); pieChart.setDrawEntryLabels(false); pieChart.highlightValues(null); pieChart.invalidate(); pieChart.animateY(1400, Easing.EasingOption.EaseInOutQuad); pieChart.getDescription().setEnabled(false); Legend l = pieChart.getLegend(); l.setEnabled(false); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 5019
                },
                {
                        "real_dup": "3"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_1599816",
                        "content": "class Hello{\npublic static void main(string args[]){\nSystem.out.println(\"Hello World\")}\n}",
                        "max_stars_repo_name": "Tusarkar/Java",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "Hello.java",
                        "__cluster__": 8792
                },
                {
                        "id": "test_api-misuse-repair-complete_data_9536",
                        "content": "public static void main() { System.out.println(\"Hello World!\"); }\npublic static void main() { System.out.println(\"Hello World!!!!!\"); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 8792
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "pretrain_java_data_9434403",
                        "content": "package nl.vu.cs.amstel.examples;\nimport nl.vu.cs.amstel.Node;\nimport nl.vu.cs.amstel.graph.io.Reader;\nimport nl.vu.cs.amstel.graph.io.TextFileReader;\nimport nl.vu.cs.amstel.user.IntMessage;\nimport nl.vu.cs.amstel.user.IntValue;\nimport nl.vu.cs.amstel.user.MaxIntAggregator;\nimport nl.vu.cs.amstel.user.MinIntAggregator;\nimport nl.vu.cs.amstel.user.MinIntCombiner;\npublic class SSSP {\npublic static void main(String args[]) throws Exception {\nint nodes;\nString filename;\nif (args[0] != null) {\nnodes = Integer.parseInt(args[0]);\n} else {\nthrow new Exception(\"Number of nodes not specified\");\n}\nif (args[1] != null) {\nfilename = args[1];\n} else {\nthrow new Exception(\"Input filename not specified\");\n}\nif (args[2] != null && args[3] != null) {\nSSSPVertex.SRC = args[2];\nSSSPVertex.DST = args[3];\n} else {\nthrow new Exception(\"Source and destination not specified\");\n}\nReader reader = new TextFileReader(filename);\nNode<IntValue, IntValue, IntMessage> node =\nnew Node<IntValue, IntValue, IntMessage>(nodes, SSSPVertex.class,\nIntValue.class, IntValue.class, IntMessage.class, reader);\nnode.setCombiner(MinIntCombiner.class);\nnode.addAggregator(new MinIntAggregator(\"Destination\"));\nnode.addAggregator(new MaxIntAggregator(\"Max-Outdegree\"));\nnode.run();\n}\n}",
                        "max_stars_repo_name": "claudiugh/Amstel",
                        "max_stars_count": 1,
                        "max_stars_repo_path": "src/nl/vu/cs/amstel/examples/SSSP.java",
                        "__cluster__": 7093
                },
                {
                        "id": "test_api-misuse-repair-complete_data_7094",
                        "content": "public static void main(String[] args) throws Exception { int nodes; String filename; if (args[0] != null) { nodes = Integer.parseInt(args[0]); } else { throw new Exception(\"Number of nodes not specified\"); } if (args[1] != null) { filename = args[1]; } else { throw new Exception(\"Input filename not specified\"); } if (args[2] != null && args[3] != null) { SSSPVertex.SRC = args[2]; SSSPVertex.DST = args[3]; } else { throw new Exception(\"Source and destination not specified\"); } Reader reader = new LognormGraphGenerator(filename); Node<IntValue, IntValue, IntMessage> node = new Node<IntValue, IntValue, IntMessage>(nodes, SSSPVertex.class, IntValue.class, IntValue.class, IntMessage.class, reader); node.setCombiner(MinIntCombiner.class); node.addAggregator(new MinIntAggregator(\"Destination\")); node.addAggregator(new MaxIntAggregator(\"Max-Outdegree\")); node.run(); }\npublic static void main(String[] args) throws Exception { int nodes; String filename; if (args[0] != null) { nodes = Integer.parseInt(args[0]); } else { throw new Exception(\"Number of nodes not specified\"); } if (args[1] != null) { filename = args[1]; } else { throw new Exception(\"Input filename not specified\"); } if (args[2] != null && args[3] != null) { SSSPVertex.SRC = args[2]; SSSPVertex.DST = args[3]; } else { throw new Exception(\"Source and destination not specified\"); } Reader reader = new TextFileReader(filename); Node<IntValue, IntValue, IntMessage> node = new Node<IntValue, IntValue, IntMessage>(nodes, SSSPVertex.class, IntValue.class, IntValue.class, IntMessage.class, reader); node.setCombiner(MinIntCombiner.class); node.addAggregator(new MinIntAggregator(\"Destination\")); node.addAggregator(new MaxIntAggregator(\"Max-Outdegree\")); node.run(); }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 7093
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "test_api-misuse-repair-complete_data_779",
                        "content": "private static <T extends AbstractJaxb> boolean execute(String id, T target, java.lang.Object replace) throws TagTypeUnmatchException { TagEnum tagEnum = TagEnum.valueOf(target.getClass().getSimpleName().toUpperCase()); if (id.equals(target.getId())) { return false; } switch(tagEnum) { case A: A a = (A) target; if (a.isSetContent()) { return replaceByIdWithinObjectList(id, a.getContent(), replace); } break; case ABBR: Abbr abbr = (Abbr) target; if (abbr.isSetContent()) { return replaceByIdWithinObjectList(id, abbr.getContent(), replace); } break; case ACRONYM: Acronym acronym = (Acronym) target; if (acronym.isSetContent()) { return replaceByIdWithinObjectList(id, acronym.getContent(), replace); } break; case ADDRESS: Address address = (Address) target; if (address.isSetContent()) { return replaceByIdWithinObjectList(id, address.getContent(), replace); } break; case APPLET: Applet applet = (Applet) target; if (applet.isSetContent()) { return replaceByIdWithinObjectList(id, applet.getContent(), replace); } break; case AREA: break; case B: B b = (B) target; if (b.isSetContent()) { return replaceByIdWithinObjectList(id, b.getContent(), replace); } break; case BASE: break; case BASEFONT: break; case BDO: Bdo bdo = (Bdo) target; if (bdo.isSetContent()) { return replaceByIdWithinObjectList(id, bdo.getContent(), replace); } break; case BIG: Big big = (Big) target; if (big.isSetContent()) { return replaceByIdWithinObjectList(id, big.getContent(), replace); } break; case BLOCKQUOTE: Blockquote blockquote = (Blockquote) target; if (blockquote.isSetContent()) { return replaceByIdWithinObjectList(id, blockquote.getContent(), replace); } break; case BODY: Body body = (Body) target; if (body.isSetContent()) { return replaceByIdWithinObjectList(id, body.getContent(), replace); } break; case BR: break; case BUTTON: Button button = (Button) target; if (button.isSetContent()) { return replaceByIdWithinObjectList(id, button.getContent(), replace); } break; case CAPTION: Caption caption = (Caption) target; if (caption.isSetContent()) { return replaceByIdWithinObjectList(id, caption.getContent(), replace); } break; case CENTER: Center center = (Center) target; if (center.isSetContent()) { return replaceByIdWithinObjectList(id, center.getContent(), replace); } break; case CITE: Cite cite = (Cite) target; if (cite.isSetContent()) { return replaceByIdWithinObjectList(id, cite.getContent(), replace); } break; case CODE: Code code = (Code) target; if (code.isSetContent()) { return replaceByIdWithinObjectList(id, code.getContent(), replace); } break; case COL: break; case COLGROUP: Colgroup colgroup = (Colgroup) target; if (colgroup.isSetCol()) { for (int i = 0; i < colgroup.getCol().size(); i++) { Col col1 = colgroup.getCol().get(i); if (col1.isSetId() && col1.getId().equals(col1)) { if (replace instanceof Col) { colgroup.getCol().set(i, (Col) replace); return true; } else { throw new TagTypeUnmatchException(Col.class, replace.getClass()); } } } } break; case DD: Dd dd = (Dd) target; if (dd.isSetContent()) { return replaceByIdWithinObjectList(id, dd.getContent(), replace); } break; case DEL: Del del = (Del) target; if (del.isSetContent()) { return replaceByIdWithinObjectList(id, del.getContent(), replace); } break; case DFN: Dfn dfn = (Dfn) target; if (dfn.isSetContent()) { return replaceByIdWithinObjectList(id, dfn.getContent(), replace); } break; case DIR: Dir dir = (Dir) target; if (dir.isSetLi()) { for (int i = 0; i < dir.getLi().size(); i++) { Li li = dir.getLi().get(i); if (li.isSetId() && li.getId().equals(id)) { if (replace instanceof Li) { dir.getLi().set(i, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li, replace)) { return true; } } } } break; case DIV: Div div = (Div) target; if (div.isSetContent()) { return replaceByIdWithinObjectList(id, div.getContent(), replace); } break; case DL: Dl dl = (Dl) target; if (dl.isSetDtOrDd()) { for (int i = 0; i < dl.getDtOrDd().size(); i++) { AbstractJaxb obj = dl.getDtOrDd().get(i); if (id.equals(obj.getId())) { if (obj instanceof Dt || obj instanceof Dd) { dl.getDtOrDd().set(i, (AbstractJaxb) replace); return true; } else { throw new TagTypeUnmatchException(Dd.class, obj.getClass()); } } else { if (execute(id, obj, replace)) { return true; } } } } break; case DT: Dt dt = (Dt) target; if (dt.isSetContent()) { return replaceByIdWithinObjectList(id, dt.getContent(), replace); } break; case EM: Em em = (Em) target; if (em.isSetContent()) { return replaceByIdWithinObjectList(id, em.getContent(), replace); } break; case FIELDSET: Fieldset fieldset = (Fieldset) target; if (fieldset.isSetContent()) { return replaceByIdWithinObjectList(id, fieldset.getContent(), replace); } break; case FONT: Font font = (Font) target; if (font.isSetContent()) { return replaceByIdWithinObjectList(id, font.getContent(), replace); } break; case FORM: Form form = (Form) target; if (form.isSetContent()) { return replaceByIdWithinObjectList(id, form.getContent(), replace); } break; case H1: H1 h1 = (H1) target; if (h1.isSetContent()) { return replaceByIdWithinObjectList(id, h1.getContent(), replace); } break; case H2: H2 h2 = (H2) target; if (h2.isSetContent()) { return replaceByIdWithinObjectList(id, h2.getContent(), replace); } break; case H3: H3 h3 = (H3) target; if (h3.isSetContent()) { return replaceByIdWithinObjectList(id, h3.getContent(), replace); } break; case H4: H4 h4 = (H4) target; if (h4.isSetContent()) { return replaceByIdWithinObjectList(id, h4.getContent(), replace); } break; case H5: H5 h5 = (H5) target; if (h5.isSetContent()) { return replaceByIdWithinObjectList(id, h5.getContent(), replace); } break; case H6: H6 h6 = (H6) target; if (h6.isSetContent()) { return replaceByIdWithinObjectList(id, h6.getContent(), replace); } break; case HGROUP: Hgroup hgroup = (Hgroup) target; if (hgroup.isSetH1OrH2OrH3()) { for (AbstractJaxb aj : hgroup.getH1OrH2OrH3()) { if (execute(id, aj, replace)) { return true; } } } break; case HEAD: Head head = (Head) target; for (AbstractJaxb obj : head.getContent()) { if (execute(id, obj, replace)) { return true; } } break; case HR: break; case HTML: Html html = (Html) target; if (html.isSetHead()) { if (execute(id, html.getHead(), replace)) { return true; } } if (html.isSetBody()) { if (execute(id, html.getBody(), replace)) { return true; } } break; case I: I i = (I) target; if (i.isSetContent()) { return replaceByIdWithinObjectList(id, i.getContent(), replace); } break; case IFRAME: Iframe iframe = (Iframe) target; if (iframe.isSetContent()) { return replaceByIdWithinObjectList(id, iframe.getContent(), replace); } break; case IMG: break; case INPUT: break; case INS: Ins ins = (Ins) target; if (ins.isSetContent()) { return replaceByIdWithinObjectList(id, ins.getContent(), replace); } break; case ISINDEX: break; case KBD: Kbd kbd = (Kbd) target; if (kbd.isSetContent()) { return replaceByIdWithinObjectList(id, kbd.getContent(), replace); } break; case LABEL: Label label = (Label) target; if (label.isSetContent()) { return replaceByIdWithinObjectList(id, label.getContent(), replace); } break; case LEGEND: Legend legend = (Legend) target; if (legend.isSetContent()) { return replaceByIdWithinObjectList(id, legend.getContent(), replace); } break; case LI: Li li = (Li) target; if (li.isSetContent()) { return replaceByIdWithinObjectList(id, li.getContent(), replace); } break; case LINK: break; case MAP: Map map = (Map) target; if (map.isSetArea()) { for (int j = 0; j < map.getArea().size(); j++) { Area area2 = map.getArea().get(j); if (area2.isSetId() && id.equals(area2.getId())) { map.getArea().set(j, (Area) replace); return true; } } } if (map.isSetPOrH1OrH2()) { for (int k = 0; k < map.getPOrH1OrH2().size(); k++) { AbstractJaxb obj = map.getPOrH1OrH2().get(k); if (id.equals(obj.getId())) { map.getPOrH1OrH2().set(k, (AbstractJaxb) replace); return true; } else { if (execute(id, obj, replace)) { return true; } } } } break; case MENU: Menu menu = (Menu) target; if (menu.isSetContent()) { return replaceByIdWithinObjectList(id, menu.getContent(), replace); } break; case META: break; case NOFRAMES: Noframes noframes = (Noframes) target; if (noframes.isSetContent()) { return replaceByIdWithinObjectList(id, noframes.getContent(), replace); } break; case NOSCRIPT: Noscript noscript = (Noscript) target; if (noscript.isSetContent()) { return replaceByIdWithinObjectList(id, noscript.getContent(), replace); } break; case OBJECT: org.mixer2.jaxb.xhtml.Object object = (org.mixer2.jaxb.xhtml.Object) target; if (object.isSetContent()) { return replaceByIdWithinObjectList(id, object.getContent(), replace); } break; case OL: Ol ol = (Ol) target; if (ol.isSetLi()) { for (int j = 0; j < ol.getLi().size(); j++) { Li li2 = ol.getLi().get(j); if (li2.isSetId() && li2.getId().equals(id)) { if (replace instanceof Li) { ol.getLi().set(j, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li2, replace)) { return true; } } } } break; case OPTGROUP: Optgroup optgroup = (Optgroup) target; if (optgroup.isSetOption()) { for (int j = 0; j < optgroup.getOption().size(); j++) { Option option = optgroup.getOption().get(j); if (option.isSetId() && option.getId().equals(id)) { if (replace instanceof Option) { optgroup.getOption().set(j, (Option) replace); return true; } else { throw new TagTypeUnmatchException(Option.class, replace.getClass()); } } else { if (execute(id, option, replace)) { return true; } } } } break; case OPTION: break; case P: P p = (P) target; if (p.isSetContent()) { return replaceByIdWithinObjectList(id, p.getContent(), replace); } break; case PARAM: break; case PRE: Pre pre = (Pre) target; if (pre.isSetContent()) { return replaceByIdWithinObjectList(id, pre.getContent(), replace); } break; case Q: Q q = (Q) target; if (q.isSetContent()) { return replaceByIdWithinObjectList(id, q.getContent(), replace); } break; case S: S s = (S) target; if (s.isSetContent()) { return replaceByIdWithinObjectList(id, s.getContent(), replace); } break; case SAMP: Samp samp = (Samp) target; if (samp.isSetContent()) { return replaceByIdWithinObjectList(id, samp.getContent(), replace); } break; case SCRIPT: break; case SELECT: Select select = (Select) target; if (select.isSetOptgroupOrOption()) { for (int j = 0; j < select.getOptgroupOrOption().size(); j++) { AbstractJaxb obj = select.getOptgroupOrOption().get(j); if (id.equals(obj.getId())) { if (obj.getClass().equals(Optgroup.class) || obj.getClass().equals(Option.class)) { select.getOptgroupOrOption().set(j, (AbstractJaxb) replace); } else { throw new TagTypeUnmatchException(\"Option or Optgroup expected, but replace is \" + replace.getClass()); } return true; } else { if (execute(id, obj, replace)) { return true; } } } } break; case SMALL: Small small = (Small) target; if (small.isSetContent()) { return replaceByIdWithinObjectList(id, small.getContent(), replace); } break; case SPAN: Span span = (Span) target; if (span.isSetContent()) { return replaceByIdWithinObjectList(id, span.getContent(), replace); } break; case STRIKE: Strike strike = (Strike) target; if (strike.isSetContent()) { return replaceByIdWithinObjectList(id, strike.getContent(), replace); } break; case STRONG: Strong strong = (Strong) target; if (strong.isSetContent()) { return replaceByIdWithinObjectList(id, strong.getContent(), replace); } break; case STYLE: break; case SUB: Sub sub = (Sub) target; if (sub.isSetContent()) { return replaceByIdWithinObjectList(id, sub.getContent(), replace); } break; case SUP: Sup sup = (Sup) target; if (sup.isSetContent()) { return replaceByIdWithinObjectList(id, sup.getContent(), replace); } break; case TABLE: Table table = (Table) target; if (table.isSetCaption()) { Caption capt = table.getCaption(); if (capt.isSetId() && id.equals(capt.getId())) { if (replace instanceof Caption) { table.setCaption((Caption) replace); return true; } else { throw new TagTypeUnmatchException(Caption.class, replace.getClass()); } } else { if (replaceByIdWithinObjectList(id, capt.getContent(), replace)) { return true; } } } if (table.isSetCol()) { for (int j = 0; j < table.getCol().size(); j++) { Col col2 = table.getCol().get(j); if (col2.isSetId() && col2.getId().equals(id)) { if (replace instanceof Col) { table.getCol().set(j, (Col) replace); return true; } else { throw new TagTypeUnmatchException(Col.class, replace.getClass()); } } } } if (table.isSetColgroup()) { for (int j = 0; j < table.getColgroup().size(); j++) { Colgroup cg = table.getColgroup().get(j); if (cg.isSetId() && cg.getId().equals(id)) { if (replace instanceof Colgroup) { table.getColgroup().set(j, (Colgroup) replace); return true; } else { throw new TagTypeUnmatchException(Colgroup.class, replace.getClass()); } } else { if (execute(id, cg, replace)) { return true; } } } } if (table.isSetTbody()) { for (int j = 0; j < table.getTbody().size(); j++) { Tbody tbody = table.getTbody().get(j); if (tbody.isSetId() && tbody.getId().equals(tbody)) { if (replace instanceof Tbody) { table.getTbody().set(j, (Tbody) replace); return true; } else { throw new TagTypeUnmatchException(Tbody.class, replace.getClass()); } } else { if (execute(id, tbody, replace)) { return true; } } } } if (table.isSetThead()) { Thead thead = table.getThead(); if (thead.isSetId() && thead.getId().equals(id)) { if (replace instanceof Thead) { table.setThead((Thead) replace); return true; } else { throw new TagTypeUnmatchException(Thead.class, replace.getClass()); } } else { if (execute(id, thead, replace)) { return true; } } } if (table.isSetTfoot()) { Tfoot tfoot = table.getTfoot(); if (tfoot.isSetId() && tfoot.getId().equals(id)) { if (replace instanceof Tfoot) { table.setTfoot((Tfoot) replace); return true; } else { throw new TagTypeUnmatchException(Tfoot.class, replace.getClass()); } } else { if (execute(id, tfoot, replace)) { return true; } } } if (table.isSetTr()) { for (int j = 0; j < table.getTr().size(); j++) { Tr tr = table.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { table.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TBODY: Tbody tbody = (Tbody) target; if (tbody.isSetTr()) { for (int j = 0; j < tbody.getTr().size(); j++) { Tr tr = tbody.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { tbody.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TD: Td td = (Td) target; if (td.isSetContent()) { return replaceByIdWithinObjectList(id, td.getContent(), replace); } break; case TEXTAREA: break; case TFOOT: Tfoot tfoot = (Tfoot) target; if (tfoot.isSetTr()) { for (int j = 0; j < tfoot.getTr().size(); j++) { Tr tr = tfoot.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { tfoot.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TH: Th th = (Th) target; if (th.isSetContent()) { return replaceByIdWithinObjectList(id, th.getContent(), replace); } break; case THEAD: Thead thead = (Thead) target; if (thead.isSetTr()) { for (int j = 0; j < thead.getTr().size(); j++) { Tr tr = thead.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { thead.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TITLE: break; case TR: Tr tr = (Tr) target; if (tr.isSetThOrTd()) { for (int j = 0; j < tr.getThOrTd().size(); j++) { Flow obj = tr.getThOrTd().get(j); if (id.equals(obj.getId())) { if (replace.getClass().equals(Td.class)) { tr.getThOrTd().set(j, (Td) replace); return true; } else if (replace.getClass().equals(Th.class)) { tr.getThOrTd().set(j, (Th) replace); return true; } else { throw new TagTypeUnmatchException(\"Td or Th expected, but replace is \" + replace.getClass()); } } else { if (execute(id, obj, replace)) { return true; } } } } break; case TT: Tt tt = (Tt) target; if (tt.isSetContent()) { return replaceByIdWithinObjectList(id, tt.getContent(), replace); } break; case U: U u = (U) target; if (u.isSetContent()) { return replaceByIdWithinObjectList(id, u.getContent(), replace); } break; case UL: Ul ul = (Ul) target; if (ul.isSetLi()) { for (int j = 0; j < ul.getLi().size(); j++) { Li li2 = ul.getLi().get(j); if (li2.isSetId() && li2.getId().equals(id)) { if (replace instanceof Li) { ul.getLi().set(j, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li2, replace)) { return true; } } } } break; case VAR: Var var = (Var) target; if (var.isSetContent()) { return replaceByIdWithinObjectList(id, var.getContent(), replace); } break; case ARTICLE: Article article = (Article) target; if (article.isSetContent()) { return replaceByIdWithinObjectList(id, article.getContent(), replace); } break; case ASIDE: Aside aside = (Aside) target; if (aside.isSetContent()) { return replaceByIdWithinObjectList(id, aside.getContent(), replace); } break; case AUDIO: Audio audio = (Audio) target; if (audio.isSetContent()) { return replaceByIdWithinObjectList(id, audio.getContent(), replace); } break; case BDI: Bdi bdi = (Bdi) target; if (bdi.isSetContent()) { return replaceByIdWithinObjectList(id, bdi.getContent(), replace); } break; case CANVAS: Canvas canvas = (Canvas) target; if (canvas.isSetContent()) { return replaceByIdWithinObjectList(id, canvas.getContent(), replace); } break; case COMMAND: break; case DATALIST: Datalist datalist = (Datalist) target; if (datalist.isSetContent()) { return replaceByIdWithinObjectList(id, datalist.getContent(), replace); } break; case DETAILS: Details details = (Details) target; if (details.isSetContent()) { return replaceByIdWithinObjectList(id, details.getContent(), replace); } break; case EMBED: break; case FIGCAPTION: Figcaption figcaption = (Figcaption) target; if (figcaption.isSetContent()) { return replaceByIdWithinObjectList(id, figcaption.getContent(), replace); } break; case FIGURE: Figure figure = (Figure) target; if (figure.isSetContent()) { return replaceByIdWithinObjectList(id, figure.getContent(), replace); } break; case FOOTER: Footer footer = (Footer) target; if (footer.isSetContent()) { return replaceByIdWithinObjectList(id, footer.getContent(), replace); } break; case HEADER: Header header = (Header) target; if (header.isSetContent()) { return replaceByIdWithinObjectList(id, header.getContent(), replace); } break; case KEYGEN: break; case MARK: Mark mark = (Mark) target; if (mark.isSetContent()) { return replaceByIdWithinObjectList(id, mark.getContent(), replace); } break; case METER: Meter meter = (Meter) target; if (meter.isSetContent()) { return replaceByIdWithinObjectList(id, meter.getContent(), replace); } break; case NAV: Nav nav = (Nav) target; if (nav.isSetContent()) { return replaceByIdWithinObjectList(id, nav.getContent(), replace); } break; case OUTPUT: Output output = (Output) target; if (output.isSetContent()) { return replaceByIdWithinObjectList(id, output.getContent(), replace); } break; case PROGRESS: Progress progress = (Progress) target; if (progress.isSetContent()) { return replaceByIdWithinObjectList(id, progress.getContent(), replace); } break; case RP: Rp rp = (Rp) target; if (rp.isSetContent()) { return replaceByIdWithinObjectList(id, rp.getContent(), replace); } break; case RT: Rt rt = (Rt) target; if (rt.isSetContent()) { return replaceByIdWithinObjectList(id, rt.getContent(), replace); } break; case RUBY: Ruby ruby = (Ruby) target; if (ruby.isSetContent()) { return replaceByIdWithinObjectList(id, ruby.getContent(), replace); } break; case SECTION: Section section = (Section) target; if (section.isSetContent()) { return replaceByIdWithinObjectList(id, section.getContent(), replace); } break; case SOURCE: break; case SUMMARY: Summary summary = (Summary) target; if (summary.isSetContent()) { return replaceByIdWithinObjectList(id, summary.getContent(), replace); } break; case TIME: Time time = (Time) target; if (time.isSetContent()) { return replaceByIdWithinObjectList(id, time.getContent(), replace); } break; case TRACK: break; case VIDEO: Video video = (Video) target; if (video.isSetContent()) { return replaceByIdWithinObjectList(id, video.getContent(), replace); } break; case WBR: break; } return false; }\nprivate static <T extends AbstractJaxb> boolean execute(String id, T target, java.lang.Object replace) throws TagTypeUnmatchException { TagEnum tagEnum = TagEnum.valueOf(target.getClass().getSimpleName().toUpperCase()); if (id.equals(target.getId())) { return false; } switch(tagEnum) { case A: A a = (A) target; if (a.isSetContent()) { return replaceByIdWithinObjectList(id, a.getContent(), replace); } break; case ABBR: Abbr abbr = (Abbr) target; if (abbr.isSetContent()) { return replaceByIdWithinObjectList(id, abbr.getContent(), replace); } break; case ACRONYM: Acronym acronym = (Acronym) target; if (acronym.isSetContent()) { return replaceByIdWithinObjectList(id, acronym.getContent(), replace); } break; case ADDRESS: Address address = (Address) target; if (address.isSetContent()) { return replaceByIdWithinObjectList(id, address.getContent(), replace); } break; case APPLET: Applet applet = (Applet) target; if (applet.isSetContent()) { return replaceByIdWithinObjectList(id, applet.getContent(), replace); } break; case AREA: break; case B: B b = (B) target; if (b.isSetContent()) { return replaceByIdWithinObjectList(id, b.getContent(), replace); } break; case BASE: break; case BASEFONT: break; case BDO: Bdo bdo = (Bdo) target; if (bdo.isSetContent()) { return replaceByIdWithinObjectList(id, bdo.getContent(), replace); } break; case BIG: Big big = (Big) target; if (big.isSetContent()) { return replaceByIdWithinObjectList(id, big.getContent(), replace); } break; case BLOCKQUOTE: Blockquote blockquote = (Blockquote) target; if (blockquote.isSetContent()) { return replaceByIdWithinObjectList(id, blockquote.getContent(), replace); } break; case BODY: Body body = (Body) target; if (body.isSetContent()) { return replaceByIdWithinObjectList(id, body.getContent(), replace); } break; case BR: break; case BUTTON: Button button = (Button) target; if (button.isSetContent()) { return replaceByIdWithinObjectList(id, button.getContent(), replace); } break; case CAPTION: Caption caption = (Caption) target; if (caption.isSetContent()) { return replaceByIdWithinObjectList(id, caption.getContent(), replace); } break; case CENTER: Center center = (Center) target; if (center.isSetContent()) { return replaceByIdWithinObjectList(id, center.getContent(), replace); } break; case CITE: Cite cite = (Cite) target; if (cite.isSetContent()) { return replaceByIdWithinObjectList(id, cite.getContent(), replace); } break; case CODE: Code code = (Code) target; if (code.isSetContent()) { return replaceByIdWithinObjectList(id, code.getContent(), replace); } break; case COL: break; case COLGROUP: Colgroup colgroup = (Colgroup) target; if (colgroup.isSetCol()) { for (int i = 0; i < colgroup.getCol().size(); i++) { Col col1 = colgroup.getCol().get(i); if (col1.isSetId() && col1.getId().equals(col1)) { if (replace instanceof Col) { colgroup.getCol().set(i, (Col) replace); return true; } else { throw new TagTypeUnmatchException(Col.class, replace.getClass()); } } } } break; case DD: Dd dd = (Dd) target; if (dd.isSetContent()) { return replaceByIdWithinObjectList(id, dd.getContent(), replace); } break; case DEL: Del del = (Del) target; if (del.isSetContent()) { return replaceByIdWithinObjectList(id, del.getContent(), replace); } break; case DFN: Dfn dfn = (Dfn) target; if (dfn.isSetContent()) { return replaceByIdWithinObjectList(id, dfn.getContent(), replace); } break; case DIR: Dir dir = (Dir) target; if (dir.isSetLi()) { for (int i = 0; i < dir.getLi().size(); i++) { Li li = dir.getLi().get(i); if (li.isSetId() && li.getId().equals(id)) { if (replace instanceof Li) { dir.getLi().set(i, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li, replace)) { return true; } } } } break; case DIV: Div div = (Div) target; if (div.isSetContent()) { return replaceByIdWithinObjectList(id, div.getContent(), replace); } break; case DL: Dl dl = (Dl) target; if (dl.isSetDtOrDd()) { for (int i = 0; i < dl.getDtOrDd().size(); i++) { AbstractJaxb obj = dl.getDtOrDd().get(i); if (id.equals(obj.getId())) { if (obj instanceof Dt || obj instanceof Dd) { dl.getDtOrDd().set(i, (AbstractJaxb) replace); return true; } else { throw new TagTypeUnmatchException(Dd.class, obj.getClass()); } } else { if (execute(id, obj, replace)) { return true; } } } } break; case DT: Dt dt = (Dt) target; if (dt.isSetContent()) { return replaceByIdWithinObjectList(id, dt.getContent(), replace); } break; case EM: Em em = (Em) target; if (em.isSetContent()) { return replaceByIdWithinObjectList(id, em.getContent(), replace); } break; case FIELDSET: Fieldset fieldset = (Fieldset) target; if (fieldset.isSetContent()) { return replaceByIdWithinObjectList(id, fieldset.getContent(), replace); } break; case FONT: Font font = (Font) target; if (font.isSetContent()) { return replaceByIdWithinObjectList(id, font.getContent(), replace); } break; case FORM: Form form = (Form) target; if (form.isSetContent()) { return replaceByIdWithinObjectList(id, form.getContent(), replace); } break; case H1: H1 h1 = (H1) target; if (h1.isSetContent()) { return replaceByIdWithinObjectList(id, h1.getContent(), replace); } break; case H2: H2 h2 = (H2) target; if (h2.isSetContent()) { return replaceByIdWithinObjectList(id, h2.getContent(), replace); } break; case H3: H3 h3 = (H3) target; if (h3.isSetContent()) { return replaceByIdWithinObjectList(id, h3.getContent(), replace); } break; case H4: H4 h4 = (H4) target; if (h4.isSetContent()) { return replaceByIdWithinObjectList(id, h4.getContent(), replace); } break; case H5: H5 h5 = (H5) target; if (h5.isSetContent()) { return replaceByIdWithinObjectList(id, h5.getContent(), replace); } break; case H6: H6 h6 = (H6) target; if (h6.isSetContent()) { return replaceByIdWithinObjectList(id, h6.getContent(), replace); } break; case HGROUP: Hgroup hgroup = (Hgroup) target; if (hgroup.isSetH1OrH2OrH3()) { for (AbstractJaxb aj : hgroup.getH1OrH2OrH3()) { if (execute(id, aj, replace)) { return true; } } } break; case HEAD: Head head = (Head) target; for (int j = 0; j < head.getContent().size(); j++) { AbstractJaxb obj = head.getContent().get(j); if (obj.isSetId() && obj.getId().equals(id)) { head.getContent().set(j, (AbstractJaxb) replace); return true; } else { if (execute(id, obj, replace)) { return true; } } } break; case HR: break; case HTML: Html html = (Html) target; if (html.isSetHead()) { if (execute(id, html.getHead(), replace)) { return true; } } if (html.isSetBody()) { if (execute(id, html.getBody(), replace)) { return true; } } break; case I: I i = (I) target; if (i.isSetContent()) { return replaceByIdWithinObjectList(id, i.getContent(), replace); } break; case IFRAME: Iframe iframe = (Iframe) target; if (iframe.isSetContent()) { return replaceByIdWithinObjectList(id, iframe.getContent(), replace); } break; case IMG: break; case INPUT: break; case INS: Ins ins = (Ins) target; if (ins.isSetContent()) { return replaceByIdWithinObjectList(id, ins.getContent(), replace); } break; case ISINDEX: break; case KBD: Kbd kbd = (Kbd) target; if (kbd.isSetContent()) { return replaceByIdWithinObjectList(id, kbd.getContent(), replace); } break; case LABEL: Label label = (Label) target; if (label.isSetContent()) { return replaceByIdWithinObjectList(id, label.getContent(), replace); } break; case LEGEND: Legend legend = (Legend) target; if (legend.isSetContent()) { return replaceByIdWithinObjectList(id, legend.getContent(), replace); } break; case LI: Li li = (Li) target; if (li.isSetContent()) { return replaceByIdWithinObjectList(id, li.getContent(), replace); } break; case LINK: break; case MAP: Map map = (Map) target; if (map.isSetArea()) { for (int j = 0; j < map.getArea().size(); j++) { Area area2 = map.getArea().get(j); if (area2.isSetId() && id.equals(area2.getId())) { map.getArea().set(j, (Area) replace); return true; } } } if (map.isSetPOrH1OrH2()) { for (int k = 0; k < map.getPOrH1OrH2().size(); k++) { AbstractJaxb obj = map.getPOrH1OrH2().get(k); if (id.equals(obj.getId())) { map.getPOrH1OrH2().set(k, (AbstractJaxb) replace); return true; } else { if (execute(id, obj, replace)) { return true; } } } } break; case MENU: Menu menu = (Menu) target; if (menu.isSetContent()) { return replaceByIdWithinObjectList(id, menu.getContent(), replace); } break; case META: break; case NOFRAMES: Noframes noframes = (Noframes) target; if (noframes.isSetContent()) { return replaceByIdWithinObjectList(id, noframes.getContent(), replace); } break; case NOSCRIPT: Noscript noscript = (Noscript) target; if (noscript.isSetContent()) { return replaceByIdWithinObjectList(id, noscript.getContent(), replace); } break; case OBJECT: org.mixer2.jaxb.xhtml.Object object = (org.mixer2.jaxb.xhtml.Object) target; if (object.isSetContent()) { return replaceByIdWithinObjectList(id, object.getContent(), replace); } break; case OL: Ol ol = (Ol) target; if (ol.isSetLi()) { for (int j = 0; j < ol.getLi().size(); j++) { Li li2 = ol.getLi().get(j); if (li2.isSetId() && li2.getId().equals(id)) { if (replace instanceof Li) { ol.getLi().set(j, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li2, replace)) { return true; } } } } break; case OPTGROUP: Optgroup optgroup = (Optgroup) target; if (optgroup.isSetOption()) { for (int j = 0; j < optgroup.getOption().size(); j++) { Option option = optgroup.getOption().get(j); if (option.isSetId() && option.getId().equals(id)) { if (replace instanceof Option) { optgroup.getOption().set(j, (Option) replace); return true; } else { throw new TagTypeUnmatchException(Option.class, replace.getClass()); } } else { if (execute(id, option, replace)) { return true; } } } } break; case OPTION: break; case P: P p = (P) target; if (p.isSetContent()) { return replaceByIdWithinObjectList(id, p.getContent(), replace); } break; case PARAM: break; case PRE: Pre pre = (Pre) target; if (pre.isSetContent()) { return replaceByIdWithinObjectList(id, pre.getContent(), replace); } break; case Q: Q q = (Q) target; if (q.isSetContent()) { return replaceByIdWithinObjectList(id, q.getContent(), replace); } break; case S: S s = (S) target; if (s.isSetContent()) { return replaceByIdWithinObjectList(id, s.getContent(), replace); } break; case SAMP: Samp samp = (Samp) target; if (samp.isSetContent()) { return replaceByIdWithinObjectList(id, samp.getContent(), replace); } break; case SCRIPT: break; case SELECT: Select select = (Select) target; if (select.isSetOptgroupOrOption()) { for (int j = 0; j < select.getOptgroupOrOption().size(); j++) { AbstractJaxb obj = select.getOptgroupOrOption().get(j); if (id.equals(obj.getId())) { if (obj.getClass().equals(Optgroup.class) || obj.getClass().equals(Option.class)) { select.getOptgroupOrOption().set(j, (AbstractJaxb) replace); } else { throw new TagTypeUnmatchException(\"Option or Optgroup expected, but replace is \" + replace.getClass()); } return true; } else { if (execute(id, obj, replace)) { return true; } } } } break; case SMALL: Small small = (Small) target; if (small.isSetContent()) { return replaceByIdWithinObjectList(id, small.getContent(), replace); } break; case SPAN: Span span = (Span) target; if (span.isSetContent()) { return replaceByIdWithinObjectList(id, span.getContent(), replace); } break; case STRIKE: Strike strike = (Strike) target; if (strike.isSetContent()) { return replaceByIdWithinObjectList(id, strike.getContent(), replace); } break; case STRONG: Strong strong = (Strong) target; if (strong.isSetContent()) { return replaceByIdWithinObjectList(id, strong.getContent(), replace); } break; case STYLE: break; case SUB: Sub sub = (Sub) target; if (sub.isSetContent()) { return replaceByIdWithinObjectList(id, sub.getContent(), replace); } break; case SUP: Sup sup = (Sup) target; if (sup.isSetContent()) { return replaceByIdWithinObjectList(id, sup.getContent(), replace); } break; case TABLE: Table table = (Table) target; if (table.isSetCaption()) { Caption capt = table.getCaption(); if (capt.isSetId() && id.equals(capt.getId())) { if (replace instanceof Caption) { table.setCaption((Caption) replace); return true; } else { throw new TagTypeUnmatchException(Caption.class, replace.getClass()); } } else { if (replaceByIdWithinObjectList(id, capt.getContent(), replace)) { return true; } } } if (table.isSetCol()) { for (int j = 0; j < table.getCol().size(); j++) { Col col2 = table.getCol().get(j); if (col2.isSetId() && col2.getId().equals(id)) { if (replace instanceof Col) { table.getCol().set(j, (Col) replace); return true; } else { throw new TagTypeUnmatchException(Col.class, replace.getClass()); } } } } if (table.isSetColgroup()) { for (int j = 0; j < table.getColgroup().size(); j++) { Colgroup cg = table.getColgroup().get(j); if (cg.isSetId() && cg.getId().equals(id)) { if (replace instanceof Colgroup) { table.getColgroup().set(j, (Colgroup) replace); return true; } else { throw new TagTypeUnmatchException(Colgroup.class, replace.getClass()); } } else { if (execute(id, cg, replace)) { return true; } } } } if (table.isSetTbody()) { for (int j = 0; j < table.getTbody().size(); j++) { Tbody tbody = table.getTbody().get(j); if (tbody.isSetId() && tbody.getId().equals(tbody)) { if (replace instanceof Tbody) { table.getTbody().set(j, (Tbody) replace); return true; } else { throw new TagTypeUnmatchException(Tbody.class, replace.getClass()); } } else { if (execute(id, tbody, replace)) { return true; } } } } if (table.isSetThead()) { Thead thead = table.getThead(); if (thead.isSetId() && thead.getId().equals(id)) { if (replace instanceof Thead) { table.setThead((Thead) replace); return true; } else { throw new TagTypeUnmatchException(Thead.class, replace.getClass()); } } else { if (execute(id, thead, replace)) { return true; } } } if (table.isSetTfoot()) { Tfoot tfoot = table.getTfoot(); if (tfoot.isSetId() && tfoot.getId().equals(id)) { if (replace instanceof Tfoot) { table.setTfoot((Tfoot) replace); return true; } else { throw new TagTypeUnmatchException(Tfoot.class, replace.getClass()); } } else { if (execute(id, tfoot, replace)) { return true; } } } if (table.isSetTr()) { for (int j = 0; j < table.getTr().size(); j++) { Tr tr = table.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { table.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TBODY: Tbody tbody = (Tbody) target; if (tbody.isSetTr()) { for (int j = 0; j < tbody.getTr().size(); j++) { Tr tr = tbody.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { tbody.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TD: Td td = (Td) target; if (td.isSetContent()) { return replaceByIdWithinObjectList(id, td.getContent(), replace); } break; case TEXTAREA: break; case TFOOT: Tfoot tfoot = (Tfoot) target; if (tfoot.isSetTr()) { for (int j = 0; j < tfoot.getTr().size(); j++) { Tr tr = tfoot.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { tfoot.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TH: Th th = (Th) target; if (th.isSetContent()) { return replaceByIdWithinObjectList(id, th.getContent(), replace); } break; case THEAD: Thead thead = (Thead) target; if (thead.isSetTr()) { for (int j = 0; j < thead.getTr().size(); j++) { Tr tr = thead.getTr().get(j); if (tr.isSetId() && tr.getId().equals(id)) { if (replace instanceof Tr) { thead.getTr().set(j, (Tr) replace); return true; } else { throw new TagTypeUnmatchException(Tr.class, replace.getClass()); } } else { if (execute(id, tr, replace)) { return true; } } } } break; case TITLE: break; case TR: Tr tr = (Tr) target; if (tr.isSetThOrTd()) { for (int j = 0; j < tr.getThOrTd().size(); j++) { Flow obj = tr.getThOrTd().get(j); if (id.equals(obj.getId())) { if (replace.getClass().equals(Td.class)) { tr.getThOrTd().set(j, (Td) replace); return true; } else if (replace.getClass().equals(Th.class)) { tr.getThOrTd().set(j, (Th) replace); return true; } else { throw new TagTypeUnmatchException(\"Td or Th expected, but replace is \" + replace.getClass()); } } else { if (execute(id, obj, replace)) { return true; } } } } break; case TT: Tt tt = (Tt) target; if (tt.isSetContent()) { return replaceByIdWithinObjectList(id, tt.getContent(), replace); } break; case U: U u = (U) target; if (u.isSetContent()) { return replaceByIdWithinObjectList(id, u.getContent(), replace); } break; case UL: Ul ul = (Ul) target; if (ul.isSetLi()) { for (int j = 0; j < ul.getLi().size(); j++) { Li li2 = ul.getLi().get(j); if (li2.isSetId() && li2.getId().equals(id)) { if (replace instanceof Li) { ul.getLi().set(j, (Li) replace); return true; } else { throw new TagTypeUnmatchException(Li.class, replace.getClass()); } } else { if (execute(id, li2, replace)) { return true; } } } } break; case VAR: Var var = (Var) target; if (var.isSetContent()) { return replaceByIdWithinObjectList(id, var.getContent(), replace); } break; case ARTICLE: Article article = (Article) target; if (article.isSetContent()) { return replaceByIdWithinObjectList(id, article.getContent(), replace); } break; case ASIDE: Aside aside = (Aside) target; if (aside.isSetContent()) { return replaceByIdWithinObjectList(id, aside.getContent(), replace); } break; case AUDIO: Audio audio = (Audio) target; if (audio.isSetContent()) { return replaceByIdWithinObjectList(id, audio.getContent(), replace); } break; case BDI: Bdi bdi = (Bdi) target; if (bdi.isSetContent()) { return replaceByIdWithinObjectList(id, bdi.getContent(), replace); } break; case CANVAS: Canvas canvas = (Canvas) target; if (canvas.isSetContent()) { return replaceByIdWithinObjectList(id, canvas.getContent(), replace); } break; case COMMAND: break; case DATALIST: Datalist datalist = (Datalist) target; if (datalist.isSetContent()) { return replaceByIdWithinObjectList(id, datalist.getContent(), replace); } break; case DETAILS: Details details = (Details) target; if (details.isSetContent()) { return replaceByIdWithinObjectList(id, details.getContent(), replace); } break; case EMBED: break; case FIGCAPTION: Figcaption figcaption = (Figcaption) target; if (figcaption.isSetContent()) { return replaceByIdWithinObjectList(id, figcaption.getContent(), replace); } break; case FIGURE: Figure figure = (Figure) target; if (figure.isSetContent()) { return replaceByIdWithinObjectList(id, figure.getContent(), replace); } break; case FOOTER: Footer footer = (Footer) target; if (footer.isSetContent()) { return replaceByIdWithinObjectList(id, footer.getContent(), replace); } break; case HEADER: Header header = (Header) target; if (header.isSetContent()) { return replaceByIdWithinObjectList(id, header.getContent(), replace); } break; case KEYGEN: break; case MARK: Mark mark = (Mark) target; if (mark.isSetContent()) { return replaceByIdWithinObjectList(id, mark.getContent(), replace); } break; case METER: Meter meter = (Meter) target; if (meter.isSetContent()) { return replaceByIdWithinObjectList(id, meter.getContent(), replace); } break; case NAV: Nav nav = (Nav) target; if (nav.isSetContent()) { return replaceByIdWithinObjectList(id, nav.getContent(), replace); } break; case OUTPUT: Output output = (Output) target; if (output.isSetContent()) { return replaceByIdWithinObjectList(id, output.getContent(), replace); } break; case PROGRESS: Progress progress = (Progress) target; if (progress.isSetContent()) { return replaceByIdWithinObjectList(id, progress.getContent(), replace); } break; case RP: Rp rp = (Rp) target; if (rp.isSetContent()) { return replaceByIdWithinObjectList(id, rp.getContent(), replace); } break; case RT: Rt rt = (Rt) target; if (rt.isSetContent()) { return replaceByIdWithinObjectList(id, rt.getContent(), replace); } break; case RUBY: Ruby ruby = (Ruby) target; if (ruby.isSetContent()) { return replaceByIdWithinObjectList(id, ruby.getContent(), replace); } break; case SECTION: Section section = (Section) target; if (section.isSetContent()) { return replaceByIdWithinObjectList(id, section.getContent(), replace); } break; case SOURCE: break; case SUMMARY: Summary summary = (Summary) target; if (summary.isSetContent()) { return replaceByIdWithinObjectList(id, summary.getContent(), replace); } break; case TIME: Time time = (Time) target; if (time.isSetContent()) { return replaceByIdWithinObjectList(id, time.getContent(), replace); } break; case TRACK: break; case VIDEO: Video video = (Video) target; if (video.isSetContent()) { return replaceByIdWithinObjectList(id, video.getContent(), replace); } break; case WBR: break; } return false; }",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 778
                },
                {
                        "id": "pretrain_java_data_12720595",
                        "content": "<reponame>jfut/mixer2<filename>src/main/java/org/mixer2/xhtml/util/UnsetIdUtil.java<gh_stars>0\npackage org.mixer2.xhtml.util;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.mixer2.jaxb.xhtml.*;\nimport org.mixer2.xhtml.AbstractJaxb;\nimport org.mixer2.xhtml.TagEnum;\n/**\n*\n* @see org.mixer2.xhtml.AbstractJaxb#unsetAllId()\n* @see org.mixer2.xhtml.AbstractJaxb#unsetAllId(Pattern)\n* @author watanabe\n*\n*/\npublic class UnsetIdUtil {\npublic static <T extends AbstractJaxb> void unsetAllId(T target) {\nexecute(target, null);\n}\npublic static <T extends AbstractJaxb> void unsetAllId(T target,\nPattern pattern) {\nexecute(target, pattern);\n}\n@SuppressWarnings(\"unchecked\")\nprivate static <T extends AbstractJaxb> void unsetAllIdWithinObjectList(\nList<java.lang.Object> list, Pattern pattern) {\nfor (java.lang.Object obj : list) {\nif (obj instanceof AbstractJaxb) {\nexecute((T) obj, pattern);\n}\n}\n}\nprivate static boolean idMatch(String id, Pattern pattern) {\nif (pattern == null || id == null) {\nreturn true;\n}\nif (pattern.matcher(id).matches()) {\nreturn true;\n} else {\nreturn false;\n}\n}\nprivate static <T extends AbstractJaxb> void execute(T target,\nPattern pattern) {\nTagEnum tagEnum = TagEnum.valueOf(target.getClass().getSimpleName()\n.toUpperCase());\nswitch (tagEnum) {\ncase A:\nA a = (A) target;\nif (idMatch(a.getId(), pattern)) {\na.setId(null);\n}\nunsetAllIdWithinObjectList(a.getContent(), pattern);\nbreak;\ncase ABBR:\nAbbr abbr = (Abbr) target;\nif (idMatch(abbr.getId(), pattern)) {\nabbr.setId(null);\n}\nunsetAllIdWithinObjectList(abbr.getContent(), pattern);\nbreak;\ncase ACRONYM:\nAcronym acronym = (Acronym) target;\nif (idMatch(acronym.getId(), pattern)) {\nacronym.setId(null);\n}\nunsetAllIdWithinObjectList(acronym.getContent(), pattern);\nbreak;\ncase ADDRESS:\nAddress address = (Address) target;\nif (idMatch(address.getId(), pattern)) {\naddress.setId(null);\n}\nunsetAllIdWithinObjectList(address.getContent(), pattern);\nbreak;\ncase APPLET:\nApplet applet = (Applet) target;\nif (idMatch(applet.getId(), pattern)) {\napplet.setId(null);\n}\nunsetAllIdWithinObjectList(applet.getContent(), pattern);\nbreak;\ncase AREA:\nArea area = (Area) target;\nif (idMatch(area.getId(), pattern)) {\narea.setId(null);\n}\n// area is empty element.\nbreak;\ncase B:\nB b = (B) target;\nif (idMatch(b.getId(), pattern)) {\nb.setId(null);\n}\nunsetAllIdWithinObjectList(b.getContent(), pattern);\nbreak;\ncase BASE:\nBase base = (Base) target;\nif (idMatch(base.getId(), pattern)) {\nbase.setId(null);\n}\n// empty element.\nbreak;\ncase BASEFONT:\nBasefont basefont = (Basefont) target;\nif (idMatch(basefont.getId(), pattern)) {\nbasefont.setId(null);\n}\n// empty element.\nbreak;\ncase BDO:\nBdo bdo = (Bdo) target;\nif (idMatch(bdo.getId(), pattern)) {\nbdo.setId(null);\n}\nunsetAllIdWithinObjectList(bdo.getContent(), pattern);\nbreak;\ncase BIG:\nBig big = (Big) target;\nif (idMatch(big.getId(), pattern)) {\nbig.setId(null);\n}\nunsetAllIdWithinObjectList(big.getContent(), pattern);\nbreak;\ncase BLOCKQUOTE:\nBlockquote blockquote = (Blockquote) target;\nif (idMatch(blockquote.getId(), pattern)) {\nblockquote.setId(null);\n}\nunsetAllIdWithinObjectList(blockquote.getContent(), pattern);\nbreak;\ncase BODY:\nBody body = (Body) target;\nif (idMatch(body.getId(), pattern)) {\nbody.setId(null);\n}\nunsetAllIdWithinObjectList(body.getContent(), pattern);\nbreak;\ncase BR:\nBr br = (Br) target;\nif (idMatch(br.getId(), pattern)) {\nbr.setId(null);\n}\n// empty element.\nbreak;\ncase BUTTON:\nButton button = (Button) target;\nif (idMatch(button.getId(), pattern)) {\nbutton.setId(null);\n}\nunsetAllIdWithinObjectList(button.getContent(), pattern);\nbreak;\ncase CAPTION:\nCaption caption = (Caption) target;\nif (idMatch(caption.getId(), pattern)) {\ncaption.setId(null);\n}\nunsetAllIdWithinObjectList(caption.getContent(), pattern);\nbreak;\ncase CENTER:\nCenter center = (Center) target;\nif (idMatch(center.getId(), pattern)) {\ncenter.setId(null);\n}\nunsetAllIdWithinObjectList(center.getContent(), pattern);\nbreak;\ncase CITE:\nCite cite = (Cite) target;\nif (idMatch(cite.getId(), pattern)) {\ncite.setId(null);\n}\nunsetAllIdWithinObjectList(cite.getContent(), pattern);\nbreak;\ncase CODE:\nCode code = (Code) target;\nif (idMatch(code.getId(), pattern)) {\ncode.setId(null);\n}\nunsetAllIdWithinObjectList(code.getContent(), pattern);\nbreak;\ncase COL:\nCol col = (Col) target;\nif (idMatch(col.getId(), pattern)) {\ncol.setId(null);\n}\n// empty element.\nbreak;\ncase COLGROUP:\nColgroup colgroup = (Colgroup) target;\nif (idMatch(colgroup.getId(), pattern)) {\ncolgroup.setId(null);\n}\nfor (Col tmpcol : colgroup.getCol()) {\nexecute(tmpcol, pattern);\n}\nbreak;\ncase DD:\nDd dd = (Dd) target;\nif (idMatch(dd.getId(), pattern)) {\ndd.setId(null);\n}\nunsetAllIdWithinObjectList(dd.getContent(), pattern);\nbreak;\ncase DEL:\nDel del = (Del) target;\nif (idMatch(del.getId(), pattern)) {\ndel.setId(null);\n}\nunsetAllIdWithinObjectList(del.getContent(), pattern);\nbreak;\ncase DFN:\nDfn dfn = (Dfn) target;\nif (idMatch(dfn.getId(), pattern)) {\ndfn.setId(null);\n}\nunsetAllIdWithinObjectList(dfn.getContent(), pattern);\nbreak;\ncase DIR:\nDir dir = (Dir) target;\nif (idMatch(dir.getId(), pattern)) {\ndir.setId(null);\n}\nfor (Li tmpli : dir.getLi()) {\nexecute(tmpli, pattern);\n}\nbreak;\ncase DIV:\nDiv div = (Div) target;\nif (idMatch(div.getId(), pattern)) {\ndiv.setId(null);\n}\nunsetAllIdWithinObjectList(div.getContent(), pattern);\nbreak;\ncase DL:\nDl dl = (Dl) target;\nif (idMatch(dl.getId(), pattern)) {\ndl.setId(null);\n}\nfor (AbstractJaxb aj : dl.getDtOrDd()) {\nexecute(aj, pattern);\n}\nbreak;\ncase DT:\nDt dt = (Dt) target;\nif (idMatch(dt.getId(), pattern)) {\ndt.setId(null);\n}\nunsetAllIdWithinObjectList(dt.getContent(), pattern);\nbreak;\ncase EM:\nEm em = (Em) target;\nif (idMatch(em.getId(), pattern)) {\nem.setId(null);\n}\nunsetAllIdWithinObjectList(em.getContent(), pattern);\nbreak;\ncase FIELDSET:\nFieldset fieldset = (Fieldset) target;\nif (idMatch(fieldset.getId(), pattern)) {\nfieldset.setId(null);\n}\nunsetAllIdWithinObjectList(fieldset.getContent(), pattern);\nbreak;\ncase FONT:\nFont font = (Font) target;\nif (idMatch(font.getId(), pattern)) {\nfont.setId(null);\n}\nunsetAllIdWithinObjectList(font.getContent(), pattern);\nbreak;\ncase FORM:\nForm form = (Form) target;\nif (idMatch(form.getId(), pattern)) {\nform.setId(null);\n}\nunsetAllIdWithinObjectList(form.getContent(), pattern);\nbreak;\ncase H1:\nH1 h1 = (H1) target;\nif (idMatch(h1.getId(), pattern)) {\nh1.setId(null);\n}\nunsetAllIdWithinObjectList(h1.getContent(), pattern);\nbreak;\ncase H2:\nH2 h2 = (H2) target;\nif (idMatch(h2.getId(), pattern)) {\nh2.setId(null);\n}\nunsetAllIdWithinObjectList(h2.getContent(), pattern);\nbreak;\ncase H3:\nH3 h3 = (H3) target;\nif (idMatch(h3.getId(), pattern)) {\nh3.setId(null);\n}\nunsetAllIdWithinObjectList(h3.getContent(), pattern);\nbreak;\ncase H4:\nH4 h4 = (H4) target;\nif (idMatch(h4.getId(), pattern)) {\nh4.setId(null);\n}\nunsetAllIdWithinObjectList(h4.getContent(), pattern);\nbreak;\ncase H5:\nH5 h5 = (H5) target;\nif (idMatch(h5.getId(), pattern)) {\nh5.setId(null);\n}\nunsetAllIdWithinObjectList(h5.getContent(), pattern);\nbreak;\ncase H6:\nH6 h6 = (H6) target;\nif (idMatch(h6.getId(), pattern)) {\nh6.setId(null);\n}\nunsetAllIdWithinObjectList(h6.getContent(), pattern);\nbreak;\ncase HGROUP:\nHgroup hgroup = (Hgroup) target;\nif (idMatch(hgroup.getId(), pattern)) {\nhgroup.setId(null);\n}\nfor (AbstractJaxb aj : hgroup.getH1OrH2OrH3()) {\nexecute(aj, pattern);\n}\nbreak;\ncase HEAD:\nHead head = (Head) target;\nif (idMatch(head.getId(), pattern)) {\nhead.setId(null);\n}\nfor (AbstractJaxb aj : head.getContent()) {\nexecute(aj, pattern);\n}\nbreak;\ncase HR:\nHr hr = (Hr) target;\nif (idMatch(hr.getId(), pattern)) {\nhr.setId(null);\n}\n// hr is empty element.\nbreak;\ncase HTML:\nHtml html = (Html) target;\nif (idMatch(html.getId(), pattern)) {\nhtml.setId(null);\n}\nexecute(html.getHead(), pattern);\nexecute(html.getBody(), pattern);\nbreak;\ncase I:\nI i = (I) target;\nif (idMatch(i.getId(), pattern)) {\ni.setId(null);\n}\nunsetAllIdWithinObjectList(i.getContent(), pattern);\nbreak;\ncase IFRAME:\nIframe iframe = (Iframe) target;\nif (idMatch(iframe.getId(), pattern)) {\niframe.setId(null);\n}\nunsetAllIdWithinObjectList(iframe.getContent(), pattern);\nbreak;\ncase IMG:\nImg img = (Img) target;\nif (idMatch(img.getId(), pattern)) {\nimg.setId(null);\n}\n// img is empty element.\nbreak;\ncase INPUT:\nInput input = (Input) target;\nif (idMatch(input.getId(), pattern)) {\ninput.setId(null);\n}\n// input is empty element.\nbreak;\ncase INS:\nIns ins = (Ins) target;\nif (idMatch(ins.getId(), pattern)) {\nins.setId(null);\n}\nunsetAllIdWithinObjectList(ins.getContent(), pattern);\nbreak;\ncase ISINDEX:\nIsindex isindex = (Isindex) target;\nif (idMatch(isindex.getId(), pattern)) {\nisindex.setId(null);\n}\n// empty element.\nbreak;\ncase KBD:\nKbd kbd = (Kbd) target;\nif (idMatch(kbd.getId(), pattern)) {\nkbd.setId(null);\n}\nunsetAllIdWithinObjectList(kbd.getContent(), pattern);\nbreak;\ncase LABEL:\nLabel label = (Label) target;\nif (idMatch(label.getId(), pattern)) {\nlabel.setId(null);\n}\nunsetAllIdWithinObjectList(label.getContent(), pattern);\nbreak;\ncase LEGEND:\nLegend legend = (Legend) target;\nif (idMatch(legend.getId(), pattern)) {\nlegend.setId(null);\n}\nunsetAllIdWithinObjectList(legend.getContent(), pattern);\nbreak;\ncase LI:\nLi li = (Li) target;\nif (idMatch(li.getId(), pattern)) {\nli.setId(null);\n}\nunsetAllIdWithinObjectList(li.getContent(), pattern);\nbreak;\ncase LINK:\nLink link = (Link) target;\nif (idMatch(link.getId(), pattern)) {\nlink.setId(null);\n}\n// empty element.\nbreak;\ncase MAP:\nMap map = (Map) target;\nif (idMatch(map.getId(), pattern)) {\nmap.setId(null);\n}\nfor (Area tmpArea : map.getArea()) {\nexecute(tmpArea, pattern);\n}\nbreak;\ncase MENU:\nMenu menu = (Menu) target;\nif (idMatch(menu.getId(), pattern)) {\nmenu.setId(null);\n}\nunsetAllIdWithinObjectList(menu.getContent(), pattern);\nbreak;\ncase META:\nMeta meta = (Meta) target;\nif (idMatch(meta.getId(), pattern)) {\nmeta.setId(null);\n}\n// empty element.\nbreak;\ncase NOFRAMES:\nNoframes noframes = (Noframes) target;\nif (idMatch(noframes.getId(), pattern)) {\nnoframes.setId(null);\n}\nunsetAllIdWithinObjectList(noframes.getContent(), pattern);\nbreak;\ncase NOSCRIPT:\nNoscript noscript = (Noscript) target;\nif (idMatch(noscript.getId(), pattern)) {\nnoscript.setId(null);\n}\nunsetAllIdWithinObjectList(noscript.getContent(), pattern);\nbreak;\ncase OBJECT:\norg.mixer2.jaxb.xhtml.Object object = (org.mixer2.jaxb.xhtml.Object) target;\nif (idMatch(object.getId(), pattern)) {\nobject.setId(null);\n}\nunsetAllIdWithinObjectList(object.getContent(), pattern);\nbreak;\ncase OL:\nOl ol = (Ol) target;\nif (idMatch(ol.getId(), pattern)) {\nol.setId(null);\n}\nfor (Li tmpli : ol.getLi()) {\nexecute(tmpli, pattern);\n}\nbreak;\ncase OPTGROUP:\nOptgroup optgroup = (Optgroup) target;\nif (idMatch(optgroup.getId(), pattern)) {\noptgroup.setId(null);\n}\nfor (Option tmpOption : optgroup.getOption()) {\nexecute(tmpOption, pattern);\n}\nbreak;\ncase OPTION:\nOption option = (Option) target;\nif (idMatch(option.getId(), pattern)) {\noption.setId(null);\n}\n// option tag includes no other element.\nbreak;\ncase P:\nP p = (P) target;\nif (idMatch(p.getId(), pattern)) {\np.setId(null);\n}\nunsetAllIdWithinObjectList(p.getContent(), pattern);\nbreak;\ncase PARAM:\nParam param = (Param) target;\nif (idMatch(param.getId(), pattern)) {\nparam.setId(null);\n}\n// empty element.\nbreak;\ncase PRE:\nPre pre = (Pre) target;\nif (idMatch(pre.getId(), pattern)) {\npre.setId(null);\n}\nunsetAllIdWithinObjectList(pre.getContent(), pattern);\nbreak;\ncase Q:\nQ q = (Q) target;\nif (idMatch(q.getId(), pattern)) {\nq.setId(null);\n}\nunsetAllIdWithinObjectList(q.getContent(), pattern);\nbreak;\ncase S:\nS s = (S) target;\nif (idMatch(s.getId(), pattern)) {\ns.setId(null);\n}\nunsetAllIdWithinObjectList(s.getContent(), pattern);\nbreak;\ncase SAMP:\nSamp samp = (Samp) target;\nif (idMatch(samp.getId(), pattern)) {\nsamp.setId(null);\n}\nunsetAllIdWithinObjectList(samp.getContent(), pattern);\nbreak;\ncase SCRIPT:\nScript script = (Script) target;\nif (idMatch(script.getId(), pattern)) {\nscript.setId(null);\n}\n// script include no other element.\nbreak;\ncase SELECT:\nSelect select = (Select) target;\nif (idMatch(select.getId(), pattern)) {\nselect.setId(null);\n}\nfor (AbstractJaxb aj : select.getOptgroupOrOption()) {\nexecute(aj, pattern);\n}\nbreak;\ncase SMALL:\nSmall small = (Small) target;\nif (idMatch(small.getId(), pattern)) {\nsmall.setId(null);\n}\nunsetAllIdWithinObjectList(small.getContent(), pattern);\nbreak;\ncase SPAN:\nSpan span = (Span) target;\nif (idMatch(span.getId(), pattern)) {\nspan.setId(null);\n}\nunsetAllIdWithinObjectList(span.getContent(), pattern);\nbreak;\ncase STRIKE:\nStrike strike = (Strike) target;\nif (idMatch(strike.getId(), pattern)) {\nstrike.setId(null);\n}\nunsetAllIdWithinObjectList(strike.getContent(), pattern);\nbreak;\ncase STRONG:\nStrong strong = (Strong) target;\nif (idMatch(strong.getId(), pattern)) {\nstrong.setId(null);\n}\nunsetAllIdWithinObjectList(strong.getContent(), pattern);\nbreak;\ncase STYLE:\nStyle style = (Style) target;\nif (idMatch(style.getId(), pattern)) {\nstyle.setId(null);\n}\n// has no other element.\nbreak;\ncase SUB:\nSub sub = (Sub) target;\nif (idMatch(sub.getId(), pattern)) {\nsub.setId(null);\n}\nunsetAllIdWithinObjectList(sub.getContent(), pattern);\nbreak;\ncase SUP:\nSup sup = (Sup) target;\nif (idMatch(sup.getId(), pattern)) {\nsup.setId(null);\n}\nunsetAllIdWithinObjectList(sup.getContent(), pattern);\nbreak;\ncase TABLE:\nTable table = (Table) target;\nif (idMatch(table.getId(), pattern)) {\ntable.setId(null);\n}\nif (table.isSetCaption()) {\nexecute(table.getCaption(), pattern);\n}\nfor (Col tmpCol : table.getCol()) {\nexecute(tmpCol, pattern);\n}\nfor (Colgroup tmpColgroup : table.getColgroup()) {\nexecute(tmpColgroup, pattern);\n}\nfor (Tbody tmpTbody : table.getTbody()) {\nexecute(tmpTbody, pattern);\n}\nif (table.isSetThead()) {\nexecute(table.getThead(), pattern);\n}\nif (table.isSetTfoot()) {\nexecute(table.getTfoot(), pattern);\n}\nfor (Tr tmpTr : table.getTr()) {\nexecute(tmpTr, pattern);\n}\nbreak;\ncase TBODY:\nTbody tbody = (Tbody) target;\nif (idMatch(tbody.getId(), pattern)) {\ntbody.setId(null);\n}\nfor (Tr tmpTr : tbody.getTr()) {\nexecute(tmpTr, pattern);\n}\nbreak;\ncase TD:\nTd td = (Td) target;\nif (idMatch(td.getId(), pattern)) {\ntd.setId(null);\n}\nunsetAllIdWithinObjectList(td.getContent(), pattern);\nbreak;\ncase TEXTAREA:\nTextarea textarea = (Textarea) target;\nif (idMatch(textarea.getId(), pattern)) {\ntextarea.setId(null);\n}\n// textarea has no other element.\nbreak;\ncase TFOOT:\nTfoot tfoot = (Tfoot) target;\nif (idMatch(tfoot.getId(), pattern)) {\ntfoot.setId(null);\n}\nfor (Tr tmpTr : tfoot.getTr()) {\nexecute(tmpTr, pattern);\n}\nbreak;\ncase TH:\nTh th = (Th) target;\nif (idMatch(th.getId(), pattern)) {\nth.setId(null);\n}\nunsetAllIdWithinObjectList(th.getContent(), pattern);\nbreak;\ncase THEAD:\nThead thead = (Thead) target;\nif (idMatch(thead.getId(), pattern)) {\nthead.setId(null);\n}\nfor (Tr tmpTr : thead.getTr()) {\nexecute(tmpTr, pattern);\n}\nbreak;\ncase TITLE:\nTitle title = (Title) target;\nif (idMatch(title.getId(), pattern)) {\ntitle.setId(null);\n}\n// has no other element.\nbreak;\ncase TR:\nTr tr = (Tr) target;\nif (idMatch(tr.getId(), pattern)) {\ntr.setId(null);\n}\nfor (AbstractJaxb aj : tr.getThOrTd()) {\nexecute(aj, pattern);\n}\nbreak;\ncase TT:\nTt tt = (Tt) target;\nif (idMatch(tt.getId(), pattern)) {\ntt.setId(null);\n}\nunsetAllIdWithinObjectList(tt.getContent(), pattern);\nbreak;\ncase U:\nU u = (U) target;\nif (idMatch(u.getId(), pattern)) {\nu.setId(null);\n}\nunsetAllIdWithinObjectList(u.getContent(), pattern);\nbreak;\ncase UL:\nUl ul = (Ul) target;\nif (idMatch(ul.getId(), pattern)) {\nul.setId(null);\n}\nfor (Li tmpLi : ul.getLi()) {\nexecute(tmpLi, pattern);\n}\nbreak;\ncase VAR:\nVar var = (Var) target;\nif (idMatch(var.getId(), pattern)) {\nvar.setId(null);\n}\nunsetAllIdWithinObjectList(var.getContent(), pattern);\nbreak;\ncase ARTICLE:\nArticle article = (Article) target;\nif (idMatch(article.getId(), pattern)) {\narticle.setId(null);\n}\nunsetAllIdWithinObjectList(article.getContent(), pattern);\nbreak;\ncase ASIDE:\nAside aside = (Aside) target;\nif (idMatch(aside.getId(), pattern)) {\naside.setId(null);\n}\nunsetAllIdWithinObjectList(aside.getContent(), pattern);\nbreak;\ncase AUDIO:\nAudio audio = (Audio) target;\nif (idMatch(audio.getId(), pattern)) {\naudio.setId(null);\n}\nunsetAllIdWithinObjectList(audio.getContent(), pattern);\nbreak;\ncase BDI:\nBdi bdi = (Bdi) target;\nif (idMatch(bdi.getId(), pattern)) {\nbdi.setId(null);\n}\nunsetAllIdWithinObjectList(bdi.getContent(), pattern);\nbreak;\ncase CANVAS:\nCanvas canvas = (Canvas) target;\nif (idMatch(canvas.getId(), pattern)) {\ncanvas.setId(null);\n}\nunsetAllIdWithinObjectList(canvas.getContent(), pattern);\nbreak;\ncase COMMAND:\nCommand command = (Command) target;\nif (idMatch(command.getId(), pattern)) {\ncommand.setId(null);\n}\n// empty element\nbreak;\ncase DATALIST:\nDatalist datalist = (Datalist) target;\nif (idMatch(datalist.getId(), pattern)) {\ndatalist.setId(null);\n}\nunsetAllIdWithinObjectList(datalist.getContent(), pattern);\nbreak;\ncase DETAILS:\nDetails details = (Details) target;\nif (idMatch(details.getId(), pattern)) {\ndetails.setId(null);\n}\nunsetAllIdWithinObjectList(details.getContent(), pattern);\nbreak;\ncase EMBED:\nEmbed embed = (Embed) target;\nif (idMatch(embed.getId(), pattern)) {\nembed.setId(null);\n}\n// empty element\nbreak;\ncase FIGCAPTION:\nFigcaption figcaption = (Figcaption)target;\nif (idMatch(figcaption.getId(), pattern)) {\nfigcaption.setId(null);\n}\nunsetAllIdWithinObjectList(figcaption.getContent(), pattern);\nbreak;\ncase FIGURE:\nFigure figure = (Figure)target;\nif (idMatch(figure.getId(), pattern)) {\nfigure.setId(null);\n}\nunsetAllIdWithinObjectList(figure.getContent(), pattern);\nbreak;\ncase FOOTER:\nFooter footer = (Footer) target;\nif (idMatch(footer.getId(), pattern)) {\nfooter.setId(null);\n}\nunsetAllIdWithinObjectList(footer.getContent(), pattern);\nbreak;\ncase HEADER:\nHeader header = (Header) target;\nif (idMatch(header.getId(), pattern)) {\nheader.setId(null);\n}\nunsetAllIdWithinObjectList(header.getContent(), pattern);\nbreak;\ncase KEYGEN:\nKeygen keygen = (Keygen)target;\nif (idMatch(keygen.getId(), pattern)) {\nkeygen.setId(null);\n}\n// empty element\nbreak;\ncase MARK:\nMark mark = (Mark)target;\nif (idMatch(mark.getId(), pattern)) {\nmark.setId(null);\n}\nunsetAllIdWithinObjectList(mark.getContent(), pattern);\nbreak;\ncase METER:\nMeter meter = (Meter)target;\nif (idMatch(meter.getId(), pattern)) {\nmeter.setId(null);\n}\nunsetAllIdWithinObjectList(meter.getContent(), pattern);\nbreak;\ncase NAV:\nNav nav = (Nav)target;\nif (idMatch(nav.getId(), pattern)) {\nnav.setId(null);\n}\nunsetAllIdWithinObjectList(nav.getContent(), pattern);\nbreak;\ncase OUTPUT:\nOutput output = (Output)target;\nif (idMatch(output.getId(), pattern)) {\noutput.setId(null);\n}\nunsetAllIdWithinObjectList(output.getContent(), pattern);\nbreak;\ncase PROGRESS:\nProgress progress = (Progress)target;\nif (idMatch(progress.getId(), pattern)) {\nprogress.setId(null);\n}\nunsetAllIdWithinObjectList(progress.getContent(), pattern);\nbreak;\ncase RP:\nRp rp = (Rp) target;\nif (idMatch(rp.getId(), pattern)) {\nrp.setId(null);\n}\nunsetAllIdWithinObjectList(rp.getContent(), pattern);\nbreak;\ncase RT:\nRt rt = (Rt)target;\nif (idMatch(rt.getId(), pattern)) {\nrt.setId(null);\n}\nunsetAllIdWithinObjectList(rt.getContent(), pattern);\nbreak;\ncase RUBY:\nRuby ruby = (Ruby)target;\nif (idMatch(ruby.getId(), pattern)) {\nruby.setId(null);\n}\nunsetAllIdWithinObjectList(ruby.getContent(), pattern);\nbreak;\ncase SECTION:\nSection section = (Section)target;\nif (idMatch(section.getId(), pattern)) {\nsection.setId(null);\n}\nunsetAllIdWithinObjectList(section.getContent(), pattern);\nbreak;\ncase SOURCE:\nSource source = (Source)target;\nif (idMatch(source.getId(), pattern)) {\nsource.setId(null);\n}\nbreak;\ncase SUMMARY:\nSummary summary = (Summary)target;\nif (idMatch(summary.getId(), pattern)) {\nsummary.setId(null);\n}\nunsetAllIdWithinObjectList(summary.getContent(), pattern);\nbreak;\ncase TIME:\nTime time = (Time) target;\nif (idMatch(time.getId(), pattern)) {\ntime.setId(null);\n}\nunsetAllIdWithinObjectList(time.getContent(), pattern);\nbreak;\ncase TRACK:\nTrack track = (Track) target;\nif (idMatch(track.getId(), pattern)) {\ntrack.setId(null);\n}\n// empty element\nbreak;\ncase VIDEO:\nVideo video = (Video) target;\nif (idMatch(video.getId(), pattern)) {\nvideo.setId(null);\n}\nunsetAllIdWithinObjectList(video.getContent(), pattern);\nbreak;\ncase WBR:\nWbr wbr = (Wbr) target;\nif (idMatch(wbr.getId(), pattern)) {\nwbr.setId(null);\n}\n// empty element\nbreak;\n}\n}\n}",
                        "max_stars_repo_name": "jfut/mixer2",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "src/main/java/org/mixer2/xhtml/util/UnsetIdUtil.java",
                        "__cluster__": 778
                },
                {
                        "real_dup": "1"
                }
        ]
]