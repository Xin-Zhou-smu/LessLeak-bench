[
        {
                "data_len": 6
        },
        [
                {
                        "id": "test_debug-bench_data_2507",
                        "content": "We are playing the Guess Game. The game is as follows:\nI pick a number from 1 to n. You have to guess which number I picked.\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\nYou call a pre-defined API int guess(int num), which returns three possible results:\n-1: Your guess is higher than the number I picked (i.e. num > pick).\n1: Your guess is lower than the number I picked (i.e. num < pick).\n0: your guess is equal to the number I picked (i.e. num == pick).\nReturn the number that I picked.\n/**\n* Forward declaration of guess API.\n* @param  num   your guess\n* @return       -1 if num is higher than the picked number\n*               1 if num is lower than the picked number\n*               otherwise return 0\n* int guess(int num);\n*/\npublic class Solution extends GuessGame {\npublic int guessNumber(int n) {\nint low=0,high=n;\nwhile(low<=high)\n{\nint mid=low+(high-low)/2;\nint x= guess(mid;\nif(x==0)\n{\nreturn mid;\n}\nelse if(x==-1)\n{\nhigh=mid-1;\n}\nelse\n{\nlow = mid+1;\n}\n}\nreturn -1;\n}\n}\nIn line \"int x= guess(mid;\", there is a mismatched parentheses for function call guess()\n/**\n* Forward declaration of guess API.\n* @param  num   your guess\n* @return \t     -1 if num is higher than the picked number\n*\t\t\t      1 if num is lower than the picked number\n*               otherwise return 0\n* int guess(int num);\n*/\npublic class Solution extends GuessGame {\npublic int guessNumber(int n) {\nint low=0,high=n;\nwhile(low<=high)\n{\nint mid=low+(high-low)/2;\nint x= guess(mid);\nif(x==0)\n{\nreturn mid;\n}\nelse if(x==-1)\n{\nhigh=mid-1;\n}\nelse\n{\nlow = mid+1;\n}\n}\nreturn -1;\n}\n}\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low=0,high=n;\\n        while(low<=high)\\n        {\\n            int mid=low+(high-low)/2;\\n            int x= guess(mid);\\n            if(x==0) \\n            {\\n                return mid;\\n            }\\n            else if(x==-1)\\n            {\\n                high=mid-1;\\n            }\\n            else\\n            {\\n                low = mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 1467
                },
                {
                        "id": "pretrain_java_data_4898035",
                        "content": "<gh_stars>10-100\n// We are playing the Guess Game. The game is as follows:\n// I pick a number from 1 to n. You have to guess which number I picked.\n// Every time you guess wrong, I will tell you whether the number I picked is higher or lower\n//  than your guess.\n// You call a pre-defined API int guess(int num), which returns 3 possible results:\n// -1: The number I picked is lower than your guess (i.e. pick < num).\n// 1: The number I picked is higher than your guess (i.e. pick > num).\n// 0: The number I picked is equal to your guess (i.e. pick == num).\n// Return the number that I picked.\n// Example 1:\n// Input: n = 10, pick = 6\n// Output: 6\n// Example 2:\n// Input: n = 1, pick = 1\n// Output: 1\n// Example 3:\n// Input: n = 2, pick = 1\n// Output: 1\n// Example 4:\n// Input: n = 2, pick = 2\n// Output: 2\n// Constraints:\n// 1 <= n <= 231 - 1\n// 1 <= pick <= n\n/**\n* Forward declaration of guess API.\n* @param  num   your guess\n* @return \t     -1 if num is lower than the guess number\n*\t\t\t      1 if num is higher than the guess number\n*               otherwise return 0\n* int guess(int num);\n*/\npublic class Solution extends GuessGame {\npublic int guessNumber(int n) {\nint low = 1, high = n;\nwhile(low < high){\nint mid = low + (high - low)/2;\nif(guess(mid) <= 0)\nhigh = mid;\nelse low = mid + 1;\n}\nreturn low;\n}\n}",
                        "max_stars_count": 38,
                        "max_stars_repo_name": "devangi2000/Data-Structures-Algorithms-Handbook",
                        "max_stars_repo_path": "Binary-Search/GuessNumberHigherOrLower374.java",
                        "__cluster__": 1467
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_debug-bench_data_1902",
                        "content": "We are playing the Guess Game. The game is as follows:\nI pick a number from 1 to n. You have to guess which number I picked.\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\nYou call a pre-defined API int guess(int num), which returns three possible results:\n-1: Your guess is higher than the number I picked (i.e. num > pick).\n1: Your guess is lower than the number I picked (i.e. num < pick).\n0: your guess is equal to the number I picked (i.e. num == pick).\nReturn the number that I picked.\n/**\n* Forward declaration of guess API.\n* @param  num   your guess\n* @return       -1 if num is higher than the picked number\n*               1 if num is lower than the picked number\n*               otherwise return 0\n* int guess(int num);\n*/\npublic class Solution extends GuessGame {\npublic int guessNumber(int n) {\nint low=0, high=n;\nwhile(low<=high)\n{\nint mid=low+high;\nint x= guess(mid;\nif(x==0)\n{\nreturn mid;\n}\nelse if(x==-1)\n{\nhigh=mid-1;\n}\nelse\n{\nlow = mid+1;\n}\n}\nreturn -1;\n}\n}\na mixture of operation error, parentheses mismatch\n/**\n* Forward declaration of guess API.\n* @param  num   your guess\n* @return \t     -1 if num is higher than the picked number\n*\t\t\t      1 if num is lower than the picked number\n*               otherwise return 0\n* int guess(int num);\n*/\npublic class Solution extends GuessGame {\npublic int guessNumber(int n) {\nint low=0,high=n;\nwhile(low<=high)\n{\nint mid=low+(high-low)/2;\nint x= guess(mid);\nif(x==0)\n{\nreturn mid;\n}\nelse if(x==-1)\n{\nhigh=mid-1;\n}\nelse\n{\nlow = mid+1;\n}\n}\nreturn -1;\n}\n}\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low=0,high=n;\\n        while(low<=high)\\n        {\\n            int mid=low+(high-low)/2;\\n            int x= guess(mid);\\n            if(x==0) \\n            {\\n                return mid;\\n            }\\n            else if(x==-1)\\n            {\\n                high=mid-1;\\n            }\\n            else\\n            {\\n                low = mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 1467
                },
                {
                        "id": "pretrain_java_data_4898035",
                        "content": "<gh_stars>10-100\n// We are playing the Guess Game. The game is as follows:\n// I pick a number from 1 to n. You have to guess which number I picked.\n// Every time you guess wrong, I will tell you whether the number I picked is higher or lower\n//  than your guess.\n// You call a pre-defined API int guess(int num), which returns 3 possible results:\n// -1: The number I picked is lower than your guess (i.e. pick < num).\n// 1: The number I picked is higher than your guess (i.e. pick > num).\n// 0: The number I picked is equal to your guess (i.e. pick == num).\n// Return the number that I picked.\n// Example 1:\n// Input: n = 10, pick = 6\n// Output: 6\n// Example 2:\n// Input: n = 1, pick = 1\n// Output: 1\n// Example 3:\n// Input: n = 2, pick = 1\n// Output: 1\n// Example 4:\n// Input: n = 2, pick = 2\n// Output: 2\n// Constraints:\n// 1 <= n <= 231 - 1\n// 1 <= pick <= n\n/**\n* Forward declaration of guess API.\n* @param  num   your guess\n* @return \t     -1 if num is lower than the guess number\n*\t\t\t      1 if num is higher than the guess number\n*               otherwise return 0\n* int guess(int num);\n*/\npublic class Solution extends GuessGame {\npublic int guessNumber(int n) {\nint low = 1, high = n;\nwhile(low < high){\nint mid = low + (high - low)/2;\nif(guess(mid) <= 0)\nhigh = mid;\nelse low = mid + 1;\n}\nreturn low;\n}\n}",
                        "max_stars_count": 38,
                        "max_stars_repo_name": "devangi2000/Data-Structures-Algorithms-Handbook",
                        "max_stars_repo_path": "Binary-Search/GuessNumberHigherOrLower374.java",
                        "__cluster__": 1467
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_debug-bench_data_1468",
                        "content": "We are playing the Guess Game. The game is as follows:\nI pick a number from 1 to n. You have to guess which number I picked.\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\nYou call a pre-defined API int guess(int num), which returns three possible results:\n-1: Your guess is higher than the number I picked (i.e. num > pick).\n1: Your guess is lower than the number I picked (i.e. num < pick).\n0: your guess is equal to the number I picked (i.e. num == pick).\nReturn the number that I picked.\n/**\n* Forward declaration of guess API.\n* @param  num   your guess\n* @return      -1 if num is higher than the picked number\n*              1 if num is lower than the picked number\n*               otherwise return 0\n* int guess(int num);\n*/\npublic class Solution extends GuessGame {\npublic int guessNumber(int n) {\nint low=0, high=n;\nwhile(low<=high)\n{\nint mid=low+high;\nint x= guess(mid);\nif(x==0)\n{\nreturn mid;\n}\nelse if(x==-1)\n{\nhigh=mid-1;\n}\nelse\n{\nlow = mid+1;\n}\n}\nreturn -1;\n}\n}\nMid is not being calculated correctly, this might cause integer overflow for large numbers.\n/**\n* Forward declaration of guess API.\n* @param  num   your guess\n* @return \t     -1 if num is higher than the picked number\n*\t\t\t      1 if num is lower than the picked number\n*               otherwise return 0\n* int guess(int num);\n*/\npublic class Solution extends GuessGame {\npublic int guessNumber(int n) {\nint low=0,high=n;\nwhile(low<=high)\n{\nint mid=low+(high-low)/2;\nint x= guess(mid);\nif(x==0)\n{\nreturn mid;\n}\nelse if(x==-1)\n{\nhigh=mid-1;\n}\nelse\n{\nlow = mid+1;\n}\n}\nreturn -1;\n}\n}\n# Code\\n```\\n/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low=0,high=n;\\n        while(low<=high)\\n        {\\n            int mid=low+(high-low)/2;\\n            int x= guess(mid);\\n            if(x==0) \\n            {\\n                return mid;\\n            }\\n            else if(x==-1)\\n            {\\n                high=mid-1;\\n            }\\n            else\\n            {\\n                low = mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 1467
                },
                {
                        "id": "pretrain_java_data_4898035",
                        "content": "<gh_stars>10-100\n// We are playing the Guess Game. The game is as follows:\n// I pick a number from 1 to n. You have to guess which number I picked.\n// Every time you guess wrong, I will tell you whether the number I picked is higher or lower\n//  than your guess.\n// You call a pre-defined API int guess(int num), which returns 3 possible results:\n// -1: The number I picked is lower than your guess (i.e. pick < num).\n// 1: The number I picked is higher than your guess (i.e. pick > num).\n// 0: The number I picked is equal to your guess (i.e. pick == num).\n// Return the number that I picked.\n// Example 1:\n// Input: n = 10, pick = 6\n// Output: 6\n// Example 2:\n// Input: n = 1, pick = 1\n// Output: 1\n// Example 3:\n// Input: n = 2, pick = 1\n// Output: 1\n// Example 4:\n// Input: n = 2, pick = 2\n// Output: 2\n// Constraints:\n// 1 <= n <= 231 - 1\n// 1 <= pick <= n\n/**\n* Forward declaration of guess API.\n* @param  num   your guess\n* @return \t     -1 if num is lower than the guess number\n*\t\t\t      1 if num is higher than the guess number\n*               otherwise return 0\n* int guess(int num);\n*/\npublic class Solution extends GuessGame {\npublic int guessNumber(int n) {\nint low = 1, high = n;\nwhile(low < high){\nint mid = low + (high - low)/2;\nif(guess(mid) <= 0)\nhigh = mid;\nelse low = mid + 1;\n}\nreturn low;\n}\n}",
                        "max_stars_count": 38,
                        "max_stars_repo_name": "devangi2000/Data-Structures-Algorithms-Handbook",
                        "max_stars_repo_path": "Binary-Search/GuessNumberHigherOrLower374.java",
                        "__cluster__": 1467
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_debug-bench_data_835",
                        "content": "Roman numerals are represented by seven different symbols:\u00a0I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example,\u00a02 is written as II\u00a0in Roman numeral, just two one's added together. 12 is written as\u00a0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9.\nX can be placed before L (50) and C (100) to make 40 and 90.\nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven an integer, convert it to a roman numeral.\nclass Solution {\npublic:\nstring intToRoman(int num) {\nstring ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\nstring tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\nstring hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\nstring ths[]={\"\",\"M\",\"MM\",\"MMM\"};\nreturn ths[num/10000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\n}\n};\nThe division in ths[num/10000] is incorrect, which results in an incorrect Roman numeral.\nclass Solution {\npublic:\nstring intToRoman(int num) {\nstring ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\nstring tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\nstring hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\nstring ths[]={\"\",\"M\",\"MM\",\"MMM\"};\nreturn ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\n}\n};\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string intToRoman(int num) {\\n        string ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\\n        string tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\\n        string hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\\n        string ths[]={\"\",\"M\",\"MM\",\"MMM\"};\\n        \\n        return ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\\n    }\\n};\\n```\\n\\n# ***Please Upvote if it helps \\u2764\\uFE0F***",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 36
                },
                {
                        "id": "pretrain_java_data_4482222",
                        "content": "package org.redquark.leetcoding.challenge;\n/**\n* @author <NAME>\n* <p>\n* Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n* <p>\n* Symbol       Value\n* I             1\n* V             5\n* X             10\n* L             50\n* C             100\n* D             500\n* M             1000\n* For example, 2 is written as II in Roman numeral, just two one's added together.\n* 12 is written as XII, which is simply X + II. The number 27 is written as XXVII,\n* which is XX + V + II.\n* <p>\n* Roman numerals are usually written largest to smallest from left to right.\n* However, the numeral for four is not IIII. Instead, the number four is written as IV.\n* Because the one is before the five we subtract it making four.\n* The same principle applies to the number nine, which is written as IX.\n* There are six instances where subtraction is used:\n* <p>\n* I can be placed before V (5) and X (10) to make 4 and 9.\n* X can be placed before L (50) and C (100) to make 40 and 90.\n* C can be placed before D (500) and M (1000) to make 400 and 900.\n* Given an integer, convert it to a roman numeral.\n* <p>\n* Constraints:\n* <p>\n* 1 <= num <= 3999\n*/\npublic class Problem10_IntegerToRoman {\npublic String intToRoman(int num) {\n// Arrays to store the combinations of\n// ones, tens, hundreds and thousands places\nString[] thousands = {\"\", \"M\", \"MM\", \"MMM\"};\nString[] hundreds = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\nString[] tens = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\nString[] ones = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\nreturn thousands[num / 1000] + hundreds[(num % 1000) / 100] + tens[(num % 100) / 10] + ones[num % 10];\n}\n}",
                        "max_stars_count": 4,
                        "max_stars_repo_name": "ani03sha/Leetcoding",
                        "max_stars_repo_path": "march-2021-leetocding-challenge/src/main/java/org/redquark/leetcoding/challenge/Problem10_IntegerToRoman.java",
                        "__cluster__": 36
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_debug-bench_data_37",
                        "content": "Roman numerals are represented by seven different symbols:\u00a0I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example,\u00a02 is written as II\u00a0in Roman numeral, just two one's added together. 12 is written as\u00a0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9.\nX can be placed before L (50) and C (100) to make 40 and 90.\nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven an integer, convert it to a roman numeral.\nclass Solution {\npublic:\nstring intToRoman(int num) {\nstring ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\nstring tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\nstring hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\nstring ths[]={\"\",\"M\",\"MM\",\"MMM\"}\nreturn ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\n}\n};\nMissing semicolon at the end of the array declaration might cause compilation failure.\nclass Solution {\npublic:\nstring intToRoman(int num) {\nstring ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\nstring tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\nstring hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\nstring ths[]={\"\",\"M\",\"MM\",\"MMM\"};\nreturn ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\n}\n};\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string intToRoman(int num) {\\n        string ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\\n        string tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\\n        string hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\\n        string ths[]={\"\",\"M\",\"MM\",\"MMM\"};\\n        \\n        return ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\\n    }\\n};\\n```\\n\\n# ***Please Upvote if it helps \\u2764\\uFE0F***",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 36
                },
                {
                        "id": "pretrain_java_data_4482222",
                        "content": "package org.redquark.leetcoding.challenge;\n/**\n* @author <NAME>\n* <p>\n* Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n* <p>\n* Symbol       Value\n* I             1\n* V             5\n* X             10\n* L             50\n* C             100\n* D             500\n* M             1000\n* For example, 2 is written as II in Roman numeral, just two one's added together.\n* 12 is written as XII, which is simply X + II. The number 27 is written as XXVII,\n* which is XX + V + II.\n* <p>\n* Roman numerals are usually written largest to smallest from left to right.\n* However, the numeral for four is not IIII. Instead, the number four is written as IV.\n* Because the one is before the five we subtract it making four.\n* The same principle applies to the number nine, which is written as IX.\n* There are six instances where subtraction is used:\n* <p>\n* I can be placed before V (5) and X (10) to make 4 and 9.\n* X can be placed before L (50) and C (100) to make 40 and 90.\n* C can be placed before D (500) and M (1000) to make 400 and 900.\n* Given an integer, convert it to a roman numeral.\n* <p>\n* Constraints:\n* <p>\n* 1 <= num <= 3999\n*/\npublic class Problem10_IntegerToRoman {\npublic String intToRoman(int num) {\n// Arrays to store the combinations of\n// ones, tens, hundreds and thousands places\nString[] thousands = {\"\", \"M\", \"MM\", \"MMM\"};\nString[] hundreds = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\nString[] tens = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\nString[] ones = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\nreturn thousands[num / 1000] + hundreds[(num % 1000) / 100] + tens[(num % 100) / 10] + ones[num % 10];\n}\n}",
                        "max_stars_count": 4,
                        "max_stars_repo_name": "ani03sha/Leetcoding",
                        "max_stars_repo_path": "march-2021-leetocding-challenge/src/main/java/org/redquark/leetcoding/challenge/Problem10_IntegerToRoman.java",
                        "__cluster__": 36
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_debug-bench_data_784",
                        "content": "Roman numerals are represented by seven different symbols:\u00a0I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example,\u00a02 is written as II\u00a0in Roman numeral, just two one's added together. 12 is written as\u00a0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9.\nX can be placed before L (50) and C (100) to make 40 and 90.\nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven an integer, convert it to a roman numeral.\nclass Solution {\npublic:\nstring intToRoman(int num) {\nstring ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\nstring tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\nstring hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\nstring ths[]={\"\",\"M\",\"MM\",\"MMM\"};\nreturn ths[num/1000] + hrns[(num%1000)/100 + tens[(num%100)/10] + ones[num%10];\n}\n};\nThe mismatched parentheses have changed the execution order of the array indexing and concatenation.\nclass Solution {\npublic:\nstring intToRoman(int num) {\nstring ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\nstring tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\nstring hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\nstring ths[]={\"\",\"M\",\"MM\",\"MMM\"};\nreturn ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\n}\n};\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string intToRoman(int num) {\\n        string ones[] = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"};\\n        string tens[] = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"};\\n        string hrns[] = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"};\\n        string ths[]={\"\",\"M\",\"MM\",\"MMM\"};\\n        \\n        return ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];\\n    }\\n};\\n```\\n\\n# ***Please Upvote if it helps \\u2764\\uFE0F***",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 36
                },
                {
                        "id": "pretrain_java_data_4482222",
                        "content": "package org.redquark.leetcoding.challenge;\n/**\n* @author <NAME>\n* <p>\n* Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n* <p>\n* Symbol       Value\n* I             1\n* V             5\n* X             10\n* L             50\n* C             100\n* D             500\n* M             1000\n* For example, 2 is written as II in Roman numeral, just two one's added together.\n* 12 is written as XII, which is simply X + II. The number 27 is written as XXVII,\n* which is XX + V + II.\n* <p>\n* Roman numerals are usually written largest to smallest from left to right.\n* However, the numeral for four is not IIII. Instead, the number four is written as IV.\n* Because the one is before the five we subtract it making four.\n* The same principle applies to the number nine, which is written as IX.\n* There are six instances where subtraction is used:\n* <p>\n* I can be placed before V (5) and X (10) to make 4 and 9.\n* X can be placed before L (50) and C (100) to make 40 and 90.\n* C can be placed before D (500) and M (1000) to make 400 and 900.\n* Given an integer, convert it to a roman numeral.\n* <p>\n* Constraints:\n* <p>\n* 1 <= num <= 3999\n*/\npublic class Problem10_IntegerToRoman {\npublic String intToRoman(int num) {\n// Arrays to store the combinations of\n// ones, tens, hundreds and thousands places\nString[] thousands = {\"\", \"M\", \"MM\", \"MMM\"};\nString[] hundreds = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\nString[] tens = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\nString[] ones = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\nreturn thousands[num / 1000] + hundreds[(num % 1000) / 100] + tens[(num % 100) / 10] + ones[num % 10];\n}\n}",
                        "max_stars_count": 4,
                        "max_stars_repo_name": "ani03sha/Leetcoding",
                        "max_stars_repo_path": "march-2021-leetocding-challenge/src/main/java/org/redquark/leetcoding/challenge/Problem10_IntegerToRoman.java",
                        "__cluster__": 36
                },
                {
                        "real_dup": "2"
                }
        ]
]