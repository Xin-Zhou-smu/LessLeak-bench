[
        {
                "data_len": 668
        },
        [
                {
                        "id": "test_bigclonebench_data_13596891",
                        "content": "protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\nServletContext servletContext = this.getServletConfig().getServletContext();\nWebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\nString szUrl = request.getParameter(\"url\");\nSystem.out.println(szUrl);\nURL url;\nInputStream is = null;\nServletOutputStream sout = null;\ntry {\nurl = new URL(szUrl);\nHttpURLConnection con = (HttpURLConnection) url.openConnection();\nEnumeration hNames = request.getHeaderNames();\nwhile (hNames.hasMoreElements()) {\nString txt = hNames.nextElement().toString();\ncon.setRequestProperty(txt, request.getHeader(txt));\n}\ncon.setRequestProperty(\"host\", url.getHost());\ncon.setRequestProperty(\"refer\", szUrl);\ncon.setRequestMethod(method);\ncon.setDoOutput(true);\ncon.setDoInput(true);\nInputStreamReader inBody = new InputStreamReader(request.getInputStream());\nchar bufCh[] = new char[1024];\nint r;\nOutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\nwhile ((r = inBody.read(bufCh)) != -1) {\nSystem.out.println(bufCh);\noutReq.write(bufCh, 0, r);\n}\noutReq.flush();\noutReq.close();\ninBody.close();\nSystem.out.println(con.getResponseCode());\nSystem.out.println(con.getResponseMessage());\nif (con.getResponseCode() == con.HTTP_OK) {\nresponse.setContentType(con.getContentType());\nresponse.addHeader(\"Content-Encoding\", con.getContentEncoding());\nsout = response.getOutputStream();\nis = con.getInputStream();\nbyte buff[] = new byte[1024];\nwhile ((r = is.read(buff)) != -1) {\nsout.write(buff, 0, r);\nSystem.out.print(buff);\n}\nsout.flush();\nis.close();\nsout.close();\n} else {\nresponse.sendError(con.getResponseCode(), con.getResponseMessage());\n}\n} catch (MalformedURLException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 440
                },
                {
                        "id": "pretrain_java_data_145092",
                        "content": "<filename>references/bcb_chosen_clones/selected#2699251#45#100.java<gh_stars>10-100\nprotected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\nServletContext servletContext = this.getServletConfig().getServletContext();\nWebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\nString szUrl = request.getParameter(\"url\");\nSystem.out.println(szUrl);\nURL url;\nInputStream is = null;\nServletOutputStream sout = null;\ntry {\nurl = new URL(szUrl);\nHttpURLConnection con = (HttpURLConnection) url.openConnection();\nEnumeration hNames = request.getHeaderNames();\nwhile (hNames.hasMoreElements()) {\nString txt = hNames.nextElement().toString();\ncon.setRequestProperty(txt, request.getHeader(txt));\n}\ncon.setRequestProperty(\"host\", url.getHost());\ncon.setRequestProperty(\"refer\", szUrl);\ncon.setRequestMethod(method);\ncon.setDoOutput(true);\ncon.setDoInput(true);\nInputStreamReader inBody = new InputStreamReader(request.getInputStream());\nchar bufCh[] = new char[1024];\nint r;\nOutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\nwhile ((r = inBody.read(bufCh)) != -1) {\nSystem.out.println(bufCh);\noutReq.write(bufCh, 0, r);\n}\noutReq.flush();\noutReq.close();\ninBody.close();\nSystem.out.println(con.getResponseCode());\nSystem.out.println(con.getResponseMessage());\nif (con.getResponseCode() == con.HTTP_OK) {\nresponse.setContentType(con.getContentType());\nresponse.addHeader(\"Content-Encoding\", con.getContentEncoding());\nsout = response.getOutputStream();\nis = con.getInputStream();\nbyte buff[] = new byte[1024];\nwhile ((r = is.read(buff)) != -1) {\nsout.write(buff, 0, r);\nSystem.out.print(buff);\n}\nsout.flush();\nis.close();\nsout.close();\n} else {\nresponse.sendError(con.getResponseCode(), con.getResponseMessage());\n}\n} catch (MalformedURLException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2699251#45#100.java",
                        "__cluster__": 440
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_13512",
                        "content": "public String getmd5(String password) {\nString pwHash = \"\";\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(password.getBytes());\nbyte[] b = md.digest();\nfor (int i = 0; i < b.length; i++) {\npwHash += Integer.toString((b[i] & 0xFF) + 0x100, 16).substring(1);\n}\n} catch (NoSuchAlgorithmException ex) {\nLogger.fatal(\"MD5 Hash Algorithm not found\", ex);\n}\nLogger.info(\"PWHash erzeugt und wird \u00fcbergeben\");\nreturn pwHash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1179737#18#34.java",
                        "__cluster__": 765
                },
                {
                        "id": "test_bigclonebench_data_16466743",
                        "content": "public String getmd5(String password) {\nString pwHash = \"\";\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(password.getBytes());\nbyte[] b = md.digest();\nfor (int i = 0; i < b.length; i++) {\npwHash += Integer.toString((b[i] & 0xFF) + 0x100, 16).substring(1);\n}\n} catch (NoSuchAlgorithmException ex) {\nLogger.fatal(\"MD5 Hash Algorithm not found\", ex);\n}\nLogger.info(\"PWHash erzeugt und wird \u00fcbergeben\");\nreturn pwHash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 765
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13891080",
                        "content": "public static void copyFile(File srcFile, File destFile) throws IOException {\nlogger.debug(\"copyFile(srcFile={}, destFile={}) - start\", srcFile, destFile);\nFileChannel srcChannel = new FileInputStream(srcFile).getChannel();\nFileChannel dstChannel = new FileOutputStream(destFile).getChannel();\ntry {\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n} finally {\nsrcChannel.close();\ndstChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 897
                },
                {
                        "id": "pretrain_java_data_197915",
                        "content": "public static void copyFile(File srcFile, File destFile) throws IOException {\nlogger.debug(\"copyFile(srcFile={}, destFile={}) - start\", srcFile, destFile);\nFileChannel srcChannel = new FileInputStream(srcFile).getChannel();\nFileChannel dstChannel = new FileOutputStream(destFile).getChannel();\ntry {\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n} finally {\nsrcChannel.close();\ndstChannel.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#971253#86#96.java",
                        "__cluster__": 897
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14194234",
                        "content": "private String File2String(String directory, String filename) {\nString line;\nInputStream in = null;\ntry {\nFile f = new File(filename);\nSystem.out.println(\"File On:>>>>>>>>>> \" + f.getCanonicalPath());\nin = new FileInputStream(f);\n} catch (FileNotFoundException ex) {\nin = null;\n} catch (IOException ex) {\nin = null;\n}\ntry {\nif (in == null) {\nfilename = directory + \"/\" + filename;\njava.net.URL urlFile = ClassLoader.getSystemResource(filename);\nif (urlFile == null) {\nSystem.out.println(\"Integrated Chips list file not found: \" + filename);\nSystem.exit(-1);\n}\nin = urlFile.openStream();\n}\nBufferedReader reader = new BufferedReader(new InputStreamReader(in));\nStringBuffer xmlText = new StringBuffer();\nwhile ((line = reader.readLine()) != null) {\nxmlText.append(line);\n}\nreader.close();\nreturn xmlText.toString();\n} catch (FileNotFoundException ex) {\nSystem.out.println(\"Integrated Chips list file not found\");\nSystem.exit(-1);\n} catch (IOException ex) {\nex.printStackTrace();\nSystem.exit(-1);\n}\nreturn null;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 893
                },
                {
                        "id": "pretrain_java_data_71831",
                        "content": "<filename>references/bcb_chosen_clones/selected#1177658#146#183.java<gh_stars>10-100\nprivate String File2String(String directory, String filename) {\nString line;\nInputStream in = null;\ntry {\nFile f = new File(filename);\nSystem.out.println(\"File On:>>>>>>>>>> \" + f.getCanonicalPath());\nin = new FileInputStream(f);\n} catch (FileNotFoundException ex) {\nin = null;\n} catch (IOException ex) {\nin = null;\n}\ntry {\nif (in == null) {\nfilename = directory + \"/\" + filename;\njava.net.URL urlFile = ClassLoader.getSystemResource(filename);\nif (urlFile == null) {\nSystem.out.println(\"Integrated Chips list file not found: \" + filename);\nSystem.exit(-1);\n}\nin = urlFile.openStream();\n}\nBufferedReader reader = new BufferedReader(new InputStreamReader(in));\nStringBuffer xmlText = new StringBuffer();\nwhile ((line = reader.readLine()) != null) {\nxmlText.append(line);\n}\nreader.close();\nreturn xmlText.toString();\n} catch (FileNotFoundException ex) {\nSystem.out.println(\"Integrated Chips list file not found\");\nSystem.exit(-1);\n} catch (IOException ex) {\nex.printStackTrace();\nSystem.exit(-1);\n}\nreturn null;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1177658#146#183.java",
                        "__cluster__": 893
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11562165",
                        "content": "private void streamContains(String in, InputStream stream) throws IOException {\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nIOUtils.copy(stream, baos);\nbyte[] bytes = baos.toByteArray();\nString cmp = new String(bytes, \"UTF-8\");\nassertTrue(cmp.contains(in));\nbaos.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 13
                },
                {
                        "id": "pretrain_java_data_1663054",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate void streamContains(String in, InputStream stream) throws IOException {\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nIOUtils.copy(stream, baos);\nbyte[] bytes = baos.toByteArray();\nString cmp = new String(bytes, \"UTF-8\");\nassertTrue(cmp.contains(in));\nbaos.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1699317#163#170.java",
                        "__cluster__": 13
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_1780756",
                        "content": "<filename>references/bcb_chosen_clones/selected#2021481#443#465.java\npublic static boolean copyFile(String sourceName, String destName) {\nFileChannel sourceChannel = null;\nFileChannel destChannel = null;\nboolean wasOk = false;\ntry {\nsourceChannel = new FileInputStream(sourceName).getChannel();\ndestChannel = new FileOutputStream(destName).getChannel();\ndestChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\nwasOk = true;\n} catch (Throwable exception) {\nlogger.log(Level.SEVERE, \"Exception in copyFile\", exception);\n} finally {\ntry {\nif (sourceChannel != null) sourceChannel.close();\n} catch (Throwable tt) {\n}\ntry {\nif (destChannel != null) destChannel.close();\n} catch (Throwable tt) {\n}\n}\nreturn wasOk;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2021481#443#465.java",
                        "__cluster__": 439
                },
                {
                        "id": "test_bigclonebench_data_11952735",
                        "content": "public static boolean copyFile(String sourceName, String destName) {\nFileChannel sourceChannel = null;\nFileChannel destChannel = null;\nboolean wasOk = false;\ntry {\nsourceChannel = new FileInputStream(sourceName).getChannel();\ndestChannel = new FileOutputStream(destName).getChannel();\ndestChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\nwasOk = true;\n} catch (Throwable exception) {\nlogger.log(Level.SEVERE, \"Exception in copyFile\", exception);\n} finally {\ntry {\nif (sourceChannel != null) sourceChannel.close();\n} catch (Throwable tt) {\n}\ntry {\nif (destChannel != null) destChannel.close();\n} catch (Throwable tt) {\n}\n}\nreturn wasOk;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 439
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20100809",
                        "content": "public static void copy(File srcPath, File dstPath) throws IOException {\nif (srcPath.isDirectory()) {\nif (!dstPath.exists()) {\nboolean result = dstPath.mkdir();\nif (!result) throw new IOException(\"Unable to create directoy: \" + dstPath);\n}\nString[] files = srcPath.list();\nfor (String file : files) {\ncopy(new File(srcPath, file), new File(dstPath, file));\n}\n} else {\nif (srcPath.exists()) {\nFileChannel in = null;\nFileChannel out = null;\ntry {\nin = new FileInputStream(srcPath).getChannel();\nout = new FileOutputStream(dstPath).getChannel();\nlong size = in.size();\nMappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\nout.write(buf);\n} finally {\nif (in != null) in.close();\nif (out != null) out.close();\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 672
                },
                {
                        "id": "pretrain_java_data_1691717",
                        "content": "<gh_stars>10-100\npublic static void copy(File srcPath, File dstPath) throws IOException {\nif (srcPath.isDirectory()) {\nif (!dstPath.exists()) {\nboolean result = dstPath.mkdir();\nif (!result) throw new IOException(\"Unable to create directoy: \" + dstPath);\n}\nString[] files = srcPath.list();\nfor (String file : files) {\ncopy(new File(srcPath, file), new File(dstPath, file));\n}\n} else {\nif (srcPath.exists()) {\nFileChannel in = null;\nFileChannel out = null;\ntry {\nin = new FileInputStream(srcPath).getChannel();\nout = new FileOutputStream(dstPath).getChannel();\nlong size = in.size();\nMappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\nout.write(buf);\n} finally {\nif (in != null) in.close();\nif (out != null) out.close();\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#406256#959#985.java",
                        "__cluster__": 672
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17607302",
                        "content": "<gh_stars>10-100\npublic void genDropSchema(DiagramModel diagramModel, boolean foreignKeys) {\ntry {\ncon.setAutoCommit(false);\nstmt = con.createStatement();\nCollection boxes = diagramModel.getBoxes();\nBoxModel box;\nString sqlQuery;\nif (foreignKeys) {\nfor (Iterator x = boxes.iterator(); x.hasNext(); ) {\nbox = (BoxModel) x.next();\nif (!box.isAbstractDef()) {\ndropForeignKeys(box);\n}\n}\n}\nint counter = 0;\nfor (Iterator x = boxes.iterator(); x.hasNext(); ) {\nbox = (BoxModel) x.next();\nif (!box.isAbstractDef()) {\nsqlQuery = sqlDropTable(box);\nSystem.out.println(sqlQuery);\ntry {\nstmt.executeUpdate(sqlQuery);\ncounter++;\n} catch (SQLException e) {\nString tableName = box.getName();\nSystem.out.println(\"// Problem while dropping table \" + tableName + \" : \" + e.getMessage());\nString msg = Para.getPara().getText(\"tableNotDropped\") + \" -- \" + tableName;\nthis.informUser(msg);\n}\n}\n}\ncon.commit();\nif (counter > 0) {\nString msg = Para.getPara().getText(\"schemaDropped\") + \" -- \" + counter + \" \" + Para.getPara().getText(\"tables\");\nthis.informUser(msg);\n} else {\nthis.informUser(Para.getPara().getText(\"schemaNotDropped\"));\n}\n} catch (SQLException e) {\nSystem.out.println(e.getMessage() + \" // Problem with the JDBC schema generation! \");\ntry {\ncon.rollback();\nthis.informUser(Para.getPara().getText(\"schemaNotDropped\"));\n} catch (SQLException e1) {\nSystem.out.println(e1.getMessage() + \" // Problem with the connection rollback! \");\n}\n} finally {\ntry {\ncon.setAutoCommit(true);\nstmt.close();\n} catch (SQLException e1) {\nSystem.out.println(e1.getMessage() + \" // Problem with the connection disconnect! \");\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1877203#107#162.java",
                        "__cluster__": 461
                },
                {
                        "id": "test_bigclonebench_data_19608872",
                        "content": "public void genDropSchema(DiagramModel diagramModel, boolean foreignKeys) {\ntry {\ncon.setAutoCommit(false);\nstmt = con.createStatement();\nCollection boxes = diagramModel.getBoxes();\nBoxModel box;\nString sqlQuery;\nif (foreignKeys) {\nfor (Iterator x = boxes.iterator(); x.hasNext(); ) {\nbox = (BoxModel) x.next();\nif (!box.isAbstractDef()) {\ndropForeignKeys(box);\n}\n}\n}\nint counter = 0;\nfor (Iterator x = boxes.iterator(); x.hasNext(); ) {\nbox = (BoxModel) x.next();\nif (!box.isAbstractDef()) {\nsqlQuery = sqlDropTable(box);\nSystem.out.println(sqlQuery);\ntry {\nstmt.executeUpdate(sqlQuery);\ncounter++;\n} catch (SQLException e) {\nString tableName = box.getName();\nSystem.out.println(\"// Problem while dropping table \" + tableName + \" : \" + e.getMessage());\nString msg = Para.getPara().getText(\"tableNotDropped\") + \" -- \" + tableName;\nthis.informUser(msg);\n}\n}\n}\ncon.commit();\nif (counter > 0) {\nString msg = Para.getPara().getText(\"schemaDropped\") + \" -- \" + counter + \" \" + Para.getPara().getText(\"tables\");\nthis.informUser(msg);\n} else {\nthis.informUser(Para.getPara().getText(\"schemaNotDropped\"));\n}\n} catch (SQLException e) {\nSystem.out.println(e.getMessage() + \" // Problem with the JDBC schema generation! \");\ntry {\ncon.rollback();\nthis.informUser(Para.getPara().getText(\"schemaNotDropped\"));\n} catch (SQLException e1) {\nSystem.out.println(e1.getMessage() + \" // Problem with the connection rollback! \");\n}\n} finally {\ntry {\ncon.setAutoCommit(true);\nstmt.close();\n} catch (SQLException e1) {\nSystem.out.println(e1.getMessage() + \" // Problem with the connection disconnect! \");\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 461
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17621841",
                        "content": "<gh_stars>10-100\nprotected Control createDialogArea(Composite parent) {\nComposite composite = (Composite) super.createDialogArea(parent);\nsetTitle(DialogsMessages.getString(\"LicenseDialog.Caption\"));\nsetMessage(DialogsMessages.getString(\"LicenseDialog.Explanation\"));\nComposite content = new Composite(composite, SWT.NONE);\ncontent.setLayoutData(new GridData(GridData.FILL_BOTH));\nfinal int ncol = 1;\nGridLayout layout = new GridLayout(1, false);\nlayout.numColumns = ncol;\ncontent.setLayout(layout);\nBrowser browser = null;\nText text = null;\ntry {\nbrowser = new Browser(content, SWT.NONE);\nbrowser.setLayoutData(new GridData(GridData.FILL_BOTH));\n} catch (Throwable t) {\ntext = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);\ntext.setLayoutData(new GridData(GridData.FILL_BOTH));\n}\nURL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? \"license.html\" : \"license.txt\");\nInputStream in = null;\nBufferedReader r = null;\nStringBuffer sb = new StringBuffer();\ntry {\nin = url.openStream();\nr = new BufferedReader(new InputStreamReader(in, \"ISO-8859-1\"));\nString line;\nwhile ((line = r.readLine()) != null) sb.append(line).append(\"\\r\\n\");\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nif (r != null) {\ntry {\nr.close();\n} catch (IOException e) {\n}\n}\nif (in != null) {\ntry {\nin.close();\n} catch (IOException e) {\n}\n}\n}\nif (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());\nreturn composite;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1162946#45#91.java",
                        "__cluster__": 486
                },
                {
                        "id": "test_bigclonebench_data_23246123",
                        "content": "protected Control createDialogArea(Composite parent) {\nComposite composite = (Composite) super.createDialogArea(parent);\nsetTitle(DialogsMessages.getString(\"LicenseDialog.Caption\"));\nsetMessage(DialogsMessages.getString(\"LicenseDialog.Explanation\"));\nComposite content = new Composite(composite, SWT.NONE);\ncontent.setLayoutData(new GridData(GridData.FILL_BOTH));\nfinal int ncol = 1;\nGridLayout layout = new GridLayout(1, false);\nlayout.numColumns = ncol;\ncontent.setLayout(layout);\nBrowser browser = null;\nText text = null;\ntry {\nbrowser = new Browser(content, SWT.NONE);\nbrowser.setLayoutData(new GridData(GridData.FILL_BOTH));\n} catch (Throwable t) {\ntext = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);\ntext.setLayoutData(new GridData(GridData.FILL_BOTH));\n}\nURL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? \"license.html\" : \"license.txt\");\nInputStream in = null;\nBufferedReader r = null;\nStringBuffer sb = new StringBuffer();\ntry {\nin = url.openStream();\nr = new BufferedReader(new InputStreamReader(in, \"ISO-8859-1\"));\nString line;\nwhile ((line = r.readLine()) != null) sb.append(line).append(\"\\r\\n\");\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nif (r != null) {\ntry {\nr.close();\n} catch (IOException e) {\n}\n}\nif (in != null) {\ntry {\nin.close();\n} catch (IOException e) {\n}\n}\n}\nif (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());\nreturn composite;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 486
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17691601",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static boolean copyTextFile(File src, File dst) {\ntry {\nBufferedInputStream bis = new BufferedInputStream(new FileInputStream(src));\nBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dst));\nbyte[] buf = new byte[1024];\nint readsize = 0;\nwhile ((readsize = bis.read(buf)) != -1) {\nbos.write(buf, 0, readsize);\n}\nbos.flush();\nbos.close();\nbis.close();\n} catch (IOException e) {\nServerConsoleServlet.printSystemLog(e.toString() + \" \" + e.getMessage(), ServerConsoleServlet.LOG_ERROR);\nreturn false;\n}\nreturn true;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2597515#25#42.java",
                        "__cluster__": 676
                },
                {
                        "id": "test_bigclonebench_data_18211588",
                        "content": "public static boolean copyTextFile(File src, File dst) {\ntry {\nBufferedInputStream bis = new BufferedInputStream(new FileInputStream(src));\nBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dst));\nbyte[] buf = new byte[1024];\nint readsize = 0;\nwhile ((readsize = bis.read(buf)) != -1) {\nbos.write(buf, 0, readsize);\n}\nbos.flush();\nbos.close();\nbis.close();\n} catch (IOException e) {\nServerConsoleServlet.printSystemLog(e.toString() + \" \" + e.getMessage(), ServerConsoleServlet.LOG_ERROR);\nreturn false;\n}\nreturn true;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 676
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3756429",
                        "content": "private static String scramble(String text) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nmd.update(text.getBytes(\"UTF-8\"));\nStringBuffer sb = new StringBuffer();\nfor (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));\nreturn sb.toString();\n} catch (UnsupportedEncodingException e) {\nreturn null;\n} catch (NoSuchAlgorithmException e) {\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 713
                },
                {
                        "id": "pretrain_java_data_16118585",
                        "content": "public static String scramble(String text) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nmd.update(text.getBytes(\"UTF-8\"));\nStringBuffer sb = new StringBuffer();\nfor (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));\nreturn sb.toString();\n} catch (UnsupportedEncodingException e) {\nreturn null;\n} catch (NoSuchAlgorithmException e) {\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#901529#104#116.java",
                        "__cluster__": 713
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_16161807",
                        "content": "<reponame>cragkhit/elasticsearch\npublic void loadSourceCode() {\nint length = MAX_SOURCE_LENGTH;\ntry {\nFile file = new File(filename);\nlength = (int) file.length();\n} catch (SecurityException ex) {\n}\nchar[] buff = new char[length];\nInputStream is;\nInputStreamReader isr;\nCodeViewer cv = new CodeViewer();\nURL url;\ntry {\nurl = getClass().getResource(filename);\nis = url.openStream();\nisr = new InputStreamReader(is);\nBufferedReader reader = new BufferedReader(isr);\nsourceCode = new String(\"<html><pre>\");\nString line = reader.readLine();\nwhile (line != null) {\nsourceCode += cv.syntaxHighlight(line) + \" \\n \";\nline = reader.readLine();\n}\nsourceCode += \"</pre></html>\";\n} catch (Exception ex) {\nsourceCode = getString(\"SourceCode.error\");\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#93584#44#71.java",
                        "__cluster__": 610
                },
                {
                        "id": "test_bigclonebench_data_701029",
                        "content": "public void loadSourceCode() {\nint length = MAX_SOURCE_LENGTH;\ntry {\nFile file = new File(filename);\nlength = (int) file.length();\n} catch (SecurityException ex) {\n}\nchar[] buff = new char[length];\nInputStream is;\nInputStreamReader isr;\nCodeViewer cv = new CodeViewer();\nURL url;\ntry {\nurl = getClass().getResource(filename);\nis = url.openStream();\nisr = new InputStreamReader(is);\nBufferedReader reader = new BufferedReader(isr);\nsourceCode = new String(\"<html><pre>\");\nString line = reader.readLine();\nwhile (line != null) {\nsourceCode += cv.syntaxHighlight(line) + \" \\n \";\nline = reader.readLine();\n}\nsourceCode += \"</pre></html>\";\n} catch (Exception ex) {\nsourceCode = getString(\"SourceCode.error\");\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 610
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18238468",
                        "content": "@Test\npublic void testLoadSource() throws IOException {\nArticleMetadata metadata = new ArticleMetadata();\nmetadata.setId(\"http://arxiv.org/abs/math/0205003v1\");\nInputStream inputStream = arxivDAOFacade.loadSource(metadata);\nAssert.assertNotNull(inputStream);\nStringWriter writer = new StringWriter();\nIOUtils.copy(inputStream, writer, \"utf8\");\nString contents = writer.toString();\nAssert.assertTrue(contents.contains(\"A strengthening of the Nyman\"));\ninputStream.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 242
                },
                {
                        "id": "pretrain_java_data_17689794",
                        "content": "<reponame>cragkhit/elasticsearch\n@Test\npublic void testLoadSource() throws IOException {\nArticleMetadata metadata = new ArticleMetadata();\nmetadata.setId(\"http://arxiv.org/abs/math/0205003v1\");\nInputStream inputStream = arxivDAOFacade.loadSource(metadata);\nAssert.assertNotNull(inputStream);\nStringWriter writer = new StringWriter();\nIOUtils.copy(inputStream, writer, \"utf8\");\nString contents = writer.toString();\nAssert.assertTrue(contents.contains(\"A strengthening of the Nyman\"));\ninputStream.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#742693#45#56.java",
                        "__cluster__": 242
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_10281203",
                        "content": "public void makeRead(String user, long databaseID, long time) throws SQLException {\nString query = \"replace into fs.read_post (post, user, read_date) values (?, ?, ?)\";\nensureConnection();\nPreparedStatement statement = m_connection.prepareStatement(query);\ntry {\nstatement.setLong(1, databaseID);\nstatement.setString(2, user);\nstatement.setTimestamp(3, new Timestamp(time));\nint count = statement.executeUpdate();\nif (0 == count) throw new SQLException(\"Nothing updated.\");\nm_connection.commit();\n} catch (SQLException e) {\nm_connection.rollback();\nthrow e;\n} finally {\nstatement.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 594
                },
                {
                        "id": "pretrain_java_data_17604416",
                        "content": "<reponame>cragkhit/elasticsearch\npublic void makeRead(String user, long databaseID, long time) throws SQLException {\nString query = \"replace into fs.read_post (post, user, read_date) values (?, ?, ?)\";\nensureConnection();\nPreparedStatement statement = m_connection.prepareStatement(query);\ntry {\nstatement.setLong(1, databaseID);\nstatement.setString(2, user);\nstatement.setTimestamp(3, new Timestamp(time));\nint count = statement.executeUpdate();\nif (0 == count) throw new SQLException(\"Nothing updated.\");\nm_connection.commit();\n} catch (SQLException e) {\nm_connection.rollback();\nthrow e;\n} finally {\nstatement.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#113145#683#700.java",
                        "__cluster__": 594
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13414771",
                        "content": "@Digester(forField = \"password\")\npublic static String encriptPassword(String passwd) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(passwd.getBytes());\nBigInteger hash = new BigInteger(1, md.digest());\nreturn hash.toString(16);\n} catch (Exception e) {\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 741
                },
                {
                        "id": "pretrain_java_data_16152612",
                        "content": "<gh_stars>10-100\n@Digester(forField = \"password\")\npublic static String encriptPassword(String passwd) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(passwd.getBytes());\nBigInteger hash = new BigInteger(1, md.digest());\nreturn hash.toString(16);\n} catch (Exception e) {\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#277902#130#140.java",
                        "__cluster__": 741
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8135072",
                        "content": "public void setImg() {\nJFileChooser jFileChooser1 = new JFileChooser();\nString separator = \"\";\nif (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\nsetPath(jFileChooser1.getSelectedFile().getPath());\nseparator = jFileChooser1.getSelectedFile().separator;\nFile dirImg = new File(\".\" + separator + \"images\");\nif (!dirImg.exists()) {\ndirImg.mkdir();\n}\nint index = getPath().lastIndexOf(separator);\nString imgName = getPath().substring(index);\nString newPath = dirImg + imgName;\ntry {\nFile inputFile = new File(getPath());\nFile outputFile = new File(newPath);\nif (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\nFileInputStream in = new FileInputStream(inputFile);\nFileOutputStream out = new FileOutputStream(outputFile);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}\n} catch (Exception ex) {\nex.printStackTrace();\nLogHandler.log(ex.getMessage(), Level.INFO, \"LOG_MSG\", isLoggingEnabled());\nJOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + \"-\" + getClass(), \"Set image\", JOptionPane.ERROR_MESSAGE);\n}\nsetPath(newPath);\nbckImg = new ImageIcon(getPath());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 894
                },
                {
                        "id": "pretrain_java_data_17617253",
                        "content": "void IconmenuItem6_actionPerformed(ActionEvent e) {\nJFileChooser jFileChooser1 = new JFileChooser();\nString separator = \"\";\nif (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\nsetDefaultPath(jFileChooser1.getSelectedFile().getPath());\nseparator = jFileChooser1.getSelectedFile().separator;\nFile dirImg = new File(\".\" + separator + \"images\");\nif (!dirImg.exists()) {\ndirImg.mkdir();\n}\nint index = getDefaultPath().lastIndexOf(separator);\nString imgName = getDefaultPath().substring(index);\nString newPath = dirImg + imgName;\ntry {\nFile inputFile = new File(getDefaultPath());\nFile outputFile = new File(newPath);\nFileInputStream in = new FileInputStream(inputFile);\nFileOutputStream out = new FileOutputStream(outputFile);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n} catch (Exception ex) {\nex.printStackTrace();\nLogHandler.log(ex.getMessage(), Level.INFO, \"LOG_MSG\", isLoggingEnabled());\nJOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + \"-\" + getClass(), \"\", JOptionPane.ERROR_MESSAGE);\n}\nsetDefaultPath(newPath);\ncreateDefaultImage();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1379153#493#523.java",
                        "__cluster__": 894
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_12428013",
                        "content": "public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {\nif (monitor != null && monitor.isCanceled()) {\nreturn;\n}\ntry {\nftpClient = new FTPClient();\nftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));\nftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));\nftpClient.connect();\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nif (from != null) {\nFTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);\nsynchedSet.add(ftpHolder);\n}\nJobHandler.aquireFTPLock();\nfor (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {\nif (monitor != null && monitor.isCanceled()) {\nJobHandler.releaseFTPLock();\nftpClient.quit();\nreturn;\n}\nThread.yield();\nFTPHolder element = (FTPHolder) iter.next();\nftpClient.setType(FTPTransferType.ASCII);\nftpClient.put(element.from, element.to);\nif (element.renameTo != null) {\ntry {\nftpClient.delete(element.renameTo);\n} catch (Exception e) {\n}\nftpClient.rename(element.to, element.renameTo);\nlog.info(\"RENAME: \" + element.to + \"To: \" + element.renameTo);\n}\n}\nJobHandler.releaseFTPLock();\nftpClient.quit();\n} catch (UnknownHostException e) {\ne.printStackTrace();\n} catch (FTPException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nsynchedSet.clear();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 232
                },
                {
                        "id": "pretrain_java_data_17790248",
                        "content": "public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {\nif (monitor != null && monitor.isCanceled()) {\nreturn;\n}\ntry {\nftpClient = new FTPClient();\nftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));\nftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));\nftpClient.connect();\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nif (from != null) {\nFTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);\nsynchedSet.add(ftpHolder);\n}\nJobHandler.aquireFTPLock();\nfor (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {\nif (monitor != null && monitor.isCanceled()) {\nJobHandler.releaseFTPLock();\nftpClient.quit();\nreturn;\n}\nThread.yield();\nFTPHolder element = (FTPHolder) iter.next();\nftpClient.setType(FTPTransferType.ASCII);\nftpClient.put(element.from, element.to);\nif (element.renameTo != null) {\ntry {\nftpClient.delete(element.renameTo);\n} catch (Exception e) {\n}\nftpClient.rename(element.to, element.renameTo);\nlog.info(\"RENAME: \" + element.to + \"To: \" + element.renameTo);\n}\n}\nJobHandler.releaseFTPLock();\nftpClient.quit();\n} catch (UnknownHostException e) {\ne.printStackTrace();\n} catch (FTPException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nsynchedSet.clear();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#714671#169#223.java",
                        "__cluster__": 232
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17734246",
                        "content": "public void copyLogic() {\nif (getState() == States.Idle) {\nsetState(States.Synchronizing);\ntry {\nFileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(\"binPath\") + name + \".class\")).getChannel();\nFileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(\"agentFileLocation\") + name + \".class\")).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nsetState(States.Idle);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#610969#134#150.java",
                        "__cluster__": 283
                },
                {
                        "id": "test_bigclonebench_data_20619879",
                        "content": "public void copyLogic() {\nif (getState() == States.Idle) {\nsetState(States.Synchronizing);\ntry {\nFileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(\"binPath\") + name + \".class\")).getChannel();\nFileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(\"agentFileLocation\") + name + \".class\")).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nsetState(States.Idle);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 283
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19219159",
                        "content": "public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException {\ncheckPermission(permit, String.valueOf(namespaceId));\nboolean exist = isRoleTypeUsed(namespaceId, id);\nif (exist) {\nthrow new DTSValidationException(ApelMsgHandler.getInstance().getMsg(\"DTS-0034\"));\n}\nif (!removeReferencesInRoleTypes) {\nStringBuffer msgBuf = new StringBuffer();\nDTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id);\nif (objects.length > 0) {\nmsgBuf.append(\"Role Type is Right Identity in one or more Role Types.\");\n}\nobjects = fetchParentReferences(namespaceId, id);\nif (objects.length > 0) {\nif (msgBuf.length() > 0) {\nmsgBuf.append(\"\\n\");\n}\nmsgBuf.append(\"Role Type is Parent of one or more Role Types.\");\n}\nif (msgBuf.length() > 0) {\nthrow new DTSValidationException(msgBuf.toString());\n}\n}\nString sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, \"DELETE_RIGHT_IDENTITY_REF\");\nString sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, \"DELETE_PARENT_REF\");\nString sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, \"DELETE\");\nPreparedStatement pstmt = null;\nboolean success = false;\nlong typeGid = getGID(namespaceId, id);\nconn.setAutoCommit(false);\nint defaultLevel = conn.getTransactionIsolation();\nconn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\ntry {\npstmt = conn.prepareStatement(sqlRightId);\npstmt.setLong(1, typeGid);\npstmt.executeUpdate();\npstmt.close();\npstmt = conn.prepareStatement(sqlParent);\npstmt.setLong(1, typeGid);\npstmt.executeUpdate();\npstmt.close();\npstmt = conn.prepareStatement(sql);\npstmt.setLong(1, typeGid);\nint count = pstmt.executeUpdate();\nsuccess = (count == 1);\nconn.commit();\n} catch (SQLException e) {\nconn.rollback();\nthrow e;\n} finally {\nconn.setTransactionIsolation(defaultLevel);\nconn.setAutoCommit(true);\ncloseStatement(pstmt);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2246538#192#247.java",
                        "__cluster__": 287
                },
                {
                        "id": "test_bigclonebench_data_21181542",
                        "content": "public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException {\ncheckPermission(permit, String.valueOf(namespaceId));\nboolean exist = isRoleTypeUsed(namespaceId, id);\nif (exist) {\nthrow new DTSValidationException(ApelMsgHandler.getInstance().getMsg(\"DTS-0034\"));\n}\nif (!removeReferencesInRoleTypes) {\nStringBuffer msgBuf = new StringBuffer();\nDTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id);\nif (objects.length > 0) {\nmsgBuf.append(\"Role Type is Right Identity in one or more Role Types.\");\n}\nobjects = fetchParentReferences(namespaceId, id);\nif (objects.length > 0) {\nif (msgBuf.length() > 0) {\nmsgBuf.append(\"\\n\");\n}\nmsgBuf.append(\"Role Type is Parent of one or more Role Types.\");\n}\nif (msgBuf.length() > 0) {\nthrow new DTSValidationException(msgBuf.toString());\n}\n}\nString sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, \"DELETE_RIGHT_IDENTITY_REF\");\nString sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, \"DELETE_PARENT_REF\");\nString sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, \"DELETE\");\nPreparedStatement pstmt = null;\nboolean success = false;\nlong typeGid = getGID(namespaceId, id);\nconn.setAutoCommit(false);\nint defaultLevel = conn.getTransactionIsolation();\nconn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\ntry {\npstmt = conn.prepareStatement(sqlRightId);\npstmt.setLong(1, typeGid);\npstmt.executeUpdate();\npstmt.close();\npstmt = conn.prepareStatement(sqlParent);\npstmt.setLong(1, typeGid);\npstmt.executeUpdate();\npstmt.close();\npstmt = conn.prepareStatement(sql);\npstmt.setLong(1, typeGid);\nint count = pstmt.executeUpdate();\nsuccess = (count == 1);\nconn.commit();\n} catch (SQLException e) {\nconn.rollback();\nthrow e;\n} finally {\nconn.setTransactionIsolation(defaultLevel);\nconn.setAutoCommit(true);\ncloseStatement(pstmt);\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 287
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14598566",
                        "content": "public static void copyFileByNIO(File in, File out) throws IOException {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_17709070",
                        "content": "public static void copyFile(File file, String pathExport) throws IOException {\nFile out = new File(pathExport);\nFileChannel sourceChannel = new FileInputStream(file).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2245750#230#237.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_10131427",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_17709070",
                        "content": "public static void copyFile(File file, String pathExport) throws IOException {\nFile out = new File(pathExport);\nFileChannel sourceChannel = new FileInputStream(file).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2245750#230#237.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_4716110",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_17709070",
                        "content": "public static void copyFile(File file, String pathExport) throws IOException {\nFile out = new File(pathExport);\nFileChannel sourceChannel = new FileInputStream(file).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2245750#230#237.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_11933797",
                        "content": "public static void CopyFile(String in, String out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();\nFileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_17709070",
                        "content": "public static void copyFile(File file, String pathExport) throws IOException {\nFile out = new File(pathExport);\nFileChannel sourceChannel = new FileInputStream(file).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2245750#230#237.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_17730719",
                        "content": "<reponame>cragkhit/elasticsearch\nString runScript(String scriptName) {\nString data = \"\";\ntry {\nURL url = new URL(getCodeBase().toString() + scriptName);\nInputStream in = url.openStream();\nBufferedInputStream buffIn = new BufferedInputStream(in);\ndo {\nint temp = buffIn.read();\nif (temp == -1) break;\ndata = data + (char) temp;\n} while (true);\n} catch (Exception e) {\ndata = \"error!\";\n}\nreturn data;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#63462#10#25.java",
                        "__cluster__": 196
                },
                {
                        "id": "test_bigclonebench_data_807346",
                        "content": "String runScript(String scriptName) {\nString data = \"\";\ntry {\nURL url = new URL(getCodeBase().toString() + scriptName);\nInputStream in = url.openStream();\nBufferedInputStream buffIn = new BufferedInputStream(in);\ndo {\nint temp = buffIn.read();\nif (temp == -1) break;\ndata = data + (char) temp;\n} while (true);\n} catch (Exception e) {\ndata = \"error!\";\n}\nreturn data;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 196
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20208819",
                        "content": "private static final String hash(String input, String algorithm) {\ntry {\nMessageDigest dig = MessageDigest.getInstance(algorithm);\ndig.update(input.getBytes());\nStringBuffer result = new StringBuffer();\nbyte[] digest = dig.digest();\nString[] hex = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" };\nfor (int i = 0; i < digest.length; i++) {\nint u = digest[i];\nu &= 0x000000FF;\nint highCount = u / 16;\nint lowCount = u - (highCount * 16);\nresult.append(hex[highCount]);\nresult.append(hex[lowCount]);\n}\nreturn result.toString();\n} catch (NoSuchAlgorithmException e) {\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 52
                },
                {
                        "id": "pretrain_java_data_3208361",
                        "content": "private static final String hash(String input, String algorithm) {\ntry {\nMessageDigest dig = MessageDigest.getInstance(algorithm);\ndig.update(input.getBytes());\nStringBuffer result = new StringBuffer();\nbyte[] digest = dig.digest();\nString[] hex = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" };\nfor (int i = 0; i < digest.length; i++) {\nint u = digest[i];\nu &= 0x000000FF;\nint highCount = u / 16;\nint lowCount = u - (highCount * 16);\nresult.append(hex[highCount]);\nresult.append(hex[lowCount]);\n}\nreturn result.toString();\n} catch (NoSuchAlgorithmException e) {\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1256219#20#39.java",
                        "__cluster__": 52
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2198730",
                        "content": "public void importCSV(InputStream csvfile) throws Exception {\ntry {\nString[] qmarks = new String[columns.length];\nfor (int i = 0; i < qmarks.length; i++) {\nqmarks[i] = \"?\";\n}\nif (cleartable) {\nString delsql = \"delete from \" + table;\nStatement delstm = conn.createStatement();\ndelstm.executeUpdate(delsql);\n}\nString sql = \"insert into \" + table + \" (\" + StringUtils.join(columns, \", \") + \") values (\" + StringUtils.join(qmarks, \", \") + \")\";\nlog.debug(\"SQL: \" + sql);\nPreparedStatement stm = conn.prepareStatement(sql);\nint datatypes[] = new int[columns.length];\nfor (int i = 0; i < columns.length; i++) {\nTable tbl = project.getTableByName(table);\nif (tbl == null) throw new OntopiaRuntimeException(\"Unknown table: \" + table);\nColumn col = tbl.getColumnByName(columns[i]);\nif (col == null) throw new OntopiaRuntimeException(\"Unknown table column: \" + columns[i]);\nif (col.getType() == null) throw new OntopiaRuntimeException(\"Column type is null: \" + col.getType());\nDataType datatype = project.getDataTypeByName(col.getType(), \"generic\");\nif (datatype == null) throw new OntopiaRuntimeException(\"Unknown column type: \" + col.getType());\nString dtype = datatype.getType();\nif (\"varchar\".equals(dtype)) datatypes[i] = Types.VARCHAR; else if (\"integer\".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException(\"Unknown datatype: \" + dtype);\n}\nLineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));\nfor (int i = 0; i < ignorelines; i++) {\nString line = reader.readLine();\nif (line == null) break;\n}\nlog.debug(\"[\" + StringUtils.join(columns, \", \") + \"]\");\nint lineno = 0;\nwhile (true) {\nlineno++;\nString line = reader.readLine();\nif (line == null) break;\ntry {\nString[] cols = StringUtils.split(line, separator);\nif (cols.length > columns.length && !ignorecolumns) log.debug(\"Ignoring columns: \" + (columns.length + 1) + \"-\" + cols.length + \" '\" + line + \"'\");\nlog.debug(\"CVALUES: \" + (columns.length + 1) + \"-\" + cols.length + \" '\" + line + \"'\");\nString dmesg = \"(\";\nfor (int i = 0; i < columns.length; i++) {\nString col = cols[i];\nif (stripquotes) {\nint len = col.length();\nif (len > 1 && ((col.charAt(0) == '\"' && col.charAt(len - 1) == '\"') || (col.charAt(0) == '\\'' && col.charAt(len - 1) == '\\''))) col = col.substring(1, len - 1);\n}\nif (col != null && col.equals(\"\")) col = null;\ndmesg = dmesg + col;\nif (i < columns.length - 1) dmesg = dmesg + \", \";\nstm.setObject(i + 1, col, datatypes[i]);\n}\ndmesg = dmesg + \")\";\nlog.debug(dmesg);\nstm.execute();\n} catch (Exception e) {\nconn.rollback();\nthrow new OntopiaRuntimeException(\"Cannot read line \" + lineno + \": '\" + line + \"'\", e);\n}\n}\nconn.commit();\n} finally {\nif (conn != null) conn.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 240
                },
                {
                        "id": "pretrain_java_data_3202040",
                        "content": "public void importCSV(InputStream csvfile) throws Exception {\ntry {\nString[] qmarks = new String[columns.length];\nfor (int i = 0; i < qmarks.length; i++) {\nqmarks[i] = \"?\";\n}\nif (cleartable) {\nString delsql = \"delete from \" + table;\nStatement delstm = conn.createStatement();\ndelstm.executeUpdate(delsql);\n}\nString sql = \"insert into \" + table + \" (\" + StringUtils.join(columns, \", \") + \") values (\" + StringUtils.join(qmarks, \", \") + \")\";\nlog.debug(\"SQL: \" + sql);\nPreparedStatement stm = conn.prepareStatement(sql);\nint datatypes[] = new int[columns.length];\nfor (int i = 0; i < columns.length; i++) {\nTable tbl = project.getTableByName(table);\nif (tbl == null) throw new OntopiaRuntimeException(\"Unknown table: \" + table);\nColumn col = tbl.getColumnByName(columns[i]);\nif (col == null) throw new OntopiaRuntimeException(\"Unknown table column: \" + columns[i]);\nif (col.getType() == null) throw new OntopiaRuntimeException(\"Column type is null: \" + col.getType());\nDataType datatype = project.getDataTypeByName(col.getType(), \"generic\");\nif (datatype == null) throw new OntopiaRuntimeException(\"Unknown column type: \" + col.getType());\nString dtype = datatype.getType();\nif (\"varchar\".equals(dtype)) datatypes[i] = Types.VARCHAR; else if (\"integer\".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException(\"Unknown datatype: \" + dtype);\n}\nLineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));\nfor (int i = 0; i < ignorelines; i++) {\nString line = reader.readLine();\nif (line == null) break;\n}\nlog.debug(\"[\" + StringUtils.join(columns, \", \") + \"]\");\nint lineno = 0;\nwhile (true) {\nlineno++;\nString line = reader.readLine();\nif (line == null) break;\ntry {\nString[] cols = StringUtils.split(line, separator);\nif (cols.length > columns.length && !ignorecolumns) log.debug(\"Ignoring columns: \" + (columns.length + 1) + \"-\" + cols.length + \" '\" + line + \"'\");\nlog.debug(\"CVALUES: \" + (columns.length + 1) + \"-\" + cols.length + \" '\" + line + \"'\");\nString dmesg = \"(\";\nfor (int i = 0; i < columns.length; i++) {\nString col = cols[i];\nif (stripquotes) {\nint len = col.length();\nif (len > 1 && ((col.charAt(0) == '\"' && col.charAt(len - 1) == '\"') || (col.charAt(0) == '\\'' && col.charAt(len - 1) == '\\''))) col = col.substring(1, len - 1);\n}\nif (col != null && col.equals(\"\")) col = null;\ndmesg = dmesg + col;\nif (i < columns.length - 1) dmesg = dmesg + \", \";\nstm.setObject(i + 1, col, datatypes[i]);\n}\ndmesg = dmesg + \")\";\nlog.debug(dmesg);\nstm.execute();\n} catch (Exception e) {\nconn.rollback();\nthrow new OntopiaRuntimeException(\"Cannot read line \" + lineno + \": '\" + line + \"'\", e);\n}\n}\nconn.commit();\n} finally {\nif (conn != null) conn.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1337801#123#188.java",
                        "__cluster__": 240
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_3267990",
                        "content": "public static String md5(String text) {\nString encrypted = \"\";\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(text.getBytes());\nencrypted = hex(md.digest());\n} catch (NoSuchAlgorithmException nsaEx) {\n}\nreturn encrypted;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#640368#11#20.java",
                        "__cluster__": 246
                },
                {
                        "id": "test_bigclonebench_data_8320469",
                        "content": "public static String md5(String text) {\nString encrypted = \"\";\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(text.getBytes());\nencrypted = hex(md.digest());\n} catch (NoSuchAlgorithmException nsaEx) {\n}\nreturn encrypted;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 246
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19369560",
                        "content": "private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[64];\nmd.update(input.getBytes(\"iso-8859-1\"), 0, input.length());\nmd5hash = md.digest();\nreturn this.convertToHex(md5hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2466734#167#173.java",
                        "__cluster__": 262
                },
                {
                        "id": "test_bigclonebench_data_3536332",
                        "content": "private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[64];\nmd.update(input.getBytes(\"iso-8859-1\"), 0, input.length());\nmd5hash = md.digest();\nreturn this.convertToHex(md5hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 262
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11475527",
                        "content": "void addDataFromURL(URL theurl) {\nString line;\nInputStream in = null;\ntry {\nin = theurl.openStream();\nBufferedReader data = new BufferedReader(new InputStreamReader(in));\nwhile ((line = data.readLine()) != null) {\nthetext.append(line + \"\\n\");\n}\n} catch (Exception e) {\nSystem.out.println(e.toString());\nthetext.append(theurl.toString());\n}\ntry {\nin.close();\n} catch (Exception e) {\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 276
                },
                {
                        "id": "pretrain_java_data_19329984",
                        "content": "void addDataFromURL(URL theurl) {\nString line;\nInputStream in = null;\ntry {\nin = theurl.openStream();\nBufferedReader data = new BufferedReader(new InputStreamReader(in));\nwhile ((line = data.readLine()) != null) {\nthetext.append(line + \"\\n\");\n}\n} catch (Exception e) {\nSystem.out.println(e.toString());\nthetext.append(theurl.toString());\n}\ntry {\nin.close();\n} catch (Exception e) {\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1735891#33#50.java",
                        "__cluster__": 276
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5723876",
                        "content": "public static final String calculate(File f) {\nMessageDigest md;\nBufferedReader rd;\nStringBuffer buffer = new StringBuffer(\"\");\ntry {\nrd = new BufferedReader(new FileReader(f));\nmd = MessageDigest.getInstance(\"SHA\");\nString line = \"\";\nwhile ((line = rd.readLine()) != null) buffer.append(line);\nmd.update(buffer.toString().getBytes());\nbyte[] digest = md.digest();\nString result = \"\";\nfor (byte b : digest) result += String.format(\"%h\", b & 0xFF);\nreturn result;\n} catch (Exception ex) {\nex.printStackTrace();\nreturn \"\";\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 516
                },
                {
                        "id": "pretrain_java_data_3232961",
                        "content": "public static final String calculate(File f) {\nMessageDigest md;\nBufferedReader rd;\nStringBuffer buffer = new StringBuffer(\"\");\ntry {\nrd = new BufferedReader(new FileReader(f));\nmd = MessageDigest.getInstance(\"SHA\");\nString line = \"\";\nwhile ((line = rd.readLine()) != null) buffer.append(line);\nmd.update(buffer.toString().getBytes());\nbyte[] digest = md.digest();\nString result = \"\";\nfor (byte b : digest) result += String.format(\"%h\", b & 0xFF);\nreturn result;\n} catch (Exception ex) {\nex.printStackTrace();\nreturn \"\";\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#888450#20#38.java",
                        "__cluster__": 516
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_3318550",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nif (in.getCanonicalPath().equals(out.getCanonicalPath())) {\nreturn;\n}\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2006571#147#165.java",
                        "__cluster__": 444
                },
                {
                        "id": "test_bigclonebench_data_8069594",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nif (in.getCanonicalPath().equals(out.getCanonicalPath())) {\nreturn;\n}\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_3318550",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nif (in.getCanonicalPath().equals(out.getCanonicalPath())) {\nreturn;\n}\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2006571#147#165.java",
                        "__cluster__": 444
                },
                {
                        "id": "test_bigclonebench_data_20310134",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_3318550",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nif (in.getCanonicalPath().equals(out.getCanonicalPath())) {\nreturn;\n}\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2006571#147#165.java",
                        "__cluster__": 444
                },
                {
                        "id": "test_bigclonebench_data_1769771",
                        "content": "private void copyFile(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_3318550",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nif (in.getCanonicalPath().equals(out.getCanonicalPath())) {\nreturn;\n}\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2006571#147#165.java",
                        "__cluster__": 444
                },
                {
                        "id": "test_bigclonebench_data_20091126",
                        "content": "static File copy(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\nreturn out;\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_3318550",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nif (in.getCanonicalPath().equals(out.getCanonicalPath())) {\nreturn;\n}\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2006571#147#165.java",
                        "__cluster__": 444
                },
                {
                        "id": "test_bigclonebench_data_8132219",
                        "content": "public static void copyFile(String inFile, String outFile) {\nFile in = new File(inFile);\nFile out = new File(outFile);\ntry {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8069594",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nif (in.getCanonicalPath().equals(out.getCanonicalPath())) {\nreturn;\n}\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "id": "pretrain_java_data_3258703",
                        "content": "public static void copyFile(File inputFile, File outputFile) throws IOException {\nFileChannel inChannel = null;\nFileChannel outChannel = null;\ntry {\ninChannel = new FileInputStream(inputFile).getChannel();\noutChannel = new FileOutputStream(outputFile).getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\ntry {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n} catch (IOException e) {\nthrow e;\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#224239#22#43.java",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_20310134",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "id": "pretrain_java_data_3258703",
                        "content": "public static void copyFile(File inputFile, File outputFile) throws IOException {\nFileChannel inChannel = null;\nFileChannel outChannel = null;\ntry {\ninChannel = new FileInputStream(inputFile).getChannel();\noutChannel = new FileOutputStream(outputFile).getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\ntry {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n} catch (IOException e) {\nthrow e;\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#224239#22#43.java",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_3258703",
                        "content": "public static void copyFile(File inputFile, File outputFile) throws IOException {\nFileChannel inChannel = null;\nFileChannel outChannel = null;\ntry {\ninChannel = new FileInputStream(inputFile).getChannel();\noutChannel = new FileOutputStream(outputFile).getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\ntry {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n} catch (IOException e) {\nthrow e;\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#224239#22#43.java",
                        "__cluster__": 444
                },
                {
                        "id": "test_bigclonebench_data_1769771",
                        "content": "private void copyFile(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_3258703",
                        "content": "public static void copyFile(File inputFile, File outputFile) throws IOException {\nFileChannel inChannel = null;\nFileChannel outChannel = null;\ntry {\ninChannel = new FileInputStream(inputFile).getChannel();\noutChannel = new FileOutputStream(outputFile).getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\ntry {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n} catch (IOException e) {\nthrow e;\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#224239#22#43.java",
                        "__cluster__": 444
                },
                {
                        "id": "test_bigclonebench_data_20091126",
                        "content": "static File copy(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\nreturn out;\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_3258703",
                        "content": "public static void copyFile(File inputFile, File outputFile) throws IOException {\nFileChannel inChannel = null;\nFileChannel outChannel = null;\ntry {\ninChannel = new FileInputStream(inputFile).getChannel();\noutChannel = new FileOutputStream(outputFile).getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\ntry {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n} catch (IOException e) {\nthrow e;\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#224239#22#43.java",
                        "__cluster__": 444
                },
                {
                        "id": "test_bigclonebench_data_8132219",
                        "content": "public static void copyFile(String inFile, String outFile) {\nFile in = new File(inFile);\nFile out = new File(outFile);\ntry {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_7006052",
                        "content": "public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\nFile destFile = new File(dest);\nInputStream in = new FileInputStream(new File(src));\nOutputStream out = new FileOutputStream(destFile);\nbyte buf[] = new byte[1024];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nin.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 119
                },
                {
                        "id": "pretrain_java_data_3235054",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copy(File src, File dst) throws IOException {\nInputStream in = new FileInputStream(src);\nOutputStream out = new FileOutputStream(dst);\nbyte[] buf = new byte[1024];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nin.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1823751#50#58.java",
                        "__cluster__": 119
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_17791385",
                        "content": "public static void copyFile(File src, File dst) throws IOException {\nInputStream in = new FileInputStream(src);\nOutputStream out = new FileOutputStream(dst);\nbyte[] buf = new byte[1024];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nin.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 119
                },
                {
                        "id": "pretrain_java_data_3235054",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copy(File src, File dst) throws IOException {\nInputStream in = new FileInputStream(src);\nOutputStream out = new FileOutputStream(dst);\nbyte[] buf = new byte[1024];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nin.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1823751#50#58.java",
                        "__cluster__": 119
                },
                {
                        "real_dup": 3
                }
        ],


        [
                {
                        "id": "pretrain_java_data_3234117",
                        "content": "public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\nFile in = null;\nif (input.equals(STDIN)) {\ntry {\nin = File.createTempFile(\"tmp\", \".jp2\");\ninput = in.getAbsolutePath();\nin.deleteOnExit();\nIOUtils.copyFile(new File(STDIN), in);\n} catch (IOException e) {\nlogger.error(\"Unable to process image from \" + STDIN + \": \" + e.getMessage());\nthrow new DjatokaException(e);\n}\n}\nBufferedImage bi = extractImpl.process(input, params);\nif (bi != null) {\nif (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\nif (params.getTransform() != null) bi = params.getTransform().run(bi);\nw.write(bi, os);\n}\nif (in != null) in.delete();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1607795#154#174.java",
                        "__cluster__": 715
                },
                {
                        "id": "test_bigclonebench_data_3330944",
                        "content": "public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\nFile in = null;\nString dest = output;\nif (input.equals(STDIN)) {\ntry {\nin = File.createTempFile(\"tmp\", \".jp2\");\ninput = in.getAbsolutePath();\nin.deleteOnExit();\nIOUtils.copyFile(new File(STDIN), in);\n} catch (IOException e) {\nlogger.error(\"Unable to process image from \" + STDIN + \": \" + e.getMessage());\nthrow new DjatokaException(e);\n}\n}\nBufferedImage bi = extractImpl.process(input, params);\nif (bi != null) {\nif (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\nif (params.getTransform() != null) bi = params.getTransform().run(bi);\ntry {\nBufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\nw.write(bi, os);\nos.close();\n} catch (FileNotFoundException e) {\nlogger.error(\"Requested file was not found: \" + dest);\nthrow new DjatokaException(e);\n} catch (IOException e) {\nlogger.error(\"Error attempting to close: \" + dest);\nthrow new DjatokaException(e);\n}\n}\nif (in != null) in.delete();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 715
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_3285688",
                        "content": "public static String getSSHADigest(String password, String salt) {\nString digest = null;\nMessageDigest sha = null;\ntry {\nsha = MessageDigest.getInstance(\"SHA-1\");\nsha.reset();\nsha.update(password.getBytes());\nsha.update(salt.getBytes());\nbyte[] pwhash = sha.digest();\ndigest = \"{SSHA}\" + new String(Base64.encode(concatenate(pwhash, salt.getBytes())));\n} catch (NoSuchAlgorithmException nsae) {\nCofaxToolsUtil.log(\"Algorithme SHA-1 non supporte a la creation du hashage\" + nsae + id);\n}\nreturn digest;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1411934#59#73.java",
                        "__cluster__": 423
                },
                {
                        "id": "test_bigclonebench_data_16556717",
                        "content": "public static String getSHADigest(String password) {\nString digest = null;\nMessageDigest sha = null;\ntry {\nsha = MessageDigest.getInstance(\"SHA-1\");\nsha.reset();\nsha.update(password.getBytes());\nbyte[] pwhash = sha.digest();\ndigest = \"{SHA}\" + new String(Base64.encode(pwhash));\n} catch (NoSuchAlgorithmException nsae) {\nCofaxToolsUtil.log(\"Algorithme SHA-1 non supporte a la creation du hashage\" + nsae + id);\n}\nreturn digest;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 423
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_20660203",
                        "content": "public static void main(String args[]) {\nint temp;\nint[] a1 = { 6, 2, -3, 7, -1, 8, 9, 0 };\nfor (int j = 0; j < (a1.length * a1.length); j++) {\nfor (int i = 0; i < a1.length - 1; i++) {\nif (a1[i] > a1[i + 1]) {\ntemp = a1[i];\na1[i] = a1[i + 1];\na1[i + 1] = temp;\n}\n}\n}\nfor (int i = 0; i < a1.length; i++) {\nSystem.out.print(\" \" + a1[i]);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 124
                },
                {
                        "id": "pretrain_java_data_4888838",
                        "content": "public static void main(String args[]) {\nint temp;\nint[] a1 = { 6, 2, -3, 7, -1, 8, 9, 0 };\nfor (int j = 0; j < (a1.length * a1.length); j++) {\nfor (int i = 0; i < a1.length - 1; i++) {\nif (a1[i] > a1[i + 1]) {\ntemp = a1[i];\na1[i] = a1[i + 1];\na1[i + 1] = temp;\n}\n}\n}\nfor (int i = 0; i < a1.length; i++) {\nSystem.out.print(\" \" + a1[i]);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1728095#5#20.java",
                        "__cluster__": 124
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13122204",
                        "content": "public static void unzipModel(String filename, String tempdir) throws EDITSException {\ntry {\nBufferedOutputStream dest = null;\nFileInputStream fis = new FileInputStream(filename);\nint BUFFER = 2048;\nZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\nZipEntry entry;\nwhile ((entry = zis.getNextEntry()) != null) {\nint count;\nbyte data[] = new byte[BUFFER];\nFileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\ndest = new BufferedOutputStream(fos, BUFFER);\nwhile ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\ndest.flush();\ndest.close();\n}\nzis.close();\n} catch (Exception e) {\nthrow new EDITSException(\"Can not expand model in \\\"\" + tempdir + \"\\\" because:\\n\" + e.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 210
                },
                {
                        "id": "pretrain_java_data_3391045",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void unzipModel(String filename, String tempdir) throws EDITSException {\ntry {\nBufferedOutputStream dest = null;\nFileInputStream fis = new FileInputStream(filename);\nint BUFFER = 2048;\nZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\nZipEntry entry;\nwhile ((entry = zis.getNextEntry()) != null) {\nint count;\nbyte data[] = new byte[BUFFER];\nFileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\ndest = new BufferedOutputStream(fos, BUFFER);\nwhile ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\ndest.flush();\ndest.close();\n}\nzis.close();\n} catch (Exception e) {\nthrow new EDITSException(\"Can not expand model in \\\"\" + tempdir + \"\\\" because:\\n\" + e.getMessage());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2154817#183#203.java",
                        "__cluster__": 210
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4809719",
                        "content": "public static DigitalObjectContent byReference(final InputStream inputStream) {\ntry {\nFile tempFile = File.createTempFile(\"tempContent\", \"tmp\");\ntempFile.deleteOnExit();\nFileOutputStream out = new FileOutputStream(tempFile);\nIOUtils.copyLarge(inputStream, out);\nout.close();\nreturn new ImmutableContent(tempFile);\n} catch (IOException e) {\ne.printStackTrace();\n}\nthrow new IllegalStateException(\"Could not create content for input stream: \" + inputStream);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1018045#68#80.java",
                        "__cluster__": 526
                },
                {
                        "id": "test_bigclonebench_data_16378239",
                        "content": "public static DigitalObjectContent byReference(final InputStream inputStream) {\ntry {\nFile tempFile = File.createTempFile(\"tempContent\", \"tmp\");\ntempFile.deleteOnExit();\nFileOutputStream out = new FileOutputStream(tempFile);\nIOUtils.copyLarge(inputStream, out);\nout.close();\nreturn new ImmutableContent(tempFile);\n} catch (IOException e) {\ne.printStackTrace();\n}\nthrow new IllegalStateException(\"Could not create content for input stream: \" + inputStream);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 526
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8328527",
                        "content": "public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {\nDBOperation dbo = null;\nConnection connection = null;\nPreparedStatement preStm = null;\nString sql = \"insert into COFFICE_JOBLOG_CHECKAUTH (USER_ID,CHECK_ID,CHECK_TYPE,OBJ_TYPE) values (?,?,?,?)\";\nString cleanSql = \"delete from COFFICE_JOBLOG_CHECKAUTH where \" + \"user_id = '\" + userId + \"' and check_type = '\" + checkType + \"' and obj_type = '\" + objType + \"'\";\ntry {\ndbo = createDBOperation();\nconnection = dbo.getConnection();\nconnection.setAutoCommit(false);\npreStm = connection.prepareStatement(cleanSql);\nint dCount = preStm.executeUpdate();\nString sHaveIns = \",\";\npreStm = connection.prepareStatement(sql);\nfor (int j = 0; j < checkId.length; j++) {\nif (sHaveIns.indexOf(\",\" + checkId[j] + \",\") < 0) {\npreStm.setInt(1, Integer.parseInt(userId));\npreStm.setInt(2, Integer.parseInt(checkId[j]));\npreStm.setInt(3, Integer.parseInt(checkType));\npreStm.setInt(4, Integer.parseInt(objType));\npreStm.executeUpdate();\nsHaveIns += checkId[j] + \",\";\n}\n}\nconnection.commit();\n} catch (Exception ex) {\nlog.debug((new Date().toString()) + \" \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0228\ufffd\ufffd\u02a7\ufffd\ufffd! \");\ntry {\nconnection.rollback();\n} catch (SQLException e) {\nthrow e;\n}\nthrow ex;\n} finally {\nclose(null, null, preStm, connection, dbo);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 570
                },
                {
                        "id": "pretrain_java_data_4881824",
                        "content": "public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {\nDBOperation dbo = null;\nConnection connection = null;\nPreparedStatement preStm = null;\nString sql = \"insert into COFFICE_JOBLOG_CHECKAUTH (USER_ID,CHECK_ID,CHECK_TYPE,OBJ_TYPE) values (?,?,?,?)\";\nString cleanSql = \"delete from COFFICE_JOBLOG_CHECKAUTH where \" + \"user_id = '\" + userId + \"' and check_type = '\" + checkType + \"' and obj_type = '\" + objType + \"'\";\ntry {\ndbo = createDBOperation();\nconnection = dbo.getConnection();\nconnection.setAutoCommit(false);\npreStm = connection.prepareStatement(cleanSql);\nint dCount = preStm.executeUpdate();\npreStm = connection.prepareStatement(sql);\nString sHaveIns = \",\";\nfor (int j = 0; j < checkId.length; j++) {\nif (sHaveIns.indexOf(\",\" + checkId[j] + \",\") < 0) {\npreStm.setInt(1, Integer.parseInt(userId));\npreStm.setInt(2, Integer.parseInt(checkId[j]));\npreStm.setInt(3, Integer.parseInt(checkType));\npreStm.setInt(4, Integer.parseInt(objType));\npreStm.executeUpdate();\nsHaveIns += checkId[j] + \",\";\n}\n}\nconnection.commit();\n} catch (Exception ex) {\nlog.debug((new Date().toString()) + \" \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0228\ufffd\ufffd\u02a7\ufffd\ufffd! \");\ntry {\nconnection.rollback();\n} catch (SQLException e) {\nthrow e;\n}\nthrow ex;\n} finally {\nclose(null, null, preStm, connection, dbo);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1956657#33#69.java",
                        "__cluster__": 570
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_4915542",
                        "content": "public static final String encryptPassword(String loginName, String password) {\ntry {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(loginName.toUpperCase().getBytes(\"UTF-8\"));\nmd5.update(password.getBytes(\"UTF-8\"));\nbyte[] ba = md5.digest();\nreturn byte2hex(ba);\n} catch (Exception e) {\nreturn password;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2375145#31#41.java",
                        "__cluster__": 677
                },
                {
                        "id": "test_bigclonebench_data_5808579",
                        "content": "public static final String encryptPassword(String loginName, String password) {\ntry {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(loginName.toUpperCase().getBytes(\"UTF-8\"));\nmd5.update(password.getBytes(\"UTF-8\"));\nbyte[] ba = md5.digest();\nreturn byte2hex(ba);\n} catch (Exception e) {\nreturn password;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 677
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3024987",
                        "content": "@Test\npublic void testCopy_readerToOutputStream_Encoding() throws Exception {\nInputStream in = new ByteArrayInputStream(inData);\nin = new YellOnCloseInputStreamTest(in);\nReader reader = new InputStreamReader(in, \"US-ASCII\");\nByteArrayOutputStream baout = new ByteArrayOutputStream();\nOutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\nIOUtils.copy(reader, out, \"UTF16\");\nbyte[] bytes = baout.toByteArray();\nbytes = new String(bytes, \"UTF16\").getBytes(\"US-ASCII\");\nassertTrue(\"Content differs\", Arrays.equals(inData, bytes));\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 184
                },
                {
                        "id": "pretrain_java_data_3364369",
                        "content": "<reponame>cragkhit/elasticsearch\n@Test\npublic void testCopy_readerToOutputStream_Encoding() throws Exception {\nInputStream in = new ByteArrayInputStream(inData);\nin = new YellOnCloseInputStreamTest(in);\nReader reader = new InputStreamReader(in, \"US-ASCII\");\nByteArrayOutputStream baout = new ByteArrayOutputStream();\nOutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\nIOUtils.copy(reader, out, \"UTF16\");\nbyte[] bytes = baout.toByteArray();\nbytes = new String(bytes, \"UTF16\").getBytes(\"US-ASCII\");\nassertTrue(\"Content differs\", Arrays.equals(inData, bytes));\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2078997#220#231.java",
                        "__cluster__": 184
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4864764",
                        "content": "<gh_stars>10-100\npublic boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\nSystem.out.println(\"\");\nboolean estado = false;\ntry {\nFileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\nFileChannel canalOrigen = rutaFicheroOrigen.getChannel();\nFileChannel canalDestino = salida.getChannel();\ncanalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\nrutaFicheroOrigen.close();\nsalida.close();\nestado = true;\n} catch (IOException e) {\nSystem.out.println(\"No se encontro el archivo\");\ne.printStackTrace();\nestado = false;\n}\nreturn estado;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1420932#309#326.java",
                        "__cluster__": 237
                },
                {
                        "id": "test_bigclonebench_data_17729554",
                        "content": "public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\nSystem.out.println(\"\");\nboolean estado = false;\ntry {\nFileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\nFileChannel canalOrigen = rutaFicheroOrigen.getChannel();\nFileChannel canalDestino = salida.getChannel();\ncanalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\nrutaFicheroOrigen.close();\nsalida.close();\nestado = true;\n} catch (IOException e) {\nSystem.out.println(\"No se encontro el archivo\");\ne.printStackTrace();\nestado = false;\n}\nreturn estado;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 237
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9096314",
                        "content": "private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\nCategory log = ThreadCategory.getInstance(OutageWriter.class);\nif (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\nlog.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid/ip/svc: \" + eventID + \"/\" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\nreturn;\n}\nConnection dbConn = null;\ntry {\ndbConn = DatabaseConnectionFactory.getInstance().getConnection();\nif (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\nlog.warn(\"\\'\" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + \"\\' for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" ignored - table already  has an open record \");\n} else {\nPreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\nlong outageID = -1;\nResultSet seqRS = getNextOutageIdStmt.executeQuery();\nif (seqRS.next()) {\noutageID = seqRS.getLong(1);\n}\nseqRS.close();\ntry {\ndbConn.setAutoCommit(false);\n} catch (SQLException sqle) {\nlog.error(\"Unable to change database AutoCommit to FALSE\", sqle);\nreturn;\n}\nPreparedStatement newOutageWriter = null;\nif (log.isDebugEnabled()) log.debug(\"handleNodeLostService: creating new outage entry...\");\nnewOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\nnewOutageWriter.setLong(1, outageID);\nnewOutageWriter.setLong(2, eventID);\nnewOutageWriter.setLong(3, nodeID);\nnewOutageWriter.setString(4, ipAddr);\nnewOutageWriter.setLong(5, serviceID);\nnewOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\nnewOutageWriter.executeUpdate();\nnewOutageWriter.close();\ntry {\ndbConn.commit();\nif (log.isDebugEnabled()) log.debug(\"nodeLostService : \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" recorded in DB\");\n} catch (SQLException se) {\nlog.warn(\"Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID, se);\ntry {\ndbConn.rollback();\n} catch (SQLException sqle) {\nlog.warn(\"SQL exception during rollback, reason\", sqle);\n}\n}\n}\n} catch (SQLException sqle) {\nlog.warn(\"SQL exception while handling \\'nodeLostService\\'\", sqle);\n} finally {\ntry {\nif (dbConn != null) dbConn.close();\n} catch (SQLException e) {\nlog.warn(\"Exception closing JDBC connection\", e);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 97
                },
                {
                        "id": "pretrain_java_data_4880390",
                        "content": "<gh_stars>10-100\nprivate void handleInterfaceDown(long eventID, long nodeID, String ipAddr, String eventTime) {\nCategory log = ThreadCategory.getInstance(OutageWriter.class);\nif (eventID == -1 || nodeID == -1 || ipAddr == null) {\nlog.warn(EventConstants.INTERFACE_DOWN_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid/ip: \" + eventID + \"/\" + nodeID + \"/\" + ipAddr);\nreturn;\n}\nConnection dbConn = null;\ntry {\ndbConn = DatabaseConnectionFactory.getInstance().getConnection();\ntry {\ndbConn.setAutoCommit(false);\n} catch (SQLException sqle) {\nlog.error(\"Unable to change database AutoCommit to FALSE\", sqle);\nreturn;\n}\nPreparedStatement activeSvcsStmt = dbConn.prepareStatement(OutageConstants.DB_GET_ACTIVE_SERVICES_FOR_INTERFACE);\nPreparedStatement openStmt = dbConn.prepareStatement(OutageConstants.DB_OPEN_RECORD);\nPreparedStatement newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\nPreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\nnewOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\nif (log.isDebugEnabled()) log.debug(\"handleInterfaceDown: creating new outage entries...\");\nactiveSvcsStmt.setLong(1, nodeID);\nactiveSvcsStmt.setString(2, ipAddr);\nResultSet activeSvcsRS = activeSvcsStmt.executeQuery();\nwhile (activeSvcsRS.next()) {\nlong serviceID = activeSvcsRS.getLong(1);\nif (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\nif (log.isDebugEnabled()) log.debug(\"handleInterfaceDown: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" already down\");\n} else {\nlong outageID = -1;\nResultSet seqRS = getNextOutageIdStmt.executeQuery();\nif (seqRS.next()) {\noutageID = seqRS.getLong(1);\n}\nseqRS.close();\nnewOutageWriter.setLong(1, outageID);\nnewOutageWriter.setLong(2, eventID);\nnewOutageWriter.setLong(3, nodeID);\nnewOutageWriter.setString(4, ipAddr);\nnewOutageWriter.setLong(5, serviceID);\nnewOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\nnewOutageWriter.executeUpdate();\nif (log.isDebugEnabled()) log.debug(\"handleInterfaceDown: Recording new outage for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\n}\n}\nactiveSvcsRS.close();\ntry {\ndbConn.commit();\nif (log.isDebugEnabled()) log.debug(\"Outage recorded for all active services for \" + nodeID + \"/\" + ipAddr);\n} catch (SQLException se) {\nlog.warn(\"Rolling back transaction, interfaceDown could not be recorded  for nodeid/ipAddr: \" + nodeID + \"/\" + ipAddr, se);\ntry {\ndbConn.rollback();\n} catch (SQLException sqle) {\nlog.warn(\"SQL exception during rollback, reason\", sqle);\n}\n}\nactiveSvcsStmt.close();\nopenStmt.close();\nnewOutageWriter.close();\n} catch (SQLException sqle) {\nlog.warn(\"SQL exception while handling \\'interfaceDown\\'\", sqle);\n} finally {\ntry {\nif (dbConn != null) dbConn.close();\n} catch (SQLException e) {\nlog.warn(\"Exception closing JDBC connection\", e);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#978099#280#349.java",
                        "__cluster__": 97
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_6544447",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static byte[] getSystemStateHash() {\nMessageDigest sha1;\ntry {\nsha1 = MessageDigest.getInstance(\"SHA1\");\n} catch (Exception e) {\nthrow new Error(\"Error in RandomSeed, no sha1 hash\");\n}\nsha1.update((byte) System.currentTimeMillis());\nsha1.update((byte) Runtime.getRuntime().totalMemory());\nsha1.update((byte) Runtime.getRuntime().freeMemory());\nsha1.update(stackDump(new Throwable()));\ntry {\nProperties props = System.getProperties();\nEnumeration names = props.propertyNames();\nwhile (names.hasMoreElements()) {\nString name = (String) names.nextElement();\nsha1.update(name.getBytes());\nsha1.update(props.getProperty(name).getBytes());\n}\n} catch (Throwable t) {\nsha1.update(stackDump(t));\n}\nsha1.update((byte) System.currentTimeMillis());\ntry {\nsha1.update(InetAddress.getLocalHost().toString().getBytes());\n} catch (Throwable t) {\nsha1.update(stackDump(t));\n}\nsha1.update((byte) System.currentTimeMillis());\nRuntime.getRuntime().gc();\nsha1.update((byte) Runtime.getRuntime().freeMemory());\nsha1.update((byte) System.currentTimeMillis());\nreturn sha1.digest();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1574363#243#276.java",
                        "__cluster__": 83
                },
                {
                        "id": "test_bigclonebench_data_15904772",
                        "content": "public static byte[] getSystemStateHash() {\nMessageDigest sha1;\ntry {\nsha1 = MessageDigest.getInstance(\"SHA1\");\n} catch (Exception e) {\nthrow new Error(\"Error in RandomSeed, no sha1 hash\");\n}\nsha1.update((byte) System.currentTimeMillis());\nsha1.update((byte) Runtime.getRuntime().totalMemory());\nsha1.update((byte) Runtime.getRuntime().freeMemory());\nsha1.update(stackDump(new Throwable()));\ntry {\nProperties props = System.getProperties();\nEnumeration names = props.propertyNames();\nwhile (names.hasMoreElements()) {\nString name = (String) names.nextElement();\nsha1.update(name.getBytes());\nsha1.update(props.getProperty(name).getBytes());\n}\n} catch (Throwable t) {\nsha1.update(stackDump(t));\n}\nsha1.update((byte) System.currentTimeMillis());\ntry {\nsha1.update(InetAddress.getLocalHost().toString().getBytes());\n} catch (Throwable t) {\nsha1.update(stackDump(t));\n}\nsha1.update((byte) System.currentTimeMillis());\nRuntime.getRuntime().gc();\nsha1.update((byte) Runtime.getRuntime().freeMemory());\nsha1.update((byte) System.currentTimeMillis());\nreturn sha1.digest();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 83
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_335223",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_88047",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_804637",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_755203",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_397240",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_822452",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_530882",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_536614",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_841724",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_189963",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_300397",
                        "content": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 175
                },
                {
                        "id": "pretrain_java_data_6492268",
                        "content": "<gh_stars>10-100\nprivate static void readAndRewrite(File inFile, File outFile) throws IOException {\nImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\nDcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\nDataset ds = DcmObjectFactory.getInstance().newDataset();\ndcmParser.setDcmHandler(ds.getDcmHandler());\ndcmParser.parseDcmFile(null, Tags.PixelData);\nPixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\nSystem.out.println(\"reading \" + inFile + \"...\");\npdReader.readPixelData(false);\nImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\nDcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\nds.writeDataset(out, dcmEncParam);\nds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\nSystem.out.println(\"writing \" + outFile + \"...\");\nPixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\npdWriter.writePixelData();\nout.flush();\nout.close();\nSystem.out.println(\"done!\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99202#27#46.java",
                        "__cluster__": 175
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2642914",
                        "content": "private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {\nFile f = new File(path);\nString entryName = base + f.getName();\nFileInputStream goIn = new FileInputStream(f);\nTarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);\ntaro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\ntaro.putArchiveEntry(tarEntry);\nif (f.isFile()) {\nIOUtils.copy(goIn, taro);\ntaro.closeArchiveEntry();\n} else {\ntaro.closeArchiveEntry();\nFile[] children = f.listFiles();\nif (children != null) {\nfor (File child : children) {\naddFileToTarGz(taro, child.getAbsolutePath(), entryName + \"/\");\n}\n}\n}\ntaro.close();\ngoIn.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 313
                },
                {
                        "id": "pretrain_java_data_6407793",
                        "content": "<gh_stars>10-100\nprivate static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {\nFile f = new File(path);\nString entryName = base + f.getName();\nFileInputStream goIn = new FileInputStream(f);\nTarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);\ntaro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\ntaro.putArchiveEntry(tarEntry);\nif (f.isFile()) {\nIOUtils.copy(goIn, taro);\ntaro.closeArchiveEntry();\n} else {\ntaro.closeArchiveEntry();\nFile[] children = f.listFiles();\nif (children != null) {\nfor (File child : children) {\naddFileToTarGz(taro, child.getAbsolutePath(), entryName + \"/\");\n}\n}\n}\ntaro.close();\ngoIn.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#100932#82#103.java",
                        "__cluster__": 313
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18374478",
                        "content": "public void updateUser(final User user) throws IOException {\ntry {\nConnection conn = null;\nboolean autoCommit = false;\ntry {\nconn = pool.getConnection();\nautoCommit = conn.getAutoCommit();\nconn.setAutoCommit(false);\nfinal PreparedStatement updateUser = conn.prepareStatement(\"update users set mainRoleId=? where userId=?\");\nupdateUser.setInt(1, user.getMainRole().getId());\nupdateUser.setString(2, user.getUserId());\nupdateUser.executeUpdate();\nfinal PreparedStatement deleteRoles = conn.prepareStatement(\"delete from userRoles where userId=?\");\ndeleteRoles.setString(1, user.getUserId());\ndeleteRoles.executeUpdate();\nfinal PreparedStatement insertRoles = conn.prepareStatement(\"insert into userRoles (userId, roleId) values (?,?)\");\nfor (final Role role : user.getRoles()) {\ninsertRoles.setString(1, user.getUserId());\ninsertRoles.setInt(2, role.getId());\ninsertRoles.executeUpdate();\n}\nconn.commit();\n} catch (Throwable t) {\nif (conn != null) conn.rollback();\nthrow new SQLException(t.toString());\n} finally {\nif (conn != null) {\nconn.setAutoCommit(autoCommit);\nconn.close();\n}\n}\n} catch (final SQLException sqle) {\nlog.log(Level.SEVERE, sqle.toString(), sqle);\nthrow new IOException(sqle.toString());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 433
                },
                {
                        "id": "pretrain_java_data_8005315",
                        "content": "<gh_stars>10-100\npublic void updateUser(final User user) throws IOException {\ntry {\nConnection conn = null;\nboolean autoCommit = false;\ntry {\nconn = pool.getConnection();\nautoCommit = conn.getAutoCommit();\nconn.setAutoCommit(false);\nfinal PreparedStatement updateUser = conn.prepareStatement(\"update users set mainRoleId=? where userId=?\");\nupdateUser.setInt(1, user.getMainRole().getId());\nupdateUser.setString(2, user.getUserId());\nupdateUser.executeUpdate();\nfinal PreparedStatement deleteRoles = conn.prepareStatement(\"delete from userRoles where userId=?\");\ndeleteRoles.setString(1, user.getUserId());\ndeleteRoles.executeUpdate();\nfinal PreparedStatement insertRoles = conn.prepareStatement(\"insert into userRoles (userId, roleId) values (?,?)\");\nfor (final Role role : user.getRoles()) {\ninsertRoles.setString(1, user.getUserId());\ninsertRoles.setInt(2, role.getId());\ninsertRoles.executeUpdate();\n}\nconn.commit();\n} catch (Throwable t) {\nif (conn != null) conn.rollback();\nthrow new SQLException(t.toString());\n} finally {\nif (conn != null) {\nconn.setAutoCommit(autoCommit);\nconn.close();\n}\n}\n} catch (final SQLException sqle) {\nlog.log(Level.SEVERE, sqle.toString(), sqle);\nthrow new IOException(sqle.toString());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1882508#138#173.java",
                        "__cluster__": 433
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11477906",
                        "content": "private static void loadDefaultSettings(final String configFileName) {\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\nout = new FileOutputStream(configFileName);\nIOUtils.copy(in, out);\n} catch (final Exception e) {\nlog.warn(\"Unable to pull out the default.\", e);\nthrow new RuntimeException(e);\n} finally {\nIOUtils.closeQuietly(in);\nIOUtils.closeQuietly(out);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 569
                },
                {
                        "id": "pretrain_java_data_4991952",
                        "content": "private static void loadDefaultSettings(final String configFileName) {\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\nout = new FileOutputStream(configFileName);\nIOUtils.copy(in, out);\n} catch (final Exception e) {\nlog.warn(\"Unable to pull out the default.\", e);\nthrow new RuntimeException(e);\n} finally {\nIOUtils.closeQuietly(in);\nIOUtils.closeQuietly(out);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#130583#88#102.java",
                        "__cluster__": 569
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18202328",
                        "content": "public void register(MinecraftSession session, String username, String verificationKey) {\nif (Configuration.getConfiguration().isVerifyingNames()) {\nlong salt = HeartbeatManager.getHeartbeatManager().getSalt();\nString hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();\nMessageDigest digest;\ntry {\ndigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nthrow new RuntimeException(\"No MD5 algorithm!\");\n}\ndigest.update(hash.getBytes());\nif (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {\nsession.getActionSender().sendLoginFailure(\"Illegal name.\");\nreturn;\n}\n}\nchar[] nameChars = username.toCharArray();\nfor (char nameChar : nameChars) {\nif (nameChar < ' ' || nameChar > '\\177') {\nsession.getActionSender().sendLoginFailure(\"Invalid name!\");\nreturn;\n}\n}\nfor (Player p : playerList.getPlayers()) {\nif (p.getName().equalsIgnoreCase(username)) {\np.getSession().getActionSender().sendLoginFailure(\"Logged in from another computer.\");\nbreak;\n}\n}\nfinal Player player = new Player(session, username);\nif (!playerList.add(player)) {\nplayer.getSession().getActionSender().sendLoginFailure(\"Too many players online!\");\nreturn;\n}\nsession.setPlayer(player);\nfinal Configuration c = Configuration.getConfiguration();\nsession.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);\nLevelGzipper.getLevelGzipper().gzipLevel(session);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 628
                },
                {
                        "id": "pretrain_java_data_6590477",
                        "content": "public void register(MinecraftSession session, String username, String verificationKey) {\nif (Configuration.getConfiguration().isVerifyingNames()) {\nlong salt = HeartbeatManager.getHeartbeatManager().getSalt();\nString hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();\nMessageDigest digest;\ntry {\ndigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nthrow new RuntimeException(\"No MD5 algorithm!\");\n}\ndigest.update(hash.getBytes());\nif (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {\nsession.getActionSender().sendLoginFailure(\"Illegal name.\");\nreturn;\n}\n}\nchar[] nameChars = username.toCharArray();\nfor (char nameChar : nameChars) {\nif (nameChar < ' ' || nameChar > '\\177') {\nsession.getActionSender().sendLoginFailure(\"Invalid name!\");\nreturn;\n}\n}\nfor (Player p : playerList.getPlayers()) {\nif (p.getName().equalsIgnoreCase(username)) {\np.getSession().getActionSender().sendLoginFailure(\"Logged in from another computer.\");\nbreak;\n}\n}\nfinal Player player = new Player(session, username);\nif (!playerList.add(player)) {\nplayer.getSession().getActionSender().sendLoginFailure(\"Too many players online!\");\nreturn;\n}\nsession.setPlayer(player);\nfinal Configuration c = Configuration.getConfiguration();\nsession.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);\nLevelGzipper.getLevelGzipper().gzipLevel(session);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2234623#110#148.java",
                        "__cluster__": 628
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6467131",
                        "content": "public static String encrypt(String text) {\nchar[] toEncrypt = text.toCharArray();\nStringBuffer hexString = new StringBuffer();\ntry {\nMessageDigest dig = MessageDigest.getInstance(\"MD5\");\ndig.reset();\nString pw = \"\";\nfor (int i = 0; i < toEncrypt.length; i++) {\npw += toEncrypt[i];\n}\ndig.update(pw.getBytes());\nbyte[] digest = dig.digest();\nint digestLength = digest.length;\nfor (int i = 0; i < digestLength; i++) {\nhexString.append(hexDigit(digest[i]));\n}\n} catch (java.security.NoSuchAlgorithmException ae) {\nae.printStackTrace();\n}\nreturn hexString.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#490890#19#39.java",
                        "__cluster__": 638
                },
                {
                        "id": "test_bigclonebench_data_10391753",
                        "content": "public static String encrypt(String text) {\nchar[] toEncrypt = text.toCharArray();\nStringBuffer hexString = new StringBuffer();\ntry {\nMessageDigest dig = MessageDigest.getInstance(\"MD5\");\ndig.reset();\nString pw = \"\";\nfor (int i = 0; i < toEncrypt.length; i++) {\npw += toEncrypt[i];\n}\ndig.update(pw.getBytes());\nbyte[] digest = dig.digest();\nint digestLength = digest.length;\nfor (int i = 0; i < digestLength; i++) {\nhexString.append(hexDigit(digest[i]));\n}\n} catch (java.security.NoSuchAlgorithmException ae) {\nae.printStackTrace();\n}\nreturn hexString.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 638
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6530839",
                        "content": "public static void copyFile(File source, File dest) throws IOException {\nif (!dest.exists()) {\ndest.createNewFile();\n}\nFileChannel from = null;\nFileChannel to = null;\ntry {\nfrom = new FileInputStream(source).getChannel();\nto = new FileOutputStream(dest).getChannel();\nto.transferFrom(from, 0, from.size());\n} finally {\nif (from != null) {\nfrom.close();\n}\nif (to != null) {\nto.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1068957#11#29.java",
                        "__cluster__": 735
                },
                {
                        "id": "test_bigclonebench_data_14502142",
                        "content": "public static void copyFile(File source, File dest) throws IOException {\nif (!dest.exists()) {\ndest.createNewFile();\n}\nFileChannel from = null;\nFileChannel to = null;\ntry {\nfrom = new FileInputStream(source).getChannel();\nto = new FileOutputStream(dest).getChannel();\nto.transferFrom(from, 0, from.size());\n} finally {\nif (from != null) {\nfrom.close();\n}\nif (to != null) {\nto.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 735
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6448064",
                        "content": "<gh_stars>10-100\npublic PageLoader(String pageAddress) throws Exception {\nURL url = new URL(pageAddress);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\ninputLine = \"\";\nwhile (in.ready()) {\ninputLine = inputLine + in.readLine();\n}\nin.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#105237#24#32.java",
                        "__cluster__": 434
                },
                {
                        "id": "test_bigclonebench_data_7891509",
                        "content": "public PageLoader(String pageAddress) throws Exception {\nURL url = new URL(pageAddress);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\ninputLine = \"\";\nwhile (in.ready()) {\ninputLine = inputLine + in.readLine();\n}\nin.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 434
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_17557289",
                        "content": "private static void copyFile(File source, File dest) throws IOException {\nFileChannel srcChannel = new FileInputStream(source).getChannel();\nFileChannel dstChannel = new FileOutputStream(dest).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 826
                },
                {
                        "id": "pretrain_java_data_8008797",
                        "content": "<gh_stars>10-100\nprivate void copyFile(File source, File target) throws IOException {\nFileChannel srcChannel = new FileInputStream(source).getChannel();\nFileChannel dstChannel = new FileOutputStream(target).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#59576#93#99.java",
                        "__cluster__": 826
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_15810440",
                        "content": "public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {\nPreparedStatement pst1 = null;\nPreparedStatement pst2 = null;\nResultSet rs = null;\nint retVal = -1;\ntry {\npst1 = conn.prepareStatement(\"INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)\");\npst1.setString(1, name);\npst1.setString(2, instructions);\npst1.setInt(3, categoryId);\nif (pst1.executeUpdate() > 0) {\npst2 = conn.prepareStatement(\"SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?\");\npst2.setString(1, name);\npst2.setString(2, instructions);\npst2.setInt(3, categoryId);\nrs = pst2.executeQuery();\nif (rs.next()) {\nint id = rs.getInt(1);\nSystem.out.println(\"Lis\ufffdt\ufffd\ufffdn ainesosat\");\nString[] aines;\nfor (int i = 0; i < ainekset.length; ++i) {\naines = ainekset[i];\naddIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));\n}\nretVal = id;\n} else {\nretVal = -1;\n}\n} else {\nretVal = -1;\n}\nconn.commit();\n} catch (Exception e) {\nconn.rollback();\nthrow new Exception(\"Reseptin lis\ufffdys ep\ufffdonnistui. Poikkeus: \" + e.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 113
                },
                {
                        "id": "pretrain_java_data_9612395",
                        "content": "public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {\nPreparedStatement pst1 = null;\nPreparedStatement pst2 = null;\nResultSet rs = null;\nint retVal = -1;\ntry {\npst1 = conn.prepareStatement(\"INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)\");\npst1.setString(1, name);\npst1.setString(2, instructions);\npst1.setInt(3, categoryId);\nif (pst1.executeUpdate() > 0) {\npst2 = conn.prepareStatement(\"SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?\");\npst2.setString(1, name);\npst2.setString(2, instructions);\npst2.setInt(3, categoryId);\nrs = pst2.executeQuery();\nif (rs.next()) {\nint id = rs.getInt(1);\nSystem.out.println(\"Lis\ufffdt\ufffd\ufffdn ainesosat\");\nString[] aines;\nfor (int i = 0; i < ainekset.length; ++i) {\naines = ainekset[i];\naddIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));\n}\nretVal = id;\n} else {\nretVal = -1;\n}\n} else {\nretVal = -1;\n}\nconn.commit();\n} catch (Exception e) {\nconn.rollback();\nthrow new Exception(\"Reseptin lis\ufffdys ep\ufffdonnistui. Poikkeus: \" + e.getMessage());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1115013#121#157.java",
                        "__cluster__": 113
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_19549577",
                        "content": "protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {\ntry {\nURL url = new URL(apiUrl);\nHttpURLConnection request = (HttpURLConnection) url.openConnection();\nif (ApplicationConstants.CONNECT_TIMEOUT > -1) {\nrequest.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);\n}\nif (ApplicationConstants.READ_TIMEOUT > -1) {\nrequest.setReadTimeout(ApplicationConstants.READ_TIMEOUT);\n}\nfor (String headerName : requestHeaders.keySet()) {\nrequest.setRequestProperty(headerName, requestHeaders.get(headerName));\n}\nrequest.setRequestMethod(\"POST\");\nrequest.setDoOutput(true);\nPrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));\nout.print(getParametersString(parameters));\nout.flush();\nout.close();\nrequest.connect();\nif (request.getResponseCode() != expected) {\nthrow new BingMapsException(convertStreamToString(request.getErrorStream()));\n} else {\nreturn getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));\n}\n} catch (IOException e) {\nthrow new BingMapsException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 728
                },
                {
                        "id": "pretrain_java_data_8136953",
                        "content": "protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {\ntry {\nURL url = new URL(apiUrl);\nHttpURLConnection request = (HttpURLConnection) url.openConnection();\nif (ApplicationConstants.CONNECT_TIMEOUT > -1) {\nrequest.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);\n}\nif (ApplicationConstants.READ_TIMEOUT > -1) {\nrequest.setReadTimeout(ApplicationConstants.READ_TIMEOUT);\n}\nfor (String headerName : requestHeaders.keySet()) {\nrequest.setRequestProperty(headerName, requestHeaders.get(headerName));\n}\nrequest.setRequestMethod(\"POST\");\nrequest.setDoOutput(true);\nPrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));\nout.print(getParametersString(parameters));\nout.flush();\nout.close();\nrequest.connect();\nif (request.getResponseCode() != expected) {\nthrow new BingMapsException(convertStreamToString(request.getErrorStream()));\n} else {\nreturn getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));\n}\n} catch (IOException e) {\nthrow new BingMapsException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1819481#231#259.java",
                        "__cluster__": 728
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6009527",
                        "content": "private void doFinishLoadAttachment(long attachmentId) {\nif (attachmentId != mLoadAttachmentId) {\nreturn;\n}\nAttachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\nUri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\nUri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\nif (mLoadAttachmentSave) {\ntry {\nFile file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\nInputStream in = getContentResolver().openInputStream(contentUri);\nOutputStream out = new FileOutputStream(file);\nIOUtils.copy(in, out);\nout.flush();\nout.close();\nin.close();\nToast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\nnew MediaScannerNotifier(this, file, mHandler);\n} catch (IOException ioe) {\nToast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n}\n} else {\ntry {\nIntent intent = new Intent(Intent.ACTION_VIEW);\nintent.setData(contentUri);\nintent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\nstartActivity(intent);\n} catch (ActivityNotFoundException e) {\nmHandler.attachmentViewError();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 843
                },
                {
                        "id": "pretrain_java_data_8023707",
                        "content": "<gh_stars>10-100\nprivate void doFinishLoadAttachment(long attachmentId) {\nif (attachmentId != mLoadAttachmentId) {\nreturn;\n}\nAttachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\nUri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\nUri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\nif (mLoadAttachmentSave) {\ntry {\nFile file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\nInputStream in = getContentResolver().openInputStream(contentUri);\nOutputStream out = new FileOutputStream(file);\nIOUtils.copy(in, out);\nout.flush();\nout.close();\nin.close();\nToast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\nnew MediaScannerNotifier(this, file, mHandler);\n} catch (IOException ioe) {\nToast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n}\n} else {\ntry {\nIntent intent = new Intent(Intent.ACTION_VIEW);\nintent.setData(contentUri);\nintent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\nstartActivity(intent);\n} catch (ActivityNotFoundException e) {\nmHandler.attachmentViewError();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1243185#1265#1296.java",
                        "__cluster__": 843
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9719740",
                        "content": "public int create(BusinessObject o) throws DAOException {\nint insert = 0;\nint id = 0;\nItem item = (Item) o;\ntry {\nPreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"INSERT_ITEM\"));\npst.setString(1, item.getDescription());\npst.setDouble(2, item.getUnit_price());\npst.setInt(3, item.getQuantity());\npst.setDouble(4, item.getVat());\npst.setInt(5, item.getIdProject());\npst.setInt(6, item.getIdCurrency());\ninsert = pst.executeUpdate();\nif (insert <= 0) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows <= 0\");\n} else if (insert > 1) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows > 1\");\n}\nStatement st = connection.createStatement();\nResultSet rs = st.executeQuery(\"select max(id_item) from item\");\nrs.next();\nid = rs.getInt(1);\nconnection.commit();\n} catch (SQLException e) {\nLog.write(e.getMessage());\nthrow new DAOException(\"A SQLException has occured\");\n} catch (NullPointerException npe) {\nLog.write(npe.getMessage());\nthrow new DAOException(\"Connection null\");\n}\nreturn id;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1874150#55#88.java",
                        "__cluster__": 5
                },
                {
                        "id": "test_bigclonebench_data_4921631",
                        "content": "public int create(BusinessObject o) throws DAOException {\nint insert = 0;\nint id = 0;\nItem item = (Item) o;\ntry {\nPreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"INSERT_ITEM\"));\npst.setString(1, item.getDescription());\npst.setDouble(2, item.getUnit_price());\npst.setInt(3, item.getQuantity());\npst.setDouble(4, item.getVat());\npst.setInt(5, item.getIdProject());\npst.setInt(6, item.getIdCurrency());\ninsert = pst.executeUpdate();\nif (insert <= 0) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows <= 0\");\n} else if (insert > 1) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows > 1\");\n}\nStatement st = connection.createStatement();\nResultSet rs = st.executeQuery(\"select max(id_item) from item\");\nrs.next();\nid = rs.getInt(1);\nconnection.commit();\n} catch (SQLException e) {\nLog.write(e.getMessage());\nthrow new DAOException(\"A SQLException has occured\");\n} catch (NullPointerException npe) {\nLog.write(npe.getMessage());\nthrow new DAOException(\"Connection null\");\n}\nreturn id;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 5
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3801655",
                        "content": "@SuppressWarnings(\"unchecked\")\npublic static void main(String[] args) throws Exception {\nif (args.length != 2) {\nSystem.out.println(\"usage: \" + EvaluatorHelper.class.getName() + \" <output> <data set file>\");\nSystem.exit(1);\n}\nHelper helper = Helper.getHelper(args[1]);\nDataset dataset = helper.read(args[1]);\nZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\nEnumeration entries = zip.entries();\nUnit<?>[] performance = new Unit<?>[LIMIT];\nint index = 0;\nwhile (entries.hasMoreElements()) {\nZipEntry entry = (ZipEntry) entries.nextElement();\nif (entry.getName().endsWith(\".out\")) {\nFile temp = File.createTempFile(\"PARSER\", \".zip\");\ntemp.deleteOnExit();\nPrintStream writer = new PrintStream(new FileOutputStream(temp));\nBufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\nbyte[] buffer = new byte[4096];\nint read = -1;\nwhile ((read = reader.read(buffer)) != -1) {\nwriter.write(buffer, 0, read);\n}\nwriter.close();\nreader.close();\nBufferedReader outfile = new BufferedReader(new FileReader(temp));\nString line = null;\nRuleParser parser = new RuleParser();\nProbabilisticRuleList list = new ProbabilisticRuleList();\nwhile ((line = outfile.readLine()) != null) {\nif (line.startsWith(\"IF\")) {\nProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\nlist.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n}\n}\noutfile.close();\nPooledPRCurveMeasure measure = new PooledPRCurveMeasure();\nperformance[index] = measure.evaluate(dataset, list);\nSystem.out.println(entry.getName() + \": \" + performance[index]);\nindex++;\nif (index >= LIMIT) {\nbreak;\n}\n}\n}\nSystem.out.println(UnitAveragingMode.get(Double.class).average(performance));\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 141
                },
                {
                        "id": "pretrain_java_data_11274754",
                        "content": "<reponame>cragkhit/elasticsearch\n@SuppressWarnings(\"unchecked\")\npublic static void main(String[] args) throws Exception {\nif (args.length != 2) {\nSystem.out.println(\"usage: \" + EvaluatorHelper.class.getName() + \" <output> <data set file>\");\nSystem.exit(1);\n}\nHelper helper = Helper.getHelper(args[1]);\nDataset dataset = helper.read(args[1]);\nZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\nEnumeration entries = zip.entries();\nUnit<?>[] performance = new Unit<?>[LIMIT];\nint index = 0;\nwhile (entries.hasMoreElements()) {\nZipEntry entry = (ZipEntry) entries.nextElement();\nif (entry.getName().endsWith(\".out\")) {\nFile temp = File.createTempFile(\"PARSER\", \".zip\");\ntemp.deleteOnExit();\nPrintStream writer = new PrintStream(new FileOutputStream(temp));\nBufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\nbyte[] buffer = new byte[4096];\nint read = -1;\nwhile ((read = reader.read(buffer)) != -1) {\nwriter.write(buffer, 0, read);\n}\nwriter.close();\nreader.close();\nBufferedReader outfile = new BufferedReader(new FileReader(temp));\nString line = null;\nRuleParser parser = new RuleParser();\nProbabilisticRuleList list = new ProbabilisticRuleList();\nwhile ((line = outfile.readLine()) != null) {\nif (line.startsWith(\"IF\")) {\nProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\nlist.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n}\n}\noutfile.close();\nPooledPRCurveMeasure measure = new PooledPRCurveMeasure();\nperformance[index] = measure.evaluate(dataset, list);\nSystem.out.println(entry.getName() + \": \" + performance[index]);\nindex++;\nif (index >= LIMIT) {\nbreak;\n}\n}\n}\nSystem.out.println(UnitAveragingMode.get(Double.class).average(performance));\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#39196#38#85.java",
                        "__cluster__": 141
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9677327",
                        "content": "public static byte[] getMD5(String source) {\nbyte[] tmp = null;\ntry {\njava.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");\nmd.update(source.getBytes());\ntmp = md.digest();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn tmp;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#641293#42#52.java",
                        "__cluster__": 149
                },
                {
                        "id": "test_bigclonebench_data_5551393",
                        "content": "public static byte[] getMD5(String source) {\nbyte[] tmp = null;\ntry {\njava.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");\nmd.update(source.getBytes());\ntmp = md.digest();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn tmp;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 149
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6379126",
                        "content": "public boolean gerarTutorialPage() {\ntry {\nFile indexDir = criarDiretorioSite();\nFile cssDir = criarDiretorioCss();\nFile capDir = criarDiretorioCapitulos();\nFile licDir = criarDiretorioLicoes();\nFile midDir = criarDiretorioMidias();\nFile filesDir = criarDiretorioArquivos();\nFile videosDir = new File(filesDir + \"/videos\");\nvideosDir.mkdir();\nFile imagensDir = new File(filesDir + \"/imagens\");\nimagensDir.mkdir();\nString local = System.getProperty(\"user.dir\");\nFileChannel srcCss1 = new FileInputStream(local + \"/bin/style/layout.css\").getChannel();\nFileChannel destCss1 = new FileOutputStream(cssDir + \"/layout.css\").getChannel();\ndestCss1.transferFrom(srcCss1, 0, srcCss1.size());\nsrcCss1.close();\ndestCss1.close();\nFileChannel srcCss2 = new FileInputStream(local + \"/bin/style/elementos.css\").getChannel();\nFileChannel destCss2 = new FileOutputStream(cssDir + \"/elementos.css\").getChannel();\ndestCss2.transferFrom(srcCss2, 0, srcCss2.size());\nsrcCss2.close();\ndestCss2.close();\nFileChannel srcCss3 = new FileInputStream(local + \"/bin/style/estilo-cap-lic-mid.css\").getChannel();\nFileChannel destCss3 = new FileOutputStream(cssDir + \"/estilo-cap-lic-mid.css\").getChannel();\ndestCss3.transferFrom(srcCss3, 0, srcCss3.size());\nsrcCss3.close();\ndestCss3.close();\nFileChannel srcCss4 = new FileInputStream(local + \"/bin/style/layout_ie.css\").getChannel();\nFileChannel destCss4 = new FileOutputStream(cssDir + \"/layout_ie.css\").getChannel();\ndestCss4.transferFrom(srcCss4, 0, srcCss4.size());\nsrcCss4.close();\ndestCss4.close();\nFileChannel srcCss5 = new FileInputStream(local + \"/bin/style/elementos_ie.css\").getChannel();\nFileChannel destCss5 = new FileOutputStream(cssDir + \"/elementos_ie.css\").getChannel();\ndestCss5.transferFrom(srcCss5, 0, srcCss5.size());\nsrcCss5.close();\ndestCss5.close();\nFileChannel srcCss6 = new FileInputStream(local + \"/bin/style/estilo-cap-lic-mid_ie.css\").getChannel();\nFileChannel destCss6 = new FileOutputStream(cssDir + \"/estilo-cap-lic-mid_ie.css\").getChannel();\ndestCss6.transferFrom(srcCss6, 0, srcCss6.size());\nsrcCss6.close();\ndestCss6.close();\ncopiarMidias(videosDir, imagensDir);\nescreverMidiasPage(midDir);\nescreverLicoesPage(licDir);\nescreverCapitulosPages(capDir);\nFileWriter indexHtml = new FileWriter(indexDir + \"/index.html\");\nindexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());\nindexHtml.close();\nSystem.out.println(\"Site gerado com sucesso\");\nJOptionPane.showMessageDialog(null, \"Web Site gerado com sucesso\", \"\\\\o/\", JOptionPane.INFORMATION_MESSAGE);\nreturn true;\n} catch (Exception e) {\ne.printStackTrace();\nSystem.err.println(\"Site n\u00e3o gerado\");\nJOptionPane.showMessageDialog(null, \"Web Site n\u00e3o gerado corretamente\", \"Ops...\", JOptionPane.ERROR_MESSAGE);\nreturn false;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 154
                },
                {
                        "id": "pretrain_java_data_9688438",
                        "content": "public boolean gerarTutorialPage() {\ntry {\nFile indexDir = criarDiretorioSite();\nFile cssDir = criarDiretorioCss();\nFile capDir = criarDiretorioCapitulos();\nFile licDir = criarDiretorioLicoes();\nFile midDir = criarDiretorioMidias();\nFile filesDir = criarDiretorioArquivos();\nFile videosDir = new File(filesDir + \"/videos\");\nvideosDir.mkdir();\nFile imagensDir = new File(filesDir + \"/imagens\");\nimagensDir.mkdir();\nString local = System.getProperty(\"user.dir\");\nFileChannel srcCss1 = new FileInputStream(local + \"/bin/style/layout.css\").getChannel();\nFileChannel destCss1 = new FileOutputStream(cssDir + \"/layout.css\").getChannel();\ndestCss1.transferFrom(srcCss1, 0, srcCss1.size());\nsrcCss1.close();\ndestCss1.close();\nFileChannel srcCss2 = new FileInputStream(local + \"/bin/style/elementos.css\").getChannel();\nFileChannel destCss2 = new FileOutputStream(cssDir + \"/elementos.css\").getChannel();\ndestCss2.transferFrom(srcCss2, 0, srcCss2.size());\nsrcCss2.close();\ndestCss2.close();\nFileChannel srcCss3 = new FileInputStream(local + \"/bin/style/estilo-cap-lic-mid.css\").getChannel();\nFileChannel destCss3 = new FileOutputStream(cssDir + \"/estilo-cap-lic-mid.css\").getChannel();\ndestCss3.transferFrom(srcCss3, 0, srcCss3.size());\nsrcCss3.close();\ndestCss3.close();\nFileChannel srcCss4 = new FileInputStream(local + \"/bin/style/layout_ie.css\").getChannel();\nFileChannel destCss4 = new FileOutputStream(cssDir + \"/layout_ie.css\").getChannel();\ndestCss4.transferFrom(srcCss4, 0, srcCss4.size());\nsrcCss4.close();\ndestCss4.close();\nFileChannel srcCss5 = new FileInputStream(local + \"/bin/style/elementos_ie.css\").getChannel();\nFileChannel destCss5 = new FileOutputStream(cssDir + \"/elementos_ie.css\").getChannel();\ndestCss5.transferFrom(srcCss5, 0, srcCss5.size());\nsrcCss5.close();\ndestCss5.close();\nFileChannel srcCss6 = new FileInputStream(local + \"/bin/style/estilo-cap-lic-mid_ie.css\").getChannel();\nFileChannel destCss6 = new FileOutputStream(cssDir + \"/estilo-cap-lic-mid_ie.css\").getChannel();\ndestCss6.transferFrom(srcCss6, 0, srcCss6.size());\nsrcCss6.close();\ndestCss6.close();\ncopiarMidias(videosDir, imagensDir);\nescreverMidiasPage(midDir);\nescreverLicoesPage(licDir);\nescreverCapitulosPages(capDir);\nFileWriter indexHtml = new FileWriter(indexDir + \"/index.html\");\nindexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());\nindexHtml.close();\nSystem.out.println(\"Site gerado com sucesso\");\nJOptionPane.showMessageDialog(null, \"Web Site gerado com sucesso\", \"\\\\o/\", JOptionPane.INFORMATION_MESSAGE);\nreturn true;\n} catch (Exception e) {\ne.printStackTrace();\nSystem.err.println(\"Site n\u00e3o gerado\");\nJOptionPane.showMessageDialog(null, \"Web Site n\u00e3o gerado corretamente\", \"Ops...\", JOptionPane.ERROR_MESSAGE);\nreturn false;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1840152#619#678.java",
                        "__cluster__": 154
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9745358",
                        "content": "protected void truncate(final File file) {\nLogLog.debug(\"Compression of file: \" + file.getAbsolutePath() + \" started.\");\nif (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\nfinal File backupRoot = new File(this.getBackupDir());\nif (!backupRoot.exists() && !backupRoot.mkdirs()) {\nthrow new AppenderInitializationError(\"Can't create backup dir for backup storage\");\n}\nSimpleDateFormat df;\ntry {\ndf = new SimpleDateFormat(this.getBackupDateFormat());\n} catch (final Exception e) {\nthrow new AppenderInitializationError(\"Invalid date formate for backup files: \" + this.getBackupDateFormat(), e);\n}\nfinal String date = df.format(new Date(file.lastModified()));\nfinal File zipFile = new File(backupRoot, file.getName() + \".\" + date + \".zip\");\nZipOutputStream zos = null;\nFileInputStream fis = null;\ntry {\nzos = new ZipOutputStream(new FileOutputStream(zipFile));\nfinal ZipEntry entry = new ZipEntry(file.getName());\nentry.setMethod(ZipEntry.DEFLATED);\nentry.setCrc(FileUtils.checksumCRC32(file));\nzos.putNextEntry(entry);\nfis = FileUtils.openInputStream(file);\nfinal byte[] buffer = new byte[1024];\nint readed;\nwhile ((readed = fis.read(buffer)) != -1) {\nzos.write(buffer, 0, readed);\n}\n} catch (final Exception e) {\nthrow new AppenderInitializationError(\"Can't create zip file\", e);\n} finally {\nif (zos != null) {\ntry {\nzos.close();\n} catch (final IOException e) {\nLogLog.warn(\"Can't close zip file\", e);\n}\n}\nif (fis != null) {\ntry {\nfis.close();\n} catch (final IOException e) {\nLogLog.warn(\"Can't close zipped file\", e);\n}\n}\n}\nif (!file.delete()) {\nthrow new AppenderInitializationError(\"Can't delete old log file \" + file.getAbsolutePath());\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1392671#78#129.java",
                        "__cluster__": 183
                },
                {
                        "id": "test_bigclonebench_data_12066447",
                        "content": "protected void truncate(final File file) {\nLogLog.debug(\"Compression of file: \" + file.getAbsolutePath() + \" started.\");\nif (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\nfinal File backupRoot = new File(this.getBackupDir());\nif (!backupRoot.exists() && !backupRoot.mkdirs()) {\nthrow new AppenderInitializationError(\"Can't create backup dir for backup storage\");\n}\nSimpleDateFormat df;\ntry {\ndf = new SimpleDateFormat(this.getBackupDateFormat());\n} catch (final Exception e) {\nthrow new AppenderInitializationError(\"Invalid date formate for backup files: \" + this.getBackupDateFormat(), e);\n}\nfinal String date = df.format(new Date(file.lastModified()));\nfinal File zipFile = new File(backupRoot, file.getName() + \".\" + date + \".zip\");\nZipOutputStream zos = null;\nFileInputStream fis = null;\ntry {\nzos = new ZipOutputStream(new FileOutputStream(zipFile));\nfinal ZipEntry entry = new ZipEntry(file.getName());\nentry.setMethod(ZipEntry.DEFLATED);\nentry.setCrc(FileUtils.checksumCRC32(file));\nzos.putNextEntry(entry);\nfis = FileUtils.openInputStream(file);\nfinal byte[] buffer = new byte[1024];\nint readed;\nwhile ((readed = fis.read(buffer)) != -1) {\nzos.write(buffer, 0, readed);\n}\n} catch (final Exception e) {\nthrow new AppenderInitializationError(\"Can't create zip file\", e);\n} finally {\nif (zos != null) {\ntry {\nzos.close();\n} catch (final IOException e) {\nLogLog.warn(\"Can't close zip file\", e);\n}\n}\nif (fis != null) {\ntry {\nfis.close();\n} catch (final IOException e) {\nLogLog.warn(\"Can't close zipped file\", e);\n}\n}\n}\nif (!file.delete()) {\nthrow new AppenderInitializationError(\"Can't delete old log file \" + file.getAbsolutePath());\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 183
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9751133",
                        "content": "static String encrypt(String plaintext) {\nMessageDigest d = null;\ntry {\nd = MessageDigest.getInstance(\"SHA-1\");\nd.update(plaintext.getBytes(\"UTF-8\"));\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn new String(Base64.encodeBase64(d.digest()));\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2454611#303#312.java",
                        "__cluster__": 219
                },
                {
                        "id": "test_bigclonebench_data_7044685",
                        "content": "static String encrypt(String plaintext) {\nMessageDigest d = null;\ntry {\nd = MessageDigest.getInstance(\"SHA-1\");\nd.update(plaintext.getBytes(\"UTF-8\"));\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn new String(Base64.encodeBase64(d.digest()));\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 219
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11228773",
                        "content": "public static void copy(File source, File destination) throws FileNotFoundException, IOException {\nif (source == null) throw new NullPointerException(\"The source may not be null.\");\nif (destination == null) throw new NullPointerException(\"The destination may not be null.\");\nFileInputStream sourceStream = new FileInputStream(source);\ndestination.getParentFile().mkdirs();\nFileOutputStream destStream = new FileOutputStream(destination);\ntry {\nFileChannel sourceChannel = sourceStream.getChannel();\nFileChannel destChannel = destStream.getChannel();\ndestChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n} finally {\ntry {\nsourceStream.close();\ndestStream.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2181149#45#63.java",
                        "__cluster__": 279
                },
                {
                        "id": "test_bigclonebench_data_3767903",
                        "content": "public static void copy(File source, File destination) throws FileNotFoundException, IOException {\nif (source == null) throw new NullPointerException(\"The source may not be null.\");\nif (destination == null) throw new NullPointerException(\"The destination may not be null.\");\nFileInputStream sourceStream = new FileInputStream(source);\ndestination.getParentFile().mkdirs();\nFileOutputStream destStream = new FileOutputStream(destination);\ntry {\nFileChannel sourceChannel = sourceStream.getChannel();\nFileChannel destChannel = destStream.getChannel();\ndestChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n} finally {\ntry {\nsourceStream.close();\ndestStream.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 279
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11259811",
                        "content": "<filename>references/bcb_chosen_clones/selected#1265200#22#52.java\npublic Object execute(ExecutionEvent event) throws ExecutionException {\ntry {\nShell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();\nQuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(\"org.rcpquizengine.views.quizzes\");\nFolder rootFolder = view.getRootFolder();\nif (!rootFolder.isEncrypted()) {\nPasswordDialog dialog = new PasswordDialog(shell);\nif (dialog.open() == Window.OK) {\nString password = dialog.getPassword();\nif (!password.equals(\"\")) {\nString md5 = \"\";\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(password.getBytes());\nmd5 = new BigInteger(md.digest()).toString();\nrootFolder.setMd5Digest(md5);\nrootFolder.setEncrypted(true);\nMessageDialog.openInformation(shell, \"Quiz bank locked\", \"The current quiz bank has been locked\");\npassword = \"\";\nmd5 = \"\";\n}\n}\n} else {\nMessageDialog.openError(shell, \"Error locking quiz bank\", \"Quiz bank already locked\");\n}\n} catch (PartInitException e) {\ne.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1265200#22#52.java",
                        "__cluster__": 667
                },
                {
                        "id": "test_bigclonebench_data_14865947",
                        "content": "public Object execute(ExecutionEvent event) throws ExecutionException {\ntry {\nShell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();\nQuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(\"org.rcpquizengine.views.quizzes\");\nFolder rootFolder = view.getRootFolder();\nif (rootFolder.isEncrypted()) {\nPasswordDialog dialog = new PasswordDialog(shell);\nif (dialog.open() == Window.OK) {\nString password = dialog.getPassword();\nif (!password.equals(\"\")) {\nString md5 = \"\";\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(password.getBytes());\nmd5 = new BigInteger(md.digest()).toString();\nif (rootFolder.getMd5Digest().equals(md5)) {\nrootFolder.setMd5Digest(\"\");\nrootFolder.setEncrypted(false);\nMessageDialog.openInformation(shell, \"Quiz bank unlocked\", \"The current quiz bank has been unlocked\");\n} else {\nMessageDialog.openError(shell, \"Error unlocking quiz bank\", \"Incorrect password\");\n}\npassword = \"\";\nmd5 = \"\";\n}\n}\n} else {\nMessageDialog.openError(shell, \"Error unlocking quiz bank\", \"Quiz bank already unlocked\");\n}\n} catch (PartInitException e) {\ne.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 667
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_12866267",
                        "content": "<filename>references/bcb_chosen_clones/selected#180318#173#206.java\npublic int update(BusinessObject o) throws DAOException {\nint update = 0;\nContact contact = (Contact) o;\ntry {\nPreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"UPDATE_CONTACT\"));\npst.setString(1, contact.getName());\npst.setString(2, contact.getFirstname());\npst.setString(3, contact.getPhone());\npst.setString(4, contact.getEmail());\nif (contact.getAccount() == 0) {\npst.setNull(5, java.sql.Types.INTEGER);\n} else {\npst.setInt(5, contact.getAccount());\n}\npst.setBoolean(6, contact.isArchived());\npst.setInt(7, contact.getId());\nupdate = pst.executeUpdate();\nif (update <= 0) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows <= 0\");\n} else if (update > 1) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows > 1\");\n}\nconnection.commit();\n} catch (SQLException e) {\nLog.write(e.getMessage());\nthrow new DAOException(\"A SQLException has occured\");\n} catch (NullPointerException npe) {\nLog.write(npe.getMessage());\nthrow new DAOException(\"Connection null\");\n}\nreturn update;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#180318#173#206.java",
                        "__cluster__": 542
                },
                {
                        "id": "test_bigclonebench_data_2168610",
                        "content": "public int update(BusinessObject o) throws DAOException {\nint update = 0;\nContact contact = (Contact) o;\ntry {\nPreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"UPDATE_CONTACT\"));\npst.setString(1, contact.getName());\npst.setString(2, contact.getFirstname());\npst.setString(3, contact.getPhone());\npst.setString(4, contact.getEmail());\nif (contact.getAccount() == 0) {\npst.setNull(5, java.sql.Types.INTEGER);\n} else {\npst.setInt(5, contact.getAccount());\n}\npst.setBoolean(6, contact.isArchived());\npst.setInt(7, contact.getId());\nupdate = pst.executeUpdate();\nif (update <= 0) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows <= 0\");\n} else if (update > 1) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows > 1\");\n}\nconnection.commit();\n} catch (SQLException e) {\nLog.write(e.getMessage());\nthrow new DAOException(\"A SQLException has occured\");\n} catch (NullPointerException npe) {\nLog.write(npe.getMessage());\nthrow new DAOException(\"Connection null\");\n}\nreturn update;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 542
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11311762",
                        "content": "<gh_stars>10-100\n@Override\npublic void makeRead(final String user, final long databaseID, final long time) throws SQLException {\nfinal String query = \"insert into fs.read_post (post, user, read_date) values (?, ?, ?)\";\nensureConnection();\nfinal PreparedStatement statement = m_connection.prepareStatement(query);\ntry {\nstatement.setLong(1, databaseID);\nstatement.setString(2, user);\nstatement.setTimestamp(3, new Timestamp(time));\nfinal int count = statement.executeUpdate();\nif (0 == count) {\nthrow new SQLException(\"Nothing updated.\");\n}\nm_connection.commit();\n} catch (final SQLException e) {\nm_connection.rollback();\nthrow e;\n} finally {\nstatement.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#337931#77#97.java",
                        "__cluster__": 594
                },
                {
                        "id": "test_bigclonebench_data_1141361",
                        "content": "@Override\npublic void makeRead(final String user, final long databaseID, final long time) throws SQLException {\nfinal String query = \"insert into fs.read_post (post, user, read_date) values (?, ?, ?)\";\nensureConnection();\nfinal PreparedStatement statement = m_connection.prepareStatement(query);\ntry {\nstatement.setLong(1, databaseID);\nstatement.setString(2, user);\nstatement.setTimestamp(3, new Timestamp(time));\nfinal int count = statement.executeUpdate();\nif (0 == count) {\nthrow new SQLException(\"Nothing updated.\");\n}\nm_connection.commit();\n} catch (final SQLException e) {\nm_connection.rollback();\nthrow e;\n} finally {\nstatement.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 594
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11311762",
                        "content": "<gh_stars>10-100\n@Override\npublic void makeRead(final String user, final long databaseID, final long time) throws SQLException {\nfinal String query = \"insert into fs.read_post (post, user, read_date) values (?, ?, ?)\";\nensureConnection();\nfinal PreparedStatement statement = m_connection.prepareStatement(query);\ntry {\nstatement.setLong(1, databaseID);\nstatement.setString(2, user);\nstatement.setTimestamp(3, new Timestamp(time));\nfinal int count = statement.executeUpdate();\nif (0 == count) {\nthrow new SQLException(\"Nothing updated.\");\n}\nm_connection.commit();\n} catch (final SQLException e) {\nm_connection.rollback();\nthrow e;\n} finally {\nstatement.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#337931#77#97.java",
                        "__cluster__": 594
                },
                {
                        "id": "test_bigclonebench_data_10281203",
                        "content": "public void makeRead(String user, long databaseID, long time) throws SQLException {\nString query = \"replace into fs.read_post (post, user, read_date) values (?, ?, ?)\";\nensureConnection();\nPreparedStatement statement = m_connection.prepareStatement(query);\ntry {\nstatement.setLong(1, databaseID);\nstatement.setString(2, user);\nstatement.setTimestamp(3, new Timestamp(time));\nint count = statement.executeUpdate();\nif (0 == count) throw new SQLException(\"Nothing updated.\");\nm_connection.commit();\n} catch (SQLException e) {\nm_connection.rollback();\nthrow e;\n} finally {\nstatement.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 594
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_11297357",
                        "content": "<reponame>cragkhit/elasticsearch\npublic boolean populateRecord(int[] attrIDs) throws IOException {\nif (device == null) {\nthrow new RuntimeException(\"This is local device service record\");\n}\nif (attrIDs == null) {\nthrow new NullPointerException(\"attrIDs is null\");\n}\nif (attrIDs.length == 0) {\nthrow new IllegalArgumentException();\n}\nfor (int i = 0; i < attrIDs.length; i++) {\nif (attrIDs[i] < 0x0000 || attrIDs[i] > 0xffff) {\nthrow new IllegalArgumentException();\n}\n}\nint[] sortIDs = new int[attrIDs.length];\nSystem.arraycopy(attrIDs, 0, sortIDs, 0, attrIDs.length);\nfor (int i = 0; i < sortIDs.length; i++) {\nfor (int j = 0; j < sortIDs.length - i - 1; j++) {\nif (sortIDs[j] > sortIDs[j + 1]) {\nint temp = sortIDs[j];\nsortIDs[j] = sortIDs[j + 1];\nsortIDs[j + 1] = temp;\n}\n}\n}\nfor (int i = 0; i < sortIDs.length - 1; i++) {\nif (sortIDs[i] == sortIDs[i + 1]) {\nthrow new IllegalArgumentException();\n}\nDebugLog.debug0x(\"query for \", sortIDs[i]);\n}\nDebugLog.debug0x(\"query for \", sortIDs[sortIDs.length - 1]);\nreturn this.bluetoothStack.populateServicesRecordAttributeValues(this, sortIDs);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#553888#112#146.java",
                        "__cluster__": 782
                },
                {
                        "id": "test_bigclonebench_data_17583193",
                        "content": "public boolean populateRecord(int[] attrIDs) throws IOException {\nif (device == null) {\nthrow new RuntimeException(\"This is local device service record\");\n}\nif (attrIDs == null) {\nthrow new NullPointerException(\"attrIDs is null\");\n}\nif (attrIDs.length == 0) {\nthrow new IllegalArgumentException();\n}\nfor (int i = 0; i < attrIDs.length; i++) {\nif (attrIDs[i] < 0x0000 || attrIDs[i] > 0xffff) {\nthrow new IllegalArgumentException();\n}\n}\nint[] sortIDs = new int[attrIDs.length];\nSystem.arraycopy(attrIDs, 0, sortIDs, 0, attrIDs.length);\nfor (int i = 0; i < sortIDs.length; i++) {\nfor (int j = 0; j < sortIDs.length - i - 1; j++) {\nif (sortIDs[j] > sortIDs[j + 1]) {\nint temp = sortIDs[j];\nsortIDs[j] = sortIDs[j + 1];\nsortIDs[j + 1] = temp;\n}\n}\n}\nfor (int i = 0; i < sortIDs.length - 1; i++) {\nif (sortIDs[i] == sortIDs[i + 1]) {\nthrow new IllegalArgumentException();\n}\nDebugLog.debug0x(\"query for \", sortIDs[i]);\n}\nDebugLog.debug0x(\"query for \", sortIDs[sortIDs.length - 1]);\nreturn this.bluetoothStack.populateServicesRecordAttributeValues(this, sortIDs);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 782
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_17557289",
                        "content": "private static void copyFile(File source, File dest) throws IOException {\nFileChannel srcChannel = new FileInputStream(source).getChannel();\nFileChannel dstChannel = new FileOutputStream(dest).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 826
                },
                {
                        "id": "pretrain_java_data_12840999",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate static void copyFile(File source, File dest) throws IOException {\nFileChannel srcChannel = new FileInputStream(source).getChannel();\nFileChannel dstChannel = new FileOutputStream(dest).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2026703#472#478.java",
                        "__cluster__": 826
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14168494",
                        "content": "public static void copyFile(File dest, File src) throws IOException {\nFileChannel srcChannel = new FileInputStream(src).getChannel();\nFileChannel dstChannel = new FileOutputStream(dest).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 826
                },
                {
                        "id": "pretrain_java_data_12840999",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate static void copyFile(File source, File dest) throws IOException {\nFileChannel srcChannel = new FileInputStream(source).getChannel();\nFileChannel dstChannel = new FileOutputStream(dest).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2026703#472#478.java",
                        "__cluster__": 826
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_12805612",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copy(String fromFile, String toFile) throws IOException {\nFile inputFile = new File(fromFile);\nFile outputFile = new File(toFile);\nFileReader in = new FileReader(inputFile);\nFileWriter out = new FileWriter(outputFile);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#351570#83#92.java",
                        "__cluster__": 679
                },
                {
                        "id": "test_bigclonebench_data_18748516",
                        "content": "public static void copy(String fromFile, String toFile) throws IOException {\nFile inputFile = new File(fromFile);\nFile outputFile = new File(toFile);\nFileReader in = new FileReader(inputFile);\nFileWriter out = new FileWriter(outputFile);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 679
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20924119",
                        "content": "public static void gzip() throws Exception {\nSystem.out.println(\"gzip()\");\nGZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream(\"/zip/myzip.gz\"));\nbyte buffer[] = new byte[BLOCKSIZE];\nFile dir = new File(\"/zip/covers\");\nSystem.out.println(\"Dir '\" + dir.getAbsolutePath() + \"' exists: \" + dir.exists());\nFileInputStream in = new FileInputStream(dir);\nfor (int length; (length = in.read(buffer, 0, BLOCKSIZE)) != -1; ) zipout.write(buffer, 0, length);\nin.close();\nzipout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 404
                },
                {
                        "id": "pretrain_java_data_14402540",
                        "content": "public static void gzip() throws Exception {\nSystem.out.println(\"gzip()\");\nGZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream(\"/zip/myzip.gz\"));\nbyte buffer[] = new byte[BLOCKSIZE];\nFile dir = new File(\"/zip/covers\");\nSystem.out.println(\"Dir '\" + dir.getAbsolutePath() + \"' exists: \" + dir.exists());\nFileInputStream in = new FileInputStream(dir);\nfor (int length; (length = in.read(buffer, 0, BLOCKSIZE)) != -1; ) zipout.write(buffer, 0, length);\nin.close();\nzipout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#315540#37#47.java",
                        "__cluster__": 404
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21125261",
                        "content": "@Test\npublic void test() throws Exception {\nInputStream is = this.getClass().getResourceAsStream(\"originAndDestination.xml\");\nByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\nIOUtils.copy(is, byteArrayOutputStream);\nTrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());\nTrafficSimulationEngine se = new TrafficSimulationEngine();\nse.init(def);\nint linkId = 2;\nint segmentId = 0;\nMap<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\nSet<Integer> segments = new HashSet<Integer>();\nsegments.add(segmentId);\nlinkSegments.put(linkId, segments);\nFrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\nse.setFrameProperties(frameProperties);\nfor (float time = 0; time < 60 * 10; time += 0.1f) {\nse.step(0.1f);\nfor (RoadObject vehicle : se.getDynamicObjects()) {\nSystem.out.println(time + \": X=\" + vehicle.getPosition() + \"\\tV=\" + vehicle.getSpeed());\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 802
                },
                {
                        "id": "pretrain_java_data_14445605",
                        "content": "@Test\npublic void test() throws Exception {\nInputStream is = this.getClass().getResourceAsStream(\"originAndDestination.xml\");\nByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\nIOUtils.copy(is, byteArrayOutputStream);\nTrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());\nTrafficSimulationEngine se = new TrafficSimulationEngine();\nse.init(def);\nint linkId = 2;\nint segmentId = 0;\nMap<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\nSet<Integer> segments = new HashSet<Integer>();\nsegments.add(segmentId);\nlinkSegments.put(linkId, segments);\nFrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\nse.setFrameProperties(frameProperties);\nfor (float time = 0; time < 60 * 10; time += 0.1f) {\nse.step(0.1f);\nfor (RoadObject vehicle : se.getDynamicObjects()) {\nSystem.out.println(time + \": X=\" + vehicle.getPosition() + \"\\tV=\" + vehicle.getSpeed());\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#629023#20#42.java",
                        "__cluster__": 802
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14794404",
                        "content": "private String encryptPassword(String password) throws NoSuchAlgorithmException {\nStringBuffer encryptedPassword = new StringBuffer();\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.reset();\nmd5.update(password.getBytes());\nbyte digest[] = md5.digest();\nfor (int i = 0; i < digest.length; i++) {\nString hex = Integer.toHexString(0xFF & digest[i]);\nif (hex.length() == 1) {\nencryptedPassword.append('0');\n}\nencryptedPassword.append(hex);\n}\nreturn encryptedPassword.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 651
                },
                {
                        "id": "pretrain_java_data_307336",
                        "content": "<gh_stars>10-100\nprivate String encryptPassword(String password) throws NoSuchAlgorithmException {\nStringBuffer encryptedPassword = new StringBuffer();\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.reset();\nmd5.update(password.getBytes());\nbyte digest[] = md5.digest();\nfor (int i = 0; i < digest.length; i++) {\nString hex = Integer.toHexString(0xFF & digest[i]);\nif (hex.length() == 1) {\nencryptedPassword.append('0');\n}\nencryptedPassword.append(hex);\n}\nreturn encryptedPassword.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#799109#821#835.java",
                        "__cluster__": 651
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11154758",
                        "content": "public static void main(String[] args) {\nFTPClient client = new FTPClient();\nFileOutputStream fos = null;\ntry {\nclient.connect(\"192.168.1.10\");\nclient.login(\"a\", \"123456\");\nString filename = \"i.exe\";\nfos = new FileOutputStream(filename);\nclient.retrieveFile(\"/\" + filename, fos);\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\ntry {\nif (fos != null) {\nfos.close();\n}\nclient.disconnect();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 792
                },
                {
                        "id": "pretrain_java_data_14594790",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void main(String[] args) {\nFTPClient client = new FTPClient();\nFileOutputStream fos = null;\ntry {\nclient.connect(\"192.168.1.10\");\nclient.login(\"a\", \"123456\");\nString filename = \"i.exe\";\nfos = new FileOutputStream(filename);\nclient.retrieveFile(\"/\" + filename, fos);\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\ntry {\nif (fos != null) {\nfos.close();\n}\nclient.disconnect();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#611689#9#30.java",
                        "__cluster__": 792
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_23452437",
                        "content": "private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {\nif (fSource.getName().equals(\"Thums.db\")) return;\nSystem.out.println(\"copying \" + fSource + \" in \" + file);\nOutputStream o = new BufferedOutputStream(new FileOutputStream(file));\nInputStream i = new BufferedInputStream(new FileInputStream(fSource));\nbyte[] b = new byte[8192];\nint n;\nwhile ((n = i.read(b)) > 0) o.write(b, 0, n);\ni.close();\no.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 878
                },
                {
                        "id": "pretrain_java_data_14548900",
                        "content": "private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {\nif (fSource.getName().equals(\"Thums.db\")) return;\nSystem.out.println(\"copying \" + fSource + \" in \" + file);\nOutputStream o = new BufferedOutputStream(new FileOutputStream(file));\nInputStream i = new BufferedInputStream(new FileInputStream(fSource));\nbyte[] b = new byte[8192];\nint n;\nwhile ((n = i.read(b)) > 0) o.write(b, 0, n);\ni.close();\no.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1042688#59#69.java",
                        "__cluster__": 878
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_23532405",
                        "content": "public void persist(FreeFormConfigurable ffConfigurable, String relativePath) {\nFile file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\nInputStream is = ffConfigurable.getInputConfigStream();\ntry {\nOutputStream os = new FileOutputStream(file);\nIOUtils.copy(is, os);\n} catch (Exception e) {\nthrow new ConfigurationException(\"Failed to store free from config for class \" + ffConfigurable.getClass().getName() + \" into file \" + file.getAbsolutePath());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 32
                },
                {
                        "id": "pretrain_java_data_350428",
                        "content": "<reponame>cragkhit/elasticsearch\npublic void persist(FreeFormConfigurable ffConfigurable, String relativePath) {\nFile file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\nInputStream is = ffConfigurable.getInputConfigStream();\ntry {\nOutputStream os = new FileOutputStream(file);\nIOUtils.copy(is, os);\n} catch (Exception e) {\nthrow new ConfigurationException(\"Failed to store free from config for class \" + ffConfigurable.getClass().getName() + \" into file \" + file.getAbsolutePath());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#145790#157#166.java",
                        "__cluster__": 32
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5744493",
                        "content": "protected void onlyFileCopy(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\nint maxCount = (1024 * 1024 * 64) - (1024 * 32);\nlong size = inChannel.size();\nlong pos = 0;\nwhile (pos < size) {\npos += inChannel.transferTo(pos, maxCount, outChannel);\n}\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 515
                },
                {
                        "id": "pretrain_java_data_332995",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#850830#37#53.java<gh_stars>10-100\nprotected void onlyFileCopy(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\nint maxCount = (1024 * 1024 * 64) - (1024 * 32);\nlong size = inChannel.size();\nlong pos = 0;\nwhile (pos < size) {\npos += inChannel.transferTo(pos, maxCount, outChannel);\n}\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#850830#37#53.java",
                        "__cluster__": 515
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_4716110",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_1815839",
                        "content": "public static void copy(File in, File out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2256300#15#21.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_1815839",
                        "content": "public static void copy(File in, File out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2256300#15#21.java",
                        "__cluster__": 19
                },
                {
                        "id": "test_bigclonebench_data_10131427",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_1815839",
                        "content": "public static void copy(File in, File out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2256300#15#21.java",
                        "__cluster__": 19
                },
                {
                        "id": "test_bigclonebench_data_15768167",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = null;\nFileChannel destinationChannel = null;\ntry {\nsourceChannel = new FileInputStream(in).getChannel();\ndestinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n} finally {\nif (sourceChannel != null) sourceChannel.close();\nif (destinationChannel != null) destinationChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_1815839",
                        "content": "public static void copy(File in, File out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2256300#15#21.java",
                        "__cluster__": 19
                },
                {
                        "id": "test_bigclonebench_data_14598566",
                        "content": "public static void copyFileByNIO(File in, File out) throws IOException {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_1815839",
                        "content": "public static void copy(File in, File out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2256300#15#21.java",
                        "__cluster__": 19
                },
                {
                        "id": "test_bigclonebench_data_11933797",
                        "content": "public static void CopyFile(String in, String out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();\nFileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_381875",
                        "content": "public static void copyFile(String fromPath, String toPath) {\ntry {\nFile inputFile = new File(fromPath);\nString dirImg = (new File(toPath)).getParent();\nFile tmp = new File(dirImg);\nif (!tmp.exists()) {\ntmp.mkdir();\n}\nFile outputFile = new File(toPath);\nif (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\nFileInputStream in = new FileInputStream(inputFile);\nFileOutputStream out = new FileOutputStream(outputFile);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}\n} catch (Exception ex) {\nex.printStackTrace();\nLogHandler.log(ex.getMessage(), Level.INFO, \"LOG_MSG\", isLoggingEnabled());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#56985#554#575.java",
                        "__cluster__": 46
                },
                {
                        "id": "test_bigclonebench_data_3184073",
                        "content": "public static void copyFile(String fromPath, String toPath) {\ntry {\nFile inputFile = new File(fromPath);\nString dirImg = (new File(toPath)).getParent();\nFile tmp = new File(dirImg);\nif (!tmp.exists()) {\ntmp.mkdir();\n}\nFile outputFile = new File(toPath);\nif (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\nFileInputStream in = new FileInputStream(inputFile);\nFileOutputStream out = new FileOutputStream(outputFile);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}\n} catch (Exception ex) {\nex.printStackTrace();\nLogHandler.log(ex.getMessage(), Level.INFO, \"LOG_MSG\", isLoggingEnabled());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 46
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_376908",
                        "content": "private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\nFile oldlog = null;\ntry {\nboolean oldClassCopied = false;\nFile destPath = new File(_destPath, \"vai_\" + VAGlobals.APP_NAME + \"_\" + VAGlobals.APP_VERSION);\nif (upgrade) {\nFile lastVerPath = new File(_destPath, \"vai_\" + VAGlobals.APP_NAME + \"_\" + lastVer);\nif (destPath.equals(lastVerPath)) {\nFile bkdir = new File(destPath.getAbsolutePath() + \".bak\");\nif (!destPath.renameTo(bkdir)) {\nthrow new IOException(VAGlobals.i18n(\"Setup_NotCreateDirectory\") + \" \" + destPath);\n}\noldlog = new File(bkdir.getAbsolutePath() + System.getProperty(\"file.separator\") + \"uninstall.vai\");\nlastVerPath = bkdir;\n} else {\noldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(\"file.separator\") + \"uninstall.vai\");\n}\nif ((!destPath.exists()) && (!destPath.mkdirs())) {\nthrow new IOException(VAGlobals.i18n(\"Setup_NotCreateDirectory\") + \" \" + destPath);\n}\nif (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n} else {\nif ((!destPath.exists()) && (!destPath.mkdirs())) {\nthrow new IOException(VAGlobals.i18n(\"Setup_NotCreateDirectory\") + \" \" + destPath);\n}\n}\ndirty_ = true;\nFile[] ls = destPath.listFiles();\nfor (int i = 0; i < ls.length; i++) {\nif (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + \".class\")) ls[i].delete();\n}\nbyte[] buf = new byte[0];\nint read = 0;\nif (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\nfinal File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + \".class\");\nif (outClassFile.exists() && !outClassFile.delete()) {\nui_.showError(new Exception(VAGlobals.i18n(\"Setup_FileNotCreated\") + \":\\n\" + outClassFile.getName()));\n}\nfinal FileOutputStream out = new FileOutputStream(outClassFile);\nfinal FileInputStream in = new FileInputStream(fileWithArchive_);\nif (installClassOffset_ > 0) {\nin.skip(installClassOffset_);\n}\nbuf = new byte[0];\nif (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];\nread = in.read(buf, 0, buf.length);\nout.write(buf, 0, read);\nout.close();\nin.close();\n}\nfinal FileInputStream in = new FileInputStream(fileWithArchive_);\nif (jarOffset_ > 0) {\nin.skip(jarOffset_);\n}\nJarInputStream jar = new JarInputStream(in);\nfinal File outJarFile = new File(destPath.getAbsolutePath() + File.separator + \"install.jar\");\nif (outJarFile.exists() && !outJarFile.delete()) {\nui_.showError(new Exception(VAGlobals.i18n(\"Setup_FileNotCreated\") + \":\\n\" + outJarFile.getName()));\n}\nJarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\nZipEntry entry = jar.getNextEntry();\nfinal int bufSize = 32768;\nbuf = new byte[bufSize];\nwhile (entry != null) {\nString entryName = entry.getName();\nif (entryName.equals(\"com/memoire/vainstall/resources/vainstall.properties\")) {\n} else if (entryName.equals(installClassName_ + \".class\") && !oldClassCopied) {\nFileOutputStream out = null;\ntry {\nout = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + \".class\");\nVAGlobals.copyStream(jar, out, buf);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (out != null) out.close();\n}\n} else if (!entryName.endsWith(\".zip\")) {\nif (VAGlobals.DEBUG) VAGlobals.printDebug(\"jar entry name \" + entryName);\nZipEntry outEntry = new ZipEntry(entryName);\nCRC32 crc = new CRC32();\noutJar.putNextEntry(outEntry);\nint size = 0;\nwhile ((read = jar.read(buf, 0, bufSize)) >= 0) {\nsize += read;\nif (read == 0) {\nThread.yield();\n} else {\noutJar.write(buf, 0, read);\ncrc.update(buf, 0, read);\n}\n}\noutEntry.setSize(size);\noutEntry.setCrc(crc.getValue());\noutJar.flush();\noutJar.closeEntry();\n}\njar.closeEntry();\nentry = jar.getNextEntry();\n}\nInputStream pin = getClass().getResourceAsStream(\"resources/vainstall.properties\");\nProperties prop = new Properties();\ntry {\nprop.load(pin);\n} catch (IOException exc) {\n}\nif (language == null) language = \"default\";\nprop.setProperty(\"vainstall.destination.language\", language);\nZipEntry outEntry = new ZipEntry(\"com/memoire/vainstall/resources/vainstall.properties\");\nCRC32 crc = new CRC32();\noutEntry.setCrc(crc.getValue());\noutEntry.setSize(prop.size());\noutJar.putNextEntry(outEntry);\nprop.store(outJar, VAGlobals.NAME + \" \" + VAGlobals.VERSION);\noutEntry.setCrc(crc.getValue());\noutJar.closeEntry();\njar.close();\noutJar.close();\nin.close();\n} catch (IOException e) {\nString message = e.getLocalizedMessage();\nmessage += \"\\n\" + VAGlobals.i18n(\"Setup_ErrorUninstallScripts\");\ne.printStackTrace();\nexitOnError(new IOException(message));\n}\nreturn oldlog;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1005116#801#926.java",
                        "__cluster__": 207
                },
                {
                        "id": "test_bigclonebench_data_6403868",
                        "content": "private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\nFile oldlog = null;\ntry {\nboolean oldClassCopied = false;\nFile destPath = new File(_destPath, \"vai_\" + VAGlobals.APP_NAME + \"_\" + VAGlobals.APP_VERSION);\nif (upgrade) {\nFile lastVerPath = new File(_destPath, \"vai_\" + VAGlobals.APP_NAME + \"_\" + lastVer);\nif (destPath.equals(lastVerPath)) {\nFile bkdir = new File(destPath.getAbsolutePath() + \".bak\");\nif (!destPath.renameTo(bkdir)) {\nthrow new IOException(VAGlobals.i18n(\"Setup_NotCreateDirectory\") + \" \" + destPath);\n}\noldlog = new File(bkdir.getAbsolutePath() + System.getProperty(\"file.separator\") + \"uninstall.vai\");\nlastVerPath = bkdir;\n} else {\noldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(\"file.separator\") + \"uninstall.vai\");\n}\nif ((!destPath.exists()) && (!destPath.mkdirs())) {\nthrow new IOException(VAGlobals.i18n(\"Setup_NotCreateDirectory\") + \" \" + destPath);\n}\nif (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n} else {\nif ((!destPath.exists()) && (!destPath.mkdirs())) {\nthrow new IOException(VAGlobals.i18n(\"Setup_NotCreateDirectory\") + \" \" + destPath);\n}\n}\ndirty_ = true;\nFile[] ls = destPath.listFiles();\nfor (int i = 0; i < ls.length; i++) {\nif (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + \".class\")) ls[i].delete();\n}\nbyte[] buf = new byte[0];\nint read = 0;\nif (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\nfinal File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + \".class\");\nif (outClassFile.exists() && !outClassFile.delete()) {\nui_.showError(new Exception(VAGlobals.i18n(\"Setup_FileNotCreated\") + \":\\n\" + outClassFile.getName()));\n}\nfinal FileOutputStream out = new FileOutputStream(outClassFile);\nfinal FileInputStream in = new FileInputStream(fileWithArchive_);\nif (installClassOffset_ > 0) {\nin.skip(installClassOffset_);\n}\nbuf = new byte[0];\nif (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];\nread = in.read(buf, 0, buf.length);\nout.write(buf, 0, read);\nout.close();\nin.close();\n}\nfinal FileInputStream in = new FileInputStream(fileWithArchive_);\nif (jarOffset_ > 0) {\nin.skip(jarOffset_);\n}\nJarInputStream jar = new JarInputStream(in);\nfinal File outJarFile = new File(destPath.getAbsolutePath() + File.separator + \"install.jar\");\nif (outJarFile.exists() && !outJarFile.delete()) {\nui_.showError(new Exception(VAGlobals.i18n(\"Setup_FileNotCreated\") + \":\\n\" + outJarFile.getName()));\n}\nJarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\nZipEntry entry = jar.getNextEntry();\nfinal int bufSize = 32768;\nbuf = new byte[bufSize];\nwhile (entry != null) {\nString entryName = entry.getName();\nif (entryName.equals(\"com/memoire/vainstall/resources/vainstall.properties\")) {\n} else if (entryName.equals(installClassName_ + \".class\") && !oldClassCopied) {\nFileOutputStream out = null;\ntry {\nout = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + \".class\");\nVAGlobals.copyStream(jar, out, buf);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (out != null) out.close();\n}\n} else if (!entryName.endsWith(\".zip\")) {\nif (VAGlobals.DEBUG) VAGlobals.printDebug(\"jar entry name \" + entryName);\nZipEntry outEntry = new ZipEntry(entryName);\nCRC32 crc = new CRC32();\noutJar.putNextEntry(outEntry);\nint size = 0;\nwhile ((read = jar.read(buf, 0, bufSize)) >= 0) {\nsize += read;\nif (read == 0) {\nThread.yield();\n} else {\noutJar.write(buf, 0, read);\ncrc.update(buf, 0, read);\n}\n}\noutEntry.setSize(size);\noutEntry.setCrc(crc.getValue());\noutJar.flush();\noutJar.closeEntry();\n}\njar.closeEntry();\nentry = jar.getNextEntry();\n}\nInputStream pin = getClass().getResourceAsStream(\"resources/vainstall.properties\");\nProperties prop = new Properties();\ntry {\nprop.load(pin);\n} catch (IOException exc) {\n}\nif (language == null) language = \"default\";\nprop.setProperty(\"vainstall.destination.language\", language);\nZipEntry outEntry = new ZipEntry(\"com/memoire/vainstall/resources/vainstall.properties\");\nCRC32 crc = new CRC32();\noutEntry.setCrc(crc.getValue());\noutEntry.setSize(prop.size());\noutJar.putNextEntry(outEntry);\nprop.store(outJar, VAGlobals.NAME + \" \" + VAGlobals.VERSION);\noutEntry.setCrc(crc.getValue());\noutJar.closeEntry();\njar.close();\noutJar.close();\nin.close();\n} catch (IOException e) {\nString message = e.getLocalizedMessage();\nmessage += \"\\n\" + VAGlobals.i18n(\"Setup_ErrorUninstallScripts\");\ne.printStackTrace();\nexitOnError(new IOException(message));\n}\nreturn oldlog;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 207
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_19687456",
                        "content": "public void testReadPerMemberSixSmall() throws IOException {\nGZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));\ngzin.setEofEachMember(true);\nfor (int i = 0; i < 3; i++) {\nint count2 = IOUtils.copy(gzin, new NullOutputStream());\nassertEquals(\"wrong 1-byte member count\", 1, count2);\ngzin.nextMember();\nint count3 = IOUtils.copy(gzin, new NullOutputStream());\nassertEquals(\"wrong 5-byte member count\", 5, count3);\ngzin.nextMember();\n}\nint countEnd = IOUtils.copy(gzin, new NullOutputStream());\nassertEquals(\"wrong eof count\", 0, countEnd);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 251
                },
                {
                        "id": "pretrain_java_data_1860872",
                        "content": "public void testReadPerMemberSixSmall() throws IOException {\nGZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));\ngzin.setEofEachMember(true);\nfor (int i = 0; i < 3; i++) {\nint count2 = IOUtils.copy(gzin, new NullOutputStream());\nassertEquals(\"wrong 1-byte member count\", 1, count2);\ngzin.nextMember();\nint count3 = IOUtils.copy(gzin, new NullOutputStream());\nassertEquals(\"wrong 5-byte member count\", 5, count3);\ngzin.nextMember();\n}\nint countEnd = IOUtils.copy(gzin, new NullOutputStream());\nassertEquals(\"wrong eof count\", 0, countEnd);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1374908#96#109.java",
                        "__cluster__": 251
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_19739421",
                        "content": "public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {\ntry {\nCmdLineParser cmdLineParser = new CmdLineParser();\nOption formatOption = cmdLineParser.addStringOption('f', \"format\");\nOption outputEncodingOption = cmdLineParser.addStringOption('c', \"outcharset\");\nOption inputEncodingOption = cmdLineParser.addStringOption('i', \"incharset\");\ncmdLineParser.parse(args);\nString format = (String) cmdLineParser.getOptionValue(formatOption);\nString outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);\nif (outputEncoding == null || outputEncoding.trim().equals(\"\")) {\noutputEncoding = \"utf-8\";\nSystem.out.println(\"Defaulting to output charset utf-8 as argument -c is missing or not valid.\");\n}\nString inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);\nif (inputEncoding == null || outputEncoding.trim().equals(\"\")) {\ninputEncoding = \"utf-8\";\nSystem.out.println(\"Defaulting to input charset utf-8 as argument -i is missing or not valid.\");\n}\nString[] remainingArgs = cmdLineParser.getRemainingArgs();\nif (remainingArgs.length != 2) {\nprintUsage(\"Input and output file are not specified correctly. \");\n}\nFile inputFile = new File(remainingArgs[0]);\nif (!inputFile.exists()) {\nprintUsage(\"Input file \" + remainingArgs[0] + \" does not exist. \");\n}\nif (format == null || format.trim().equals(\"\")) {\nformat = (String) FileUtil.cutExtension(inputFile.getName()).getValue();\n}\nFile outputFile = new File(remainingArgs[1]);\nif (!outputFile.exists()) {\noutputFile.createNewFile();\n}\nSystem.out.println(\"format detected: \" + format);\nif (\"html\".equals(format)) {\nReader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));\nOutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);\nchar[] buffer = new char[1024];\nint read;\ndo {\nread = reader.read(buffer);\nif (read > 0) {\nout.write(buffer, 0, read);\n}\n} while (read != -1);\nout.flush();\nout.close();\n} else {\nprintUsage(\"Format not specified via argument -f. Also guessing for the extension of input file \" + inputFile.getName() + \" failed\");\n}\n} catch (Exception ex) {\nex.printStackTrace();\nprintUsage(ex.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 809
                },
                {
                        "id": "pretrain_java_data_1978254",
                        "content": "public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {\ntry {\nCmdLineParser cmdLineParser = new CmdLineParser();\nOption formatOption = cmdLineParser.addStringOption('f', \"format\");\nOption outputEncodingOption = cmdLineParser.addStringOption('c', \"outcharset\");\nOption inputEncodingOption = cmdLineParser.addStringOption('i', \"incharset\");\ncmdLineParser.parse(args);\nString format = (String) cmdLineParser.getOptionValue(formatOption);\nString outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);\nif (outputEncoding == null || outputEncoding.trim().equals(\"\")) {\noutputEncoding = \"utf-8\";\nSystem.out.println(\"Defaulting to output charset utf-8 as argument -c is missing or not valid.\");\n}\nString inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);\nif (inputEncoding == null || outputEncoding.trim().equals(\"\")) {\ninputEncoding = \"utf-8\";\nSystem.out.println(\"Defaulting to input charset utf-8 as argument -i is missing or not valid.\");\n}\nString[] remainingArgs = cmdLineParser.getRemainingArgs();\nif (remainingArgs.length != 2) {\nprintUsage(\"Input and output file are not specified correctly. \");\n}\nFile inputFile = new File(remainingArgs[0]);\nif (!inputFile.exists()) {\nprintUsage(\"Input file \" + remainingArgs[0] + \" does not exist. \");\n}\nif (format == null || format.trim().equals(\"\")) {\nformat = (String) FileUtil.cutExtension(inputFile.getName()).getValue();\n}\nFile outputFile = new File(remainingArgs[1]);\nif (!outputFile.exists()) {\noutputFile.createNewFile();\n}\nSystem.out.println(\"format detected: \" + format);\nif (\"html\".equals(format)) {\nReader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));\nOutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);\nchar[] buffer = new char[1024];\nint read;\ndo {\nread = reader.read(buffer);\nif (read > 0) {\nout.write(buffer, 0, read);\n}\n} while (read != -1);\nout.flush();\nout.close();\n} else {\nprintUsage(\"Format not specified via argument -f. Also guessing for the extension of input file \" + inputFile.getName() + \" failed\");\n}\n} catch (Exception ex) {\nex.printStackTrace();\nprintUsage(ex.getMessage());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#622879#134#188.java",
                        "__cluster__": 809
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6866575",
                        "content": "@Primitive\npublic static Value caml_md5_string(final CodeRunner ctxt, final Value str, final Value ofs, final Value len) throws Fail.Exception {\ntry {\nfinal MessageDigest md5 = MessageDigest.getInstance(Md5.ALGO);\nmd5.update(str.asBlock().getBytes(), ofs.asLong(), len.asLong());\nreturn Value.createFromBlock(Block.createString(md5.digest()));\n} catch (final NoSuchAlgorithmException nsae) {\nFail.invalidArgument(\"Digest.substring\");\nreturn Value.UNIT;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 609
                },
                {
                        "id": "pretrain_java_data_393128",
                        "content": "<filename>references/bcb_chosen_clones/selected#920762#47#57.java\n@Primitive\npublic static Value caml_md5_string(final CodeRunner ctxt, final Value str, final Value ofs, final Value len) throws Fail.Exception {\ntry {\nfinal MessageDigest md5 = MessageDigest.getInstance(Md5.ALGO);\nmd5.update(str.asBlock().getBytes(), ofs.asLong(), len.asLong());\nreturn Value.createFromBlock(Block.createString(md5.digest()));\n} catch (final NoSuchAlgorithmException nsae) {\nFail.invalidArgument(\"Digest.substring\");\nreturn Value.UNIT;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#920762#47#57.java",
                        "__cluster__": 609
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21363911",
                        "content": "public void testTransactions() throws Exception {\ncon = TestUtil.openDB();\nStatement st;\nResultSet rs;\ncon.setAutoCommit(false);\nassertTrue(!con.getAutoCommit());\ncon.setAutoCommit(true);\nassertTrue(con.getAutoCommit());\nst = con.createStatement();\nst.executeUpdate(\"insert into test_a (imagename,image,id) values ('comttest',1234,5678)\");\ncon.setAutoCommit(false);\nst.executeUpdate(\"update test_a set image=9876 where id=5678\");\ncon.commit();\nrs = st.executeQuery(\"select image from test_a where id=5678\");\nassertTrue(rs.next());\nassertEquals(9876, rs.getInt(1));\nrs.close();\nst.executeUpdate(\"update test_a set image=1111 where id=5678\");\ncon.rollback();\nrs = st.executeQuery(\"select image from test_a where id=5678\");\nassertTrue(rs.next());\nassertEquals(9876, rs.getInt(1));\nrs.close();\nTestUtil.closeDB(con);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 784
                },
                {
                        "id": "pretrain_java_data_1964252",
                        "content": "<gh_stars>10-100\npublic void testTransactions() throws Exception {\ncon = TestUtil.openDB();\nStatement st;\nResultSet rs;\ncon.setAutoCommit(false);\nassertTrue(!con.getAutoCommit());\ncon.setAutoCommit(true);\nassertTrue(con.getAutoCommit());\nst = con.createStatement();\nst.executeUpdate(\"insert into test_a (imagename,image,id) values ('comttest',1234,5678)\");\ncon.setAutoCommit(false);\nst.executeUpdate(\"update test_a set image=9876 where id=5678\");\ncon.commit();\nrs = st.executeQuery(\"select image from test_a where id=5678\");\nassertTrue(rs.next());\nassertEquals(9876, rs.getInt(1));\nrs.close();\nst.executeUpdate(\"update test_a set image=1111 where id=5678\");\ncon.rollback();\nrs = st.executeQuery(\"select image from test_a where id=5678\");\nassertTrue(rs.next());\nassertEquals(9876, rs.getInt(1));\nrs.close();\nTestUtil.closeDB(con);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2625015#59#83.java",
                        "__cluster__": 784
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_1817963",
                        "content": "<filename>references/bcb_chosen_clones/selected#50445#33#66.java\npublic String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {\nCalendar rightNow = Calendar.getInstance();\nString dayNamedFolderName = \"\" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));\nString uploadDirRoot = props.getProperty(\"uploaded.files.root\");\nFile file = new File(uploadDirRoot + System.getProperty(\"file.separator\") + dayNamedFolderName);\nif (!file.exists()) file.mkdirs();\nString extension = FilenameUtils.getExtension(fileName);\nString outFileName;\nif (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, \"true\"))) {\noutFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));\n} else {\noutFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));\n}\nif (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, \"true\"))) {\noutFileName = outFileName + DOT + extension;\n}\nString outPathAndName = uploadDirRoot + System.getProperty(\"file.separator\") + dayNamedFolderName + System.getProperty(\"file.separator\") + props.getProperty(\"uploaded.files.prefix\") + outFileName;\nFile uploadedFile = new File(outPathAndName);\n_logger.info(\"uploadedFile.getAbsolutePath() = {}\", uploadedFile.getAbsolutePath());\nuploadedFile.createNewFile();\nOutputStream outStream = new FileOutputStream(outPathAndName);\nIOUtils.copyLarge(inStream, outStream);\nIOUtils.closeQuietly(inStream);\noutStream.close();\nif (resize) {\nwriteResizedImage(outPathAndName, extension, \"imgSize_xs\");\nwriteResizedImage(outPathAndName, extension, \"imgSize_s\");\nwriteResizedImage(outPathAndName, extension, \"imgSize_m\");\nwriteResizedImage(outPathAndName, extension, \"imgSize_l\");\nwriteResizedImage(outPathAndName, extension, \"imgSize_xl\");\n}\nString retVal = dayNamedFolderName + \"/\" + props.getProperty(\"uploaded.files.prefix\") + outFileName;\nreturn retVal;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#50445#33#66.java",
                        "__cluster__": 623
                },
                {
                        "id": "test_bigclonebench_data_4602568",
                        "content": "public String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {\nCalendar rightNow = Calendar.getInstance();\nString dayNamedFolderName = \"\" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));\nString uploadDirRoot = props.getProperty(\"uploaded.files.root\");\nFile file = new File(uploadDirRoot + System.getProperty(\"file.separator\") + dayNamedFolderName);\nif (!file.exists()) file.mkdirs();\nString extension = FilenameUtils.getExtension(fileName);\nString outFileName;\nif (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, \"true\"))) {\noutFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));\n} else {\noutFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));\n}\nif (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, \"true\"))) {\noutFileName = outFileName + DOT + extension;\n}\nString outPathAndName = uploadDirRoot + System.getProperty(\"file.separator\") + dayNamedFolderName + System.getProperty(\"file.separator\") + props.getProperty(\"uploaded.files.prefix\") + outFileName;\nFile uploadedFile = new File(outPathAndName);\n_logger.info(\"uploadedFile.getAbsolutePath() = {}\", uploadedFile.getAbsolutePath());\nuploadedFile.createNewFile();\nOutputStream outStream = new FileOutputStream(outPathAndName);\nIOUtils.copyLarge(inStream, outStream);\nIOUtils.closeQuietly(inStream);\noutStream.close();\nif (resize) {\nwriteResizedImage(outPathAndName, extension, \"imgSize_xs\");\nwriteResizedImage(outPathAndName, extension, \"imgSize_s\");\nwriteResizedImage(outPathAndName, extension, \"imgSize_m\");\nwriteResizedImage(outPathAndName, extension, \"imgSize_l\");\nwriteResizedImage(outPathAndName, extension, \"imgSize_xl\");\n}\nString retVal = dayNamedFolderName + \"/\" + props.getProperty(\"uploaded.files.prefix\") + outFileName;\nreturn retVal;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 623
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_494226",
                        "content": "public static void main(String[] args) throws Exception {\nString linesep = System.getProperty(\"line.separator\");\nFileOutputStream fos = new FileOutputStream(new File(\"lib-licenses.txt\"));\nfos.write(new String(\"JCP contains the following libraries. Please read this for comments on copyright etc.\" + linesep + linesep).getBytes());\nfos.write(new String(\"Chemistry Development Kit, master version as of \" + new Date().toString() + \" (http://cdk.sf.net)\" + linesep).getBytes());\nfos.write(new String(\"Copyright 1997-2009 The CDK Development Team\" + linesep).getBytes());\nfos.write(new String(\"License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)\" + linesep).getBytes());\nfos.write(new String(\"Download: https://sourceforge.net/projects/cdk/files/\" + linesep).getBytes());\nfos.write(new String(\"Source available at: http://sourceforge.net/scm/?type=git&group_id=20024\" + linesep + linesep).getBytes());\nFile[] files = new File(args[0]).listFiles(new JarFileFilter());\nfor (int i = 0; i < files.length; i++) {\nif (new File(files[i].getPath() + \".meta\").exists()) {\nMap<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + \".meta\"));\nIterator<String> itsect = metaprops.keySet().iterator();\nwhile (itsect.hasNext()) {\nString section = itsect.next();\nfos.write(new String(metaprops.get(section).get(\"Library\") + \" \" + metaprops.get(section).get(\"Version\") + \" (\" + metaprops.get(section).get(\"Homepage\") + \")\" + linesep).getBytes());\nfos.write(new String(\"Copyright \" + metaprops.get(section).get(\"Copyright\") + linesep).getBytes());\nfos.write(new String(\"License: \" + metaprops.get(section).get(\"License\") + \" (\" + metaprops.get(section).get(\"LicenseURL\") + \")\" + linesep).getBytes());\nfos.write(new String(\"Download: \" + metaprops.get(section).get(\"Download\") + linesep).getBytes());\nfos.write(new String(\"Source available at: \" + metaprops.get(section).get(\"SourceCode\") + linesep + linesep).getBytes());\n}\n}\nif (new File(files[i].getPath() + \".extra\").exists()) {\nfos.write(new String(\"The author says:\" + linesep).getBytes());\nFileInputStream in = new FileInputStream(new File(files[i].getPath() + \".extra\"));\nint len;\nbyte[] buf = new byte[1024];\nwhile ((len = in.read(buf)) > 0) {\nfos.write(buf, 0, len);\n}\n}\nfos.write(linesep.getBytes());\n}\nfos.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 385
                },
                {
                        "id": "pretrain_java_data_16346454",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/default#99442#16#51.java\npublic static void main(String[] args) throws Exception {\nString linesep = System.getProperty(\"line.separator\");\nFileOutputStream fos = new FileOutputStream(new File(\"lib-licenses.txt\"));\nfos.write(new String(\"JCP contains the following libraries. Please read this for comments on copyright etc.\" + linesep + linesep).getBytes());\nfos.write(new String(\"Chemistry Development Kit, master version as of \" + new Date().toString() + \" (http://cdk.sf.net)\" + linesep).getBytes());\nfos.write(new String(\"Copyright 1997-2009 The CDK Development Team\" + linesep).getBytes());\nfos.write(new String(\"License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)\" + linesep).getBytes());\nfos.write(new String(\"Download: https://sourceforge.net/projects/cdk/files/\" + linesep).getBytes());\nfos.write(new String(\"Source available at: http://sourceforge.net/scm/?type=git&group_id=20024\" + linesep + linesep).getBytes());\nFile[] files = new File(args[0]).listFiles(new JarFileFilter());\nfor (int i = 0; i < files.length; i++) {\nif (new File(files[i].getPath() + \".meta\").exists()) {\nMap<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + \".meta\"));\nIterator<String> itsect = metaprops.keySet().iterator();\nwhile (itsect.hasNext()) {\nString section = itsect.next();\nfos.write(new String(metaprops.get(section).get(\"Library\") + \" \" + metaprops.get(section).get(\"Version\") + \" (\" + metaprops.get(section).get(\"Homepage\") + \")\" + linesep).getBytes());\nfos.write(new String(\"Copyright \" + metaprops.get(section).get(\"Copyright\") + linesep).getBytes());\nfos.write(new String(\"License: \" + metaprops.get(section).get(\"License\") + \" (\" + metaprops.get(section).get(\"LicenseURL\") + \")\" + linesep).getBytes());\nfos.write(new String(\"Download: \" + metaprops.get(section).get(\"Download\") + linesep).getBytes());\nfos.write(new String(\"Source available at: \" + metaprops.get(section).get(\"SourceCode\") + linesep + linesep).getBytes());\n}\n}\nif (new File(files[i].getPath() + \".extra\").exists()) {\nfos.write(new String(\"The author says:\" + linesep).getBytes());\nFileInputStream in = new FileInputStream(new File(files[i].getPath() + \".extra\"));\nint len;\nbyte[] buf = new byte[1024];\nwhile ((len = in.read(buf)) > 0) {\nfos.write(buf, 0, len);\n}\n}\nfos.write(linesep.getBytes());\n}\nfos.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99442#16#51.java",
                        "__cluster__": 385
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_16389556",
                        "content": "public static int[] bubbleSort(int... a) {\nboolean swapped;\ndo {\nswapped = false;\nfor (int i = 0; i < a.length - 1; i++) {\nif (a[i] > a[i + 1]) {\nint tmp = a[i];\na[i] = a[i + 1];\na[i + 1] = tmp;\nswapped = true;\n}\n}\n} while (swapped);\nreturn a;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#87418#5#19.java",
                        "__cluster__": 499
                },
                {
                        "id": "test_bigclonebench_data_1362",
                        "content": "public static int[] bubbleSort(int... a) {\nboolean swapped;\ndo {\nswapped = false;\nfor (int i = 0; i < a.length - 1; i++) {\nif (a[i] > a[i + 1]) {\nint tmp = a[i];\na[i] = a[i + 1];\na[i + 1] = tmp;\nswapped = true;\n}\n}\n} while (swapped);\nreturn a;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 499
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6371589",
                        "content": "public void insertUser(final List<NewUser> newUsers) {\ntry {\nconnection.setAutoCommit(false);\nfinal Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();\nfinal Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();\nfinal List<String> userDirs = new ArrayList<String>();\nIterator<NewUser> iter = newUsers.iterator();\nNewUser user;\nRealm realm;\nString username;\nPasswordHasher ph;\nwhile (iter.hasNext()) {\nuser = iter.next();\nusername = user.username.toLowerCase(locale);\nph = PasswordFactory.getInstance().getPasswordHasher();\npass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));\nrealmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());\nrealmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(\"null\"), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, \"\", user.password)));\nif (user.realms != null) {\nfor (String realmName : user.realms) {\nrealm = cm.getRealm(realmName);\nrealmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));\n}\nuser.realms = null;\n}\n}\nnew ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n@Override\npublic void executeProcessReturnNull() throws SQLException {\npsImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"user.add\"), Statement.RETURN_GENERATED_KEYS);\nIterator<NewUser> iter = newUsers.iterator();\nNewUser user;\nDomainDb domain = null;\nwhile (iter.hasNext()) {\nuser = iter.next();\npsImpl.setString(1, user.username);\npsImpl.setString(2, user.username.toLowerCase(locale));\nif (domain == null || (domain.getDomainId() != user.domainId)) {\ndomain = (DomainDb) cmDB.getDomain(user.domainId);\n}\nuserDirs.add(user.username + '@' + domain.getDomainName());\npsImpl.setInt(3, user.domainId);\npsImpl.setString(4, pass.get(user.username).password);\npsImpl.setString(5, pass.get(user.username).salt);\npsImpl.executeUpdate();\nrsImpl = psImpl.getGeneratedKeys();\nif (rsImpl.next()) {\nuser.userId = rsImpl.getInt(1);\nrsImpl.close();\n} else {\nthrow new SQLException(\"Need to have a user id generated.\");\n}\n}\n}\n});\nnew ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n@Override\npublic void executeProcessReturnNull() throws SQLException {\npsImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"realm.addUser\"));\nIterator<NewUser> iter = newUsers.iterator();\nNewUser user;\nList<RealmWithEncryptedPass> list;\nRealmWithEncryptedPass rwep;\nRealmDb realm;\nwhile (iter.hasNext()) {\nuser = iter.next();\nlist = realmPass.get(user.username);\nif (list != null) {\nIterator<RealmWithEncryptedPass> iter1 = list.iterator();\nwhile (iter1.hasNext()) {\nrwep = iter1.next();\nrealm = (RealmDb) rwep.realm;\npsImpl.setInt(1, realm.getRealmId());\npsImpl.setInt(2, user.userId);\npsImpl.setInt(3, user.domainId);\npsImpl.setString(4, rwep.password);\npsImpl.executeUpdate();\n}\n}\n}\n}\n});\nconnection.commit();\nIterator<String> iterator = userDirs.iterator();\nwhile (iterator.hasNext()) {\ncm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());\n}\ncm.createDirectories();\n} catch (GeneralSecurityException e) {\nlog.error(e);\nif (connection != null) {\ntry {\nconnection.rollback();\n} catch (SQLException ex) {\n}\n}\nthrow new RuntimeException(\"Error updating Realms. Unable to continue Operation.\");\n} catch (SQLException sqle) {\nlog.error(sqle);\nif (connection != null) {\ntry {\nconnection.rollback();\n} catch (SQLException ex) {\n}\n}\n} finally {\nif (connection != null) {\ntry {\nconnection.setAutoCommit(true);\n} catch (SQLException ex) {\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 545
                },
                {
                        "id": "pretrain_java_data_17826245",
                        "content": "<filename>references/bcb_chosen_clones/selected#2462101#188#303.java\npublic void insertUser(final List<NewUser> newUsers) {\ntry {\nconnection.setAutoCommit(false);\nfinal Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();\nfinal Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();\nfinal List<String> userDirs = new ArrayList<String>();\nIterator<NewUser> iter = newUsers.iterator();\nNewUser user;\nRealm realm;\nString username;\nPasswordHasher ph;\nwhile (iter.hasNext()) {\nuser = iter.next();\nusername = user.username.toLowerCase(locale);\nph = PasswordFactory.getInstance().getPasswordHasher();\npass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));\nrealmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());\nrealmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(\"null\"), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, \"\", user.password)));\nif (user.realms != null) {\nfor (String realmName : user.realms) {\nrealm = cm.getRealm(realmName);\nrealmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));\n}\nuser.realms = null;\n}\n}\nnew ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n@Override\npublic void executeProcessReturnNull() throws SQLException {\npsImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"user.add\"), Statement.RETURN_GENERATED_KEYS);\nIterator<NewUser> iter = newUsers.iterator();\nNewUser user;\nDomainDb domain = null;\nwhile (iter.hasNext()) {\nuser = iter.next();\npsImpl.setString(1, user.username);\npsImpl.setString(2, user.username.toLowerCase(locale));\nif (domain == null || (domain.getDomainId() != user.domainId)) {\ndomain = (DomainDb) cmDB.getDomain(user.domainId);\n}\nuserDirs.add(user.username + '@' + domain.getDomainName());\npsImpl.setInt(3, user.domainId);\npsImpl.setString(4, pass.get(user.username).password);\npsImpl.setString(5, pass.get(user.username).salt);\npsImpl.executeUpdate();\nrsImpl = psImpl.getGeneratedKeys();\nif (rsImpl.next()) {\nuser.userId = rsImpl.getInt(1);\nrsImpl.close();\n} else {\nthrow new SQLException(\"Need to have a user id generated.\");\n}\n}\n}\n});\nnew ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n@Override\npublic void executeProcessReturnNull() throws SQLException {\npsImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"realm.addUser\"));\nIterator<NewUser> iter = newUsers.iterator();\nNewUser user;\nList<RealmWithEncryptedPass> list;\nRealmWithEncryptedPass rwep;\nRealmDb realm;\nwhile (iter.hasNext()) {\nuser = iter.next();\nlist = realmPass.get(user.username);\nif (list != null) {\nIterator<RealmWithEncryptedPass> iter1 = list.iterator();\nwhile (iter1.hasNext()) {\nrwep = iter1.next();\nrealm = (RealmDb) rwep.realm;\npsImpl.setInt(1, realm.getRealmId());\npsImpl.setInt(2, user.userId);\npsImpl.setInt(3, user.domainId);\npsImpl.setString(4, rwep.password);\npsImpl.executeUpdate();\n}\n}\n}\n}\n});\nconnection.commit();\nIterator<String> iterator = userDirs.iterator();\nwhile (iterator.hasNext()) {\ncm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());\n}\ncm.createDirectories();\n} catch (GeneralSecurityException e) {\nlog.error(e);\nif (connection != null) {\ntry {\nconnection.rollback();\n} catch (SQLException ex) {\n}\n}\nthrow new RuntimeException(\"Error updating Realms. Unable to continue Operation.\");\n} catch (SQLException sqle) {\nlog.error(sqle);\nif (connection != null) {\ntry {\nconnection.rollback();\n} catch (SQLException ex) {\n}\n}\n} finally {\nif (connection != null) {\ntry {\nconnection.setAutoCommit(true);\n} catch (SQLException ex) {\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2462101#188#303.java",
                        "__cluster__": 545
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_16317964",
                        "content": "<gh_stars>10-100\n@Override\npublic boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) {\nConnection conexion = null;\nPreparedStatement select = null;\nPreparedStatement update = null;\nResultSet rs = null;\nboolean exito = false;\ntry {\nconexion = pool.getConnection();\nconexion.setAutoCommit(false);\nselect = conexion.prepareStatement(\"SELECT* FROM \" + nameBD + \".Productos WHERE Codigo=?\");\nupdate = conexion.prepareStatement(\"UPDATE \" + nameBD + \".Productos SET Stock=? WHERE Codigo=?\");\nString codigoProd;\nint filasAfectadas = 0;\nIterator<String> iterador = carro.keySet().iterator();\nwhile (iterador.hasNext()) {\ncodigoProd = iterador.next();\nselect.setString(1, codigoProd);\nrs = select.executeQuery();\nif (rs.next() == false) {\nTools.anadirMensaje(request, \"No existe el producto con codigo: \" + codigoProd + \"(producto eliminado de la cesta)\");\niterador.remove();\nconexion.rollback();\n} else {\nProducto prod = new Producto(rs.getString(\"Codigo\"), rs.getString(\"Nombre\"), rs.getDouble(\"Precio\"), rs.getInt(\"Stock\"), rs.getString(\"Descripcion\"), rs.getString(\"Detalles\"));\nselect.clearParameters();\nif (carro.get(codigoProd) > prod.getStock()) {\nTools.anadirMensaje(request, \"No hay unidades suficientes de: \" + prod.getNombre() + \"(producto eliminado de la cesta)\");\niterador.remove();\nconexion.rollback();\n} else {\nupdate.setInt(1, prod.getStock() - carro.get(codigoProd));\nupdate.setString(2, codigoProd);\nfilasAfectadas = update.executeUpdate();\nif (filasAfectadas != 1) {\nTools.anadirMensaje(request, \"Ocurrio un error en el catalogo\");\nconexion.rollback();\n}\nupdate.clearParameters();\nlistado.put(prod, carro.get(codigoProd));\n}\n}\n}\nconexion.commit();\nexito = true;\n} catch (SQLException ex) {\nlogger.log(Level.SEVERE, \"Error actualizando unidades de productos en compra\", ex);\ntry {\nconexion.rollback();\n} catch (SQLException ex1) {\nlogger.log(Level.SEVERE, \"Error haciendo rolback de la transacci\u00f3n que ha dado error en la actualizaci\u00f3n de unidades por compra\", ex1);\n}\n} finally {\ncerrarConexionYStatement(conexion, select, update);\ncerrarResultSet(rs);\n}\nreturn exito;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1414304#272#329.java",
                        "__cluster__": 566
                },
                {
                        "id": "test_bigclonebench_data_19467540",
                        "content": "@Override\npublic boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) {\nConnection conexion = null;\nPreparedStatement select = null;\nPreparedStatement update = null;\nResultSet rs = null;\nboolean exito = false;\ntry {\nconexion = pool.getConnection();\nconexion.setAutoCommit(false);\nselect = conexion.prepareStatement(\"SELECT* FROM \" + nameBD + \".Productos WHERE Codigo=?\");\nupdate = conexion.prepareStatement(\"UPDATE \" + nameBD + \".Productos SET Stock=? WHERE Codigo=?\");\nString codigoProd;\nint filasAfectadas = 0;\nIterator<String> iterador = carro.keySet().iterator();\nwhile (iterador.hasNext()) {\ncodigoProd = iterador.next();\nselect.setString(1, codigoProd);\nrs = select.executeQuery();\nif (rs.next() == false) {\nTools.anadirMensaje(request, \"No existe el producto con codigo: \" + codigoProd + \"(producto eliminado de la cesta)\");\niterador.remove();\nconexion.rollback();\n} else {\nProducto prod = new Producto(rs.getString(\"Codigo\"), rs.getString(\"Nombre\"), rs.getDouble(\"Precio\"), rs.getInt(\"Stock\"), rs.getString(\"Descripcion\"), rs.getString(\"Detalles\"));\nselect.clearParameters();\nif (carro.get(codigoProd) > prod.getStock()) {\nTools.anadirMensaje(request, \"No hay unidades suficientes de: \" + prod.getNombre() + \"(producto eliminado de la cesta)\");\niterador.remove();\nconexion.rollback();\n} else {\nupdate.setInt(1, prod.getStock() - carro.get(codigoProd));\nupdate.setString(2, codigoProd);\nfilasAfectadas = update.executeUpdate();\nif (filasAfectadas != 1) {\nTools.anadirMensaje(request, \"Ocurrio un error en el catalogo\");\nconexion.rollback();\n}\nupdate.clearParameters();\nlistado.put(prod, carro.get(codigoProd));\n}\n}\n}\nconexion.commit();\nexito = true;\n} catch (SQLException ex) {\nlogger.log(Level.SEVERE, \"Error actualizando unidades de productos en compra\", ex);\ntry {\nconexion.rollback();\n} catch (SQLException ex1) {\nlogger.log(Level.SEVERE, \"Error haciendo rolback de la transacci\u00f3n que ha dado error en la actualizaci\u00f3n de unidades por compra\", ex1);\n}\n} finally {\ncerrarConexionYStatement(conexion, select, update);\ncerrarResultSet(rs);\n}\nreturn exito;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 566
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17808372",
                        "content": "public PhoneSetImpl(URL url) throws IOException {\nBufferedReader reader;\nString line;\nphonesetMap = new HashMap();\nreader = new BufferedReader(new InputStreamReader(url.openStream()));\nline = reader.readLine();\nlineCount++;\nwhile (line != null) {\nif (!line.startsWith(\"***\")) {\nparseAndAdd(line);\n}\nline = reader.readLine();\n}\nreader.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1758918#50#64.java",
                        "__cluster__": 870
                },
                {
                        "id": "test_bigclonebench_data_12883117",
                        "content": "public PhoneSetImpl(URL url) throws IOException {\nBufferedReader reader;\nString line;\nphonesetMap = new HashMap();\nreader = new BufferedReader(new InputStreamReader(url.openStream()));\nline = reader.readLine();\nlineCount++;\nwhile (line != null) {\nif (!line.startsWith(\"***\")) {\nparseAndAdd(line);\n}\nline = reader.readLine();\n}\nreader.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 870
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2936678",
                        "content": "public static String getUniqueKey() {\nString digest = \"\";\ntry {\nfinal MessageDigest md = MessageDigest.getInstance(\"MD5\");\nfinal String timeVal = \"\" + (System.currentTimeMillis() + 1);\nString localHost = \"\";\ntry {\nlocalHost = InetAddress.getLocalHost().toString();\n} catch (UnknownHostException e) {\nprintln(\"Warn: getUniqueKey(), Error trying to get localhost\" + e.getMessage());\n}\nfinal String randVal = \"\" + new Random().nextInt();\nfinal String val = timeVal + localHost + randVal;\nmd.reset();\nmd.update(val.getBytes());\ndigest = toHexString(md.digest());\n} catch (NoSuchAlgorithmException e) {\nprintln(\"Warn: getUniqueKey() \" + e);\n}\nreturn digest;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 281
                },
                {
                        "id": "pretrain_java_data_16365210",
                        "content": "<gh_stars>10-100\npublic static final String getUniqueId() {\nString digest = \"\";\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nString timeVal = \"\" + (System.currentTimeMillis() + 1);\nString localHost = \"\";\ntry {\nlocalHost = InetAddress.getLocalHost().toString();\n} catch (UnknownHostException e) {\nthrow new RuntimeException(\"Error trying to get localhost\" + e.getMessage());\n}\nString randVal = \"\" + new Random().nextInt();\nString val = timeVal + localHost + randVal;\nmd.reset();\nmd.update(val.getBytes());\ndigest = toHexString(md.digest());\n} catch (NoSuchAlgorithmException e) {\nthrow new RuntimeException(\"NoSuchAlgorithmException : \" + e.getMessage());\n}\nreturn digest;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#706474#39#59.java",
                        "__cluster__": 281
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_16274715",
                        "content": "<filename>references/bcb_chosen_clones/selected#922346#219#237.java<gh_stars>10-100\nprivate void Connect() throws NpsException {\ntry {\nclient = new FTPClient();\nclient.connect(host.hostname, host.remoteport);\nint reply = client.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nclient.disconnect();\nclient = null;\ncom.microfly.util.DefaultLog.error_noexception(\"FTP Server:\" + host.hostname + \"refused connection.\");\nreturn;\n}\nclient.login(host.uname, host.upasswd);\nclient.enterLocalPassiveMode();\nclient.setFileType(FTPClient.BINARY_FILE_TYPE);\nclient.changeWorkingDirectory(host.remotedir);\n} catch (Exception e) {\ncom.microfly.util.DefaultLog.error(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#922346#219#237.java",
                        "__cluster__": 475
                },
                {
                        "id": "test_bigclonebench_data_22057083",
                        "content": "private void Connect() throws NpsException {\ntry {\nclient = new FTPClient();\nclient.connect(host.hostname, host.remoteport);\nint reply = client.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nclient.disconnect();\nclient = null;\ncom.microfly.util.DefaultLog.error_noexception(\"FTP Server:\" + host.hostname + \"refused connection.\");\nreturn;\n}\nclient.login(host.uname, host.upasswd);\nclient.enterLocalPassiveMode();\nclient.setFileType(FTPClient.BINARY_FILE_TYPE);\nclient.changeWorkingDirectory(host.remotedir);\n} catch (Exception e) {\ncom.microfly.util.DefaultLog.error(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 475
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_22625683",
                        "content": "public static Model downloadModel(String url) {\nModel model = ModelFactory.createDefaultModel();\ntry {\nURLConnection connection = new URL(url).openConnection();\nif (connection instanceof HttpURLConnection) {\nHttpURLConnection httpConnection = (HttpURLConnection) connection;\nhttpConnection.setRequestProperty(\"Accept\", \"application/rdf+xml, */*;q=.1\");\nhttpConnection.setRequestProperty(\"Accept-Language\", \"en\");\n}\nInputStream in = connection.getInputStream();\nmodel.read(in, url);\nin.close();\nreturn model;\n} catch (MalformedURLException e) {\ncat.debug(\"Unable to download model from \" + url, e);\nthrow new RuntimeException(e);\n} catch (IOException e) {\ncat.debug(\"Unable to download model from \" + url, e);\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 680
                },
                {
                        "id": "pretrain_java_data_17820168",
                        "content": "<gh_stars>10-100\npublic static Model downloadModel(String url) {\nModel model = ModelFactory.createDefaultModel();\ntry {\nURLConnection connection = new URL(url).openConnection();\nif (connection instanceof HttpURLConnection) {\nHttpURLConnection httpConnection = (HttpURLConnection) connection;\nhttpConnection.setRequestProperty(\"Accept\", \"application/rdf+xml, */*;q=.1\");\nhttpConnection.setRequestProperty(\"Accept-Language\", \"en\");\n}\nInputStream in = connection.getInputStream();\nmodel.read(in, url);\nin.close();\nreturn model;\n} catch (MalformedURLException e) {\nlogger.debug(\"Unable to download model from \" + url, e);\nthrow new RuntimeException(e);\n} catch (IOException e) {\nlogger.debug(\"Unable to download model from \" + url, e);\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1529627#250#270.java",
                        "__cluster__": 680
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_17809965",
                        "content": "<filename>references/bcb_chosen_clones/selected#1068392#48#78.java<gh_stars>10-100\npublic void deleteObject(String id) throws SQLException {\nboolean selfConnection = true;\nConnection conn = null;\nPreparedStatement stmt = null;\ntry {\nif (dbConnection == null) {\nDatabaseConn dbConn = new DatabaseConn();\nconn = dbConn.getConnection();\nconn.setAutoCommit(false);\n} else {\nconn = dbConnection;\nselfConnection = false;\n}\nstmt = conn.prepareStatement(this.deleteSql);\nstmt.setString(1, id);\nstmt.executeUpdate();\nif (selfConnection) conn.commit();\n} catch (Exception e) {\nif (selfConnection && conn != null) conn.rollback();\nthrow new SQLException(e.getMessage());\n} finally {\nif (stmt != null) {\nstmt.close();\nstmt = null;\n}\nif (selfConnection && conn != null) {\nconn.close();\nconn = null;\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1068392#48#78.java",
                        "__cluster__": 390
                },
                {
                        "id": "test_bigclonebench_data_4481712",
                        "content": "public void deleteObject(String id) throws SQLException {\nboolean selfConnection = true;\nConnection conn = null;\nPreparedStatement stmt = null;\ntry {\nif (dbConnection == null) {\nDatabaseConn dbConn = new DatabaseConn();\nconn = dbConn.getConnection();\nconn.setAutoCommit(false);\n} else {\nconn = dbConnection;\nselfConnection = false;\n}\nstmt = conn.prepareStatement(this.deleteSql);\nstmt.setString(1, id);\nstmt.executeUpdate();\nif (selfConnection) conn.commit();\n} catch (Exception e) {\nif (selfConnection && conn != null) conn.rollback();\nthrow new SQLException(e.getMessage());\n} finally {\nif (stmt != null) {\nstmt.close();\nstmt = null;\n}\nif (selfConnection && conn != null) {\nconn.close();\nconn = null;\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 390
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21824901",
                        "content": "public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\ncloseQuietly(source);\ncloseQuietly(destination);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "id": "pretrain_java_data_16260755",
                        "content": "public static void copyFile(final File sourceFile, final File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileInputStream inStream = null;\nFileOutputStream outStream = null;\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = (inStream = new FileInputStream(sourceFile)).getChannel();\ndestination = (outStream = new FileOutputStream(destFile)).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\ncloseIO(source);\ncloseIO(inStream);\ncloseIO(destination);\ncloseIO(outStream);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#712665#334#352.java",
                        "__cluster__": 277
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_19849797",
                        "content": "public static void copyFile(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "id": "pretrain_java_data_16260755",
                        "content": "public static void copyFile(final File sourceFile, final File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileInputStream inStream = null;\nFileOutputStream outStream = null;\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = (inStream = new FileInputStream(sourceFile)).getChannel();\ndestination = (outStream = new FileOutputStream(destFile)).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\ncloseIO(source);\ncloseIO(inStream);\ncloseIO(destination);\ncloseIO(outStream);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#712665#334#352.java",
                        "__cluster__": 277
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_11716816",
                        "content": "private void updateFile(File file) throws FileNotFoundException, IOException {\nFile destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, \"\"));\nFileChannel in = null;\nFileChannel out = null;\ntry {\nif (!destFile.exists()) {\ndestFile.getParentFile().mkdirs();\ndestFile.createNewFile();\n}\nin = new FileInputStream(file).getChannel();\nout = new FileOutputStream(destFile).getChannel();\nin.transferTo(0, in.size(), out);\n} finally {\nif (out != null) out.close();\nif (in != null) in.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 91
                },
                {
                        "id": "pretrain_java_data_17908747",
                        "content": "<filename>references/bcb_chosen_clones/selected#2205252#172#188.java\nprivate void updateFile(File file) throws FileNotFoundException, IOException {\nFile destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, \"\"));\nFileChannel in = null;\nFileChannel out = null;\ntry {\nif (!destFile.exists()) {\ndestFile.getParentFile().mkdirs();\ndestFile.createNewFile();\n}\nin = new FileInputStream(file).getChannel();\nout = new FileOutputStream(destFile).getChannel();\nin.transferTo(0, in.size(), out);\n} finally {\nif (out != null) out.close();\nif (in != null) in.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2205252#172#188.java",
                        "__cluster__": 91
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9096314",
                        "content": "private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\nCategory log = ThreadCategory.getInstance(OutageWriter.class);\nif (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\nlog.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid/ip/svc: \" + eventID + \"/\" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\nreturn;\n}\nConnection dbConn = null;\ntry {\ndbConn = DatabaseConnectionFactory.getInstance().getConnection();\nif (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\nlog.warn(\"\\'\" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + \"\\' for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" ignored - table already  has an open record \");\n} else {\nPreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\nlong outageID = -1;\nResultSet seqRS = getNextOutageIdStmt.executeQuery();\nif (seqRS.next()) {\noutageID = seqRS.getLong(1);\n}\nseqRS.close();\ntry {\ndbConn.setAutoCommit(false);\n} catch (SQLException sqle) {\nlog.error(\"Unable to change database AutoCommit to FALSE\", sqle);\nreturn;\n}\nPreparedStatement newOutageWriter = null;\nif (log.isDebugEnabled()) log.debug(\"handleNodeLostService: creating new outage entry...\");\nnewOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\nnewOutageWriter.setLong(1, outageID);\nnewOutageWriter.setLong(2, eventID);\nnewOutageWriter.setLong(3, nodeID);\nnewOutageWriter.setString(4, ipAddr);\nnewOutageWriter.setLong(5, serviceID);\nnewOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\nnewOutageWriter.executeUpdate();\nnewOutageWriter.close();\ntry {\ndbConn.commit();\nif (log.isDebugEnabled()) log.debug(\"nodeLostService : \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" recorded in DB\");\n} catch (SQLException se) {\nlog.warn(\"Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID, se);\ntry {\ndbConn.rollback();\n} catch (SQLException sqle) {\nlog.warn(\"SQL exception during rollback, reason\", sqle);\n}\n}\n}\n} catch (SQLException sqle) {\nlog.warn(\"SQL exception while handling \\'nodeLostService\\'\", sqle);\n} finally {\ntry {\nif (dbConn != null) dbConn.close();\n} catch (SQLException e) {\nlog.warn(\"Exception closing JDBC connection\", e);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 97
                },
                {
                        "id": "pretrain_java_data_17943762",
                        "content": "<gh_stars>10-100\nprivate void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\nCategory log = ThreadCategory.getInstance(OutageWriter.class);\nif (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\nlog.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid/ip/svc: \" + eventID + \"/\" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\nreturn;\n}\nConnection dbConn = null;\ntry {\ndbConn = DatabaseConnectionFactory.getInstance().getConnection();\nif (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\nlog.warn(\"\\'\" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + \"\\' for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" ignored - table already  has an open record \");\n} else {\nPreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\nlong outageID = -1;\nResultSet seqRS = getNextOutageIdStmt.executeQuery();\nif (seqRS.next()) {\noutageID = seqRS.getLong(1);\n}\nseqRS.close();\ntry {\ndbConn.setAutoCommit(false);\n} catch (SQLException sqle) {\nlog.error(\"Unable to change database AutoCommit to FALSE\", sqle);\nreturn;\n}\nPreparedStatement newOutageWriter = null;\nif (log.isDebugEnabled()) log.debug(\"handleNodeLostService: creating new outage entry...\");\nnewOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\nnewOutageWriter.setLong(1, outageID);\nnewOutageWriter.setLong(2, eventID);\nnewOutageWriter.setLong(3, nodeID);\nnewOutageWriter.setString(4, ipAddr);\nnewOutageWriter.setLong(5, serviceID);\nnewOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\nnewOutageWriter.executeUpdate();\nnewOutageWriter.close();\ntry {\ndbConn.commit();\nif (log.isDebugEnabled()) log.debug(\"nodeLostService : \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" recorded in DB\");\n} catch (SQLException se) {\nlog.warn(\"Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID, se);\ntry {\ndbConn.rollback();\n} catch (SQLException sqle) {\nlog.warn(\"SQL exception during rollback, reason\", sqle);\n}\n}\n}\n} catch (SQLException sqle) {\nlog.warn(\"SQL exception while handling \\'nodeLostService\\'\", sqle);\n} finally {\ntry {\nif (dbConn != null) dbConn.close();\n} catch (SQLException e) {\nlog.warn(\"Exception closing JDBC connection\", e);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#978099#215#272.java",
                        "__cluster__": 97
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_7149578",
                        "content": "@Override\nprotected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {\nString charset = null;\nIndexDocument sourceDocument = getSourceDocument();\nif (sourceDocument != null && urlItemFieldEnum != null) {\nFieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);\nif (fieldValueItem != null) charset = fieldValueItem.getValue();\nif (charset == null) {\nfieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);\nif (fieldValueItem != null) charset = fieldValueItem.getValue();\n}\n}\nboolean charsetWasNull = charset == null;\nif (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();\nStringWriter writer = new StringWriter();\nIOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);\naddField(ParserFieldEnum.htmlSource, writer.toString());\nwriter.close();\nHtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);\nif (htmlProvider == null) return;\naddField(ParserFieldEnum.htmlProvider, htmlProvider.getName());\nString contentType = htmlProvider.getMetaHttpEquiv(\"content-type\");\nString contentTypeCharset = null;\nif (contentType != null) {\ncontentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);\nif (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;\n}\nif (charsetWasNull) {\nif (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();\nif (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);\n}\nHtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();\nif (rootNode == null) return;\nfor (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {\nString metaName = metaNode.getAttributeText(\"name\");\nif (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {\nString field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);\nString[] fields = field.split(\"\\\\.\");\nif (fields != null) {\nString content = metaNode.getAttributeText(\"content\");\naddDirectFields(fields, content);\n}\n}\n}\naddField(ParserFieldEnum.charset, charset);\naddFieldTitle(htmlProvider.getTitle());\nString metaRobots = null;\nString metaDcLanguage = null;\nString metaContentLanguage = null;\nfor (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {\nString attr_name = node.getAttributeText(\"name\");\nString attr_http_equiv = node.getAttributeText(\"http-equiv\");\nif (\"keywords\".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (\"description\".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (\"robots\".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (\"dc.language\".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (\"content-language\".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);\n}\nboolean metaRobotsFollow = true;\nboolean metaRobotsNoIndex = false;\nif (metaRobots != null) {\nmetaRobots = metaRobots.toLowerCase();\nif (metaRobots.contains(\"noindex\")) {\nmetaRobotsNoIndex = true;\naddField(ParserFieldEnum.meta_robots, \"noindex\");\n}\nif (metaRobots.contains(\"nofollow\")) {\nmetaRobotsFollow = false;\naddField(ParserFieldEnum.meta_robots, \"nofollow\");\n}\n}\nUrlFilterItem[] urlFilterList = getUrlFilterList();\nList<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(\"a\", \"frame\");\nIndexDocument srcDoc = getSourceDocument();\nif (srcDoc != null && nodes != null && metaRobotsFollow) {\nURL currentURL = htmlProvider.getBaseHref();\nif (currentURL == null && urlItemFieldEnum != null) {\nFieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);\nif (fvi != null) currentURL = new URL(fvi.getValue());\n}\nfor (HtmlNodeAbstract<?> node : nodes) {\nString href = null;\nString rel = null;\nString nodeName = node.getNodeName();\nif (\"a\".equals(nodeName)) {\nhref = node.getAttributeText(\"href\");\nrel = node.getAttributeText(\"rel\");\n} else if (\"frame\".equals(nodeName)) {\nhref = node.getAttributeText(\"src\");\n}\nboolean follow = true;\nif (rel != null) if (rel.contains(\"nofollow\")) follow = false;\nURL newUrl = null;\nif (href != null) if (!href.startsWith(\"javascript:\")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);\nif (newUrl != null) {\nParserFieldEnum field = null;\nif (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {\nif (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;\n} else {\nif (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;\n}\naddField(field, newUrl.toExternalForm());\n}\n}\n}\nif (!metaRobotsNoIndex) {\nnodes = rootNode.getNodes(\"html\", \"body\");\nif (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(\"html\");\nif (nodes != null && nodes.size() > 0) {\nStringBuffer sb = new StringBuffer();\ngetBodyTextContent(sb, nodes.get(0), true, null);\naddField(ParserFieldEnum.body, sb);\n}\n}\nLocale lang = null;\nString langMethod = null;\nString[] pathHtml = { \"html\" };\nnodes = rootNode.getNodes(pathHtml);\nif (nodes != null && nodes.size() > 0) {\nlangMethod = \"html lang attribute\";\nString l = nodes.get(0).getAttributeText(\"lang\");\nif (l != null) lang = Lang.findLocaleISO639(l);\n}\nif (lang == null && metaContentLanguage != null) {\nlangMethod = \"meta http-equiv content-language\";\nlang = Lang.findLocaleISO639(metaContentLanguage);\n}\nif (lang == null && metaDcLanguage != null) {\nlangMethod = \"meta dc.language\";\nlang = Lang.findLocaleISO639(metaDcLanguage);\n}\nif (lang != null) {\naddField(ParserFieldEnum.lang, lang.getLanguage());\naddField(ParserFieldEnum.lang_method, langMethod);\n} else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 763
                },
                {
                        "id": "pretrain_java_data_19447317",
                        "content": "@Override\nprotected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {\nString charset = null;\nIndexDocument sourceDocument = getSourceDocument();\nif (sourceDocument != null && urlItemFieldEnum != null) {\nFieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);\nif (fieldValueItem != null) charset = fieldValueItem.getValue();\nif (charset == null) {\nfieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);\nif (fieldValueItem != null) charset = fieldValueItem.getValue();\n}\n}\nboolean charsetWasNull = charset == null;\nif (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();\nStringWriter writer = new StringWriter();\nIOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);\naddField(ParserFieldEnum.htmlSource, writer.toString());\nwriter.close();\nHtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);\nif (htmlProvider == null) return;\naddField(ParserFieldEnum.htmlProvider, htmlProvider.getName());\nString contentType = htmlProvider.getMetaHttpEquiv(\"content-type\");\nString contentTypeCharset = null;\nif (contentType != null) {\ncontentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);\nif (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;\n}\nif (charsetWasNull) {\nif (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();\nif (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);\n}\nHtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();\nif (rootNode == null) return;\nfor (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {\nString metaName = metaNode.getAttributeText(\"name\");\nif (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {\nString field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);\nString[] fields = field.split(\"\\\\.\");\nif (fields != null) {\nString content = metaNode.getAttributeText(\"content\");\naddDirectFields(fields, content);\n}\n}\n}\naddField(ParserFieldEnum.charset, charset);\naddFieldTitle(htmlProvider.getTitle());\nString metaRobots = null;\nString metaDcLanguage = null;\nString metaContentLanguage = null;\nfor (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {\nString attr_name = node.getAttributeText(\"name\");\nString attr_http_equiv = node.getAttributeText(\"http-equiv\");\nif (\"keywords\".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (\"description\".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (\"robots\".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (\"dc.language\".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (\"content-language\".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);\n}\nboolean metaRobotsFollow = true;\nboolean metaRobotsNoIndex = false;\nif (metaRobots != null) {\nmetaRobots = metaRobots.toLowerCase();\nif (metaRobots.contains(\"noindex\")) {\nmetaRobotsNoIndex = true;\naddField(ParserFieldEnum.meta_robots, \"noindex\");\n}\nif (metaRobots.contains(\"nofollow\")) {\nmetaRobotsFollow = false;\naddField(ParserFieldEnum.meta_robots, \"nofollow\");\n}\n}\nUrlFilterItem[] urlFilterList = getUrlFilterList();\nList<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(\"a\", \"frame\");\nIndexDocument srcDoc = getSourceDocument();\nif (srcDoc != null && nodes != null && metaRobotsFollow) {\nURL currentURL = htmlProvider.getBaseHref();\nif (currentURL == null && urlItemFieldEnum != null) {\nFieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);\nif (fvi != null) currentURL = new URL(fvi.getValue());\n}\nfor (HtmlNodeAbstract<?> node : nodes) {\nString href = null;\nString rel = null;\nString nodeName = node.getNodeName();\nif (\"a\".equals(nodeName)) {\nhref = node.getAttributeText(\"href\");\nrel = node.getAttributeText(\"rel\");\n} else if (\"frame\".equals(nodeName)) {\nhref = node.getAttributeText(\"src\");\n}\nboolean follow = true;\nif (rel != null) if (rel.contains(\"nofollow\")) follow = false;\nURL newUrl = null;\nif (href != null) if (!href.startsWith(\"javascript:\")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);\nif (newUrl != null) {\nParserFieldEnum field = null;\nif (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {\nif (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;\n} else {\nif (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;\n}\naddField(field, newUrl.toExternalForm());\n}\n}\n}\nif (!metaRobotsNoIndex) {\nnodes = rootNode.getNodes(\"html\", \"body\");\nif (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(\"html\");\nif (nodes != null && nodes.size() > 0) {\nStringBuffer sb = new StringBuffer();\ngetBodyTextContent(sb, nodes.get(0), true, null);\naddField(ParserFieldEnum.body, sb);\n}\n}\nLocale lang = null;\nString langMethod = null;\nString[] pathHtml = { \"html\" };\nnodes = rootNode.getNodes(pathHtml);\nif (nodes != null && nodes.size() > 0) {\nlangMethod = \"html lang attribute\";\nString l = nodes.get(0).getAttributeText(\"lang\");\nif (l != null) lang = Lang.findLocaleISO639(l);\n}\nif (lang == null && metaContentLanguage != null) {\nlangMethod = \"meta http-equiv content-language\";\nlang = Lang.findLocaleISO639(metaContentLanguage);\n}\nif (lang == null && metaDcLanguage != null) {\nlangMethod = \"meta dc.language\";\nlang = Lang.findLocaleISO639(metaDcLanguage);\n}\nif (lang != null) {\naddField(ParserFieldEnum.lang, lang.getLanguage());\naddField(ParserFieldEnum.lang_method, langMethod);\n} else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#474742#156#287.java",
                        "__cluster__": 763
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17919516",
                        "content": "public static void copyFile(File from, File to) throws IOException {\nassert (from != null);\nassert (to != null);\nif (!to.exists()) {\nFile parentDir = to.getParentFile();\nif (!parentDir.exists()) parentDir.mkdirs();\nto.createNewFile();\n}\nFileInputStream in = null;\nFileOutputStream out = null;\ntry {\nin = new FileInputStream(from);\ntry {\nout = new FileOutputStream(to);\nFileChannel ic = in.getChannel();\ntry {\nFileChannel oc = out.getChannel();\ntry {\noc.transferFrom(ic, 0, from.length());\n} finally {\nif (oc != null) {\noc.close();\n}\n}\n} finally {\nif (ic != null) {\nic.close();\n}\n}\n} finally {\nif (out != null) {\nout.close();\n}\n}\n} finally {\nif (in != null) {\nin.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1085713#37#76.java",
                        "__cluster__": 791
                },
                {
                        "id": "test_bigclonebench_data_3731077",
                        "content": "public static void copyFile(File from, File to) throws IOException {\nassert (from != null);\nassert (to != null);\nif (!to.exists()) {\nFile parentDir = to.getParentFile();\nif (!parentDir.exists()) parentDir.mkdirs();\nto.createNewFile();\n}\nFileInputStream in = null;\nFileOutputStream out = null;\ntry {\nin = new FileInputStream(from);\ntry {\nout = new FileOutputStream(to);\nFileChannel ic = in.getChannel();\ntry {\nFileChannel oc = out.getChannel();\ntry {\noc.transferFrom(ic, 0, from.length());\n} finally {\nif (oc != null) {\noc.close();\n}\n}\n} finally {\nif (ic != null) {\nic.close();\n}\n}\n} finally {\nif (out != null) {\nout.close();\n}\n}\n} finally {\nif (in != null) {\nin.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 791
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5441579",
                        "content": "public static String createPseudoUUID() {\ntry {\nMessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.update(new UID().toString().getBytes());\ntry {\nString localHost = InetAddress.getLocalHost().toString();\nmessageDigest.update(localHost.getBytes());\n} catch (UnknownHostException e) {\nthrow new OXFException(e);\n}\nbyte[] digestBytes = messageDigest.digest();\nStringBuffer sb = new StringBuffer();\nsb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 0)));\nsb.append('-');\nsb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 4)));\nsb.append('-');\nsb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 6)));\nsb.append('-');\nsb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 8)));\nsb.append('-');\nsb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 10)));\nsb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 12)));\nreturn sb.toString();\n} catch (NoSuchAlgorithmException e) {\nthrow new OXFException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 842
                },
                {
                        "id": "pretrain_java_data_17860540",
                        "content": "<filename>references/bcb_chosen_clones/selected#87567#18#44.java\npublic static String createPseudoUUID() {\ntry {\nMessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.update(new UID().toString().getBytes());\ntry {\nString localHost = InetAddress.getLocalHost().toString();\nmessageDigest.update(localHost.getBytes());\n} catch (UnknownHostException e) {\nthrow new OXFException(e);\n}\nbyte[] digestBytes = messageDigest.digest();\nStringBuffer sb = new StringBuffer();\nsb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 0)));\nsb.append('-');\nsb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 4)));\nsb.append('-');\nsb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 6)));\nsb.append('-');\nsb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 8)));\nsb.append('-');\nsb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 10)));\nsb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 12)));\nreturn sb.toString();\n} catch (NoSuchAlgorithmException e) {\nthrow new OXFException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#87567#18#44.java",
                        "__cluster__": 842
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17907881",
                        "content": "public void createJAR(String fileString, String ext) {\ntry {\nFile file = new File(fileString);\nint i = fileString.lastIndexOf(java.io.File.separator);\nString dir = fileString.substring(0, i + 1);\nif (ext.matches(\"jar\")) {\njarFile = new File(getClass().getClassLoader().getResource(\"jsdviewer.jar\").toURI());\njava.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\nFileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\nFileChannel out = fstrm.getChannel();\nin.transferTo(0, jarFile.length(), out);\nin.close();\nout.close();\n} else {\nfile.mkdir();\n}\nFile.umount(file);\nFile temp = new File(dir + \"document.jsd\");\nFileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\nostrm = new ObjectOutputStream(fstrm2);\nostrm.writeObject(doc);\nostrm.flush();\nostrm.close();\nFile.umount();\nFile docFile = new File(file.getCanonicalPath() + java.io.File.separator + \"document.jsd\");\nFile.cp_p(temp, docFile);\nFile.umount();\ntemp.delete();\nFile.umount(file);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1597629#36#68.java",
                        "__cluster__": 891
                },
                {
                        "id": "test_bigclonebench_data_16590954",
                        "content": "public void createJAR(String fileString, String ext) {\ntry {\nFile file = new File(fileString);\nint i = fileString.lastIndexOf(java.io.File.separator);\nString dir = fileString.substring(0, i + 1);\nif (ext.matches(\"jar\")) {\njarFile = new File(getClass().getClassLoader().getResource(\"jsdviewer.jar\").toURI());\njava.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\nFileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\nFileChannel out = fstrm.getChannel();\nin.transferTo(0, jarFile.length(), out);\nin.close();\nout.close();\n} else {\nfile.mkdir();\n}\nFile.umount(file);\nFile temp = new File(dir + \"document.jsd\");\nFileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\nostrm = new ObjectOutputStream(fstrm2);\nostrm.writeObject(doc);\nostrm.flush();\nostrm.close();\nFile.umount();\nFile docFile = new File(file.getCanonicalPath() + java.io.File.separator + \"document.jsd\");\nFile.cp_p(temp, docFile);\nFile.umount();\ntemp.delete();\nFile.umount(file);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 891
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_4056444",
                        "content": "public final String hashPassword(String password) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA\");\nmd.update(password.getBytes());\nbyte[] hash = md.digest();\nreturn \"{SHA}\" + byteToString(hash, 60);\n} catch (NoSuchAlgorithmException nsae) {\nlog.error(\"Error getting password hash - \" + nsae.getMessage());\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 514
                },
                {
                        "id": "pretrain_java_data_17856301",
                        "content": "<reponame>cragkhit/elasticsearch\npublic final String hashPassword(String password) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA\");\nmd.update(password.getBytes());\nbyte[] hash = md.digest();\nreturn \"{SHA}\" + byteToString(hash, 60);\n} catch (NoSuchAlgorithmException nsae) {\nlog.error(\"Error getting password hash - \" + nsae.getMessage());\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2529875#119#129.java",
                        "__cluster__": 514
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20623709",
                        "content": "public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {\nif (!targetDirectory.exists()) {\nif (!targetDirectory.mkdirs()) throw new Exception(\"Could not create target directory \" + targetDirectory.getAbsolutePath());\n}\nif (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {\nFileInputStream fis = new FileInputStream(this);\nFileChannel fci = fis.getChannel();\nFileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + \"_0\" + \".fasta\"));\nFileChannel fco = fos.getChannel();\nByteBuffer buffer = ByteBuffer.allocate(64000);\nwhile (fci.read(buffer) > 0) {\nbuffer.flip();\nfco.write(buffer);\nbuffer.clear();\n}\nfci.close();\nfco.close();\nreturn (long) 1;\n} else {\nlong currentBasesCount = 0;\nlong currentEntriesCount = 0;\nint targetCount = 0;\nFileChannel fastaChannel = new FileInputStream(this).getChannel();\nint totalSeqCount = 0;\nlong totalResiduesCount = 0;\ntry {\nlong prevTime = System.currentTimeMillis();\nlong fastaFileSize = this.length();\nlong fastaFileReadOffset = 0L;\nlong partitionStartOffset = 0L;\nfinal int bufferSize = 1024 * 1024;\nByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);\nint fastaReadState = FASTAFileTokenizer.UNKNOWN;\nfor (; fastaFileReadOffset < fastaFileSize; ) {\nlong nBytes = fastaChannel.read(fastaBuffer);\nif (nBytes <= 0) {\nfastaBuffer.limit(0);\nbreak;\n} else {\nfastaBuffer.flip();\nfastaFileReadOffset += nBytes;\n}\nfor (; ; ) {\nif (!fastaBuffer.hasRemaining()) {\nfastaBuffer.clear();\nbreak;\n}\nint b = fastaBuffer.get();\nif (b == '\\r') {\n} else if (b == '\\n') {\nif (fastaReadState == FASTAFileTokenizer.DEFLINE) {\nfastaReadState = FASTAFileTokenizer.SEQUENCELINE;\n}\n} else if (b == '>') {\nif (fastaReadState == FASTAFileTokenizer.UNKNOWN) {\nfastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n} else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\nfastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n}\nif (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {\nif (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {\nfastaBuffer.position(fastaBuffer.position() - 1);\nlong currentTime = System.currentTimeMillis();\nSystem.out.println(new java.util.Date() + \" Partition \" + targetCount + \" containing \" + currentEntriesCount + \" sequences and \" + currentBasesCount + \" residues ends at \" + (fastaFileReadOffset - fastaBuffer.remaining()) + \" and was created in \" + (currentTime - prevTime) + \" ms\");\nprevTime = currentTime;\nlong partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();\nFileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + \"_\" + targetCount + \".fasta\")).getChannel();\nnBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);\npartitionChannel.force(true);\npartitionChannel.close();\ntargetCount++;\npartitionStartOffset += nBytes;\ncurrentBasesCount = 0;\ncurrentEntriesCount = 0;\nfastaReadState = FASTAFileTokenizer.UNKNOWN;\n} else {\nfastaReadState = FASTAFileTokenizer.DEFLINE;\ncurrentEntriesCount++;\n}\ntotalSeqCount++;\n}\n} else {\nif (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\ntotalResiduesCount++;\ncurrentBasesCount++;\n}\n}\n}\n}\nif (partitionStartOffset < fastaFileSize) {\nlong currentTime = System.currentTimeMillis();\nSystem.out.println(new java.util.Date() + \" Partition \" + targetCount + \" containing \" + currentEntriesCount + \" sequences and \" + currentBasesCount + \" residues ends at \" + (fastaFileSize) + \" and was created in \" + (currentTime - prevTime) + \" ms\");\nFileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + \"_\" + targetCount + \".fasta\")).getChannel();\nfastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);\npartitionChannel.force(true);\npartitionChannel.close();\ntargetCount++;\n}\nif (size.isUnknown()) {\nsize.setBases(totalResiduesCount);\nsize.setEntries(totalSeqCount);\n}\n} finally {\nfastaChannel.close();\n}\nreturn (long) targetCount;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 769
                },
                {
                        "id": "pretrain_java_data_17980948",
                        "content": "<reponame>cragkhit/elasticsearch\npublic Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {\nif (!targetDirectory.exists()) {\nif (!targetDirectory.mkdirs()) throw new Exception(\"Could not create target directory \" + targetDirectory.getAbsolutePath());\n}\nif (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {\nFileInputStream fis = new FileInputStream(this);\nFileChannel fci = fis.getChannel();\nFileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + \"_0\" + \".fasta\"));\nFileChannel fco = fos.getChannel();\nByteBuffer buffer = ByteBuffer.allocate(64000);\nwhile (fci.read(buffer) > 0) {\nbuffer.flip();\nfco.write(buffer);\nbuffer.clear();\n}\nfci.close();\nfco.close();\nreturn (long) 1;\n} else {\nlong currentBasesCount = 0;\nlong currentEntriesCount = 0;\nint targetCount = 0;\nFileChannel fastaChannel = new FileInputStream(this).getChannel();\nint totalSeqCount = 0;\nlong totalResiduesCount = 0;\ntry {\nlong prevTime = System.currentTimeMillis();\nlong fastaFileSize = this.length();\nlong fastaFileReadOffset = 0L;\nlong partitionStartOffset = 0L;\nfinal int bufferSize = 1024 * 1024;\nByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);\nint fastaReadState = FASTAFileTokenizer.UNKNOWN;\nfor (; fastaFileReadOffset < fastaFileSize; ) {\nlong nBytes = fastaChannel.read(fastaBuffer);\nif (nBytes <= 0) {\nfastaBuffer.limit(0);\nbreak;\n} else {\nfastaBuffer.flip();\nfastaFileReadOffset += nBytes;\n}\nfor (; ; ) {\nif (!fastaBuffer.hasRemaining()) {\nfastaBuffer.clear();\nbreak;\n}\nint b = fastaBuffer.get();\nif (b == '\\r') {\n} else if (b == '\\n') {\nif (fastaReadState == FASTAFileTokenizer.DEFLINE) {\nfastaReadState = FASTAFileTokenizer.SEQUENCELINE;\n}\n} else if (b == '>') {\nif (fastaReadState == FASTAFileTokenizer.UNKNOWN) {\nfastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n} else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\nfastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n}\nif (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {\nif (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {\nfastaBuffer.position(fastaBuffer.position() - 1);\nlong currentTime = System.currentTimeMillis();\nSystem.out.println(new java.util.Date() + \" Partition \" + targetCount + \" containing \" + currentEntriesCount + \" sequences and \" + currentBasesCount + \" residues ends at \" + (fastaFileReadOffset - fastaBuffer.remaining()) + \" and was created in \" + (currentTime - prevTime) + \" ms\");\nprevTime = currentTime;\nlong partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();\nFileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + \"_\" + targetCount + \".fasta\")).getChannel();\nnBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);\npartitionChannel.force(true);\npartitionChannel.close();\ntargetCount++;\npartitionStartOffset += nBytes;\ncurrentBasesCount = 0;\ncurrentEntriesCount = 0;\nfastaReadState = FASTAFileTokenizer.UNKNOWN;\n} else {\nfastaReadState = FASTAFileTokenizer.DEFLINE;\ncurrentEntriesCount++;\n}\ntotalSeqCount++;\n}\n} else {\nif (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\ntotalResiduesCount++;\ncurrentBasesCount++;\n}\n}\n}\n}\nif (partitionStartOffset < fastaFileSize) {\nlong currentTime = System.currentTimeMillis();\nSystem.out.println(new java.util.Date() + \" Partition \" + targetCount + \" containing \" + currentEntriesCount + \" sequences and \" + currentBasesCount + \" residues ends at \" + (fastaFileSize) + \" and was created in \" + (currentTime - prevTime) + \" ms\");\nFileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + \"_\" + targetCount + \".fasta\")).getChannel();\nfastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);\npartitionChannel.force(true);\npartitionChannel.close();\ntargetCount++;\n}\nif (size.isUnknown()) {\nsize.setBases(totalResiduesCount);\nsize.setEntries(totalSeqCount);\n}\n} finally {\nfastaChannel.close();\n}\nreturn (long) targetCount;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#428188#58#165.java",
                        "__cluster__": 769
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3046085",
                        "content": "public Song(String s) {\nStringTokenizer tokenizer = new StringTokenizer(s, \";\");\nfree = false;\ntitle = tokenizer.nextToken();\nartist = tokenizer.nextToken();\nlocation = tokenizer.nextToken();\nrating = Integer.parseInt(tokenizer.nextToken());\noverplay = Integer.parseInt(tokenizer.nextToken());\nString temp = tokenizer.nextToken();\ntokenizer = new StringTokenizer(temp, \",[] \");\ntags = new ArrayList<String>();\nwhile (tokenizer.hasMoreTokens()) {\ntags.add(tokenizer.nextToken());\n}\nbyte[] bytes = new byte[40];\ntry {\nMessageDigest hasher = MessageDigest.getInstance(\"SHA-1\");\nhasher.update(title.getBytes());\nhasher.update(artist.getBytes());\nbytes = hasher.digest();\n} catch (Exception e) {\nSystem.out.println(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 245
                },
                {
                        "id": "pretrain_java_data_19428166",
                        "content": "<filename>references/bcb_chosen_clones/selected#1208169#58#81.java\npublic Song(String s) {\nStringTokenizer tokenizer = new StringTokenizer(s, \";\");\nfree = false;\ntitle = tokenizer.nextToken();\nartist = tokenizer.nextToken();\nlocation = tokenizer.nextToken();\nrating = Integer.parseInt(tokenizer.nextToken());\noverplay = Integer.parseInt(tokenizer.nextToken());\nString temp = tokenizer.nextToken();\ntokenizer = new StringTokenizer(temp, \",[] \");\ntags = new ArrayList<String>();\nwhile (tokenizer.hasMoreTokens()) {\ntags.add(tokenizer.nextToken());\n}\nbyte[] bytes = new byte[40];\ntry {\nMessageDigest hasher = MessageDigest.getInstance(\"SHA-1\");\nhasher.update(title.getBytes());\nhasher.update(artist.getBytes());\nbytes = hasher.digest();\n} catch (Exception e) {\nSystem.out.println(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1208169#58#81.java",
                        "__cluster__": 245
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20855053",
                        "content": "public void init(ServletContext context) throws ScratchException {\ntry {\nlog.debug(\"Attempting to load Controllers from file: \" + REGISTRY_FILENAME);\nClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nEnumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);\nwhile (urls.hasMoreElements()) {\nURL url = urls.nextElement();\nlog.debug(\"Found: \" + url);\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\nString className = null;\nwhile ((className = reader.readLine()) != null) {\nclassName = className.trim();\nif (!\"\".equals(className) && !className.startsWith(\"#\")) {\nlog.debug(\"Found class: \" + className);\nClass<?> clazz = classLoader.loadClass(className);\naddClass(clazz);\n}\n}\n}\n} catch (IOException e) {\ne.printStackTrace();\nlog.error(e);\n} catch (ClassNotFoundException e) {\ne.printStackTrace();\nlog.error(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 146
                },
                {
                        "id": "pretrain_java_data_3420323",
                        "content": "<filename>references/bcb_chosen_clones/selected#1344689#35#61.java<gh_stars>10-100\npublic void init(ServletContext context) throws ScratchException {\ntry {\nlog.debug(\"Attempting to load Controllers from file: \" + REGISTRY_FILENAME);\nClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nEnumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);\nwhile (urls.hasMoreElements()) {\nURL url = urls.nextElement();\nlog.debug(\"Found: \" + url);\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\nString className = null;\nwhile ((className = reader.readLine()) != null) {\nclassName = className.trim();\nif (!\"\".equals(className) && !className.startsWith(\"#\")) {\nlog.debug(\"Found class: \" + className);\nClass<?> clazz = classLoader.loadClass(className);\naddClass(clazz);\n}\n}\n}\n} catch (IOException e) {\ne.printStackTrace();\nlog.error(e);\n} catch (ClassNotFoundException e) {\ne.printStackTrace();\nlog.error(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1344689#35#61.java",
                        "__cluster__": 146
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_12055086",
                        "content": "protected static void copyDeleting(File source, File dest) throws IOException {\nbyte[] buf = new byte[8 * 1024];\nFileInputStream in = new FileInputStream(source);\ntry {\nFileOutputStream out = new FileOutputStream(dest);\ntry {\nint count;\nwhile ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n} finally {\nout.close();\n}\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 578
                },
                {
                        "id": "pretrain_java_data_19537828",
                        "content": "protected static void copyDeleting(File source, File dest) throws IOException {\nbyte[] buf = new byte[8 * 1024];\nFileInputStream in = new FileInputStream(source);\ntry {\nFileOutputStream out = new FileOutputStream(dest);\ntry {\nint count;\nwhile ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n} finally {\nout.close();\n}\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2036304#91#105.java",
                        "__cluster__": 578
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21063400",
                        "content": "private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {\nresponse.setContentType(\"image/\" + type + \"\");\nPoint imgSize = null;\nif (width > 0 || height > 0) {\nimgSize = new Point(width, height);\n}\nif (fmt != null && imageFormats.containsKey(fmt)) {\nimgSize = imageFormats.get(fmt);\n}\nInputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();\nif (imageInputStream == null) {\nthrow new RuntimeException(\"File \" + imageUrl + \" does not exist!\");\n}\nif (imgSize == null) {\nIOUtils.copy(imageInputStream, response.getOutputStream());\n} else {\nbyte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);\nresponse.setContentLength(imageBytes.length);\nresponse.getOutputStream().write(imageBytes);\n}\nresponse.getOutputStream().flush();\nresponse.getOutputStream().close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 624
                },
                {
                        "id": "pretrain_java_data_19543904",
                        "content": "private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {\nresponse.setContentType(\"image/\" + type + \"\");\nPoint imgSize = null;\nif (width > 0 || height > 0) {\nimgSize = new Point(width, height);\n}\nif (fmt != null && imageFormats.containsKey(fmt)) {\nimgSize = imageFormats.get(fmt);\n}\nInputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();\nif (imageInputStream == null) {\nthrow new RuntimeException(\"File \" + imageUrl + \" does not exist!\");\n}\nif (imgSize == null) {\nIOUtils.copy(imageInputStream, response.getOutputStream());\n} else {\nbyte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);\nresponse.setContentLength(imageBytes.length);\nresponse.getOutputStream().write(imageBytes);\n}\nresponse.getOutputStream().flush();\nresponse.getOutputStream().close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2519856#68#90.java",
                        "__cluster__": 624
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_3481859",
                        "content": "private String getEncoding() throws IOException {\nBufferedReader reader = null;\nString encoding = null;\ntry {\nURLConnection connection = url.openConnection();\nMap<String, List<String>> header = connection.getHeaderFields();\nfor (Map.Entry<String, List<String>> entry : header.entrySet()) {\nif (entry.getKey().toLowerCase().equals(\"content-type\")) {\nString item = entry.getValue().toString().toLowerCase();\nif (item.contains(\"charset\")) {\nencoding = extractEncoding(item);\nif (encoding != null && !encoding.isEmpty()) return encoding;\n}\n}\n}\nreader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\nString line;\nwhile ((line = reader.readLine()) != null) {\nline = line.toLowerCase();\nif (line.contains(\"charset\") || line.contains(\"encoding\")) {\nencoding = extractEncoding(line);\nif (encoding != null && !encoding.isEmpty()) return encoding;\n}\n}\nreturn STANDARDENCODING;\n} finally {\nif (reader != null) reader.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2268690#44#72.java",
                        "__cluster__": 631
                },
                {
                        "id": "test_bigclonebench_data_7118860",
                        "content": "private String getEncoding() throws IOException {\nBufferedReader reader = null;\nString encoding = null;\ntry {\nURLConnection connection = url.openConnection();\nMap<String, List<String>> header = connection.getHeaderFields();\nfor (Map.Entry<String, List<String>> entry : header.entrySet()) {\nif (entry.getKey().toLowerCase().equals(\"content-type\")) {\nString item = entry.getValue().toString().toLowerCase();\nif (item.contains(\"charset\")) {\nencoding = extractEncoding(item);\nif (encoding != null && !encoding.isEmpty()) return encoding;\n}\n}\n}\nreader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\nString line;\nwhile ((line = reader.readLine()) != null) {\nline = line.toLowerCase();\nif (line.contains(\"charset\") || line.contains(\"encoding\")) {\nencoding = extractEncoding(line);\nif (encoding != null && !encoding.isEmpty()) return encoding;\n}\n}\nreturn STANDARDENCODING;\n} finally {\nif (reader != null) reader.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 631
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21824901",
                        "content": "public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\ncloseQuietly(source);\ncloseQuietly(destination);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "id": "pretrain_java_data_19598201",
                        "content": "public static void copyFile(File sourceFile, File destinationFile) throws IOException {\nif (!destinationFile.exists()) {\ndestinationFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destinationFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#572754#19#37.java",
                        "__cluster__": 277
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_19849797",
                        "content": "public static void copyFile(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "id": "pretrain_java_data_19598201",
                        "content": "public static void copyFile(File sourceFile, File destinationFile) throws IOException {\nif (!destinationFile.exists()) {\ndestinationFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destinationFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#572754#19#37.java",
                        "__cluster__": 277
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_338852",
                        "content": "public static void sort(float norm_abst[]) {\nfloat temp;\nfor (int i = 0; i < 7; i++) {\nfor (int j = 0; j < 7; j++) {\nif (norm_abst[j] > norm_abst[j + 1]) {\ntemp = norm_abst[j];\nnorm_abst[j] = norm_abst[j + 1];\nnorm_abst[j + 1] = temp;\n}\n}\n}\nprintFixed(norm_abst[0]);\nprint(\" \");\nprintFixed(norm_abst[1]);\nprint(\" \");\nprintFixed(norm_abst[2]);\nprint(\" \");\nprintFixed(norm_abst[3]);\nprint(\" \");\nprintFixed(norm_abst[4]);\nprint(\" \");\nprintFixed(norm_abst[5]);\nprint(\" \");\nprintFixed(norm_abst[6]);\nprint(\" \");\nprintFixed(norm_abst[7]);\nprint(\"\\n\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 321
                },
                {
                        "id": "pretrain_java_data_19544492",
                        "content": "<gh_stars>10-100\npublic static void sort(float norm_abst[]) {\nfloat temp;\nfor (int i = 0; i < 7; i++) {\nfor (int j = 0; j < 7; j++) {\nif (norm_abst[j] > norm_abst[j + 1]) {\ntemp = norm_abst[j];\nnorm_abst[j] = norm_abst[j + 1];\nnorm_abst[j + 1] = temp;\n}\n}\n}\nprintFixed(norm_abst[0]);\nprint(\" \");\nprintFixed(norm_abst[1]);\nprint(\" \");\nprintFixed(norm_abst[2]);\nprint(\" \");\nprintFixed(norm_abst[3]);\nprint(\" \");\nprintFixed(norm_abst[4]);\nprint(\" \");\nprintFixed(norm_abst[5]);\nprint(\" \");\nprintFixed(norm_abst[6]);\nprint(\" \");\nprintFixed(norm_abst[7]);\nprint(\"\\n\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#81991#109#136.java",
                        "__cluster__": 321
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14691829",
                        "content": "public static String getMD5Hash(String in) {\nStringBuffer result = new StringBuffer(32);\ntry {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(in.getBytes());\nFormatter f = new Formatter(result);\nfor (byte b : md5.digest()) {\nf.format(\"%02x\", b);\n}\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n}\nreturn result.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 104
                },
                {
                        "id": "pretrain_java_data_19462084",
                        "content": "public static String getMd5Hash(String text) {\nStringBuffer result = new StringBuffer(32);\ntry {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(text.getBytes());\nFormatter f = new Formatter(result);\nbyte[] digest = md5.digest();\nfor (int i = 0; i < digest.length; i++) {\nf.format(\"%02x\", new Object[] { new Byte(digest[i]) });\n}\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n}\nreturn result.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1454772#1006#1020.java",
                        "__cluster__": 104
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_5057236",
                        "content": "<filename>references/bcb_chosen_clones/selected#29425#155#253.java\n@SuppressWarnings({ \"ResultOfMethodCallIgnored\" })\npublic static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {\nFile dir = File.createTempFile(\"javascript\", \"\" + System.currentTimeMillis());\nStringBuilder name = new StringBuilder();\ntry {\nif (dir.delete() && dir.mkdirs()) {\nFile minDir = new File(dir, \"min\");\nminDir.mkdir();\nFile combineFile = new File(minDir, \"script.js\");\nFile concatFile = new File(minDir, \"concat.js\");\nWriter combineWriter = new FileWriter(combineFile);\nWriter concatWriter = new FileWriter(concatFile);\nfinal List<Boolean> fails = new LinkedList<Boolean>();\nboolean first = true;\nfor (Node link : linkJs) {\nString path = ((Element) link).getAttribute(\"src\");\nURL url = new URL(buildUrl(base, path));\nInputStream inputStream = url.openStream();\nFile jsFile = new File(dir, fileName(url));\nFileOutputStream outputStream = new FileOutputStream(jsFile);\nIOUtils.copy(inputStream, outputStream);\noutputStream.close();\ninputStream.close();\nif (!first) {\ncombineWriter.write(\"\\n;\\n\");\nconcatWriter.write(\"\\n;\\n\");\n} else {\nfirst = false;\n}\nif (Configuration.jsMinification()) {\nReader reader = new FileReader(jsFile);\ntry {\nJavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {\n@Override\npublic void warning(String s, String s1, int i, String s2, int i1) {\nfails.add(true);\n}\n@Override\npublic void error(String s, String s1, int i, String s2, int i1) {\nfails.add(true);\n}\n@Override\npublic EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {\nfails.add(true);\nreturn null;\n}\n});\njsCompressor.compress(combineWriter, 0, false, false, true, true);\n} catch (Exception e) {\nfails.add(true);\n}\nreader.close();\n}\nReader reader = new FileReader(jsFile);\nIOUtils.copy(reader, concatWriter);\nreader.close();\nString fileName = jsFile.getName();\nint pos = fileName.lastIndexOf('.');\nif (pos >= 0) {\nfileName = fileName.substring(0, pos);\n}\nname.append(fileName).append(\",\");\n}\ncombineWriter.close();\nconcatWriter.close();\nFileReader reader;\nif (fails.size() == 0 && Configuration.jsMinification()) {\nreader = new FileReader(combineFile);\n} else {\nreader = new FileReader(concatFile);\n}\nname.append(hashCode(IOUtils.toString(reader))).append(\".js\");\nreader.close();\nFile targetFile = new File(Configuration.getJsLocalDir(), name.toString());\nif (!targetFile.exists()) {\ntargetFile.getParentFile().mkdirs();\nif (fails.size() == 0 && Configuration.jsMinification()) {\nFileUtils.copyFile(combineFile, targetFile);\n} else {\nFileUtils.copyFile(concatFile, targetFile);\n}\nnewFiles.add(targetFile);\nlogger.info(\"Combined several js files into the single \" + targetFile + \" [size=\" + targetFile.length() + \"].\");\n}\n}\n} finally {\nFileUtils.deleteQuietly(dir);\n}\nif (name.length() != 0) {\nElement element = (Element) linkJs.get(0);\nelement.setAttribute(\"src\", Configuration.getJsUrlPrefix() + name.toString());\nreturn element;\n} else {\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#29425#155#253.java",
                        "__cluster__": 220
                },
                {
                        "id": "test_bigclonebench_data_5125848",
                        "content": "@SuppressWarnings({ \"ResultOfMethodCallIgnored\" })\npublic static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {\nFile dir = File.createTempFile(\"javascript\", \"\" + System.currentTimeMillis());\nStringBuilder name = new StringBuilder();\ntry {\nif (dir.delete() && dir.mkdirs()) {\nFile minDir = new File(dir, \"min\");\nminDir.mkdir();\nFile combineFile = new File(minDir, \"script.js\");\nFile concatFile = new File(minDir, \"concat.js\");\nWriter combineWriter = new FileWriter(combineFile);\nWriter concatWriter = new FileWriter(concatFile);\nfinal List<Boolean> fails = new LinkedList<Boolean>();\nboolean first = true;\nfor (Node link : linkJs) {\nString path = ((Element) link).getAttribute(\"src\");\nURL url = new URL(buildUrl(base, path));\nInputStream inputStream = url.openStream();\nFile jsFile = new File(dir, fileName(url));\nFileOutputStream outputStream = new FileOutputStream(jsFile);\nIOUtils.copy(inputStream, outputStream);\noutputStream.close();\ninputStream.close();\nif (!first) {\ncombineWriter.write(\"\\n;\\n\");\nconcatWriter.write(\"\\n;\\n\");\n} else {\nfirst = false;\n}\nif (Configuration.jsMinification()) {\nReader reader = new FileReader(jsFile);\ntry {\nJavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {\n@Override\npublic void warning(String s, String s1, int i, String s2, int i1) {\nfails.add(true);\n}\n@Override\npublic void error(String s, String s1, int i, String s2, int i1) {\nfails.add(true);\n}\n@Override\npublic EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {\nfails.add(true);\nreturn null;\n}\n});\njsCompressor.compress(combineWriter, 0, false, false, true, true);\n} catch (Exception e) {\nfails.add(true);\n}\nreader.close();\n}\nReader reader = new FileReader(jsFile);\nIOUtils.copy(reader, concatWriter);\nreader.close();\nString fileName = jsFile.getName();\nint pos = fileName.lastIndexOf('.');\nif (pos >= 0) {\nfileName = fileName.substring(0, pos);\n}\nname.append(fileName).append(\",\");\n}\ncombineWriter.close();\nconcatWriter.close();\nFileReader reader;\nif (fails.size() == 0 && Configuration.jsMinification()) {\nreader = new FileReader(combineFile);\n} else {\nreader = new FileReader(concatFile);\n}\nname.append(hashCode(IOUtils.toString(reader))).append(\".js\");\nreader.close();\nFile targetFile = new File(Configuration.getJsLocalDir(), name.toString());\nif (!targetFile.exists()) {\ntargetFile.getParentFile().mkdirs();\nif (fails.size() == 0 && Configuration.jsMinification()) {\nFileUtils.copyFile(combineFile, targetFile);\n} else {\nFileUtils.copyFile(concatFile, targetFile);\n}\nnewFiles.add(targetFile);\nlogger.info(\"Combined several js files into the single \" + targetFile + \" [size=\" + targetFile.length() + \"].\");\n}\n}\n} finally {\nFileUtils.deleteQuietly(dir);\n}\nif (name.length() != 0) {\nElement element = (Element) linkJs.get(0);\nelement.setAttribute(\"src\", Configuration.getJsUrlPrefix() + name.toString());\nreturn element;\n} else {\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 220
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_5114575",
                        "content": "<gh_stars>10-100\npublic void run() {\nURL url;\ntry {\nurl = new URL(\"http://localhost:8080/glowaxes/dailytrend.jsp\");\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nwhile ((str = in.readLine()) != null) {\n}\nin.close();\n} catch (MalformedURLException e) {\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#385304#28#39.java",
                        "__cluster__": 317
                },
                {
                        "id": "test_bigclonebench_data_3631989",
                        "content": "public void run() {\nURL url;\ntry {\nurl = new URL(\"http://localhost:8080/glowaxes/dailytrend.jsp\");\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nwhile ((str = in.readLine()) != null) {\n}\nin.close();\n} catch (MalformedURLException e) {\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 317
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_3524630",
                        "content": "private static final void copyFile(File srcFile, File destDir, byte[] buffer) {\ntry {\nFile destFile = new File(destDir, srcFile.getName());\nInputStream in = new FileInputStream(srcFile);\nOutputStream out = new FileOutputStream(destFile);\nint bytesRead;\nwhile ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);\nin.close();\nout.close();\n} catch (IOException ioe) {\nSystem.err.println(\"Couldn't copy file '\" + srcFile + \"' to directory '\" + destDir + \"'\");\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#60460#65#77.java",
                        "__cluster__": 575
                },
                {
                        "id": "test_bigclonebench_data_16142024",
                        "content": "private static final void copyFile(File srcFile, File destDir, byte[] buffer) {\ntry {\nFile destFile = new File(destDir, srcFile.getName());\nInputStream in = new FileInputStream(srcFile);\nOutputStream out = new FileOutputStream(destFile);\nint bytesRead;\nwhile ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);\nin.close();\nout.close();\n} catch (IOException ioe) {\nSystem.err.println(\"Couldn't copy file '\" + srcFile + \"' to directory '\" + destDir + \"'\");\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 575
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11865906",
                        "content": "@Test\npublic void testIdentification() {\ntry {\nString username = \"muchu\";\nString password = \"123\";\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(password.getBytes());\nLogService logServiceMock = EasyMock.createMock(LogService.class);\nDbService dbServiceMock = EasyMock.createMock(DbService.class);\nuserServ.setDbServ(dbServiceMock);\nuserServ.setLogger(logServiceMock);\nlogServiceMock.info(DbUserServiceImpl.class, \">>>identification \" + username + \"<<<\");\nIFeelerUser user = new FeelerUserImpl();\nuser.setUsername(username);\nuser.setPassword(new String(md5.digest()));\nEasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\nEasyMock.replay(logServiceMock, dbServiceMock);\nAssert.assertTrue(userServ.identification(username, password));\nEasyMock.verify(logServiceMock, dbServiceMock);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 225
                },
                {
                        "id": "pretrain_java_data_3491741",
                        "content": "<gh_stars>10-100\n@Test\npublic void testIdentification() {\ntry {\nString username = \"muchu\";\nString password = \"<PASSWORD>\";\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(password.getBytes());\nLogService logServiceMock = EasyMock.createMock(LogService.class);\nDbService dbServiceMock = EasyMock.createMock(DbService.class);\nuserServ.setDbServ(dbServiceMock);\nuserServ.setLogger(logServiceMock);\nlogServiceMock.info(DbUserServiceImpl.class, \">>>identification \" + username + \"<<<\");\nIFeelerUser user = new FeelerUserImpl();\nuser.setUsername(username);\nuser.setPassword(new String(md5.digest()));\nEasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\nEasyMock.replay(logServiceMock, dbServiceMock);\nAssert.assertTrue(userServ.identification(username, password));\nEasyMock.verify(logServiceMock, dbServiceMock);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#626974#51#73.java",
                        "__cluster__": 225
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_5074423",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copy(String fileFrom, String fileTo) throws IOException {\nFileInputStream inputStream = null;\nFileOutputStream outputStream = null;\nFileChannel inputChannel = null;\nFileChannel outputChannel = null;\ntry {\ninputStream = new FileInputStream(fileFrom);\noutputStream = new FileOutputStream(fileTo);\ninputChannel = inputStream.getChannel();\noutputChannel = outputStream.getChannel();\ninputChannel.transferTo(0, inputChannel.size(), outputChannel);\n} finally {\ntry {\ninputChannel.close();\n} finally {\ntry {\noutputChannel.close();\n} finally {\ntry {\ninputStream.close();\n} finally {\noutputStream.close();\n}\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2565537#19#45.java",
                        "__cluster__": 572
                },
                {
                        "id": "test_bigclonebench_data_10385815",
                        "content": "public static void copy(String fileFrom, String fileTo) throws IOException {\nFileInputStream inputStream = null;\nFileOutputStream outputStream = null;\nFileChannel inputChannel = null;\nFileChannel outputChannel = null;\ntry {\ninputStream = new FileInputStream(fileFrom);\noutputStream = new FileOutputStream(fileTo);\ninputChannel = inputStream.getChannel();\noutputChannel = outputStream.getChannel();\ninputChannel.transferTo(0, inputChannel.size(), outputChannel);\n} finally {\ntry {\ninputChannel.close();\n} finally {\ntry {\noutputChannel.close();\n} finally {\ntry {\ninputStream.close();\n} finally {\noutputStream.close();\n}\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 572
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_3580297",
                        "content": "protected void truncate(File file) {\nLogLog.debug(\"Compression of file: \" + file.getAbsolutePath() + \" started.\");\nif (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\nFile backupRoot = new File(getBackupDir());\nif (!backupRoot.exists() && !backupRoot.mkdirs()) {\nthrow new AppenderInitializationError(\"Can't create backup dir for backup storage\");\n}\nSimpleDateFormat df;\ntry {\ndf = new SimpleDateFormat(getBackupDateFormat());\n} catch (Exception e) {\nthrow new AppenderInitializationError(\"Invalid date formate for backup files: \" + getBackupDateFormat(), e);\n}\nString date = df.format(new Date(file.lastModified()));\nFile zipFile = new File(backupRoot, file.getName() + \".\" + date + \".zip\");\nZipOutputStream zos = null;\nFileInputStream fis = null;\ntry {\nzos = new ZipOutputStream(new FileOutputStream(zipFile));\nZipEntry entry = new ZipEntry(file.getName());\nentry.setMethod(ZipEntry.DEFLATED);\nentry.setCrc(FileUtils.checksumCRC32(file));\nzos.putNextEntry(entry);\nfis = FileUtils.openInputStream(file);\nbyte[] buffer = new byte[1024];\nint readed;\nwhile ((readed = fis.read(buffer)) != -1) {\nzos.write(buffer, 0, readed);\n}\n} catch (Exception e) {\nthrow new AppenderInitializationError(\"Can't create zip file\", e);\n} finally {\nif (zos != null) {\ntry {\nzos.close();\n} catch (IOException e) {\nLogLog.warn(\"Can't close zip file\", e);\n}\n}\nif (fis != null) {\ntry {\nfis.close();\n} catch (IOException e) {\nLogLog.warn(\"Can't close zipped file\", e);\n}\n}\n}\nif (!file.delete()) {\nthrow new AppenderInitializationError(\"Can't delete old log file \" + file.getAbsolutePath());\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#835482#68#119.java",
                        "__cluster__": 183
                },
                {
                        "id": "test_bigclonebench_data_12066447",
                        "content": "protected void truncate(final File file) {\nLogLog.debug(\"Compression of file: \" + file.getAbsolutePath() + \" started.\");\nif (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\nfinal File backupRoot = new File(this.getBackupDir());\nif (!backupRoot.exists() && !backupRoot.mkdirs()) {\nthrow new AppenderInitializationError(\"Can't create backup dir for backup storage\");\n}\nSimpleDateFormat df;\ntry {\ndf = new SimpleDateFormat(this.getBackupDateFormat());\n} catch (final Exception e) {\nthrow new AppenderInitializationError(\"Invalid date formate for backup files: \" + this.getBackupDateFormat(), e);\n}\nfinal String date = df.format(new Date(file.lastModified()));\nfinal File zipFile = new File(backupRoot, file.getName() + \".\" + date + \".zip\");\nZipOutputStream zos = null;\nFileInputStream fis = null;\ntry {\nzos = new ZipOutputStream(new FileOutputStream(zipFile));\nfinal ZipEntry entry = new ZipEntry(file.getName());\nentry.setMethod(ZipEntry.DEFLATED);\nentry.setCrc(FileUtils.checksumCRC32(file));\nzos.putNextEntry(entry);\nfis = FileUtils.openInputStream(file);\nfinal byte[] buffer = new byte[1024];\nint readed;\nwhile ((readed = fis.read(buffer)) != -1) {\nzos.write(buffer, 0, readed);\n}\n} catch (final Exception e) {\nthrow new AppenderInitializationError(\"Can't create zip file\", e);\n} finally {\nif (zos != null) {\ntry {\nzos.close();\n} catch (final IOException e) {\nLogLog.warn(\"Can't close zip file\", e);\n}\n}\nif (fis != null) {\ntry {\nfis.close();\n} catch (final IOException e) {\nLogLog.warn(\"Can't close zipped file\", e);\n}\n}\n}\nif (!file.delete()) {\nthrow new AppenderInitializationError(\"Can't delete old log file \" + file.getAbsolutePath());\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 183
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_20735941",
                        "content": "protected File getFile() throws IOException {\nFile home = new File(System.getProperty(\"user.dir\"));\nString fileName = String.format(\"%s.txt\", getFilePrefix());\nFile file = new File(home, fileName);\nif (file.exists()) {\nreturn file;\n} else {\nURL url = LocalNameGenerator.class.getResource(\"/\" + fileName);\nif (url == null) {\nthrow new IllegalStateException(String.format(\"Cannot find resource at %s\", fileName));\n} else {\nInputStream in = url.openStream();\ntry {\nBufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\ntry {\nIOUtils.copy(in, out);\n} finally {\nout.close();\n}\n} finally {\nin.close();\n}\nreturn file;\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 478
                },
                {
                        "id": "pretrain_java_data_5079298",
                        "content": "protected File getFile(NameCategory category) throws IOException {\nFile home = new File(System.getProperty(\"user.dir\"));\nString fileName = String.format(\"%s.txt\", category);\nFile file = new File(home, fileName);\nif (file.exists()) {\nreturn file;\n} else {\nURL url = LocalNameGenerator.class.getResource(\"/\" + fileName);\nif (url == null) {\nthrow new IllegalStateException(String.format(\"Cannot find resource at %s\", fileName));\n} else {\nInputStream in = url.openStream();\ntry {\nBufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\ntry {\nIOUtils.copy(in, out);\n} finally {\nout.close();\n}\n} finally {\nin.close();\n}\nreturn file;\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1275361#48#73.java",
                        "__cluster__": 478
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_5062995",
                        "content": "<filename>references/bcb_chosen_clones/selected#1499135#161#184.java\npublic void copyToDir(File dir) {\nif (!dir.exists()) {\ndir.mkdirs();\n} else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\nreturn;\n}\nFile file = getEstimatedFileName(dir);\ntry {\nfile.createNewFile();\nFileOutputStream fileOutputStream = new FileOutputStream(file);\nFileInputStream fileInputStream = new FileInputStream(this.file);\nint read = 0;\nbyte[] buffer = new byte[1024];\nwhile (read != -1) {\nfileOutputStream.write(buffer, 0, read);\nread = fileInputStream.read(buffer);\n}\nfileInputStream.close();\nfileOutputStream.close();\nthis.file = file;\n} catch (IOException e) {\nLogger.log(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1499135#161#184.java",
                        "__cluster__": 501
                },
                {
                        "id": "test_bigclonebench_data_8815137",
                        "content": "public void copyToDir(File dir) {\nif (!dir.exists()) {\ndir.mkdirs();\n} else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\nreturn;\n}\nFile file = getEstimatedFileName(dir);\ntry {\nfile.createNewFile();\nFileOutputStream fileOutputStream = new FileOutputStream(file);\nFileInputStream fileInputStream = new FileInputStream(this.file);\nint read = 0;\nbyte[] buffer = new byte[1024];\nwhile (read != -1) {\nfileOutputStream.write(buffer, 0, read);\nread = fileInputStream.read(buffer);\n}\nfileInputStream.close();\nfileOutputStream.close();\nthis.file = file;\n} catch (IOException e) {\nLogger.log(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 501
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6371607",
                        "content": "public void removeRealm(final List<Integer> realmIds) {\ntry {\nconnection.setAutoCommit(false);\nnew ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n@Override\npublic void executeProcessReturnNull() throws SQLException {\npsImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"realm.remove\"));\nIterator<Integer> iter = realmIds.iterator();\nint realmId;\nwhile (iter.hasNext()) {\nrealmId = iter.next();\npsImpl.setInt(1, realmId);\npsImpl.executeUpdate();\ncmDB.removeRealm(realmId);\n}\n}\n});\nconnection.commit();\n} catch (SQLException sqle) {\nlog.error(sqle);\nif (connection != null) {\ntry {\nconnection.rollback();\n} catch (SQLException ex) {\n}\n}\n} finally {\nif (connection != null) {\ntry {\nconnection.setAutoCommit(true);\n} catch (SQLException ex) {\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 340
                },
                {
                        "id": "pretrain_java_data_5010043",
                        "content": "public void deleteUser(final List<Integer> userIds) {\ntry {\nconnection.setAutoCommit(false);\nnew ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n@Override\npublic void executeProcessReturnNull() throws SQLException {\npsImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"user.delete\"));\nIterator<Integer> iter = userIds.iterator();\nint userId;\nwhile (iter.hasNext()) {\nuserId = iter.next();\npsImpl.setInt(1, userId);\npsImpl.executeUpdate();\n}\n}\n});\nconnection.commit();\ncmDB.removeUsers(userIds);\n} catch (SQLException sqle) {\nlog.error(sqle);\nif (connection != null) {\ntry {\nconnection.rollback();\n} catch (SQLException ex) {\n}\n}\n} finally {\nif (connection != null) {\ntry {\nconnection.setAutoCommit(true);\n} catch (SQLException ex) {\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2462101#305#340.java",
                        "__cluster__": 340
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_6662017",
                        "content": "public UserFunction loadMFileViaWeb(URL codeBase, String directoryAndFile, String mFileName) {\nString code = \"\";\nUserFunction function = null;\nErrorLogger.debugLine(\"MFileLoader: loading >\" + mFileName + \".m<\");\ntry {\nURL url = new URL(codeBase, directoryAndFile);\nInputStream in = url.openStream();\nBufferedReader inReader = new BufferedReader(new InputStreamReader(in));\nString line;\nwhile ((line = inReader.readLine()) != null) {\ncode += line + \"\\n\";\n}\ninReader.close();\n} catch (Exception e) {\nErrors.throwMathLibException(\"MFileLoader: m-file exception via web\");\n}\nErrorLogger.debugLine(\"MFileLoader: code: begin \\n\" + code + \"\\ncode end\");\nFunctionParser funcParser = new FunctionParser();\nfunction = funcParser.parseFunction(code);\nfunction.setName(mFileName);\nErrorLogger.debugLine(\"MFileLoader: finished webloading >\" + mFileName + \".m<\");\nreturn function;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2276051#20#42.java",
                        "__cluster__": 491
                },
                {
                        "id": "test_bigclonebench_data_5543349",
                        "content": "public UserFunction loadMFileViaWeb(URL codeBase, String directoryAndFile, String mFileName) {\nString code = \"\";\nUserFunction function = null;\nErrorLogger.debugLine(\"MFileLoader: loading >\" + mFileName + \".m<\");\ntry {\nURL url = new URL(codeBase, directoryAndFile);\nInputStream in = url.openStream();\nBufferedReader inReader = new BufferedReader(new InputStreamReader(in));\nString line;\nwhile ((line = inReader.readLine()) != null) {\ncode += line + \"\\n\";\n}\ninReader.close();\n} catch (Exception e) {\nErrors.throwMathLibException(\"MFileLoader: m-file exception via web\");\n}\nErrorLogger.debugLine(\"MFileLoader: code: begin \\n\" + code + \"\\ncode end\");\nFunctionParser funcParser = new FunctionParser();\nfunction = funcParser.parseFunction(code);\nfunction.setName(mFileName);\nErrorLogger.debugLine(\"MFileLoader: finished webloading >\" + mFileName + \".m<\");\nreturn function;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 491
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2022160",
                        "content": "public ByteBuffer[] write(ByteBuffer[] byteBuffers) {\nif (!m_sslInitiated) {\nreturn m_writer.write(byteBuffers);\n}\nif (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\nif (!NIOUtils.isEmpty(byteBuffers)) {\nm_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));\nbyteBuffers = new ByteBuffer[0];\n}\nByteBuffer buffer = SSL_BUFFER.get();\nByteBuffer[] buffers = null;\ntry {\nSSLEngineResult result = null;\nwhile (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\nbuffer.clear();\nresult = m_engine.wrap(byteBuffers, buffer);\nbuffer.flip();\nbuffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));\n}\nif (result == null) return null;\nif (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(\"Unexpectedly not ok wrapping handshake data, was \" + result.getStatus());\nreactToHandshakeStatus(result.getHandshakeStatus());\n} catch (SSLException e) {\nthrow new RuntimeException(e);\n}\nreturn buffers;\n}\nByteBuffer buffer = SSL_BUFFER.get();\nbuffer.clear();\nif (NIOUtils.isEmpty(byteBuffers)) {\nif (m_initialOutBuffer == null) return null;\n} else {\nbyteBuffers = m_writer.write(byteBuffers);\n}\nif (m_initialOutBuffer != null) {\nbyteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\nm_initialOutBuffer = null;\n}\nByteBuffer[] encrypted = null;\nwhile (!NIOUtils.isEmpty(byteBuffers)) {\nbuffer.clear();\ntry {\nm_engine.wrap(byteBuffers, buffer);\n} catch (SSLException e) {\nthrow new RuntimeException(e);\n}\nbuffer.flip();\nencrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n}\nreturn encrypted;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 549
                },
                {
                        "id": "pretrain_java_data_6710096",
                        "content": "public ByteBuffer[] write(ByteBuffer[] byteBuffers) {\nif (!m_sslInitiated) {\nreturn m_writer.write(byteBuffers);\n}\nif (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\nif (!NIOUtils.isEmpty(byteBuffers)) {\nm_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));\nbyteBuffers = new ByteBuffer[0];\n}\nByteBuffer buffer = SSL_BUFFER.get();\nByteBuffer[] buffers = null;\ntry {\nSSLEngineResult result = null;\nwhile (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\nbuffer.clear();\nresult = m_engine.wrap(byteBuffers, buffer);\nbuffer.flip();\nbuffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));\n}\nif (result == null) return null;\nif (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(\"Unexpectedly not ok wrapping handshake data, was \" + result.getStatus());\nreactToHandshakeStatus(result.getHandshakeStatus());\n} catch (SSLException e) {\nthrow new RuntimeException(e);\n}\nreturn buffers;\n}\nByteBuffer buffer = SSL_BUFFER.get();\nbuffer.clear();\nif (NIOUtils.isEmpty(byteBuffers)) {\nif (m_initialOutBuffer == null) return null;\n} else {\nbyteBuffers = m_writer.write(byteBuffers);\n}\nif (m_initialOutBuffer != null) {\nbyteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\nm_initialOutBuffer = null;\n}\nByteBuffer[] encrypted = null;\nwhile (!NIOUtils.isEmpty(byteBuffers)) {\nbuffer.clear();\ntry {\nm_engine.wrap(byteBuffers, buffer);\n} catch (SSLException e) {\nthrow new RuntimeException(e);\n}\nbuffer.flip();\nencrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n}\nreturn encrypted;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1592606#148#198.java",
                        "__cluster__": 549
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9796161",
                        "content": "public static String getMD5(String s) {\ntry {\nMessageDigest m = MessageDigest.getInstance(\"MD5\");\nm.update(s.getBytes(), 0, s.length());\nreturn \"\" + new BigInteger(1, m.digest()).toString(16);\n} catch (NoSuchAlgorithmException e) {\nlogger.error(\"MD5 is not supported !!!\");\n}\nreturn s;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 57
                },
                {
                        "id": "pretrain_java_data_5157706",
                        "content": "public static String getMD5(String s) {\ntry {\nMessageDigest m = MessageDigest.getInstance(\"MD5\");\nm.update(s.getBytes(), 0, s.length());\ns = new BigInteger(1, m.digest()).toString(16);\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n}\nreturn s;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#337401#41#50.java",
                        "__cluster__": 57
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_7761195",
                        "content": "public synchronized String encrypt(String plaintext) throws Exception {\nStringBuffer sb = new StringBuffer();\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA-512\");\n} catch (NoSuchAlgorithmException e) {\nthrow new Exception(e.getMessage());\n}\ntry {\nmd.update(plaintext.getBytes(\"UTF-8\"));\n} catch (UnsupportedEncodingException e) {\nthrow new Exception(e.getMessage());\n}\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 114
                },
                {
                        "id": "pretrain_java_data_8233274",
                        "content": "public synchronized String encrypt(String plaintext) {\nMessageDigest md = null;\nString hash = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(plaintext.getBytes(\"UTF-8\"));\nbyte raw[] = md.digest();\nhash = (new BASE64Encoder()).encode(raw);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nreturn hash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#539108#27#41.java",
                        "__cluster__": 114
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_14053882",
                        "content": "public synchronized String encrypt(String plaintext) throws Exception {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\n} catch (NoSuchAlgorithmException e) {\nthrow new Exception(e.getMessage());\n}\ntry {\nmd.update(plaintext.getBytes(\"UTF-8\"));\n} catch (UnsupportedEncodingException e) {\nthrow new Exception(e.getMessage());\n}\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 114
                },
                {
                        "id": "pretrain_java_data_8233274",
                        "content": "public synchronized String encrypt(String plaintext) {\nMessageDigest md = null;\nString hash = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(plaintext.getBytes(\"UTF-8\"));\nbyte raw[] = md.digest();\nhash = (new BASE64Encoder()).encode(raw);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nreturn hash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#539108#27#41.java",
                        "__cluster__": 114
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_10214218",
                        "content": "public synchronized String encrypt(String plaintext) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\ntry {\nmd.update(plaintext.getBytes(\"UTF-8\"));\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 114
                },
                {
                        "id": "pretrain_java_data_8233274",
                        "content": "public synchronized String encrypt(String plaintext) {\nMessageDigest md = null;\nString hash = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(plaintext.getBytes(\"UTF-8\"));\nbyte raw[] = md.digest();\nhash = (new BASE64Encoder()).encode(raw);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nreturn hash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#539108#27#41.java",
                        "__cluster__": 114
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_23118425",
                        "content": "public synchronized String encrypt(String plaintext) throws Exception {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"MD5\");\n} catch (Exception e) {\n}\ntry {\nmd.update(plaintext.getBytes(\"UTF-8\"));\n} catch (Exception e) {\n}\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 114
                },
                {
                        "id": "pretrain_java_data_8233274",
                        "content": "public synchronized String encrypt(String plaintext) {\nMessageDigest md = null;\nString hash = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(plaintext.getBytes(\"UTF-8\"));\nbyte raw[] = md.digest();\nhash = (new BASE64Encoder()).encode(raw);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nreturn hash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#539108#27#41.java",
                        "__cluster__": 114
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_8233274",
                        "content": "public synchronized String encrypt(String plaintext) {\nMessageDigest md = null;\nString hash = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(plaintext.getBytes(\"UTF-8\"));\nbyte raw[] = md.digest();\nhash = (new BASE64Encoder()).encode(raw);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nreturn hash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#539108#27#41.java",
                        "__cluster__": 114
                },
                {
                        "id": "test_bigclonebench_data_5399593",
                        "content": "public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md = null;\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(plaintext.getBytes(\"UTF-8\"));\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 114
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_12783713",
                        "content": "@Override\npublic void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {\nif (query == null) {\nthrow new NotConnectedException();\n}\nArrayList<String> recipients = query.getUserManager().getTecMail();\nMail mail = new Mail(recipients);\ntry {\nZipOutputStream zos = new ZipOutputStream(new FileOutputStream(\"log/ossobooklog.zip\"));\nFileInputStream fis = new FileInputStream(\"log/ossobook.log\");\nZipEntry entry = new ZipEntry(\"ossobook.log\");\nzos.putNextEntry(entry);\nbyte[] buffer = new byte[8192];\nint read = 0;\nwhile ((read = fis.read(buffer, 0, 1024)) != -1) {\nzos.write(buffer, 0, read);\n}\nzos.closeEntry();\nfis.close();\nzos.close();\nmail.sendErrorMessage(message, new File(\"log/ossobooklog.zip\"), getUserName());\n} catch (Exception ex) {\nex.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 418
                },
                {
                        "id": "pretrain_java_data_8271756",
                        "content": "@Override\npublic void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {\nif (query == null) {\nthrow new NotConnectedException();\n}\nArrayList<String> recipients = query.getUserManager().getTecMail();\nMail mail = new Mail(recipients);\ntry {\nZipOutputStream zos = new ZipOutputStream(new FileOutputStream(\"log/ossobooklog.zip\"));\nFileInputStream fis = new FileInputStream(\"log/ossobook.log\");\nZipEntry entry = new ZipEntry(\"ossobook.log\");\nzos.putNextEntry(entry);\nbyte[] buffer = new byte[8192];\nint read = 0;\nwhile ((read = fis.read(buffer, 0, 1024)) != -1) {\nzos.write(buffer, 0, read);\n}\nzos.closeEntry();\nfis.close();\nzos.close();\nmail.sendErrorMessage(message, new File(\"log/ossobooklog.zip\"), getUserName());\n} catch (Exception ex) {\nex.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#435966#1464#1488.java",
                        "__cluster__": 418
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_8338524",
                        "content": "public void saveFile(MainWindow window) {\nFileOutputStream stream = null;\ntry {\nDocument outputDoc = new Document();\nDocType dtd = new DocType(UI, DIRECTORY + File.separator + FILE_NAME_DTD);\nElement uiElement = new Element(UI);\noutputDoc.setDocType(dtd);\noutputDoc.addContent(uiElement);\noutputDoc.setRootElement(uiElement);\nuiElement.setAttribute(USE_DEFAULT, \"false\");\nuiElement.setAttribute(SHOW_TOOL_BAR, Boolean.toString(window.getToolToolBar().isVisible()));\nuiElement.setAttribute(SHOW_UNIT_BAR, Boolean.toString(window.getUnitToolBar().isVisible()));\nString currentLFClassName = UIManager.getLookAndFeel().getClass().getName();\nString systemLFClassName = UIManager.getSystemLookAndFeelClassName();\nif (currentLFClassName.equals(systemLFClassName)) uiElement.setAttribute(LOOK_AND_FEEL, \"native\"); else uiElement.setAttribute(LOOK_AND_FEEL, \"default\");\nElement mainWindowElement = new Element(MAIN_WINDOW);\nuiElement.addContent(mainWindowElement);\nmainWindowElement.setAttribute(LOCATION_X, Integer.toString(window.getFrame().getX()));\nmainWindowElement.setAttribute(LOCATION_Y, Integer.toString(window.getFrame().getY()));\nmainWindowElement.setAttribute(WIDTH, Integer.toString(window.getFrame().getWidth()));\nmainWindowElement.setAttribute(HEIGHT, Integer.toString(window.getFrame().getHeight()));\nElement volumeElement = new Element(VOLUME);\nuiElement.addContent(volumeElement);\nAudioPlayer player = window.getDesktop().getSoundPlayer();\nvolumeElement.setAttribute(SOUND, Float.toString(player.getVolume()));\nvolumeElement.setAttribute(MUTE, Boolean.toString(player.isMute()));\nElement internalWindowsElement = new Element(INTERNAL_WINDOWS);\nuiElement.addContent(internalWindowsElement);\nMainDesktopPane desktop = window.getDesktop();\nJInternalFrame[] windows = desktop.getAllFrames();\nfor (JInternalFrame window1 : windows) {\nElement windowElement = new Element(WINDOW);\ninternalWindowsElement.addContent(windowElement);\nwindowElement.setAttribute(Z_ORDER, Integer.toString(desktop.getComponentZOrder(window1)));\nwindowElement.setAttribute(LOCATION_X, Integer.toString(window1.getX()));\nwindowElement.setAttribute(LOCATION_Y, Integer.toString(window1.getY()));\nwindowElement.setAttribute(WIDTH, Integer.toString(window1.getWidth()));\nwindowElement.setAttribute(HEIGHT, Integer.toString(window1.getHeight()));\nwindowElement.setAttribute(DISPLAY, Boolean.toString(!window1.isClosed()));\nif (window1 instanceof ToolWindow) {\nwindowElement.setAttribute(TYPE, TOOL);\nwindowElement.setAttribute(NAME, ((ToolWindow) window1).getToolName());\n} else if (window1 instanceof UnitWindow) {\nwindowElement.setAttribute(TYPE, UNIT);\nwindowElement.setAttribute(NAME, ((UnitWindow) window1).getUnit().getName());\n} else {\nwindowElement.setAttribute(TYPE, \"other\");\nwindowElement.setAttribute(NAME, \"other\");\n}\n}\nUnit[] toolBarUnits = window.getUnitToolBar().getUnitsInToolBar();\nfor (Unit toolBarUnit : toolBarUnits) {\nUnitWindow unitWindow = desktop.findUnitWindow(toolBarUnit);\nif ((unitWindow == null) || unitWindow.isIcon()) {\nElement windowElement = new Element(WINDOW);\ninternalWindowsElement.addContent(windowElement);\nwindowElement.setAttribute(TYPE, UNIT);\nwindowElement.setAttribute(NAME, toolBarUnit.getName());\nwindowElement.setAttribute(DISPLAY, \"false\");\n}\n}\nFile configFile = new File(DIRECTORY, FILE_NAME);\nif (!configFile.getParentFile().exists()) {\nconfigFile.getParentFile().mkdirs();\n}\nInputStream in = getClass().getResourceAsStream(\"/dtd/ui_settings.dtd\");\nIOUtils.copy(in, new FileOutputStream(new File(DIRECTORY, \"ui_settings.dtd\")));\nXMLOutputter fmt = new XMLOutputter();\nfmt.setFormat(Format.getPrettyFormat());\nstream = new FileOutputStream(configFile);\nOutputStreamWriter writer = new OutputStreamWriter(stream, \"UTF-8\");\nfmt.output(outputDoc, writer);\n} catch (Exception e) {\nlogger.log(Level.SEVERE, e.getMessage());\n} finally {\nIOUtils.closeQuietly(stream);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2666795#111#188.java",
                        "__cluster__": 805
                },
                {
                        "id": "test_bigclonebench_data_18782385",
                        "content": "public void saveFile(MainWindow window) {\nFileOutputStream stream = null;\ntry {\nDocument outputDoc = new Document();\nDocType dtd = new DocType(UI, DIRECTORY + File.separator + FILE_NAME_DTD);\nElement uiElement = new Element(UI);\noutputDoc.setDocType(dtd);\noutputDoc.addContent(uiElement);\noutputDoc.setRootElement(uiElement);\nuiElement.setAttribute(USE_DEFAULT, \"false\");\nuiElement.setAttribute(SHOW_TOOL_BAR, Boolean.toString(window.getToolToolBar().isVisible()));\nuiElement.setAttribute(SHOW_UNIT_BAR, Boolean.toString(window.getUnitToolBar().isVisible()));\nString currentLFClassName = UIManager.getLookAndFeel().getClass().getName();\nString systemLFClassName = UIManager.getSystemLookAndFeelClassName();\nif (currentLFClassName.equals(systemLFClassName)) uiElement.setAttribute(LOOK_AND_FEEL, \"native\"); else uiElement.setAttribute(LOOK_AND_FEEL, \"default\");\nElement mainWindowElement = new Element(MAIN_WINDOW);\nuiElement.addContent(mainWindowElement);\nmainWindowElement.setAttribute(LOCATION_X, Integer.toString(window.getFrame().getX()));\nmainWindowElement.setAttribute(LOCATION_Y, Integer.toString(window.getFrame().getY()));\nmainWindowElement.setAttribute(WIDTH, Integer.toString(window.getFrame().getWidth()));\nmainWindowElement.setAttribute(HEIGHT, Integer.toString(window.getFrame().getHeight()));\nElement volumeElement = new Element(VOLUME);\nuiElement.addContent(volumeElement);\nAudioPlayer player = window.getDesktop().getSoundPlayer();\nvolumeElement.setAttribute(SOUND, Float.toString(player.getVolume()));\nvolumeElement.setAttribute(MUTE, Boolean.toString(player.isMute()));\nElement internalWindowsElement = new Element(INTERNAL_WINDOWS);\nuiElement.addContent(internalWindowsElement);\nMainDesktopPane desktop = window.getDesktop();\nJInternalFrame[] windows = desktop.getAllFrames();\nfor (JInternalFrame window1 : windows) {\nElement windowElement = new Element(WINDOW);\ninternalWindowsElement.addContent(windowElement);\nwindowElement.setAttribute(Z_ORDER, Integer.toString(desktop.getComponentZOrder(window1)));\nwindowElement.setAttribute(LOCATION_X, Integer.toString(window1.getX()));\nwindowElement.setAttribute(LOCATION_Y, Integer.toString(window1.getY()));\nwindowElement.setAttribute(WIDTH, Integer.toString(window1.getWidth()));\nwindowElement.setAttribute(HEIGHT, Integer.toString(window1.getHeight()));\nwindowElement.setAttribute(DISPLAY, Boolean.toString(!window1.isClosed()));\nif (window1 instanceof ToolWindow) {\nwindowElement.setAttribute(TYPE, TOOL);\nwindowElement.setAttribute(NAME, ((ToolWindow) window1).getToolName());\n} else if (window1 instanceof UnitWindow) {\nwindowElement.setAttribute(TYPE, UNIT);\nwindowElement.setAttribute(NAME, ((UnitWindow) window1).getUnit().getName());\n} else {\nwindowElement.setAttribute(TYPE, \"other\");\nwindowElement.setAttribute(NAME, \"other\");\n}\n}\nUnit[] toolBarUnits = window.getUnitToolBar().getUnitsInToolBar();\nfor (Unit toolBarUnit : toolBarUnits) {\nUnitWindow unitWindow = desktop.findUnitWindow(toolBarUnit);\nif ((unitWindow == null) || unitWindow.isIcon()) {\nElement windowElement = new Element(WINDOW);\ninternalWindowsElement.addContent(windowElement);\nwindowElement.setAttribute(TYPE, UNIT);\nwindowElement.setAttribute(NAME, toolBarUnit.getName());\nwindowElement.setAttribute(DISPLAY, \"false\");\n}\n}\nFile configFile = new File(DIRECTORY, FILE_NAME);\nif (!configFile.getParentFile().exists()) {\nconfigFile.getParentFile().mkdirs();\n}\nInputStream in = getClass().getResourceAsStream(\"/dtd/ui_settings.dtd\");\nIOUtils.copy(in, new FileOutputStream(new File(DIRECTORY, \"ui_settings.dtd\")));\nXMLOutputter fmt = new XMLOutputter();\nfmt.setFormat(Format.getPrettyFormat());\nstream = new FileOutputStream(configFile);\nOutputStreamWriter writer = new OutputStreamWriter(stream, \"UTF-8\");\nfmt.output(outputDoc, writer);\n} catch (Exception e) {\nlogger.log(Level.SEVERE, e.getMessage());\n} finally {\nIOUtils.closeQuietly(stream);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 805
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_8346772",
                        "content": "public GetMessages(String messageType) {\nString urlString = dms_url + \"/servlet/com.ufnasoft.dms.server.ServerGetMessages\";\nString rvalue = \"\";\nString filename = dms_home + FS + \"temp\" + FS + username + \"messages.xml\";\ntry {\nString urldata = urlString + \"?username=\" + URLEncoder.encode(username, \"UTF-8\") + \"&key=\" + URLEncoder.encode(key, \"UTF-8\") + \"&messagetype=\" + messageType + \"&filename=\" + URLEncoder.encode(username, \"UTF-8\") + \"messages.xml\";\n;\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder parser = factory.newDocumentBuilder();\nURL u = new URL(urldata);\nDataInputStream is = new DataInputStream(u.openStream());\nFileOutputStream os = new FileOutputStream(filename);\nint iBufSize = is.available();\nbyte inBuf[] = new byte[20000 * 1024];\nint iNumRead;\nwhile ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\nos.close();\nis.close();\nFile f = new File(filename);\nInputStream inputstream = new FileInputStream(f);\nDocument document = parser.parse(inputstream);\nNodeList nodelist = document.getElementsByTagName(\"message\");\nint num = nodelist.getLength();\nmessages = new String[num][7];\nfor (int i = 0; i < num; i++) {\nmessages[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"messageid\"));\nmessages[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"subject\"));\nmessages[i][2] = (new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"firstname\"))) + \" \" + (new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"lastname\")));\nmessages[i][3] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"messagedatetime\"));\nmessages[i][4] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"messagefrom\"));\nmessages[i][5] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"messageto\"));\nmessages[i][6] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"documentid\"));\n}\n} catch (MalformedURLException ex) {\nSystem.out.println(ex);\n} catch (ParserConfigurationException ex) {\nSystem.out.println(ex);\n} catch (NullPointerException e) {\n} catch (Exception ex) {\nSystem.out.println(ex);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1701076#27#68.java",
                        "__cluster__": 567
                },
                {
                        "id": "test_bigclonebench_data_23273706",
                        "content": "public String[][] getProjectTreeData() {\nString[][] treeData = null;\nString filename = dms_home + FS + \"temp\" + FS + username + \"adminprojects.xml\";\nString urlString = dms_url + \"/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects\";\ntry {\nString urldata = urlString + \"?username=\" + URLEncoder.encode(username, \"UTF-8\") + \"&key=\" + URLEncoder.encode(key, \"UTF-8\") + \"&filename=\" + URLEncoder.encode(username, \"UTF-8\") + \"adminprojects.xml\";\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setValidating(false);\nDocumentBuilder parser = factory.newDocumentBuilder();\nURL u = new URL(urldata);\nDataInputStream is = new DataInputStream(u.openStream());\nFileOutputStream os = new FileOutputStream(filename);\nint iBufSize = is.available();\nbyte inBuf[] = new byte[20000 * 1024];\nint iNumRead;\nwhile ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\nos.close();\nis.close();\nFile f = new File(filename);\nInputStream inputstream = new FileInputStream(f);\nDocument document = parser.parse(inputstream);\nNodeList nodelist = document.getElementsByTagName(\"proj\");\nint num = nodelist.getLength();\ntreeData = new String[num][3];\nfor (int i = 0; i < num; i++) {\ntreeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"pid\"));\ntreeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"ppid\"));\ntreeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"p\"));\n}\n} catch (MalformedURLException ex) {\nSystem.out.println(ex);\n} catch (ParserConfigurationException ex) {\nSystem.out.println(ex);\n} catch (NullPointerException e) {\n} catch (Exception ex) {\nSystem.out.println(ex);\n}\nreturn treeData;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 567
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_21827619",
                        "content": "public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"SHA-1\");\nbyte[] sha1hash = new byte[40];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 26
                },
                {
                        "id": "pretrain_java_data_9923627",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static String calculateSHA1(String data, String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {\ndata += key;\nMessageDigest md;\nmd = MessageDigest.getInstance(\"SHA-1\");\nbyte[] sha1hash = new byte[40];\nmd.update(data.getBytes(\"iso-8859-1\"), 0, data.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1082064#30#38.java",
                        "__cluster__": 26
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_15351863",
                        "content": "public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"SHA-1\");\nbyte[] sha1hash = new byte[40];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 26
                },
                {
                        "id": "pretrain_java_data_9923627",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static String calculateSHA1(String data, String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {\ndata += key;\nMessageDigest md;\nmd = MessageDigest.getInstance(\"SHA-1\");\nbyte[] sha1hash = new byte[40];\nmd.update(data.getBytes(\"iso-8859-1\"), 0, data.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1082064#30#38.java",
                        "__cluster__": 26
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_4938100",
                        "content": "public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"SHA-1\");\nbyte[] sha1hash = new byte[40];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 26
                },
                {
                        "id": "pretrain_java_data_9923627",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static String calculateSHA1(String data, String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {\ndata += key;\nMessageDigest md;\nmd = MessageDigest.getInstance(\"SHA-1\");\nbyte[] sha1hash = new byte[40];\nmd.update(data.getBytes(\"iso-8859-1\"), 0, data.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1082064#30#38.java",
                        "__cluster__": 26
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_14785308",
                        "content": "public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"SHA-1\");\nbyte[] sha1hash = new byte[40];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 26
                },
                {
                        "id": "pretrain_java_data_9923627",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static String calculateSHA1(String data, String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {\ndata += key;\nMessageDigest md;\nmd = MessageDigest.getInstance(\"SHA-1\");\nbyte[] sha1hash = new byte[40];\nmd.update(data.getBytes(\"iso-8859-1\"), 0, data.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1082064#30#38.java",
                        "__cluster__": 26
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_2017833",
                        "content": "public static String hash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nbyte[] sha1hash = new byte[40];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nsha1hash = md.digest();\nreturn SHA1.convertToHex(sha1hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 26
                },
                {
                        "id": "pretrain_java_data_9923627",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static String calculateSHA1(String data, String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {\ndata += key;\nMessageDigest md;\nmd = MessageDigest.getInstance(\"SHA-1\");\nbyte[] sha1hash = new byte[40];\nmd.update(data.getBytes(\"iso-8859-1\"), 0, data.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1082064#30#38.java",
                        "__cluster__": 26
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_9803882",
                        "content": "public String readRemoteFile() throws IOException {\nString response = \"\";\nboolean eof = false;\nURL url = new URL(StaticData.remoteFile);\nInputStream is = url.openStream();\nBufferedReader br = new BufferedReader(new InputStreamReader(is));\nString s;\ns = br.readLine();\nresponse = s;\nwhile (!eof) {\ntry {\ns = br.readLine();\nif (s == null) {\neof = true;\nbr.close();\n} else response += s;\n} catch (EOFException eo) {\neof = true;\n} catch (IOException e) {\nSystem.out.println(\"IO Error : \" + e.getMessage());\n}\n}\nreturn response;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#611112#40#63.java",
                        "__cluster__": 182
                },
                {
                        "id": "test_bigclonebench_data_13439950",
                        "content": "public String readRemoteFile() throws IOException {\nString response = \"\";\nboolean eof = false;\nURL url = new URL(StaticData.remoteFile);\nInputStream is = url.openStream();\nBufferedReader br = new BufferedReader(new InputStreamReader(is));\nString s;\ns = br.readLine();\nresponse = s;\nwhile (!eof) {\ntry {\ns = br.readLine();\nif (s == null) {\neof = true;\nbr.close();\n} else response += s;\n} catch (EOFException eo) {\neof = true;\n} catch (IOException e) {\nSystem.out.println(\"IO Error : \" + e.getMessage());\n}\n}\nreturn response;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 182
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3330775",
                        "content": "public static JSONObject getJSONData(String url) throws JSONException {\nJSONObject jObject = null;\nInputStream data = null;\nDefaultHttpClient httpClient = new DefaultHttpClient();\nURI uri;\ntry {\nuri = new URI(url);\nHttpGet httpGet = new HttpGet(uri);\nHttpResponse response = httpClient.execute(httpGet);\ndata = response.getEntity().getContent();\nString line;\nStringBuilder builder = new StringBuilder();\nBufferedReader reader;\nreader = new BufferedReader(new InputStreamReader(data), 8192);\nwhile ((line = reader.readLine()) != null) builder.append(line);\nreader.close();\njObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn jObject;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 216
                },
                {
                        "id": "pretrain_java_data_9875046",
                        "content": "<gh_stars>10-100\npublic static JSONObject getJSONData(String url) throws JSONException {\nJSONObject jObject = null;\nInputStream data = null;\nDefaultHttpClient httpClient = new DefaultHttpClient();\nURI uri;\ntry {\nuri = new URI(url);\nHttpGet httpGet = new HttpGet(uri);\nHttpResponse response = httpClient.execute(httpGet);\ndata = response.getEntity().getContent();\nString line;\nStringBuilder builder = new StringBuilder();\nBufferedReader reader;\nreader = new BufferedReader(new InputStreamReader(data), 8192);\nwhile ((line = reader.readLine()) != null) builder.append(line);\nreader.close();\njObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn jObject;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2057045#18#39.java",
                        "__cluster__": 216
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9902785",
                        "content": "protected String downloadURLtoString(URL url) throws IOException {\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nStringBuffer sb = new StringBuffer(100 * 1024);\nString str;\nwhile ((str = in.readLine()) != null) {\nsb.append(str);\n}\nin.close();\nreturn sb.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#518397#28#37.java",
                        "__cluster__": 236
                },
                {
                        "id": "test_bigclonebench_data_21979462",
                        "content": "protected String downloadURLtoString(URL url) throws IOException {\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nStringBuffer sb = new StringBuffer(100 * 1024);\nString str;\nwhile ((str = in.readLine()) != null) {\nsb.append(str);\n}\nin.close();\nreturn sb.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 236
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9813190",
                        "content": "<filename>references/bcb_chosen_clones/selected#451661#76#117.java\nprivate synchronized void loadDDL() throws IOException {\ntry {\nconn.createStatement().executeQuery(\"SELECT * FROM non_generic_favs\").close();\n} catch (SQLException e) {\nStatement stmt = null;\nif (!e.getMessage().matches(ERR_MISSING_TABLE)) {\ne.printStackTrace(System.out);\nthrow new IOException(\"Error on initial data store read\");\n}\nString[] qry = { \"CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)\", \"CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)\", \"CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))\", \"INSERT INTO settings (var, val) VALUES ('schema', '1')\" };\ntry {\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nfor (String q : qry) stmt.executeUpdate(q);\nconn.commit();\n} catch (SQLException e2) {\ntry {\nconn.rollback();\n} catch (SQLException e3) {\ne3.printStackTrace(System.out);\n}\ne2.printStackTrace(new PrintWriter(System.out));\nthrow new IOException(\"Error initializing data store\");\n} finally {\nif (stmt != null) {\ntry {\nstmt.close();\n} catch (SQLException e4) {\ne4.printStackTrace(System.out);\nthrow new IOException(\"Unable to cleanup data store resources\");\n}\n}\ntry {\nconn.setAutoCommit(true);\n} catch (SQLException e3) {\ne3.printStackTrace(System.out);\nthrow new IOException(\"Unable to reset data store auto commit\");\n}\n}\n}\nreturn;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#451661#76#117.java",
                        "__cluster__": 34
                },
                {
                        "id": "test_bigclonebench_data_22552318",
                        "content": "private synchronized void loadDDL() throws IOException {\ntry {\nconn.createStatement().executeQuery(\"SELECT * FROM non_generic_favs\").close();\n} catch (SQLException e) {\nStatement stmt = null;\nif (!e.getMessage().matches(ERR_MISSING_TABLE)) {\ne.printStackTrace(System.out);\nthrow new IOException(\"Error on initial data store read\");\n}\nString[] qry = { \"CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)\", \"CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)\", \"CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))\", \"INSERT INTO settings (var, val) VALUES ('schema', '1')\" };\ntry {\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nfor (String q : qry) stmt.executeUpdate(q);\nconn.commit();\n} catch (SQLException e2) {\ntry {\nconn.rollback();\n} catch (SQLException e3) {\ne3.printStackTrace(System.out);\n}\ne2.printStackTrace(new PrintWriter(System.out));\nthrow new IOException(\"Error initializing data store\");\n} finally {\nif (stmt != null) {\ntry {\nstmt.close();\n} catch (SQLException e4) {\ne4.printStackTrace(System.out);\nthrow new IOException(\"Unable to cleanup data store resources\");\n}\n}\ntry {\nconn.setAutoCommit(true);\n} catch (SQLException e3) {\ne3.printStackTrace(System.out);\nthrow new IOException(\"Unable to reset data store auto commit\");\n}\n}\n}\nreturn;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 34
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9971542",
                        "content": "public boolean connect() {\nboolean isConnected = false;\ntry {\ntry {\nthis.ftpClient.connect(this.server, this.port);\n} catch (SocketException e) {\nstatus = ErrorResult.CONNECTNOTPOSSIBLE.code;\nreturn false;\n} catch (IOException e) {\nstatus = ErrorResult.CONNECTNOTPOSSIBLE.code;\nreturn false;\n}\nint reply = this.ftpClient.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nthis.disconnect();\nstatus = ErrorResult.CONNECTNOTCORRECT.code;\nreturn false;\n}\ntry {\nif (this.account == null) {\nif (!this.ftpClient.login(this.username, this.passwd)) {\nstatus = ErrorResult.LOGINNOTCORRECT.code;\nthis.ftpClient.logout();\nreturn false;\n}\n} else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {\nstatus = ErrorResult.LOGINACCTNOTCORRECT.code;\nthis.ftpClient.logout();\nreturn false;\n}\n} catch (IOException e) {\nstatus = ErrorResult.ERRORWHILECONNECT.code;\ntry {\nthis.ftpClient.logout();\n} catch (IOException e1) {\n}\nreturn false;\n}\nisConnected = true;\nreturn true;\n} finally {\nif ((!isConnected) && this.ftpClient.isConnected()) {\nthis.disconnect();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#221058#184#229.java",
                        "__cluster__": 909
                },
                {
                        "id": "test_bigclonebench_data_8468859",
                        "content": "public boolean connect() {\nboolean isConnected = false;\ntry {\ntry {\nthis.ftpClient.connect(this.server, this.port);\n} catch (SocketException e) {\nstatus = ErrorResult.CONNECTNOTPOSSIBLE.code;\nreturn false;\n} catch (IOException e) {\nstatus = ErrorResult.CONNECTNOTPOSSIBLE.code;\nreturn false;\n}\nint reply = this.ftpClient.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nthis.disconnect();\nstatus = ErrorResult.CONNECTNOTCORRECT.code;\nreturn false;\n}\ntry {\nif (this.account == null) {\nif (!this.ftpClient.login(this.username, this.passwd)) {\nstatus = ErrorResult.LOGINNOTCORRECT.code;\nthis.ftpClient.logout();\nreturn false;\n}\n} else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {\nstatus = ErrorResult.LOGINACCTNOTCORRECT.code;\nthis.ftpClient.logout();\nreturn false;\n}\n} catch (IOException e) {\nstatus = ErrorResult.ERRORWHILECONNECT.code;\ntry {\nthis.ftpClient.logout();\n} catch (IOException e1) {\n}\nreturn false;\n}\nisConnected = true;\nreturn true;\n} finally {\nif ((!isConnected) && this.ftpClient.isConnected()) {\nthis.disconnect();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 909
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9854349",
                        "content": "<gh_stars>10-100\nprivate String postXml(String url, String soapAction, String xml) {\ntry {\nURLConnection conn = new URL(url).openConnection();\nif (conn instanceof HttpURLConnection) {\nHttpURLConnection hConn = (HttpURLConnection) conn;\nhConn.setRequestMethod(\"POST\");\n}\nconn.setConnectTimeout(this.connectionTimeout);\nconn.setReadTimeout(this.connectionTimeout);\nconn.setRequestProperty(\"Content-Type\", \"text/xml; charset=utf-8\");\nconn.setRequestProperty(\"Accept\", \"application/soap+xml, text/*\");\nif (soapAction != null) {\nconn.setRequestProperty(\"SOAPAction\", soapAction);\n}\nconn.setDoOutput(true);\nOutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());\nout.write(xml);\nout.close();\nBufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nStringBuilder buf = new StringBuilder();\nString str;\nwhile ((str = resp.readLine()) != null) {\nbuf.append(str);\n}\nreturn buf.toString();\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2207414#298#326.java",
                        "__cluster__": 117
                },
                {
                        "id": "test_bigclonebench_data_5989666",
                        "content": "private String postXml(String url, String soapAction, String xml) {\ntry {\nURLConnection conn = new URL(url).openConnection();\nif (conn instanceof HttpURLConnection) {\nHttpURLConnection hConn = (HttpURLConnection) conn;\nhConn.setRequestMethod(\"POST\");\n}\nconn.setConnectTimeout(this.connectionTimeout);\nconn.setReadTimeout(this.connectionTimeout);\nconn.setRequestProperty(\"Content-Type\", \"text/xml; charset=utf-8\");\nconn.setRequestProperty(\"Accept\", \"application/soap+xml, text/*\");\nif (soapAction != null) {\nconn.setRequestProperty(\"SOAPAction\", soapAction);\n}\nconn.setDoOutput(true);\nOutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());\nout.write(xml);\nout.close();\nBufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nStringBuilder buf = new StringBuilder();\nString str;\nwhile ((str = resp.readLine()) != null) {\nbuf.append(str);\n}\nreturn buf.toString();\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 117
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5977352",
                        "content": "public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\nif (dest.exists()) if (force) dest.delete(); else throw new IOException(\"Cannot overwrite existing file: \" + dest.getName());\nbyte[] buffer = new byte[bufSize];\nint read = 0;\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = new FileInputStream(src);\nout = new FileOutputStream(dest);\nwhile (true) {\nread = in.read(buffer);\nif (read == -1) break;\nout.write(buffer, 0, read);\n}\n} finally {\nif (in != null) try {\nin.close();\n} finally {\nif (out != null) out.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 142
                },
                {
                        "id": "pretrain_java_data_11544412",
                        "content": "<filename>references/bcb_chosen_clones/selected#1370199#22#55.java\npublic static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\nif (dest.exists()) {\nif (force) {\ndest.delete();\n} else {\nthrow new IOException(\"Cannot overwrite existing file: \" + dest.getName());\n}\n}\nbyte[] buffer = new byte[bufSize];\nint read = 0;\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = new FileInputStream(src);\nout = new FileOutputStream(dest);\nwhile (true) {\nread = in.read(buffer);\nif (read == -1) {\nbreak;\n}\nout.write(buffer, 0, read);\n}\n} finally {\nif (in != null) {\ntry {\nin.close();\n} finally {\nif (out != null) {\nout.close();\n}\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1370199#22#55.java",
                        "__cluster__": 142
                },
                {
                        "real_dup": 3
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_5148212",
                        "content": "public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\nlogger.info(\"copyFile(File src=\" + src + \", File dest=\" + dest + \", int bufSize=\" + bufSize + \", boolean force=\" + force + \") - start\");\nFile f = new File(Configuration.getArchiveDir());\nif (!f.exists()) {\nf.mkdir();\n}\nif (dest.exists()) {\nif (force) {\ndest.delete();\n} else {\nthrow new IOException(\"Cannot overwrite existing file: \" + dest);\n}\n}\nbyte[] buffer = new byte[bufSize];\nint read = 0;\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = new FileInputStream(src);\nout = new FileOutputStream(dest);\nwhile (true) {\nread = in.read(buffer);\nif (read == -1) {\nbreak;\n}\nout.write(buffer, 0, read);\n}\n} finally {\nif (in != null) {\ntry {\nin.close();\n} finally {\nif (out != null) {\nout.close();\n}\n}\n}\n}\nlogger.debug(\"copyFile(File, File, int, boolean) - end\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 142
                },
                {
                        "id": "pretrain_java_data_11544412",
                        "content": "<filename>references/bcb_chosen_clones/selected#1370199#22#55.java\npublic static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\nif (dest.exists()) {\nif (force) {\ndest.delete();\n} else {\nthrow new IOException(\"Cannot overwrite existing file: \" + dest.getName());\n}\n}\nbyte[] buffer = new byte[bufSize];\nint read = 0;\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = new FileInputStream(src);\nout = new FileOutputStream(dest);\nwhile (true) {\nread = in.read(buffer);\nif (read == -1) {\nbreak;\n}\nout.write(buffer, 0, read);\n}\n} finally {\nif (in != null) {\ntry {\nin.close();\n} finally {\nif (out != null) {\nout.close();\n}\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1370199#22#55.java",
                        "__cluster__": 142
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_11444278",
                        "content": "public static void main(String[] args) {\ntry {\nboolean readExp = Utils.getFlag('l', args);\nfinal boolean writeExp = Utils.getFlag('s', args);\nfinal String expFile = Utils.getOption('f', args);\nif ((readExp || writeExp) && (expFile.length() == 0)) {\nthrow new Exception(\"A filename must be given with the -f option\");\n}\nExperiment exp = null;\nif (readExp) {\nFileInputStream fi = new FileInputStream(expFile);\nObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\nexp = (Experiment) oi.readObject();\noi.close();\n} else {\nexp = new Experiment();\n}\nSystem.err.println(\"Initial Experiment:\\n\" + exp.toString());\nfinal JFrame jf = new JFrame(\"Weka Experiment Setup\");\njf.getContentPane().setLayout(new BorderLayout());\nfinal SetupPanel sp = new SetupPanel();\njf.getContentPane().add(sp, BorderLayout.CENTER);\njf.addWindowListener(new WindowAdapter() {\npublic void windowClosing(WindowEvent e) {\nSystem.err.println(\"\\nFinal Experiment:\\n\" + sp.m_Exp.toString());\nif (writeExp) {\ntry {\nFileOutputStream fo = new FileOutputStream(expFile);\nObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\noo.writeObject(sp.m_Exp);\noo.close();\n} catch (Exception ex) {\nex.printStackTrace();\nSystem.err.println(\"Couldn't write experiment to: \" + expFile + '\\n' + ex.getMessage());\n}\n}\njf.dispose();\nSystem.exit(0);\n}\n});\njf.pack();\njf.setVisible(true);\nSystem.err.println(\"Short nap\");\nThread.currentThread().sleep(3000);\nSystem.err.println(\"Done\");\nsp.setExperiment(exp);\n} catch (Exception ex) {\nex.printStackTrace();\nSystem.err.println(ex.getMessage());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2064323#517#568.java",
                        "__cluster__": 213
                },
                {
                        "id": "test_bigclonebench_data_9449064",
                        "content": "public static void main(String[] args) {\ntry {\nboolean readExp = Utils.getFlag('l', args);\nfinal boolean writeExp = Utils.getFlag('s', args);\nfinal String expFile = Utils.getOption('f', args);\nif ((readExp || writeExp) && (expFile.length() == 0)) {\nthrow new Exception(\"A filename must be given with the -f option\");\n}\nExperiment exp = null;\nif (readExp) {\nFileInputStream fi = new FileInputStream(expFile);\nObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\nexp = (Experiment) oi.readObject();\noi.close();\n} else {\nexp = new Experiment();\n}\nSystem.err.println(\"Initial Experiment:\\n\" + exp.toString());\nfinal JFrame jf = new JFrame(\"Weka Experiment Setup\");\njf.getContentPane().setLayout(new BorderLayout());\nfinal SetupPanel sp = new SetupPanel();\njf.getContentPane().add(sp, BorderLayout.CENTER);\njf.addWindowListener(new WindowAdapter() {\npublic void windowClosing(WindowEvent e) {\nSystem.err.println(\"\\nFinal Experiment:\\n\" + sp.m_Exp.toString());\nif (writeExp) {\ntry {\nFileOutputStream fo = new FileOutputStream(expFile);\nObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\noo.writeObject(sp.m_Exp);\noo.close();\n} catch (Exception ex) {\nex.printStackTrace();\nSystem.err.println(\"Couldn't write experiment to: \" + expFile + '\\n' + ex.getMessage());\n}\n}\njf.dispose();\nSystem.exit(0);\n}\n});\njf.pack();\njf.setVisible(true);\nSystem.err.println(\"Short nap\");\nThread.currentThread().sleep(3000);\nSystem.err.println(\"Done\");\nsp.setExperiment(exp);\n} catch (Exception ex) {\nex.printStackTrace();\nSystem.err.println(ex.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 213
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11591424",
                        "content": "protected File EncodeReturn() throws EncodeFailedException, IOException {\nCryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);\nFile tmpf = getNode().getTempFM().createNewFile(\"encodereturn\", \"download\");\nChannelWriter cw = new ChannelWriter(tmpf);\ncw.putLongFile(DownloadData);\ncw.close();\nFile encdata = c.RawEncode(tmpf, RawKey);\nFile pigdata = PigData.EncodeData(encdata);\nFile pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);\nFileOutputStream fos = new FileOutputStream(pigroute, true);\nFileChannel foc = fos.getChannel();\nFileInputStream fis = new FileInputStream(pigdata);\nFileChannel fic = fis.getChannel();\nfic.transferTo(0, fic.size(), foc);\nfoc.close();\nfic.close();\npigdata.delete();\nReturnRouteFile.delete();\nencdata.delete();\nreturn pigroute;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2169880#79#99.java",
                        "__cluster__": 366
                },
                {
                        "id": "test_bigclonebench_data_14191679",
                        "content": "protected File EncodeReturn() throws EncodeFailedException, IOException {\nCryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);\nFile tmpf = getNode().getTempFM().createNewFile(\"encodereturn\", \"download\");\nChannelWriter cw = new ChannelWriter(tmpf);\ncw.putLongFile(DownloadData);\ncw.close();\nFile encdata = c.RawEncode(tmpf, RawKey);\nFile pigdata = PigData.EncodeData(encdata);\nFile pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);\nFileOutputStream fos = new FileOutputStream(pigroute, true);\nFileChannel foc = fos.getChannel();\nFileInputStream fis = new FileInputStream(pigdata);\nFileChannel fic = fis.getChannel();\nfic.transferTo(0, fic.size(), foc);\nfoc.close();\nfic.close();\npigdata.delete();\nReturnRouteFile.delete();\nencdata.delete();\nreturn pigroute;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 366
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3375724",
                        "content": "public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {\nint numeroDoRegistro = -1;\nScanner in = null;\nStatement stmtLimpezaInicialDestino = conDestino.createStatement();\nString sql = \"TRUNCATE TABLE TMP_TB_EMISSOR_TITULO\";\nstmtLimpezaInicialDestino.executeUpdate(sql);\nsql = \"INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)\";\nOraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\nstmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\nfinal int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;\nfinal int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;\nfinal int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;\nfinal int TAMANHO_MEDIO_POR_REGISTRO = 81;\nlong tamanhoDosArquivos = pArquivoTXT.length();\nint quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;\nString registro;\nString[] campos;\ntry {\nin = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());\nint quantidadeDeRegistrosImportada = 0;\nnumeroDoRegistro = 0;\nString vSIGLA, vNOME;\nBigDecimal vCNPJ;\njava.sql.Date vDATA_CRIACAO;\nfinal int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;\nfinal String SEPARADOR_DE_CAMPOS_DO_REGISTRO = \",\";\nfinal String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = \"\\\"\";\nwhile (in.hasNextLine()) {\n++numeroDoRegistro;\nregistro = in.nextLine();\nstmtDestino.clearParameters();\nregistro = registro.substring(1, registro.length() - 1);\nif (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {\nregistro = registro + \" \";\n}\ncampos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);\nint quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;\nif (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {\nthrow new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);\n}\nvSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];\nvNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];\nString cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];\nif (cnpjTmp != null && cnpjTmp.trim().length() > 0) {\nvCNPJ = new BigDecimal(cnpjTmp);\n} else {\nvCNPJ = null;\n}\nString dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];\nif (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {\nint dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));\nCalendar calendario = Calendar.getInstance();\ncalendario.clear();\ncalendario.set(ano, mes, dia);\nvDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());\n} else {\nvDATA_CRIACAO = null;\n}\nstmtDestino.setStringAtName(\"SIGLA\", vSIGLA);\nstmtDestino.setStringAtName(\"NOME\", vNOME);\nstmtDestino.setBigDecimalAtName(\"CNPJ\", vCNPJ);\nstmtDestino.setDateAtName(\"DATA_CRIACAO\", vDATA_CRIACAO);\nint contagemDasInsercoes = stmtDestino.executeUpdate();\nquantidadeDeRegistrosImportada++;\ndouble percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;\npAndamento.setPercentualCompleto((int) percentualCompleto);\n}\nconDestino.commit();\n} catch (Exception ex) {\nconDestino.rollback();\nProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();\nproblemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();\nproblemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;\nproblemaDetalhado.detalhesSobreOProblema = ex;\nthrow problemaDetalhado;\n} finally {\npAndamento.setPercentualCompleto(100);\nin.close();\nif (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {\nstmtLimpezaInicialDestino.close();\n}\nif (stmtDestino != null && (!stmtDestino.isClosed())) {\nstmtDestino.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 750
                },
                {
                        "id": "pretrain_java_data_11432497",
                        "content": "public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {\nint numeroDoRegistro = -1;\nScanner in = null;\nStatement stmtLimpezaInicialDestino = conDestino.createStatement();\nString sql = \"TRUNCATE TABLE TMP_TB_EMISSOR_TITULO\";\nstmtLimpezaInicialDestino.executeUpdate(sql);\nsql = \"INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)\";\nOraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\nstmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\nfinal int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;\nfinal int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;\nfinal int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;\nfinal int TAMANHO_MEDIO_POR_REGISTRO = 81;\nlong tamanhoDosArquivos = pArquivoTXT.length();\nint quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;\nString registro;\nString[] campos;\ntry {\nin = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());\nint quantidadeDeRegistrosImportada = 0;\nnumeroDoRegistro = 0;\nString vSIGLA, vNOME;\nBigDecimal vCNPJ;\njava.sql.Date vDATA_CRIACAO;\nfinal int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;\nfinal String SEPARADOR_DE_CAMPOS_DO_REGISTRO = \",\";\nfinal String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = \"\\\"\";\nwhile (in.hasNextLine()) {\n++numeroDoRegistro;\nregistro = in.nextLine();\nstmtDestino.clearParameters();\nregistro = registro.substring(1, registro.length() - 1);\nif (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {\nregistro = registro + \" \";\n}\ncampos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);\nint quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;\nif (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {\nthrow new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);\n}\nvSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];\nvNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];\nString cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];\nif (cnpjTmp != null && cnpjTmp.trim().length() > 0) {\nvCNPJ = new BigDecimal(cnpjTmp);\n} else {\nvCNPJ = null;\n}\nString dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];\nif (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {\nint dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));\nCalendar calendario = Calendar.getInstance();\ncalendario.clear();\ncalendario.set(ano, mes, dia);\nvDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());\n} else {\nvDATA_CRIACAO = null;\n}\nstmtDestino.setStringAtName(\"SIGLA\", vSIGLA);\nstmtDestino.setStringAtName(\"NOME\", vNOME);\nstmtDestino.setBigDecimalAtName(\"CNPJ\", vCNPJ);\nstmtDestino.setDateAtName(\"DATA_CRIACAO\", vDATA_CRIACAO);\nint contagemDasInsercoes = stmtDestino.executeUpdate();\nquantidadeDeRegistrosImportada++;\ndouble percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;\npAndamento.setPercentualCompleto((int) percentualCompleto);\n}\nconDestino.commit();\n} catch (Exception ex) {\nconDestino.rollback();\nProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();\nproblemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();\nproblemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;\nproblemaDetalhado.detalhesSobreOProblema = ex;\nthrow problemaDetalhado;\n} finally {\npAndamento.setPercentualCompleto(100);\nin.close();\nif (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {\nstmtLimpezaInicialDestino.close();\n}\nif (stmtDestino != null && (!stmtDestino.isClosed())) {\nstmtDestino.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1834968#1164#1249.java",
                        "__cluster__": 750
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11462851",
                        "content": "public boolean register(Object o) {\nString passwordAsText;\nif (o == null) throw new IllegalArgumentException(\"object cannot be null\");\nif (!(o instanceof User)) {\nthrow new IllegalArgumentException(\"passed argument is not an instance of the User class\");\n}\nUser newUser = (User) o;\npasswordAsText = newUser.getPassword();\nnewUser.setPassword(passwordEncoder.encodePassword(passwordAsText, null));\nnewUser.setRegDate(new Date());\nlogger.debug(\"Setting default Authority {} to new user!\", Authority.DEFAULT_NAME);\nnewUser.getAuthorities().add(super.find(Authority.class, 1));\nlogger.debug(\"Creating hash from email address! using Base64\");\nnewUser.setHash(new String(Base64.encodeBase64(newUser.getEmail().getBytes())));\nlogger.debug(\"Creating phpBB forum User, by calling URL: {}\", forumUrl);\ntry {\nStringBuilder urlString = new StringBuilder(forumUrl);\nurlString.append(\"phpBB.php?action=register\").append(\"&login=\").append(newUser.getLogin()).append(\"&password=\").append(passwordAsText).append(\"&email=\").append(newUser.getEmail());\nsqlInjectionPreventer(urlString.toString());\nlogger.debug(\"Connecting to URL: {}\", urlString.toString());\nURL url = new URL(urlString.toString());\nURLConnection urlCon = url.openConnection();\nBufferedReader in = new BufferedReader(new InputStreamReader(urlCon.getInputStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) newUser.setForumID(Integer.valueOf(inputLine));\nin.close();\n} catch (IOException io) {\nlogger.error(\"Connecting failed! Msg: {}\", io.getMessage());\nthrow new RuntimeException(\"Couldn't conntect to phpBB\");\n} catch (NumberFormatException e) {\nlogger.error(\"phpBB user generation failed! Msg: {}\", e.getMessage());\nthrow new RuntimeException(\"phpBB user generation failed!\");\n}\nentityManager.persist(newUser);\ntry {\nsendConfirmationEmail(newUser);\nreturn true;\n} catch (MailException ex) {\nreturn false;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#104527#91#131.java",
                        "__cluster__": 781
                },
                {
                        "id": "test_bigclonebench_data_9526031",
                        "content": "public boolean register(Object o) {\nString passwordAsText;\nif (o == null) throw new IllegalArgumentException(\"object cannot be null\");\nif (!(o instanceof User)) {\nthrow new IllegalArgumentException(\"passed argument is not an instance of the User class\");\n}\nUser newUser = (User) o;\npasswordAsText = newUser.getPassword();\nnewUser.setPassword(passwordEncoder.encodePassword(passwordAsText, null));\nnewUser.setRegDate(new Date());\nlogger.debug(\"Setting default Authority {} to new user!\", Authority.DEFAULT_NAME);\nnewUser.getAuthorities().add(super.find(Authority.class, 1));\nlogger.debug(\"Creating hash from email address! using Base64\");\nnewUser.setHash(new String(Base64.encodeBase64(newUser.getEmail().getBytes())));\nlogger.debug(\"Creating phpBB forum User, by calling URL: {}\", forumUrl);\ntry {\nStringBuilder urlString = new StringBuilder(forumUrl);\nurlString.append(\"phpBB.php?action=register\").append(\"&login=\").append(newUser.getLogin()).append(\"&password=\").append(passwordAsText).append(\"&email=\").append(newUser.getEmail());\nsqlInjectionPreventer(urlString.toString());\nlogger.debug(\"Connecting to URL: {}\", urlString.toString());\nURL url = new URL(urlString.toString());\nURLConnection urlCon = url.openConnection();\nBufferedReader in = new BufferedReader(new InputStreamReader(urlCon.getInputStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) newUser.setForumID(Integer.valueOf(inputLine));\nin.close();\n} catch (IOException io) {\nlogger.error(\"Connecting failed! Msg: {}\", io.getMessage());\nthrow new RuntimeException(\"Couldn't conntect to phpBB\");\n} catch (NumberFormatException e) {\nlogger.error(\"phpBB user generation failed! Msg: {}\", e.getMessage());\nthrow new RuntimeException(\"phpBB user generation failed!\");\n}\nentityManager.persist(newUser);\ntry {\nsendConfirmationEmail(newUser);\nreturn true;\n} catch (MailException ex) {\nreturn false;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 781
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_1371265",
                        "content": "public void update(String channelPath, String dataField, String fatherDocId) {\nString sqlInitial = \"select uri from t_ip_doc_res where doc_id = '\" + fatherDocId + \"' and type=\" + \" '\" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + \"' \";\nString sqlsortURL = \"update t_ip_doc_res set uri = ? where doc_id = '\" + fatherDocId + \"' \" + \" and type = '\" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + \"' \";\nConnection conn = null;\nResultSet rs = null;\nPreparedStatement ps = null;\ntry {\ndbo = (ERDBOperation) createDBOperation();\nString url = \"\";\nboolean flag = true;\nStringTokenizer st = null;\nconn = dbo.getConnection();\nconn.setAutoCommit(false);\nps = conn.prepareStatement(sqlInitial);\nrs = ps.executeQuery();\nif (rs.next()) url = rs.getString(1);\nif (!url.equals(\"\")) {\nst = new StringTokenizer(url, \",\");\nString sortDocId = \"\";\nwhile (st.hasMoreTokens()) {\nif (flag) {\nsortDocId = \"'\" + st.nextToken() + \"'\";\nflag = false;\n} else {\nsortDocId = sortDocId + \",\" + \"'\" + st.nextToken() + \"'\";\n}\n}\nString sqlsort = \"select id from t_ip_doc where id in (\" + sortDocId + \") order by \" + dataField;\nps = conn.prepareStatement(sqlsort);\nrs = ps.executeQuery();\nString sortURL = \"\";\nboolean sortflag = true;\nwhile (rs.next()) {\nif (sortflag) {\nsortURL = rs.getString(1);\nsortflag = false;\n} else {\nsortURL = sortURL + \",\" + rs.getString(1);\n}\n}\nps = conn.prepareStatement(sqlsortURL);\nps.setString(1, sortURL);\nps.executeUpdate();\n}\nconn.commit();\n} catch (Exception e) {\ne.printStackTrace();\ntry {\nconn.rollback();\n} catch (SQLException e1) {\ne1.printStackTrace();\n}\n} finally {\nclose(rs, null, ps, conn, dbo);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 752
                },
                {
                        "id": "pretrain_java_data_11484260",
                        "content": "<reponame>cragkhit/elasticsearch\npublic void update(String channelPath, String dataField, String fatherDocId) {\nString sqlInitial = \"select uri from t_ip_doc_res where doc_id = '\" + fatherDocId + \"' and type=\" + \" '\" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + \"' \";\nString sqlsortURL = \"update t_ip_doc_res set uri = ? where doc_id = '\" + fatherDocId + \"' \" + \" and type = '\" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + \"' \";\nConnection conn = null;\nResultSet rs = null;\nPreparedStatement ps = null;\ntry {\ndbo = (ERDBOperation) createDBOperation();\nString url = \"\";\nboolean flag = true;\nStringTokenizer st = null;\nconn = dbo.getConnection();\nconn.setAutoCommit(false);\nps = conn.prepareStatement(sqlInitial);\nrs = ps.executeQuery();\nif (rs.next()) url = rs.getString(1);\nif (!url.equals(\"\")) {\nst = new StringTokenizer(url, \",\");\nString sortDocId = \"\";\nwhile (st.hasMoreTokens()) {\nif (flag) {\nsortDocId = \"'\" + st.nextToken() + \"'\";\nflag = false;\n} else {\nsortDocId = sortDocId + \",\" + \"'\" + st.nextToken() + \"'\";\n}\n}\nString sqlsort = \"select id from t_ip_doc where id in (\" + sortDocId + \") order by \" + dataField;\nps = conn.prepareStatement(sqlsort);\nrs = ps.executeQuery();\nString sortURL = \"\";\nboolean sortflag = true;\nwhile (rs.next()) {\nif (sortflag) {\nsortURL = rs.getString(1);\nsortflag = false;\n} else {\nsortURL = sortURL + \",\" + rs.getString(1);\n}\n}\nps = conn.prepareStatement(sqlsortURL);\nps.setString(1, sortURL);\nps.executeUpdate();\n}\nconn.commit();\n} catch (Exception e) {\ne.printStackTrace();\ntry {\nconn.rollback();\n} catch (SQLException e1) {\ne1.printStackTrace();\n}\n} finally {\nclose(rs, null, ps, conn, dbo);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#804491#74#129.java",
                        "__cluster__": 752
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11437808",
                        "content": "<filename>references/bcb_chosen_clones/selected#217795#335#347.java\npublic void descargarArchivo() {\ntry {\nFileInputStream fis = new FileInputStream(resultados.elementAt(materialSelccionado).getRuta());\nFileOutputStream fos = new FileOutputStream(rutaDestinoDescarga);\nFileChannel inChannel = fis.getChannel();\nFileChannel outChannel = fos.getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\nfis.close();\nfos.close();\n} catch (IOException ioe) {\nSystem.err.println(\"Error al Generar Copia del Material\\n\" + ioe);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#217795#335#347.java",
                        "__cluster__": 151
                },
                {
                        "id": "test_bigclonebench_data_13595251",
                        "content": "public void descargarArchivo() {\ntry {\nFileInputStream fis = new FileInputStream(resultados.elementAt(materialSelccionado).getRuta());\nFileOutputStream fos = new FileOutputStream(rutaDestinoDescarga);\nFileChannel inChannel = fis.getChannel();\nFileChannel outChannel = fos.getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\nfis.close();\nfos.close();\n} catch (IOException ioe) {\nSystem.err.println(\"Error al Generar Copia del Material\\n\" + ioe);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 151
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11477007",
                        "content": "<filename>references/bcb_chosen_clones/selected#416491#89#121.java\npublic void delete(Site site) throws Exception {\nDBOperation dbo = null;\nConnection connection = null;\nPreparedStatement preparedStatement = null;\nResultSet resultSet = null;\ntry {\nString chkSql = \"select id from t_ip_doc where channel_path=?\";\ndbo = createDBOperation();\nconnection = dbo.getConnection();\nconnection.setAutoCommit(false);\nString[] selfDefinePath = getSelfDefinePath(site.getPath(), \"1\", connection, preparedStatement, resultSet);\nselfDefineDelete(selfDefinePath, connection, preparedStatement);\npreparedStatement = connection.prepareStatement(chkSql);\npreparedStatement.setString(1, site.getPath());\nresultSet = preparedStatement.executeQuery();\nif (resultSet.next()) {\nthrow new Exception(\"\u027e\ufffd\ufffd\u02a7\ufffd\u0723\ufffd\" + site.getName() + \"\ufffd\ufffd\ufffd\u047e\ufffd\ufffd\ufffd\ufffd\u0135\ufffd\ufffd\ufffd\ufffd\u06a3\ufffd\");\n} else {\nString sqlStr = \"delete from t_ip_site where site_path=?\";\ndbo = createDBOperation();\nconnection = dbo.getConnection();\npreparedStatement = connection.prepareStatement(sqlStr);\npreparedStatement.setString(1, site.getPath());\npreparedStatement.executeUpdate();\n}\nconnection.commit();\n} catch (SQLException ex) {\nconnection.rollback();\nthrow ex;\n} finally {\nclose(resultSet, null, preparedStatement, connection, dbo);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#416491#89#121.java",
                        "__cluster__": 509
                },
                {
                        "id": "test_bigclonebench_data_15737836",
                        "content": "public void delete(Site site) throws Exception {\nDBOperation dbo = null;\nConnection connection = null;\nPreparedStatement preparedStatement = null;\nResultSet resultSet = null;\ntry {\nString chkSql = \"select id from t_ip_doc where channel_path=?\";\ndbo = createDBOperation();\nconnection = dbo.getConnection();\nconnection.setAutoCommit(false);\nString[] selfDefinePath = getSelfDefinePath(site.getPath(), \"1\", connection, preparedStatement, resultSet);\nselfDefineDelete(selfDefinePath, connection, preparedStatement);\npreparedStatement = connection.prepareStatement(chkSql);\npreparedStatement.setString(1, site.getPath());\nresultSet = preparedStatement.executeQuery();\nif (resultSet.next()) {\nthrow new Exception(\"\u027e\ufffd\ufffd\u02a7\ufffd\u0723\ufffd\" + site.getName() + \"\ufffd\ufffd\ufffd\u047e\ufffd\ufffd\ufffd\ufffd\u0135\ufffd\ufffd\ufffd\ufffd\u06a3\ufffd\");\n} else {\nString sqlStr = \"delete from t_ip_site where site_path=?\";\ndbo = createDBOperation();\nconnection = dbo.getConnection();\npreparedStatement = connection.prepareStatement(sqlStr);\npreparedStatement.setString(1, site.getPath());\npreparedStatement.executeUpdate();\n}\nconnection.commit();\n} catch (SQLException ex) {\nconnection.rollback();\nthrow ex;\n} finally {\nclose(resultSet, null, preparedStatement, connection, dbo);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 509
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_13065571",
                        "content": "public boolean update(int idJugador, jugador jugadorModificado) {\nint intResult = 0;\nString sql = \"UPDATE jugador \" + \"SET apellidoPaterno = ?, apellidoMaterno = ?, nombres = ?, fechaNacimiento = ?, \" + \" pais = ?, rating = ?, sexo = ? \" + \" WHERE idJugador = \" + idJugador;\ntry {\nconnection = conexionBD.getConnection();\nconnection.setAutoCommit(false);\nps = connection.prepareStatement(sql);\npopulatePreparedStatement(jugadorModificado);\nintResult = ps.executeUpdate();\nconnection.commit();\n} catch (SQLException ex) {\nex.printStackTrace();\ntry {\nconnection.rollback();\n} catch (SQLException exe) {\nexe.printStackTrace();\n}\n} finally {\nconexionBD.close(ps);\nconexionBD.close(connection);\n}\nreturn (intResult > 0);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#673338#137#159.java",
                        "__cluster__": 227
                },
                {
                        "id": "test_bigclonebench_data_21224967",
                        "content": "public boolean crear() {\nint result = 0;\nString sql = \"insert into jugador\" + \"(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)\" + \"values (?, ?, ?, ?, ?, ?, ?)\";\ntry {\nconnection = conexionBD.getConnection();\nconnection.setAutoCommit(false);\nps = connection.prepareStatement(sql);\npopulatePreparedStatement(elJugador);\nresult = ps.executeUpdate();\nconnection.commit();\n} catch (SQLException ex) {\nex.printStackTrace();\ntry {\nconnection.rollback();\n} catch (SQLException exe) {\nexe.printStackTrace();\n}\n} finally {\nconexionBD.close(ps);\nconexionBD.close(connection);\n}\nreturn (result > 0);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 227
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_13094521",
                        "content": "private void simulate() throws Exception {\nBufferedWriter out = null;\nout = new BufferedWriter(new FileWriter(outFile));\nout.write(\"#Thread\\tReputation\\tAction\\n\");\nout.flush();\nSystem.out.println(\"Simulate...\");\nFile file = new File(trsDemoSimulationfile);\nObtainUserReputation obtainUserReputationRequest = new ObtainUserReputation();\nObtainUserReputationResponse obtainUserReputationResponse;\nRateUser rateUserRequest;\nRateUserResponse rateUserResponse;\nFileInputStream fis = new FileInputStream(file);\nBufferedReader br = new BufferedReader(new InputStreamReader(fis));\nString call = br.readLine();\nwhile (call != null) {\nrateUserRequest = generateRateUserRequest(call);\ntry {\nrateUserResponse = trsPort.rateUser(rateUserRequest);\nSystem.out.println(\"----------------R A T I N G-------------------\");\nSystem.out.println(\"VBE: \" + rateUserRequest.getVbeId());\nSystem.out.println(\"VO: \" + rateUserRequest.getVoId());\nSystem.out.println(\"USER: \" + rateUserRequest.getUserId());\nSystem.out.println(\"SERVICE: \" + rateUserRequest.getServiceId());\nSystem.out.println(\"ACTION: \" + rateUserRequest.getActionId());\nSystem.out.println(\"OUTCOME: \" + rateUserResponse.isOutcome());\nSystem.out.println(\"----------------------------------------------\");\nassertEquals(\"The outcome field of the rateUser should be true: MESSAGE=\" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());\n} catch (RemoteException e) {\nfail(e.getMessage());\n}\nobtainUserReputationRequest.setIoi(null);\nobtainUserReputationRequest.setServiceId(null);\nobtainUserReputationRequest.setUserId(rateUserRequest.getUserId());\nobtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());\nobtainUserReputationRequest.setVoId(null);\ntry {\nobtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);\nSystem.out.println(\"-----------R E P U T A T I O N----------------\");\nSystem.out.println(\"VBE: \" + obtainUserReputationRequest.getVbeId());\nSystem.out.println(\"VO: \" + obtainUserReputationRequest.getVoId());\nSystem.out.println(\"USER: \" + obtainUserReputationRequest.getUserId());\nSystem.out.println(\"SERVICE: \" + obtainUserReputationRequest.getServiceId());\nSystem.out.println(\"IOI: \" + obtainUserReputationRequest.getIoi());\nSystem.out.println(\"REPUTATION: \" + obtainUserReputationResponse.getReputation());\nSystem.out.println(\"----------------------------------------------\");\nassertEquals(\"The outcome field of the obtainUserReputation should be true: MESSAGE=\" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());\nassertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);\n} catch (RemoteException e) {\nfail(e.getMessage());\n}\nobtainUserReputationRequest.setIoi(null);\nobtainUserReputationRequest.setServiceId(null);\nobtainUserReputationRequest.setUserId(rateUserRequest.getUserId());\nobtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());\nobtainUserReputationRequest.setVoId(rateUserRequest.getVoId());\ntry {\nobtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);\nSystem.out.println(\"-----------R E P U T A T I O N----------------\");\nSystem.out.println(\"VBE: \" + obtainUserReputationRequest.getVbeId());\nSystem.out.println(\"VO: \" + obtainUserReputationRequest.getVoId());\nSystem.out.println(\"USER: \" + obtainUserReputationRequest.getUserId());\nSystem.out.println(\"SERVICE: \" + obtainUserReputationRequest.getServiceId());\nSystem.out.println(\"IOI: \" + obtainUserReputationRequest.getIoi());\nSystem.out.println(\"REPUTATION: \" + obtainUserReputationResponse.getReputation());\nSystem.out.println(\"----------------------------------------------\");\nassertEquals(\"The outcome field of the obtainUserReputation should be true: MESSAGE=\" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());\nassertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);\n} catch (RemoteException e) {\nfail(e.getMessage());\n}\ncall = br.readLine();\n}\nfis.close();\nbr.close();\nout.flush();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2399205#74#150.java",
                        "__cluster__": 862
                },
                {
                        "id": "test_bigclonebench_data_9954926",
                        "content": "private void simulate() throws Exception {\nBufferedWriter out = null;\nout = new BufferedWriter(new FileWriter(outFile));\nout.write(\"#Thread\\tReputation\\tAction\\n\");\nout.flush();\nSystem.out.println(\"Simulate...\");\nFile file = new File(trsDemoSimulationfile);\nObtainUserReputation obtainUserReputationRequest = new ObtainUserReputation();\nObtainUserReputationResponse obtainUserReputationResponse;\nRateUser rateUserRequest;\nRateUserResponse rateUserResponse;\nFileInputStream fis = new FileInputStream(file);\nBufferedReader br = new BufferedReader(new InputStreamReader(fis));\nString call = br.readLine();\nwhile (call != null) {\nrateUserRequest = generateRateUserRequest(call);\ntry {\nrateUserResponse = trsPort.rateUser(rateUserRequest);\nSystem.out.println(\"----------------R A T I N G-------------------\");\nSystem.out.println(\"VBE: \" + rateUserRequest.getVbeId());\nSystem.out.println(\"VO: \" + rateUserRequest.getVoId());\nSystem.out.println(\"USER: \" + rateUserRequest.getUserId());\nSystem.out.println(\"SERVICE: \" + rateUserRequest.getServiceId());\nSystem.out.println(\"ACTION: \" + rateUserRequest.getActionId());\nSystem.out.println(\"OUTCOME: \" + rateUserResponse.isOutcome());\nSystem.out.println(\"----------------------------------------------\");\nassertEquals(\"The outcome field of the rateUser should be true: MESSAGE=\" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());\n} catch (RemoteException e) {\nfail(e.getMessage());\n}\nobtainUserReputationRequest.setIoi(null);\nobtainUserReputationRequest.setServiceId(null);\nobtainUserReputationRequest.setUserId(rateUserRequest.getUserId());\nobtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());\nobtainUserReputationRequest.setVoId(null);\ntry {\nobtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);\nSystem.out.println(\"-----------R E P U T A T I O N----------------\");\nSystem.out.println(\"VBE: \" + obtainUserReputationRequest.getVbeId());\nSystem.out.println(\"VO: \" + obtainUserReputationRequest.getVoId());\nSystem.out.println(\"USER: \" + obtainUserReputationRequest.getUserId());\nSystem.out.println(\"SERVICE: \" + obtainUserReputationRequest.getServiceId());\nSystem.out.println(\"IOI: \" + obtainUserReputationRequest.getIoi());\nSystem.out.println(\"REPUTATION: \" + obtainUserReputationResponse.getReputation());\nSystem.out.println(\"----------------------------------------------\");\nassertEquals(\"The outcome field of the obtainUserReputation should be true: MESSAGE=\" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());\nassertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);\n} catch (RemoteException e) {\nfail(e.getMessage());\n}\nobtainUserReputationRequest.setIoi(null);\nobtainUserReputationRequest.setServiceId(null);\nobtainUserReputationRequest.setUserId(rateUserRequest.getUserId());\nobtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());\nobtainUserReputationRequest.setVoId(rateUserRequest.getVoId());\ntry {\nobtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);\nSystem.out.println(\"-----------R E P U T A T I O N----------------\");\nSystem.out.println(\"VBE: \" + obtainUserReputationRequest.getVbeId());\nSystem.out.println(\"VO: \" + obtainUserReputationRequest.getVoId());\nSystem.out.println(\"USER: \" + obtainUserReputationRequest.getUserId());\nSystem.out.println(\"SERVICE: \" + obtainUserReputationRequest.getServiceId());\nSystem.out.println(\"IOI: \" + obtainUserReputationRequest.getIoi());\nSystem.out.println(\"REPUTATION: \" + obtainUserReputationResponse.getReputation());\nSystem.out.println(\"----------------------------------------------\");\nassertEquals(\"The outcome field of the obtainUserReputation should be true: MESSAGE=\" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());\nassertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);\n} catch (RemoteException e) {\nfail(e.getMessage());\n}\ncall = br.readLine();\n}\nfis.close();\nbr.close();\nout.flush();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 862
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_16798376",
                        "content": "@Override\npublic void run() {\ntry {\nFTPClient ftp = new FTPClient();\ntry {\nftp.connect(\"localhost\", 21);\nftp.login(\"ftpuser\", \"ftpuser123\");\nSystem.out.println(\"Current: \" + ftp.printWorkingDirectory());\nSystem.out.println(\"Dir status: \" + ftp.makeDirectory(DIR));\nftp.changeWorkingDirectory(DIR);\nSystem.out.println(\"File status: \" + ftp.storeFile(FILE_PREFIX + this.getName(), getByteInputStream()));\n} finally {\nftp.disconnect();\n}\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 189
                },
                {
                        "id": "pretrain_java_data_14682877",
                        "content": "@Override\npublic void run() {\ntry {\nFTPClient ftp = new FTPClient();\ntry {\nftp.connect(\"localhost\", 21);\nftp.login(\"ftpuser\", \"ftpuser123\");\nSystem.out.println(\"Current: \" + ftp.printWorkingDirectory());\nSystem.out.println(\"Dir status: \" + ftp.makeDirectory(DIR));\nftp.changeWorkingDirectory(DIR);\nSystem.out.println(\"File status: \" + ftp.storeFile(FILE_PREFIX + this.getName(), getByteInputStream()));\n} finally {\nftp.disconnect();\n}\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1041599#51#68.java",
                        "__cluster__": 189
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_451545",
                        "content": "<filename>references/bcb_chosen_clones/selected#703176#283#306.java\npublic static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\nif (part.getBody() != null) {\nlong attachmentId = localAttachment.mId;\nInputStream in = part.getBody().getInputStream();\nFile saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\nif (!saveIn.exists()) {\nsaveIn.mkdirs();\n}\nFile saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\nsaveAs.createNewFile();\nFileOutputStream out = new FileOutputStream(saveAs);\nlong copySize = IOUtils.copy(in, out);\nin.close();\nout.close();\nString contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\nlocalAttachment.mSize = copySize;\nlocalAttachment.mContentUri = contentUriString;\nContentValues cv = new ContentValues();\ncv.put(AttachmentColumns.SIZE, copySize);\ncv.put(AttachmentColumns.CONTENT_URI, contentUriString);\nUri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\ncontext.getContentResolver().update(uri, cv, null, null);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#703176#283#306.java",
                        "__cluster__": 234
                },
                {
                        "id": "test_bigclonebench_data_15799935",
                        "content": "public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\nif (part.getBody() != null) {\nlong attachmentId = localAttachment.mId;\nInputStream in = part.getBody().getInputStream();\nFile saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\nif (!saveIn.exists()) {\nsaveIn.mkdirs();\n}\nFile saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\nsaveAs.createNewFile();\nFileOutputStream out = new FileOutputStream(saveAs);\nlong copySize = IOUtils.copy(in, out);\nin.close();\nout.close();\nString contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\nlocalAttachment.mSize = copySize;\nlocalAttachment.mContentUri = contentUriString;\nContentValues cv = new ContentValues();\ncv.put(AttachmentColumns.SIZE, copySize);\ncv.put(AttachmentColumns.CONTENT_URI, contentUriString);\nUri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\ncontext.getContentResolver().update(uri, cv, null, null);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 234
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_495119",
                        "content": "public static String getMessageDigest(String[] inputs) {\nif (inputs.length == 0) return null;\ntry {\nMessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\nfor (String input : inputs) sha.update(input.getBytes());\nbyte[] hash = sha.digest();\nString CPass = \"\";\nint h = 0;\nString s = \"\";\nfor (int i = 0; i < 20; i++) {\nh = hash[i];\nif (h < 0) h += 256;\ns = Integer.toHexString(h);\nif (s.length() < 2) CPass = CPass.concat(\"0\");\nCPass = CPass.concat(s);\n}\nCPass = CPass.toUpperCase();\nreturn CPass;\n} catch (NoSuchAlgorithmException e) {\nthrow new IllegalStateException(e.getMessage());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1279859#619#640.java",
                        "__cluster__": 503
                },
                {
                        "id": "test_bigclonebench_data_1097147",
                        "content": "public static String getMessageDigest(String[] inputs) {\nif (inputs.length == 0) return null;\ntry {\nMessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\nfor (String input : inputs) sha.update(input.getBytes());\nbyte[] hash = sha.digest();\nString CPass = \"\";\nint h = 0;\nString s = \"\";\nfor (int i = 0; i < 20; i++) {\nh = hash[i];\nif (h < 0) h += 256;\ns = Integer.toHexString(h);\nif (s.length() < 2) CPass = CPass.concat(\"0\");\nCPass = CPass.concat(s);\n}\nCPass = CPass.toUpperCase();\nreturn CPass;\n} catch (NoSuchAlgorithmException e) {\nthrow new IllegalStateException(e.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 503
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8182932",
                        "content": "public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\nLOG.info(\"Unzipping zip file '\" + file.getAbsolutePath() + \"' to directory '\" + targetDirectory.getAbsolutePath() + \"'.\");\nassert (file.exists() && file.isFile());\nif (targetDirectory.exists() == false) {\nLOG.debug(\"Creating target directory.\");\nif (targetDirectory.mkdirs() == false) {\nthrow new BusinessException(\"Could not create target directory at '\" + targetDirectory.getAbsolutePath() + \"'!\");\n}\n}\nZipInputStream zipin = null;\ntry {\nzipin = new ZipInputStream(new FileInputStream(file));\nZipEntry entry = null;\nwhile ((entry = zipin.getNextEntry()) != null) {\nLOG.debug(\"Unzipping entry '\" + entry.getName() + \"'.\");\nif (entry.isDirectory()) {\nLOG.debug(\"Skipping directory.\");\ncontinue;\n}\nfinal File targetFile = new File(targetDirectory, entry.getName());\nfinal File parentTargetFile = targetFile.getParentFile();\nif (parentTargetFile.exists() == false) {\nLOG.debug(\"Creating directory '\" + parentTargetFile.getAbsolutePath() + \"'.\");\nif (parentTargetFile.mkdirs() == false) {\nthrow new BusinessException(\"Could not create target directory at '\" + parentTargetFile.getAbsolutePath() + \"'!\");\n}\n}\nInputStream input = null;\nFileOutputStream output = null;\ntry {\ninput = zipFile.getInputStream(entry);\nif (targetFile.createNewFile() == false) {\nthrow new BusinessException(\"Could not create target file '\" + targetFile.getAbsolutePath() + \"'!\");\n}\noutput = new FileOutputStream(targetFile);\nint readBytes = 0;\nbyte[] buffer = new byte[BUFFER_SIZE];\nwhile ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\noutput.write(buffer, 0, readBytes);\n}\n} finally {\nFileUtil.closeCloseable(input);\nFileUtil.closeCloseable(output);\n}\n}\n} catch (IOException e) {\nthrow new BusinessException(\"Could not unzip file '\" + file.getAbsolutePath() + \"'!\", e);\n} finally {\nFileUtil.closeCloseable(zipin);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 508
                },
                {
                        "id": "pretrain_java_data_14710556",
                        "content": "public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\nLOG.info(\"Unzipping zip file '\" + file.getAbsolutePath() + \"' to directory '\" + targetDirectory.getAbsolutePath() + \"'.\");\nassert (file.exists() && file.isFile());\nif (targetDirectory.exists() == false) {\nLOG.debug(\"Creating target directory.\");\nif (targetDirectory.mkdirs() == false) {\nthrow new BusinessException(\"Could not create target directory at '\" + targetDirectory.getAbsolutePath() + \"'!\");\n}\n}\nZipInputStream zipin = null;\ntry {\nzipin = new ZipInputStream(new FileInputStream(file));\nZipEntry entry = null;\nwhile ((entry = zipin.getNextEntry()) != null) {\nLOG.debug(\"Unzipping entry '\" + entry.getName() + \"'.\");\nif (entry.isDirectory()) {\nLOG.debug(\"Skipping directory.\");\ncontinue;\n}\nfinal File targetFile = new File(targetDirectory, entry.getName());\nfinal File parentTargetFile = targetFile.getParentFile();\nif (parentTargetFile.exists() == false) {\nLOG.debug(\"Creating directory '\" + parentTargetFile.getAbsolutePath() + \"'.\");\nif (parentTargetFile.mkdirs() == false) {\nthrow new BusinessException(\"Could not create target directory at '\" + parentTargetFile.getAbsolutePath() + \"'!\");\n}\n}\nInputStream input = null;\nFileOutputStream output = null;\ntry {\ninput = zipFile.getInputStream(entry);\nif (targetFile.createNewFile() == false) {\nthrow new BusinessException(\"Could not create target file '\" + targetFile.getAbsolutePath() + \"'!\");\n}\noutput = new FileOutputStream(targetFile);\nint readBytes = 0;\nbyte[] buffer = new byte[BUFFER_SIZE];\nwhile ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\noutput.write(buffer, 0, readBytes);\n}\n} finally {\nFileUtil.closeCloseable(input);\nFileUtil.closeCloseable(output);\n}\n}\n} catch (IOException e) {\nthrow new BusinessException(\"Could not unzip file '\" + file.getAbsolutePath() + \"'!\", e);\n} finally {\nFileUtil.closeCloseable(zipin);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1683509#31#81.java",
                        "__cluster__": 508
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9099457",
                        "content": "public static String hash(String value) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[32];\nmd.update(value.getBytes(\"iso-8859-1\"), 0, value.length());\nmd5hash = md.digest();\nreturn Hex.encodeHexString(md5hash);\n} catch (Exception e) {\ne.printStackTrace();\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 657
                },
                {
                        "id": "pretrain_java_data_432256",
                        "content": "public static String hash(String value) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[32];\nmd.update(value.getBytes(\"iso-8859-1\"), 0, value.length());\nmd5hash = md.digest();\nreturn Hex.encodeHexString(md5hash);\n} catch (Exception e) {\ne.printStackTrace();\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#196445#8#19.java",
                        "__cluster__": 657
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_14780401",
                        "content": "private boolean authenticate(Module module) throws Exception {\nSecureRandom rand = SecureRandom.getInstance(\"SHA1PRNG\");\nrand.setSeed(System.currentTimeMillis());\nbyte[] challenge = new byte[16];\nrand.nextBytes(challenge);\nString b64 = Util.base64(challenge);\nUtil.writeASCII(out, RSYNCD_AUTHREQD + b64 + \"\\n\");\nString reply = Util.readLine(in);\nif (reply.indexOf(\" \") < 0) {\nUtil.writeASCII(out, AT_ERROR + \": bad response\\n\");\nif (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\nsocket.close();\nthrow new IOException(\"bad response\");\n}\nString user = reply.substring(0, reply.indexOf(\" \"));\nString response = reply.substring(reply.indexOf(\" \") + 1);\nif (!module.users.contains(user)) {\nUtil.writeASCII(out, AT_ERROR + \": user \" + user + \" not allowed\\n\");\nif (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\nsocket.close();\nthrow new IOException(\"user \" + user + \" not allowed\");\n}\nLineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\nMessageDigest md4 = MessageDigest.getInstance(\"BrokenMD4\");\nString line;\nwhile ((line = secrets.readLine()) != null) {\nif (line.startsWith(user + \":\")) {\nString passwd = line.substring(line.lastIndexOf(\":\") + 1);\nmd4.update(new byte[4]);\nmd4.update(passwd.getBytes(\"US-ASCII\"));\nmd4.update(b64.getBytes(\"US-ASCII\"));\nString hash = Util.base64(md4.digest());\nif (hash.equals(response)) {\nsecrets.close();\nreturn true;\n} else {\nUtil.writeASCII(out, AT_ERROR + \": auth failed on module \" + module.name + \"\\n\");\nif (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\nsocket.close();\nsecrets.close();\nlogger.error(\"auth failed on module \" + module.name);\nreturn false;\n}\n}\n}\nUtil.writeASCII(out, AT_ERROR + \": auth failed on module \" + module.name + \"\\n\");\nif (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\nsocket.close();\nsecrets.close();\nlogger.error(\"auth failed on module \" + module.name);\nreturn false;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#829957#177#228.java",
                        "__cluster__": 822
                },
                {
                        "id": "test_bigclonebench_data_21152728",
                        "content": "private boolean authenticate(Module module) throws Exception {\nSecureRandom rand = SecureRandom.getInstance(\"SHA1PRNG\");\nrand.setSeed(System.currentTimeMillis());\nbyte[] challenge = new byte[16];\nrand.nextBytes(challenge);\nString b64 = Util.base64(challenge);\nUtil.writeASCII(out, RSYNCD_AUTHREQD + b64 + \"\\n\");\nString reply = Util.readLine(in);\nif (reply.indexOf(\" \") < 0) {\nUtil.writeASCII(out, AT_ERROR + \": bad response\\n\");\nif (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\nsocket.close();\nthrow new IOException(\"bad response\");\n}\nString user = reply.substring(0, reply.indexOf(\" \"));\nString response = reply.substring(reply.indexOf(\" \") + 1);\nif (!module.users.contains(user)) {\nUtil.writeASCII(out, AT_ERROR + \": user \" + user + \" not allowed\\n\");\nif (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\nsocket.close();\nthrow new IOException(\"user \" + user + \" not allowed\");\n}\nLineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\nMessageDigest md4 = MessageDigest.getInstance(\"BrokenMD4\");\nString line;\nwhile ((line = secrets.readLine()) != null) {\nif (line.startsWith(user + \":\")) {\nString passwd = line.substring(line.lastIndexOf(\":\") + 1);\nmd4.update(new byte[4]);\nmd4.update(passwd.getBytes(\"US-ASCII\"));\nmd4.update(b64.getBytes(\"US-ASCII\"));\nString hash = Util.base64(md4.digest());\nif (hash.equals(response)) {\nsecrets.close();\nreturn true;\n} else {\nUtil.writeASCII(out, AT_ERROR + \": auth failed on module \" + module.name + \"\\n\");\nif (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\nsocket.close();\nsecrets.close();\nlogger.error(\"auth failed on module \" + module.name);\nreturn false;\n}\n}\n}\nUtil.writeASCII(out, AT_ERROR + \": auth failed on module \" + module.name + \"\\n\");\nif (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\nsocket.close();\nsecrets.close();\nlogger.error(\"auth failed on module \" + module.name);\nreturn false;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 822
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11840277",
                        "content": "protected static void clearTables() throws SQLException {\nConnection conn = null;\nStatement stmt = null;\ntry {\nconn = FidoDataSource.getConnection();\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nClearData.clearTables(stmt);\nstmt.executeUpdate(\"delete from Objects\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (1, 'Money value')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (2, 'Date')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (3, 'Unix path')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (4, 'Dos path')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (5, 'Time')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (6, 'IP address')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (7, 'Internet hostname')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (8, 'Number')\");\nconn.commit();\n} catch (SQLException e) {\nif (conn != null) conn.rollback();\nthrow e;\n} finally {\nif (stmt != null) stmt.close();\nif (conn != null) conn.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 852
                },
                {
                        "id": "pretrain_java_data_458006",
                        "content": "protected static void clearTables() throws SQLException {\nConnection conn = null;\nStatement stmt = null;\ntry {\nconn = FidoDataSource.getConnection();\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nClearData.clearTables(stmt);\nstmt.executeUpdate(\"delete from Objects\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (1, 'Money value')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (2, 'Date')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (3, 'Unix path')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (4, 'Dos path')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (5, 'Time')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (6, 'IP address')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (7, 'Internet hostname')\");\nstmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (8, 'Number')\");\nconn.commit();\n} catch (SQLException e) {\nif (conn != null) conn.rollback();\nthrow e;\n} finally {\nif (stmt != null) stmt.close();\nif (conn != null) conn.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2072710#15#40.java",
                        "__cluster__": 852
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13981689",
                        "content": "public static String md5Hash(String src) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(src.getBytes());\nreturn bytesArrayToHexString(md.digest());\n} catch (Exception e) {\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 41
                },
                {
                        "id": "pretrain_java_data_14794298",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic static String md5Hash(String src) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(src.getBytes());\nreturn bytesArrayToHexString(md.digest());\n} catch (Exception e) {\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1612181#33#41.java",
                        "__cluster__": 41
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2047845",
                        "content": "<gh_stars>10-100\nprivate int[] sortRows(int[] rows) {\nfor (int i = 0; i < rows.length; i++) {\nfor (int j = 0; j < rows.length - 1; j++) {\nif (rows[j] > rows[j + 1]) {\nint temp = rows[j];\nrows[j] = rows[j + 1];\nrows[j + 1] = temp;\n}\n}\n}\nreturn rows;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1575844#803#814.java",
                        "__cluster__": 470
                },
                {
                        "id": "test_bigclonebench_data_20181656",
                        "content": "private int[] sortRows(int[] rows) {\nfor (int i = 0; i < rows.length; i++) {\nfor (int j = 0; j < rows.length - 1; j++) {\nif (rows[j] > rows[j + 1]) {\nint temp = rows[j];\nrows[j] = rows[j + 1];\nrows[j + 1] = temp;\n}\n}\n}\nreturn rows;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 470
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2004085",
                        "content": "@Override\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\nString path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\nFile file = new File(path);\nif (file.exists()) {\nFileInputStream in = new FileInputStream(file);\nIOUtils.copyLarge(in, response.getOutputStream());\nin.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#997571#15#24.java",
                        "__cluster__": 717
                },
                {
                        "id": "test_bigclonebench_data_7087108",
                        "content": "@Override\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\nString path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\nFile file = new File(path);\nif (file.exists()) {\nFileInputStream in = new FileInputStream(file);\nIOUtils.copyLarge(in, response.getOutputStream());\nin.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 717
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_19109981",
                        "content": "private void startScript(wabclient.Attributes prop) throws SAXException {\ndialog.beginScript();\nString url = prop.getValue(\"src\");\nif (url.length() > 0) {\ntry {\nBufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\nString buffer;\nwhile (true) {\nbuffer = r.readLine();\nif (buffer == null) break;\ndialog.script += buffer + \"\\n\";\n}\nr.close();\ndialog.endScript();\n} catch (IOException ioe) {\nSystem.err.println(\"[IOError] \" + ioe.getMessage());\nSystem.exit(0);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 749
                },
                {
                        "id": "pretrain_java_data_588956",
                        "content": "private void startScript(wabclient.Attributes prop) throws SAXException {\ndialog.beginScript();\nString url = prop.getValue(\"src\");\nif (url.length() > 0) {\ntry {\nBufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\nString buffer;\nwhile (true) {\nbuffer = r.readLine();\nif (buffer == null) break;\ndialog.script += buffer + \"\\n\";\n}\nr.close();\ndialog.endScript();\n} catch (IOException ioe) {\nSystem.err.println(\"[IOError] \" + ioe.getMessage());\nSystem.exit(0);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2385892#501#520.java",
                        "__cluster__": 749
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_513391",
                        "content": "public void handle() {\nFileChannel srcChannel, destChannel;\nString destOutFile = databaseName + \".script.\" + System.currentTimeMillis();\nString destOutFileCompressed = databaseName + \".script.\" + System.currentTimeMillis() + \".gz\";\nif (rotateDest != null) {\n(new File(rotateDest)).mkdirs();\nif (destOutFile.indexOf(\"/\") != -1) {\ndestOutFile = rotateDest + \"/\" + destOutFile.substring(destOutFile.lastIndexOf(\"/\") + 1);\n}\nif (destOutFileCompressed.indexOf(\"/\") != -1) {\ndestOutFileCompressed = rotateDest + \"/\" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(\"/\") + 1);\n}\n}\nif (rotateCompress) {\ntry {\nGZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\nFileInputStream in = new FileInputStream(databaseName + \".script\");\nbyte buf[] = new byte[1024];\nint len;\nwhile ((len = in.read(buf)) > 0) {\nout.write(buf, 0, len);\n}\nin.close();\nout.finish();\nout.close();\nbuf = null;\nin = null;\nout = null;\nDebug.debug(\"Rotated database file '\" + databaseName + \".script' to '\" + destOutFileCompressed + \"'\");\n} catch (Exception e) {\nDebug.debug(\"Unable to rotate database file '\" + databaseName + \".script': \" + e);\n}\n} else {\ntry {\nsrcChannel = new FileInputStream(databaseName + \".script\").getChannel();\n} catch (IOException e) {\nDebug.debug(\"Unable to read file '\" + databaseName + \".script' for database rotation.\");\nreturn;\n}\ntry {\ndestChannel = new FileOutputStream(destOutFile).getChannel();\n} catch (IOException e) {\nDebug.debug(\"Unable to rotate file to '\" + destOutFile + \"': \" + e.getMessage());\nreturn;\n}\ntry {\ndestChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndestChannel.close();\nsrcChannel = null;\ndestChannel = null;\n} catch (IOException e) {\nDebug.debug(\"Unable to copy data for file rotation: \" + e.getMessage());\nreturn;\n}\nDebug.debug(\"Rotated database file '\" + databaseName + \".script' to '\" + destOutFile + \"'\");\n}\nif (rotateDest != null) {\nlong comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\nlong currentTime = System.currentTimeMillis();\nFile fileList[] = (new File(rotateDest)).listFiles();\nDateFormat format1 = new SimpleDateFormat(\"yyyy-MM-dd\");\njava.util.Date date = new java.util.Date(currentTime);\nString archiveFile = format1.format(date).toString() + \".zip\";\nif (rotateArchive != null) {\narchiveFile = rotateArchive + \"/\" + archiveFile;\n(new File(rotateArchive)).mkdirs();\n}\nArchive archive = new Archive(archiveFile);\nfor (int i = 0; i < fileList.length; i++) {\nString currentFilename = fileList[i].getName();\nlong timeDifference = (currentTime - fileList[i].lastModified());\nif ((rotateCompress && currentFilename.endsWith(\".gz\")) || (!rotateCompress && currentFilename.indexOf(\".script.\") != -1)) {\nif (rotateDest != null) {\ncurrentFilename = rotateDest + \"/\" + currentFilename;\n}\nif (timeDifference > comparisonTime) {\narchive.addFile(fileList[i].getName(), currentFilename);\nfileList[i].delete();\n}\n}\n}\narchive = null;\nfileList = null;\nformat1 = null;\ndate = null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1984812#112#199.java",
                        "__cluster__": 614
                },
                {
                        "id": "test_bigclonebench_data_23611770",
                        "content": "public void handle() {\nFileChannel srcChannel, destChannel;\nString destOutFile = logFile + \".\" + System.currentTimeMillis();\nString destOutFileCompressed = logFile + \".\" + System.currentTimeMillis() + \".gz\";\nif (rotateDest != null) {\n(new File(rotateDest)).mkdirs();\nif (destOutFile.indexOf(\"/\") != -1) {\ndestOutFile = rotateDest + \"/\" + destOutFile.substring(destOutFile.lastIndexOf(\"/\") + 1);\n}\nif (destOutFileCompressed.indexOf(\"/\") != -1) {\ndestOutFileCompressed = rotateDest + \"/\" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(\"/\") + 1);\n}\n}\nif (rotateCompress) {\ntry {\nGZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\nFileInputStream in = new FileInputStream(logFile);\nbyte buf[] = new byte[1024];\nint len;\nwhile ((len = in.read(buf)) > 0) {\nout.write(buf, 0, len);\n}\nin.close();\nout.finish();\nout.close();\nbuf = null;\nin = null;\nout = null;\nDebug.debug(\"Rotated log file '\" + logFile + \"' to '\" + destOutFileCompressed + \"'\");\n} catch (Exception e) {\nDebug.debug(\"Unable to rotate log file '\" + logFile + \"': \" + e);\n}\n} else {\ntry {\nsrcChannel = new FileInputStream(logFile).getChannel();\n} catch (IOException e) {\nDebug.debug(\"Unable to read log file '\" + logFile + \"': \" + e.getMessage());\nreturn;\n}\ntry {\ndestChannel = new FileOutputStream(destOutFile).getChannel();\n} catch (IOException e) {\nDebug.debug(\"Unable to rotate log file to '\" + destOutFile + \"': \" + e.getMessage());\nreturn;\n}\ntry {\ndestChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndestChannel.close();\nsrcChannel = null;\ndestChannel = null;\n} catch (IOException e) {\nDebug.debug(\"Unable to copy data for file rotation: \" + e.getMessage());\nreturn;\n}\nDebug.debug(\"Rotated log file '\" + logFile + \"' to '\" + destOutFile + \"'\");\n}\nif (rotateDelete && isFile) {\ntry {\nps.close();\n} catch (Exception e) {\n}\nisFile = false;\nps = null;\n(new File(logFile)).delete();\nreconfigureDebug();\n}\nif (rotateDest != null) {\nlong comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\nlong currentTime = System.currentTimeMillis();\nFile fileList[] = (new File(rotateDest)).listFiles();\nDateFormat format1 = new SimpleDateFormat(\"yyyy-MM-dd\");\njava.util.Date date = new java.util.Date(currentTime);\nString archiveFile = format1.format(date).toString() + \".zip\";\nif (rotateArchive != null) {\narchiveFile = rotateArchive + \"/\" + archiveFile;\n(new File(rotateArchive)).mkdirs();\n}\nArchive archive = new Archive(archiveFile);\nfor (int i = 0; i < fileList.length; i++) {\nString currentFilename = fileList[i].getName();\nlong timeDifference = (currentTime - fileList[i].lastModified());\nif ((rotateCompress && currentFilename.endsWith(\".gz\")) || (!rotateCompress && currentFilename.indexOf(logFile + \".\") != -1)) {\nif (rotateDest != null) {\ncurrentFilename = rotateDest + \"/\" + currentFilename;\n}\nif (timeDifference > comparisonTime) {\narchive.addFile(fileList[i].getName(), currentFilename);\nfileList[i].delete();\n}\n}\n}\narchive = null;\nfileList = null;\nformat1 = null;\ndate = null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 614
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_1188100",
                        "content": "public void test() throws Exception {\nStorageStringWriter s = new StorageStringWriter(2048, \"UTF-8\");\ns.addText(\"Test\");\ntry {\ns.getOutputStream();\nfail(\"Should throw IOException as method not supported.\");\n} catch (IOException e) {\n}\ns.getWriter().write(\"ing is important\");\ns.close(ResponseStateOk.getInstance());\nassertEquals(\"Testing is important\", s.getText());\nInputStream input = s.getInputStream();\nStringWriter writer = new StringWriter();\nIOUtils.copy(input, writer, \"UTF-8\");\nassertEquals(\"Testing is important\", writer.toString());\ntry {\ns.getWriter();\nfail(\"Should throw IOException as storage is closed.\");\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 243
                },
                {
                        "id": "pretrain_java_data_520249",
                        "content": "public void test() throws Exception {\nStorageString s = new StorageString(\"UTF-8\");\ns.addText(\"Test\");\ntry {\ns.getOutputStream();\nfail(\"Should throw IOException as method not supported.\");\n} catch (IOException e) {\n}\ntry {\ns.getWriter();\nfail(\"Should throw IOException as method not supported.\");\n} catch (IOException e) {\n}\ns.addText(\"ing is important\");\ns.close(ResponseStateOk.getInstance());\nassertEquals(\"Testing is important\", s.getText());\nInputStream input = s.getInputStream();\nStringWriter writer = new StringWriter();\nIOUtils.copy(input, writer, \"UTF-8\");\nassertEquals(\"Testing is important\", writer.toString());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#579578#12#32.java",
                        "__cluster__": 243
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_16453325",
                        "content": "public void testAutoCommit() throws Exception {\nConnection con = getConnectionOverrideProperties(new Properties());\ntry {\nStatement stmt = con.createStatement();\nassertEquals(0, stmt.executeUpdate(\"create table #testAutoCommit (i int)\"));\ncon.setAutoCommit(false);\nassertEquals(1, stmt.executeUpdate(\"insert into #testAutoCommit (i) values (0)\"));\ncon.setAutoCommit(false);\ncon.rollback();\nassertEquals(1, stmt.executeUpdate(\"insert into #testAutoCommit (i) values (1)\"));\ncon.setAutoCommit(true);\ncon.setAutoCommit(false);\ncon.rollback();\ncon.setAutoCommit(true);\nResultSet rs = stmt.executeQuery(\"select i from #testAutoCommit\");\nassertTrue(rs.next());\nassertEquals(1, rs.getInt(1));\nassertFalse(rs.next());\nrs.close();\nstmt.close();\n} finally {\ncon.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1939239#203#226.java",
                        "__cluster__": 116
                },
                {
                        "id": "test_bigclonebench_data_9802073",
                        "content": "public void testAutoCommit() throws Exception {\nConnection con = getConnectionOverrideProperties(new Properties());\ntry {\nStatement stmt = con.createStatement();\nassertEquals(0, stmt.executeUpdate(\"create table #testAutoCommit (i int)\"));\ncon.setAutoCommit(false);\nassertEquals(1, stmt.executeUpdate(\"insert into #testAutoCommit (i) values (0)\"));\ncon.setAutoCommit(false);\ncon.rollback();\nassertEquals(1, stmt.executeUpdate(\"insert into #testAutoCommit (i) values (1)\"));\ncon.setAutoCommit(true);\ncon.setAutoCommit(false);\ncon.rollback();\ncon.setAutoCommit(true);\nResultSet rs = stmt.executeQuery(\"select i from #testAutoCommit\");\nassertTrue(rs.next());\nassertEquals(1, rs.getInt(1));\nassertFalse(rs.next());\nrs.close();\nstmt.close();\n} finally {\ncon.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 116
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_16541388",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\nprivate Long getNextPkValueForEntityIncreaseBy(String entityName, int count, int increasePkBy) {\nif (increasePkBy < 1) increasePkBy = 1;\nString where = \"where eoentity_name = '\" + entityName + \"'\";\nif (false) {\nEOEditingContext ec = ERXEC.newEditingContext();\nec.lock();\ntry {\nEODatabaseContext dbc = ERXEOAccessUtilities.databaseContextForEntityNamed((EOObjectStoreCoordinator) ec.rootObjectStore(), entityName);\ndbc.lock();\ntry {\nEOEntity entity = ERXEOAccessUtilities.entityNamed(ec, entityName);\nEOAdaptorChannel channel = (EOAdaptorChannel) dbc.adaptorContext().channels().lastObject();\nNSArray result = channel.primaryKeysForNewRowsWithEntity(increasePkBy, entity);\nreturn (Long) ((NSDictionary) result.lastObject()).allValues().lastObject();\n} finally {\ndbc.unlock();\n}\n} finally {\nec.unlock();\n}\n} else {\nERXJDBCConnectionBroker broker = ERXJDBCConnectionBroker.connectionBrokerForEntityNamed(entityName);\nConnection con = broker.getConnection();\ntry {\ntry {\ncon.setAutoCommit(false);\ncon.setReadOnly(false);\n} catch (SQLException e) {\nlog.error(e, e);\n}\nfor (int tries = 0; tries < count; tries++) {\ntry {\nResultSet resultSet = con.createStatement().executeQuery(\"select pk_value from pk_table \" + where);\ncon.commit();\nboolean hasNext = resultSet.next();\nlong pk = 1;\nif (hasNext) {\npk = resultSet.getLong(\"pk_value\");\ncon.createStatement().executeUpdate(\"update pk_table set pk_value = \" + (pk + increasePkBy) + \" \" + where);\n} else {\npk = maxIdFromTable(entityName);\ncon.createStatement().executeUpdate(\"insert into pk_table (eoentity_name, pk_value) values ('\" + entityName + \"', \" + (pk + increasePkBy) + \")\");\n}\ncon.commit();\nreturn new Long(pk);\n} catch (SQLException ex) {\nString s = ex.getMessage().toLowerCase();\nboolean creationError = (s.indexOf(\"error code 116\") != -1);\ncreationError |= (s.indexOf(\"pk_table\") != -1 && s.indexOf(\"does not exist\") != -1);\ncreationError |= s.indexOf(\"ora-00942\") != -1;\nif (creationError) {\ntry {\ncon.rollback();\nlog.info(\"creating pk table\");\ncon.createStatement().executeUpdate(\"create table pk_table (eoentity_name varchar(100) not null, pk_value integer)\");\ncon.createStatement().executeUpdate(\"alter table pk_table add primary key (eoentity_name)\");\ncon.commit();\n} catch (SQLException ee) {\nthrow new NSForwardException(ee, \"could not create pk table\");\n}\n} else {\nthrow new NSForwardException(ex, \"Error fetching PK\");\n}\n}\n}\n} finally {\nbroker.freeConnection(con);\n}\n}\nthrow new IllegalStateException(\"Couldn't get PK\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2058103#203#273.java",
                        "__cluster__": 446
                },
                {
                        "id": "test_bigclonebench_data_20685385",
                        "content": "private Long getNextPkValueForEntityIncreaseBy(String entityName, int count, int increasePkBy) {\nif (increasePkBy < 1) increasePkBy = 1;\nString where = \"where eoentity_name = '\" + entityName + \"'\";\nif (false) {\nEOEditingContext ec = ERXEC.newEditingContext();\nec.lock();\ntry {\nEODatabaseContext dbc = ERXEOAccessUtilities.databaseContextForEntityNamed((EOObjectStoreCoordinator) ec.rootObjectStore(), entityName);\ndbc.lock();\ntry {\nEOEntity entity = ERXEOAccessUtilities.entityNamed(ec, entityName);\nEOAdaptorChannel channel = (EOAdaptorChannel) dbc.adaptorContext().channels().lastObject();\nNSArray result = channel.primaryKeysForNewRowsWithEntity(increasePkBy, entity);\nreturn (Long) ((NSDictionary) result.lastObject()).allValues().lastObject();\n} finally {\ndbc.unlock();\n}\n} finally {\nec.unlock();\n}\n} else {\nERXJDBCConnectionBroker broker = ERXJDBCConnectionBroker.connectionBrokerForEntityNamed(entityName);\nConnection con = broker.getConnection();\ntry {\ntry {\ncon.setAutoCommit(false);\ncon.setReadOnly(false);\n} catch (SQLException e) {\nlog.error(e, e);\n}\nfor (int tries = 0; tries < count; tries++) {\ntry {\nResultSet resultSet = con.createStatement().executeQuery(\"select pk_value from pk_table \" + where);\ncon.commit();\nboolean hasNext = resultSet.next();\nlong pk = 1;\nif (hasNext) {\npk = resultSet.getLong(\"pk_value\");\ncon.createStatement().executeUpdate(\"update pk_table set pk_value = \" + (pk + increasePkBy) + \" \" + where);\n} else {\npk = maxIdFromTable(entityName);\ncon.createStatement().executeUpdate(\"insert into pk_table (eoentity_name, pk_value) values ('\" + entityName + \"', \" + (pk + increasePkBy) + \")\");\n}\ncon.commit();\nreturn new Long(pk);\n} catch (SQLException ex) {\nString s = ex.getMessage().toLowerCase();\nboolean creationError = (s.indexOf(\"error code 116\") != -1);\ncreationError |= (s.indexOf(\"pk_table\") != -1 && s.indexOf(\"does not exist\") != -1);\ncreationError |= s.indexOf(\"ora-00942\") != -1;\nif (creationError) {\ntry {\ncon.rollback();\nlog.info(\"creating pk table\");\ncon.createStatement().executeUpdate(\"create table pk_table (eoentity_name varchar(100) not null, pk_value integer)\");\ncon.createStatement().executeUpdate(\"alter table pk_table add primary key (eoentity_name)\");\ncon.commit();\n} catch (SQLException ee) {\nthrow new NSForwardException(ee, \"could not create pk table\");\n}\n} else {\nthrow new NSForwardException(ex, \"Error fetching PK\");\n}\n}\n}\n} finally {\nbroker.freeConnection(con);\n}\n}\nthrow new IllegalStateException(\"Couldn't get PK\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 446
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_15905041",
                        "content": "public void createPartControl(Composite parent) {\nviewer = new ScrollingGraphicalViewer();\nviewer.setRootEditPart(new ScalableRootEditPart());\nviewer.setEditPartFactory(new BlockEditPartFactory());\nviewer.setEditDomain(new EditDomain());\nviewer.createControl(parent);\nviewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));\nActionRegistry actionRegistry = new ActionRegistry();\ncreateActions(actionRegistry);\nContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);\nviewer.setContextMenu(cmProvider);\nBlock b = new Block();\nb.addChild(new ChartItem());\nviewer.setContents(b);\nSystem.err.println(\"!!! \" + viewer.getContents().getChildren().get(0));\nviewer.select((EditPart) viewer.getContents().getChildren().get(0));\nPaletteRoot root = new PaletteRoot();\nPaletteGroup toolGroup = new PaletteGroup(\"Chart Tools\");\nList toolList = new ArrayList();\nToolEntry tool = new SelectionToolEntry();\ntoolList.add(tool);\nroot.setDefaultEntry(tool);\ntool = new MarqueeToolEntry();\ntoolList.add(tool);\ntoolGroup.addAll(toolList);\nPaletteGroup templateGroup = new PaletteGroup(\"Templates\");\nList templateList = new ArrayList();\nCombinedTemplateCreationEntry entry = new CombinedTemplateCreationEntry(\"Rect\", \"Rect\", new ChartItem(), new SimpleFactory(ChartItem.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\nCombinedTemplateCreationEntry entry1 = new CombinedTemplateCreationEntry(\"Line\", \"Line\", new ChartLine(), new SimpleFactory(ChartLine.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\ntemplateList.add(entry);\ntemplateList.add(entry1);\ntemplateGroup.addAll(templateList);\nList rootList = new ArrayList();\nrootList.add(toolGroup);\nrootList.add(templateGroup);\nroot.addAll(rootList);\nfinal PaletteViewer v = new PaletteViewer();\nv.setPaletteRoot(root);\nv.createControl(parent);\nv.addSelectionChangedListener(new ISelectionChangedListener() {\npublic void selectionChanged(SelectionChangedEvent event) {\nSystem.err.println(\"selectionChanged \" + v.getActiveTool());\n}\n});\ndeleteAction.setSelectionProvider(viewer);\nviewer.getEditDomain().setPaletteViewer(v);\nviewer.addSelectionChangedListener(new ISelectionChangedListener() {\npublic void selectionChanged(SelectionChangedEvent event) {\nSystem.err.println(event.getSelection());\ndeleteAction.update();\n}\n});\nviewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {\npublic void stackChanged(CommandStackEvent event) {\nundoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());\nredoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());\n}\n});\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 587
                },
                {
                        "id": "pretrain_java_data_16544537",
                        "content": "public void createPartControl(Composite parent) {\nviewer = new ScrollingGraphicalViewer();\nviewer.setRootEditPart(new ScalableRootEditPart());\nviewer.setEditPartFactory(new BlockEditPartFactory());\nviewer.setEditDomain(new EditDomain());\nviewer.createControl(parent);\nviewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));\nActionRegistry actionRegistry = new ActionRegistry();\ncreateActions(actionRegistry);\nContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);\nviewer.setContextMenu(cmProvider);\nBlock b = new Block();\nb.addChild(new ChartItem());\nviewer.setContents(b);\nSystem.err.println(\"!!! \" + viewer.getContents().getChildren().get(0));\nviewer.select((EditPart) viewer.getContents().getChildren().get(0));\nPaletteRoot root = new PaletteRoot();\nPaletteGroup toolGroup = new PaletteGroup(\"Chart Tools\");\nList toolList = new ArrayList();\nToolEntry tool = new SelectionToolEntry();\ntoolList.add(tool);\nroot.setDefaultEntry(tool);\ntool = new MarqueeToolEntry();\ntoolList.add(tool);\ntoolGroup.addAll(toolList);\nPaletteGroup templateGroup = new PaletteGroup(\"Templates\");\nList templateList = new ArrayList();\nCombinedTemplateCreationEntry entry = new CombinedTemplateCreationEntry(\"Rect\", \"Rect\", new ChartItem(), new SimpleFactory(ChartItem.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\nCombinedTemplateCreationEntry entry1 = new CombinedTemplateCreationEntry(\"Line\", \"Line\", new ChartLine(), new SimpleFactory(ChartLine.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\ntemplateList.add(entry);\ntemplateList.add(entry1);\ntemplateGroup.addAll(templateList);\nList rootList = new ArrayList();\nrootList.add(toolGroup);\nrootList.add(templateGroup);\nroot.addAll(rootList);\nfinal PaletteViewer v = new PaletteViewer();\nv.setPaletteRoot(root);\nv.createControl(parent);\nv.addSelectionChangedListener(new ISelectionChangedListener() {\npublic void selectionChanged(SelectionChangedEvent event) {\nSystem.err.println(\"selectionChanged \" + v.getActiveTool());\n}\n});\ndeleteAction.setSelectionProvider(viewer);\nviewer.getEditDomain().setPaletteViewer(v);\nviewer.addSelectionChangedListener(new ISelectionChangedListener() {\npublic void selectionChanged(SelectionChangedEvent event) {\nSystem.err.println(event.getSelection());\ndeleteAction.update();\n}\n});\nviewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {\npublic void stackChanged(CommandStackEvent event) {\nundoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());\nredoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());\n}\n});\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2206454#70#131.java",
                        "__cluster__": 587
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2165317",
                        "content": "public static byte[] encrypt(String x) throws Exception {\njava.security.MessageDigest d = null;\nd = java.security.MessageDigest.getInstance(\"SHA-1\");\nd.reset();\nd.update(x.getBytes());\nreturn d.digest();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1665118#553#559.java",
                        "__cluster__": 691
                },
                {
                        "id": "test_bigclonebench_data_16063533",
                        "content": "public static byte[] encrypt(String x) throws Exception {\njava.security.MessageDigest d = null;\nd = java.security.MessageDigest.getInstance(\"SHA-1\");\nd.reset();\nd.update(x.getBytes());\nreturn d.digest();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 691
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13852596",
                        "content": "public void execute() {\ntry {\nif (methods == null) {\nreturn;\n}\nList<Resource> resources = new ArrayList<Resource>();\nfor (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) {\nfinal Resource classFile = i.next();\nif (!classFile.getName().equals(CALLSTACK_FILE)) {\ntry {\nInputStream inputStream = classFile.getInputStream();\nClassReader reader = new ClassReader(inputStream);\nreader.accept(new MethodAnalyzer(), 0);\nresources.add(classFile);\noldSize += classFile.getSize();\n} catch (IllegalStateException e) {\n}\n}\n}\nfor (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) {\nfinal Resource classFile = i.next();\ntry {\nInputStream inputStream = classFile.getInputStream();\nClassReader reader = new ClassReader(inputStream);\nClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\nif (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {\nreader.accept(new MethodInjector(writer), 0);\nbyte[] b = writer.toByteArray();\ninputStream.close();\nOutputStream outputStream = classFile.getOutputStream();\noutputStream.write(b);\noutputStream.close();\ninjectedClasses++;\n}\n} catch (IllegalStateException e) {\n}\nnewSize += classFile.getSize();\n}\nFile classFile = new File(classFiles.getDir(), CALLSTACK_FILE);\nif (!classFile.exists()) {\nthrow new BuildException(\"Missing net.yura.mobile.logging.CallStack class\");\n}\nInputStream inputStream = new FileInputStream(classFile);\nClassReader reader = new ClassReader(inputStream);\nClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\ntry {\nreader.accept(new PushMethodGenerator(writer), 0);\n} finally {\ninputStream.close();\n}\nbyte[] b = writer.toByteArray();\ninputStream.close();\nOutputStream outputStream = new FileOutputStream(classFile);\noutputStream.write(b);\noutputStream.close();\nlog(injectedClasses + \" classes injected\");\nlog((injectedMethods * 100) / Math.max(1, totalMethods) + \"% of methods injected\");\nlog((100 - ((oldSize * 100) / newSize)) + \"% code size increase\");\n} catch (IOException e) {\nlog(e, 0);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 704
                },
                {
                        "id": "pretrain_java_data_2154873",
                        "content": "<filename>references/bcb_chosen_clones/selected#2061440#90#151.java\npublic void execute() {\ntry {\nif (methods == null) {\nreturn;\n}\nList<Resource> resources = new ArrayList<Resource>();\nfor (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) {\nfinal Resource classFile = i.next();\nif (!classFile.getName().equals(CALLSTACK_FILE)) {\ntry {\nInputStream inputStream = classFile.getInputStream();\nClassReader reader = new ClassReader(inputStream);\nreader.accept(new MethodAnalyzer(), 0);\nresources.add(classFile);\noldSize += classFile.getSize();\n} catch (IllegalStateException e) {\n}\n}\n}\nfor (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) {\nfinal Resource classFile = i.next();\ntry {\nInputStream inputStream = classFile.getInputStream();\nClassReader reader = new ClassReader(inputStream);\nClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\nif (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {\nreader.accept(new MethodInjector(writer), 0);\nbyte[] b = writer.toByteArray();\ninputStream.close();\nOutputStream outputStream = classFile.getOutputStream();\noutputStream.write(b);\noutputStream.close();\ninjectedClasses++;\n}\n} catch (IllegalStateException e) {\n}\nnewSize += classFile.getSize();\n}\nFile classFile = new File(classFiles.getDir(), CALLSTACK_FILE);\nif (!classFile.exists()) {\nthrow new BuildException(\"Missing net.yura.mobile.logging.CallStack class\");\n}\nInputStream inputStream = new FileInputStream(classFile);\nClassReader reader = new ClassReader(inputStream);\nClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\ntry {\nreader.accept(new PushMethodGenerator(writer), 0);\n} finally {\ninputStream.close();\n}\nbyte[] b = writer.toByteArray();\ninputStream.close();\nOutputStream outputStream = new FileOutputStream(classFile);\noutputStream.write(b);\noutputStream.close();\nlog(injectedClasses + \" classes injected\");\nlog((injectedMethods * 100) / Math.max(1, totalMethods) + \"% of methods injected\");\nlog((100 - ((oldSize * 100) / newSize)) + \"% code size increase\");\n} catch (IOException e) {\nlog(e, 0);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2061440#90#151.java",
                        "__cluster__": 704
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2142571",
                        "content": "<reponame>cragkhit/elasticsearch\n@Test\npublic void test() throws JDOMException, IOException {\nInputStream is = this.getClass().getResourceAsStream(\"putRegularVehicle.xml\");\nByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\nIOUtils.copy(is, byteArrayOutputStream);\nTrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());\nTrafficSimulationEngine se = new TrafficSimulationEngine();\nse.init(def);\nint linkId = 2;\nint segmentId = 3;\nMap<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\nSet<Integer> segments = new HashSet<Integer>();\nsegments.add(segmentId);\nlinkSegments.put(linkId, segments);\nFrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\nse.setFrameProperties(frameProperties);\nfor (float time = 0; time < 60; time += 0.1f) {\nse.step(0.1f);\nSystem.out.println(\"*** Time: \" + time);\nfor (RoadObject roadObject : se.getDynamicObjects()) {\nVehicle vehicle = (Vehicle) roadObject;\nSystem.out.println(vehicle.getVehicleId() + \":\\tX=\" + vehicle.getPosition() + \"\\tV=\" + vehicle.getSpeed());\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#793443#22#46.java",
                        "__cluster__": 802
                },
                {
                        "id": "test_bigclonebench_data_21125261",
                        "content": "@Test\npublic void test() throws Exception {\nInputStream is = this.getClass().getResourceAsStream(\"originAndDestination.xml\");\nByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\nIOUtils.copy(is, byteArrayOutputStream);\nTrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());\nTrafficSimulationEngine se = new TrafficSimulationEngine();\nse.init(def);\nint linkId = 2;\nint segmentId = 0;\nMap<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\nSet<Integer> segments = new HashSet<Integer>();\nsegments.add(segmentId);\nlinkSegments.put(linkId, segments);\nFrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\nse.setFrameProperties(frameProperties);\nfor (float time = 0; time < 60 * 10; time += 0.1f) {\nse.step(0.1f);\nfor (RoadObject vehicle : se.getDynamicObjects()) {\nSystem.out.println(time + \": X=\" + vehicle.getPosition() + \"\\tV=\" + vehicle.getSpeed());\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 802
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_11484416",
                        "content": "private void moveFile(File orig, File target) throws IOException {\nbyte buffer[] = new byte[1000];\nint bread = 0;\nFileInputStream fis = new FileInputStream(orig);\nFileOutputStream fos = new FileOutputStream(target);\nwhile (bread != -1) {\nbread = fis.read(buffer);\nif (bread != -1) fos.write(buffer, 0, bread);\n}\nfis.close();\nfos.close();\norig.delete();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 192
                },
                {
                        "id": "pretrain_java_data_16511457",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate void moveFile(File orig, File target) throws IOException {\nbyte buffer[] = new byte[1000];\nint bread = 0;\nFileInputStream fis = new FileInputStream(orig);\nFileOutputStream fos = new FileOutputStream(target);\nwhile (bread != -1) {\nbread = fis.read(buffer);\nif (bread != -1) fos.write(buffer, 0, bread);\n}\nfis.close();\nfos.close();\norig.delete();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#758449#47#59.java",
                        "__cluster__": 192
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2182509",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static ArrayList<Principal> importPrincipals(String urlString) {\nArrayList<Principal> results = new ArrayList<Principal>();\ntry {\nURL url = new URL(urlString);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nStringBuffer buff = new StringBuffer();\nString line;\nwhile ((line = in.readLine()) != null) {\nbuff.append(line);\nif (line.equals(\"</Principal>\")) {\nPrincipal principal = ProfileParser.parsePrincipal(buff.toString());\nresults.add(principal);\nbuff = new StringBuffer();\n} else {\nbuff.append(NL);\n}\n}\n} catch (MalformedURLException e) {\n} catch (IOException e) {\n} catch (ParsingException e) {\n}\nreturn results;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#194044#37#59.java",
                        "__cluster__": 845
                },
                {
                        "id": "test_bigclonebench_data_12039034",
                        "content": "public static ArrayList<RoleName> importRoles(String urlString) {\nArrayList<RoleName> results = new ArrayList<RoleName>();\ntry {\nURL url = new URL(urlString);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nStringBuffer buff = new StringBuffer();\nString line;\nwhile ((line = in.readLine()) != null) {\nbuff.append(line);\nif (line.equals(\"</RoleName>\")) {\nRoleName name = ProfileParser.parseRoleName(buff.toString());\nresults.add(name);\nbuff = new StringBuffer();\n} else {\nbuff.append(NL);\n}\n}\n} catch (MalformedURLException e) {\n} catch (IOException e) {\n} catch (ParsingException e) {\n}\nreturn results;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 845
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_16513484",
                        "content": "<reponame>cragkhit/elasticsearch\npublic void testCodingBeyondContentLimitFromFile() throws Exception {\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nWritableByteChannel channel = newChannel(baos);\nHttpParams params = new BasicHttpParams();\nSessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\nHttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\nLengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\nFile tmpFile = File.createTempFile(\"testFile\", \"txt\");\nFileOutputStream fout = new FileOutputStream(tmpFile);\nOutputStreamWriter wrtout = new OutputStreamWriter(fout);\nwrtout.write(\"stuff;\");\nwrtout.write(\"more stuff; and a lot more stuff\");\nwrtout.flush();\nwrtout.close();\nFileChannel fchannel = new FileInputStream(tmpFile).getChannel();\nencoder.transfer(fchannel, 0, 20);\nString s = baos.toString(\"US-ASCII\");\nassertTrue(encoder.isCompleted());\nassertEquals(\"stuff;more stuff\", s);\ntmpFile.delete();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1913416#112#132.java",
                        "__cluster__": 69
                },
                {
                        "id": "test_bigclonebench_data_22135199",
                        "content": "public void testCodingEmptyFile() throws Exception {\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nWritableByteChannel channel = newChannel(baos);\nHttpParams params = new BasicHttpParams();\nSessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\nHttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\nLengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\nencoder.write(wrap(\"stuff;\"));\nFile tmpFile = File.createTempFile(\"testFile\", \"txt\");\nFileOutputStream fout = new FileOutputStream(tmpFile);\nOutputStreamWriter wrtout = new OutputStreamWriter(fout);\nwrtout.flush();\nwrtout.close();\nFileChannel fchannel = new FileInputStream(tmpFile).getChannel();\nencoder.transfer(fchannel, 0, 20);\nencoder.write(wrap(\"more stuff\"));\nString s = baos.toString(\"US-ASCII\");\nassertTrue(encoder.isCompleted());\nassertEquals(\"stuff;more stuff\", s);\ntmpFile.delete();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 69
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_18001377",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#1939352#79#100.java\npublic static String getDigest(String user, String realm, String password, String method, String uri, String nonce, String nc, String cnonce, String qop) {\nString digest1 = user + \":\" + realm + \":\" + password;\nString digest2 = method + \":\" + uri;\ntry {\nMessageDigest digestOne = MessageDigest.getInstance(\"md5\");\ndigestOne.update(digest1.getBytes());\nString hexDigestOne = getHexString(digestOne.digest());\nMessageDigest digestTwo = MessageDigest.getInstance(\"md5\");\ndigestTwo.update(digest2.getBytes());\nString hexDigestTwo = getHexString(digestTwo.digest());\nString digest3 = hexDigestOne + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + hexDigestTwo;\nMessageDigest digestThree = MessageDigest.getInstance(\"md5\");\ndigestThree.update(digest3.getBytes());\nString hexDigestThree = getHexString(digestThree.digest());\nreturn hexDigestThree;\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1939352#79#100.java",
                        "__cluster__": 537
                },
                {
                        "id": "test_bigclonebench_data_15202804",
                        "content": "public static String getDigest(String user, String realm, String password, String method, String uri, String nonce) {\nString digest1 = user + \":\" + realm + \":\" + password;\nString digest2 = method + \":\" + uri;\ntry {\nMessageDigest digestOne = MessageDigest.getInstance(\"md5\");\ndigestOne.update(digest1.getBytes());\nString hexDigestOne = getHexString(digestOne.digest());\nMessageDigest digestTwo = MessageDigest.getInstance(\"md5\");\ndigestTwo.update(digest2.getBytes());\nString hexDigestTwo = getHexString(digestTwo.digest());\nString digest3 = hexDigestOne + \":\" + nonce + \":\" + hexDigestTwo;\nMessageDigest digestThree = MessageDigest.getInstance(\"md5\");\ndigestThree.update(digest3.getBytes());\nString hexDigestThree = getHexString(digestThree.digest());\nreturn hexDigestThree;\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 537
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_18102385",
                        "content": "<gh_stars>10-100\npublic int run(String[] args) throws Exception {\nif (args.length < 2) {\nSystem.err.println(\"Download dir local\");\nreturn 1;\n}\nOutputStream out = new FileOutputStream(args[1]);\nPath srcDir = new Path(args[0]);\nConfiguration conf = new Configuration();\nFileSystem srcFS = FileSystem.get(conf);\nif (!srcFS.getFileStatus(srcDir).isDirectory()) {\nSystem.err.println(args[0] + \" is not a directory.\");\nreturn 1;\n}\ntry {\nFileStatus contents[] = srcFS.listStatus(srcDir);\nfor (int i = 0; i < contents.length; i++) {\nif (contents[i].isFile()) {\nSystem.err.println(contents[i].getPath());\nInputStream in = srcFS.open(contents[i].getPath());\ntry {\nIOUtils.copyBytes(in, out, conf, false);\n} finally {\nin.close();\n}\n}\n}\n} finally {\nout.close();\n}\nreturn 0;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1076982#16#46.java",
                        "__cluster__": 834
                },
                {
                        "id": "test_bigclonebench_data_16825994",
                        "content": "public int run(String[] args) throws Exception {\nif (args.length < 2) {\nSystem.err.println(\"Download dir local\");\nreturn 1;\n}\nOutputStream out = new FileOutputStream(args[1]);\nPath srcDir = new Path(args[0]);\nConfiguration conf = new Configuration();\nFileSystem srcFS = FileSystem.get(conf);\nif (!srcFS.getFileStatus(srcDir).isDirectory()) {\nSystem.err.println(args[0] + \" is not a directory.\");\nreturn 1;\n}\ntry {\nFileStatus contents[] = srcFS.listStatus(srcDir);\nfor (int i = 0; i < contents.length; i++) {\nif (contents[i].isFile()) {\nSystem.err.println(contents[i].getPath());\nInputStream in = srcFS.open(contents[i].getPath());\ntry {\nIOUtils.copyBytes(in, out, conf, false);\n} finally {\nin.close();\n}\n}\n}\n} finally {\nout.close();\n}\nreturn 0;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 834
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_18175213",
                        "content": "<filename>references/bcb_chosen_clones/selected#1284807#29#93.java\n@SuppressWarnings(\"unchecked\")\npublic List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {\nStringBuilder json = new StringBuilder();\nString requestUrl = \"http://api.meetup.com/events.json/?group_urlname=\" + groupIdentifier + \"&key=\" + key;\ntry {\nURL url = new URL(requestUrl.toString());\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\njson.append(inputLine);\n}\nin.close();\n} catch (IOException e) {\nthrow new GtugsException(e);\n}\nList<Event> events = new ArrayList<Event>();\nJSONObject jsonObj = (JSONObject) JSONValue.parse(json.toString());\nJSONArray results = (JSONArray) jsonObj.get(\"results\");\nfor (int i = 0; i < results.size(); i++) {\nJSONObject result = (JSONObject) results.get(i);\nEvent e = new Event();\ne.setAttendeeCount(Integer.parseInt((String) result.get(\"rsvpcount\")));\ne.setCity((String) result.get(\"venue_city\"));\ne.setDescription((String) result.get(\"description\"));\ne.setLatitude(Double.parseDouble((String) result.get(\"venue_lat\")));\ne.setLongitude(Double.parseDouble((String) result.get(\"venue_lon\")));\ne.setName((String) result.get(\"name\"));\nDate myDate = null;\nString time = (String) result.get(\"time\");\ntry {\nmyDate = meetupDateFormat.parse(time);\ne.setStartTime(timeDateFormat.format(myDate));\ne.setEndTime(timeDateFormat.format(myDate));\ne.setStartDate(myDate);\ne.setEndDate(myDate);\nString tz = tzDateFormat.format(myDate);\nif (tz != null && tz.startsWith(\"+\")) {\ntz = tz.substring(1);\n}\ne.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));\n} catch (ParseException ex) {\nex.printStackTrace();\ncontinue;\n}\ne.setState((String) result.get(\"venue_state\"));\nStringBuilder addressBuilder = new StringBuilder();\nif (result.get(\"venue_address1\") != null) {\naddressBuilder.append((String) result.get(\"venue_address1\") + \" \");\n}\nif (result.get(\"venue_address2\") != null) {\naddressBuilder.append((String) result.get(\"venue_address2\") + \" \");\n}\nif (result.get(\"venue_address3\") != null) {\naddressBuilder.append((String) result.get(\"venue_address3\") + \" \");\n}\nif (result.get(\"venue_address4\") != null) {\naddressBuilder.append((String) result.get(\"venue_address4\"));\n}\ne.setStreetAddress(addressBuilder.toString().trim());\ne.setZipCode((String) result.get(\"venue_zip\"));\ne.setUrl((String) result.get(\"event_url\"));\nevents.add(e);\n}\nreturn events;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1284807#29#93.java",
                        "__cluster__": 844
                },
                {
                        "id": "test_bigclonebench_data_11082670",
                        "content": "@SuppressWarnings(\"unchecked\")\npublic List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {\nStringBuilder json = new StringBuilder();\nString requestUrl = \"http://api.meetup.com/events.json/?group_urlname=\" + groupIdentifier + \"&key=\" + key;\ntry {\nURL url = new URL(requestUrl.toString());\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\njson.append(inputLine);\n}\nin.close();\n} catch (IOException e) {\nthrow new GtugsException(e);\n}\nList<Event> events = new ArrayList<Event>();\nJSONObject jsonObj = (JSONObject) JSONValue.parse(json.toString());\nJSONArray results = (JSONArray) jsonObj.get(\"results\");\nfor (int i = 0; i < results.size(); i++) {\nJSONObject result = (JSONObject) results.get(i);\nEvent e = new Event();\ne.setAttendeeCount(Integer.parseInt((String) result.get(\"rsvpcount\")));\ne.setCity((String) result.get(\"venue_city\"));\ne.setDescription((String) result.get(\"description\"));\ne.setLatitude(Double.parseDouble((String) result.get(\"venue_lat\")));\ne.setLongitude(Double.parseDouble((String) result.get(\"venue_lon\")));\ne.setName((String) result.get(\"name\"));\nDate myDate = null;\nString time = (String) result.get(\"time\");\ntry {\nmyDate = meetupDateFormat.parse(time);\ne.setStartTime(timeDateFormat.format(myDate));\ne.setEndTime(timeDateFormat.format(myDate));\ne.setStartDate(myDate);\ne.setEndDate(myDate);\nString tz = tzDateFormat.format(myDate);\nif (tz != null && tz.startsWith(\"+\")) {\ntz = tz.substring(1);\n}\ne.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));\n} catch (ParseException ex) {\nex.printStackTrace();\ncontinue;\n}\ne.setState((String) result.get(\"venue_state\"));\nStringBuilder addressBuilder = new StringBuilder();\nif (result.get(\"venue_address1\") != null) {\naddressBuilder.append((String) result.get(\"venue_address1\") + \" \");\n}\nif (result.get(\"venue_address2\") != null) {\naddressBuilder.append((String) result.get(\"venue_address2\") + \" \");\n}\nif (result.get(\"venue_address3\") != null) {\naddressBuilder.append((String) result.get(\"venue_address3\") + \" \");\n}\nif (result.get(\"venue_address4\") != null) {\naddressBuilder.append((String) result.get(\"venue_address4\"));\n}\ne.setStreetAddress(addressBuilder.toString().trim());\ne.setZipCode((String) result.get(\"venue_zip\"));\ne.setUrl((String) result.get(\"event_url\"));\nevents.add(e);\n}\nreturn events;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 844
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11341711",
                        "content": "public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {\nString[] files;\nfiles = dir.list();\nFile checkdir = new File(destinationdir + System.getProperty(\"file.separator\") + destinationDirEnding);\nif (!checkdir.isDirectory()) {\ncheckdir.mkdir();\n}\n;\nDate date = new Date();\nlong msec = date.getTime();\ncheckdir.setLastModified(msec);\nFile checkFile = new File(checkdir + System.getProperty(\"file.separator\") + \"azureus.config\");\nif (checkFile.exists()) {\ncheckFile.setLastModified(msec);\n}\ntry {\nfor (int i = 0; i < files.length; i++) {\nFile f = new File(dir, files[i]);\nFile g = new File(files[i]);\nif (f.isDirectory()) {\n} else {\nString destinationFile = checkdir + System.getProperty(\"file.separator\") + g;\nString sourceFile = sourcedir + System.getProperty(\"file.separator\") + g;\nFileInputStream infile = new FileInputStream(sourceFile);\nFileOutputStream outfile = new FileOutputStream(destinationFile);\nint c;\nwhile ((c = infile.read()) != -1) outfile.write(c);\ninfile.close();\noutfile.close();\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 902
                },
                {
                        "id": "pretrain_java_data_16588880",
                        "content": "public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {\nString[] files;\nfiles = dir.list();\nFile checkdir = new File(destinationdir + System.getProperty(\"file.separator\") + destinationDirEnding);\nif (!checkdir.isDirectory()) {\ncheckdir.mkdir();\n}\n;\nDate date = new Date();\nlong msec = date.getTime();\ncheckdir.setLastModified(msec);\nFile checkFile = new File(checkdir + System.getProperty(\"file.separator\") + \"azureus.config\");\nif (checkFile.exists()) {\ncheckFile.setLastModified(msec);\n}\ntry {\nfor (int i = 0; i < files.length; i++) {\nFile f = new File(dir, files[i]);\nFile g = new File(files[i]);\nif (f.isDirectory()) {\n} else {\nString destinationFile = checkdir + System.getProperty(\"file.separator\") + g;\nString sourceFile = sourcedir + System.getProperty(\"file.separator\") + g;\nFileInputStream infile = new FileInputStream(sourceFile);\nFileOutputStream outfile = new FileOutputStream(destinationFile);\nint c;\nwhile ((c = infile.read()) != -1) outfile.write(c);\ninfile.close();\noutfile.close();\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#123147#11#45.java",
                        "__cluster__": 902
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_3603800",
                        "content": "public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\nif (contentTransferEncoding != null) {\ncontentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\nif (\"quoted-printable\".equalsIgnoreCase(contentTransferEncoding)) {\nin = new QuotedPrintableInputStream(in);\n} else if (\"base64\".equalsIgnoreCase(contentTransferEncoding)) {\nin = new Base64InputStream(in);\n}\n}\nBinaryTempFileBody tempBody = new BinaryTempFileBody();\nOutputStream out = tempBody.getOutputStream();\nIOUtils.copy(in, out);\nout.close();\nreturn tempBody;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2061952#276#290.java",
                        "__cluster__": 261
                },
                {
                        "id": "test_bigclonebench_data_3430784",
                        "content": "public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\nif (contentTransferEncoding != null) {\ncontentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\nif (\"quoted-printable\".equalsIgnoreCase(contentTransferEncoding)) {\nin = new QuotedPrintableInputStream(in);\n} else if (\"base64\".equalsIgnoreCase(contentTransferEncoding)) {\nin = new Base64InputStream(in);\n}\n}\nBinaryTempFileBody tempBody = new BinaryTempFileBody();\nOutputStream out = tempBody.getOutputStream();\nIOUtils.copy(in, out);\nout.close();\nreturn tempBody;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 261
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6190356",
                        "content": "public static String hashPasswordForOldMD5(String password) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(password.getBytes(\"UTF-8\"));\nbyte messageDigest[] = md.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < messageDigest.length; i++) {\nString hex = Integer.toHexString(0xFF & messageDigest[i]);\nif (hex.length() == 1) {\nhexString.append('0');\n}\nhexString.append(hex);\n}\nreturn hexString.toString();\n} catch (NoSuchAlgorithmException nsae) {\nthrow new IllegalStateException(nsae.getMessage());\n} catch (UnsupportedEncodingException uee) {\nthrow new IllegalStateException(uee.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 380
                },
                {
                        "id": "pretrain_java_data_19686686",
                        "content": "public static String hashPasswordForOldMD5(String password) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(password.getBytes(\"UTF-8\"));\nbyte messageDigest[] = md.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < messageDigest.length; i++) {\nString hex = Integer.toHexString(0xFF & messageDigest[i]);\nif (hex.length() == 1) {\nhexString.append('0');\n}\nhexString.append(hex);\n}\nreturn hexString.toString();\n} catch (NoSuchAlgorithmException nsae) {\nthrow new IllegalStateException(nsae.getMessage());\n} catch (UnsupportedEncodingException uee) {\nthrow new IllegalStateException(uee.getMessage());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2287286#83#102.java",
                        "__cluster__": 380
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3401153",
                        "content": "private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {\nStringBuilder pageHTML = new StringBuilder();\nHttpURLConnection connection = null;\ntry {\nURL url = new URL(pageURL);\nconnection = (HttpURLConnection) url.openConnection();\nconnection.setRequestProperty(\"User-Agent\", \"MSIE 7.0\");\nconnection.connect();\nBufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));\nString line = null;\nwhile ((line = br.readLine()) != null) {\npageHTML.append(line);\npageHTML.append(\"\\r\\n\");\n}\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\nconnection.disconnect();\n}\nif (dirPath != null) {\nFile file = new File(dirPath);\nBufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));\nbufferedWriter.write(pageHTML.toString());\nbufferedWriter.close();\n}\nreturn pageHTML.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 640
                },
                {
                        "id": "pretrain_java_data_19601419",
                        "content": "private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {\nStringBuilder pageHTML = new StringBuilder();\nHttpURLConnection connection = null;\ntry {\nURL url = new URL(pageURL);\nconnection = (HttpURLConnection) url.openConnection();\nconnection.setRequestProperty(\"User-Agent\", \"MSIE 7.0\");\nconnection.connect();\nBufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));\nString line = null;\nwhile ((line = br.readLine()) != null) {\npageHTML.append(line);\npageHTML.append(\"\\r\\n\");\n}\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\nconnection.disconnect();\n}\nif (dirPath != null) {\nFile file = new File(dirPath);\nBufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));\nbufferedWriter.write(pageHTML.toString());\nbufferedWriter.close();\n}\nreturn pageHTML.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1620891#61#87.java",
                        "__cluster__": 640
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3994258",
                        "content": "public boolean connectServer(String server, String user, String password) {\nboolean result = true;\ntry {\nif (user.equals(\"\")) {\nuser = \"anonymous\";\npassword = \"anonymous\";\n}\nthis.server = server;\nthis.user = user;\nthis.password = password;\nftpClient = new FTPClient();\nftpClient.setControlEncoding(encode);\nftpClient.connect(server);\nftpClient.setSoTimeout(1000 * 30);\nftpClient.setDefaultTimeout(1000 * 30);\nftpClient.setConnectTimeout(1000 * 30);\nftpClient.enterLocalPassiveMode();\nftpClient.login(user, password);\nif (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\nftpClient.disconnect();\nreturn false;\n}\nqueFilePath = \"data\\\\\" + this.server + \".que\";\nbufFilePath = \"data\\\\\" + this.server + \".buf\";\nstartGetList();\n} catch (java.net.SocketTimeoutException e1) {\nerrMsg = ftpClient.getReplyString();\nerrCode = ftpClient.getReplyCode();\nresult = false;\nsetArrToFile(dirQueue, queFilePath);\nsetArrToFile(fileList, bufFilePath);\ncn.imgdpu.util.CatException.getMethod().catException(e1, \"\u8fde\u63a5\u8d85\u65f6\");\n} catch (Exception e) {\nerrMsg = ftpClient.getReplyString();\nerrCode = ftpClient.getReplyCode();\nresult = false;\nsetArrToFile(dirQueue, queFilePath);\nsetArrToFile(fileList, bufFilePath);\ncn.imgdpu.util.CatException.getMethod().catException(e, \"\u672a\u77e5\u5f02\u5e38\");\n} finally {\nif (ftpClient.isConnected()) {\ntry {\nftpClient.disconnect();\n} catch (IOException ioe) {\ncn.imgdpu.util.CatException.getMethod().catException(ioe, \"IO\u5f02\u5e38\");\n}\n}\n}\nreturn result;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 848
                },
                {
                        "id": "pretrain_java_data_3621831",
                        "content": "public boolean connectServer(String server, String user, String password) {\nboolean result = true;\ntry {\nif (user.equals(\"\")) {\nuser = \"anonymous\";\npassword = \"<PASSWORD>\";\n}\nthis.server = server;\nthis.user = user;\nthis.password = password;\nftpClient = new FTPClient();\nftpClient.setControlEncoding(encode);\nftpClient.connect(server);\nftpClient.setSoTimeout(1000 * 30);\nftpClient.setDefaultTimeout(1000 * 30);\nftpClient.setConnectTimeout(1000 * 30);\nftpClient.enterLocalPassiveMode();\nftpClient.login(user, password);\nif (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\nftpClient.disconnect();\nreturn false;\n}\nqueFilePath = \"data\\\\\" + this.server + \".que\";\nbufFilePath = \"data\\\\\" + this.server + \".buf\";\nstartGetList();\n} catch (java.net.SocketTimeoutException e1) {\nerrMsg = ftpClient.getReplyString();\nerrCode = ftpClient.getReplyCode();\nresult = false;\nsetArrToFile(dirQueue, queFilePath);\nsetArrToFile(fileList, bufFilePath);\ncn.imgdpu.util.CatException.getMethod().catException(e1, \"\u8fde\u63a5\u8d85\u65f6\");\n} catch (Exception e) {\nerrMsg = ftpClient.getReplyString();\nerrCode = ftpClient.getReplyCode();\nresult = false;\nsetArrToFile(dirQueue, queFilePath);\nsetArrToFile(fileList, bufFilePath);\ncn.imgdpu.util.CatException.getMethod().catException(e, \"\u672a\u77e5\u5f02\u5e38\");\n} finally {\nif (ftpClient.isConnected()) {\ntry {\nftpClient.disconnect();\n} catch (IOException ioe) {\ncn.imgdpu.util.CatException.getMethod().catException(ioe, \"IO\u5f02\u5e38\");\n}\n}\n}\nreturn result;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#247296#162#211.java",
                        "__cluster__": 848
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_19707344",
                        "content": "public void transport(File file) throws TransportException {\nif (file.exists()) {\nif (file.isDirectory()) {\nFile[] files = file.listFiles();\nfor (int i = 0; i < files.length; i++) {\ntransport(file);\n}\n} else if (file.isFile()) {\ntry {\nFileChannel inChannel = new FileInputStream(file).getChannel();\nFileChannel outChannel = new FileOutputStream(getOption(\"destination\")).getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nlog.error(\"File transfer failed\", e);\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#325498#22#39.java",
                        "__cluster__": 445
                },
                {
                        "id": "test_bigclonebench_data_12380475",
                        "content": "public void transport(File file) throws TransportException {\nif (file.exists()) {\nif (file.isDirectory()) {\nFile[] files = file.listFiles();\nfor (int i = 0; i < files.length; i++) {\ntransport(file);\n}\n} else if (file.isFile()) {\ntry {\nFileChannel inChannel = new FileInputStream(file).getChannel();\nFileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nlog.error(\"File transfer failed\", e);\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 445
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_21308543",
                        "content": "private static void copyFile(String src, String target) throws IOException {\nFileChannel ic = new FileInputStream(src).getChannel();\nFileChannel oc = new FileOutputStream(target).getChannel();\nic.transferTo(0, ic.size(), oc);\nic.close();\noc.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 634
                },
                {
                        "id": "pretrain_java_data_19724202",
                        "content": "<filename>references/bcb_chosen_clones/selected#2617201#204#210.java\nprivate static void copyFile(String src, String target) throws IOException {\nFileChannel ic = new FileInputStream(src).getChannel();\nFileChannel oc = new FileOutputStream(target).getChannel();\nic.transferTo(0, ic.size(), oc);\nic.close();\noc.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2617201#204#210.java",
                        "__cluster__": 634
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11049257",
                        "content": "public static String generate(boolean secure, boolean sep) throws UnknownHostException {\nMessageDigest messagedigest;\nStringBuilder stringbuffer = new StringBuilder();\ntry {\nmessagedigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException nosuchalgorithmexception) {\nthrow new RuntimeException(nosuchalgorithmexception);\n}\nStringBuffer stringbuffer2;\nInetAddress inetaddress = InetAddress.getLocalHost();\nlong l = System.currentTimeMillis();\nlong l1 = 0L;\nif (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();\nstringbuffer.append(inetaddress.toString());\nstringbuffer.append(\":\");\nstringbuffer.append(Long.toString(l));\nstringbuffer.append(\":\");\nstringbuffer.append(Long.toString(l1));\nmessagedigest.update(stringbuffer.toString().getBytes());\nbyte abyte0[] = messagedigest.digest();\nStringBuffer stringbuffer1 = new StringBuffer();\nfor (int i = 0; i < abyte0.length; i++) {\nint j = abyte0[i] & 0xff;\nif (j < 16) stringbuffer1.append('0');\nstringbuffer1.append(Integer.toHexString(j));\n}\nString s = stringbuffer1.toString();\nstringbuffer2 = new StringBuffer();\nif (sep) {\nstringbuffer2.append(s.substring(0, 8));\nstringbuffer2.append(\"-\");\nstringbuffer2.append(s.substring(8, 12));\nstringbuffer2.append(\"-\");\nstringbuffer2.append(s.substring(12, 16));\nstringbuffer2.append(\"-\");\nstringbuffer2.append(s.substring(16, 20));\nstringbuffer2.append(\"-\");\nstringbuffer2.append(s.substring(20));\nreturn stringbuffer2.toString();\n} else {\nreturn s;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 56
                },
                {
                        "id": "pretrain_java_data_5220715",
                        "content": "<gh_stars>10-100\npublic static String generate(boolean secure, boolean sep) throws UnknownHostException {\nMessageDigest messagedigest;\nStringBuilder stringbuffer = new StringBuilder();\ntry {\nmessagedigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException nosuchalgorithmexception) {\nthrow new RuntimeException(nosuchalgorithmexception);\n}\nStringBuffer stringbuffer2;\nInetAddress inetaddress = InetAddress.getLocalHost();\nlong l = System.currentTimeMillis();\nlong l1 = 0L;\nif (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();\nstringbuffer.append(inetaddress.toString());\nstringbuffer.append(\":\");\nstringbuffer.append(Long.toString(l));\nstringbuffer.append(\":\");\nstringbuffer.append(Long.toString(l1));\nmessagedigest.update(stringbuffer.toString().getBytes());\nbyte abyte0[] = messagedigest.digest();\nStringBuffer stringbuffer1 = new StringBuffer();\nfor (int i = 0; i < abyte0.length; i++) {\nint j = abyte0[i] & 0xff;\nif (j < 16) stringbuffer1.append('0');\nstringbuffer1.append(Integer.toHexString(j));\n}\nString s = stringbuffer1.toString();\nstringbuffer2 = new StringBuffer();\nif (sep) {\nstringbuffer2.append(s.substring(0, 8));\nstringbuffer2.append(\"-\");\nstringbuffer2.append(s.substring(8, 12));\nstringbuffer2.append(\"-\");\nstringbuffer2.append(s.substring(12, 16));\nstringbuffer2.append(\"-\");\nstringbuffer2.append(s.substring(16, 20));\nstringbuffer2.append(\"-\");\nstringbuffer2.append(s.substring(20));\nreturn stringbuffer2.toString();\n} else {\nreturn s;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2335269#22#64.java",
                        "__cluster__": 56
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_16623181",
                        "content": "public static void main(String[] args) {\nFile srcDir = new File(args[0]);\nFile dstDir = new File(args[1]);\nFile[] srcFiles = srcDir.listFiles();\nfor (File f : srcFiles) {\nif (f.isDirectory()) continue;\ntry {\nFileChannel srcChannel = new FileInputStream(f).getChannel();\nFileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(\"file.separator\") + f.getName()).getChannel();\nByteBuffer buffer = ByteBuffer.allocate(1024);\nint nr = 0;\nsrcChannel.position(nr);\nnr += srcChannel.read(buffer);\nwhile (nr < f.length()) {\nbuffer.flip();\ndstChannel.write(buffer);\nbuffer.clear();\nnr += srcChannel.read(buffer);\n}\nsrcChannel.close();\ndstChannel.close();\n} catch (IOException e) {\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 106
                },
                {
                        "id": "pretrain_java_data_3795211",
                        "content": "public static void main(String[] args) {\nFile srcDir = new File(args[0]);\nFile dstDir = new File(args[1]);\nFile[] srcFiles = srcDir.listFiles();\nfor (File f : srcFiles) {\nif (f.isDirectory()) continue;\ntry {\nFileChannel srcChannel = new FileInputStream(f).getChannel();\nFileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(\"file.separator\") + f.getName()).getChannel();\nByteBuffer buffer = ByteBuffer.allocate(1024);\nint nr = 0;\nsrcChannel.position(nr);\nnr += srcChannel.read(buffer);\nwhile (nr < f.length()) {\nbuffer.flip();\ndstChannel.write(buffer);\nbuffer.clear();\nnr += srcChannel.read(buffer);\n}\nsrcChannel.close();\ndstChannel.close();\n} catch (IOException e) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1169480#15#39.java",
                        "__cluster__": 106
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_15051083",
                        "content": "@Override\npublic String getMessageDigest() throws SarasvatiLoadException {\nif (messageDigest == null) {\nCollections.sort(nodes);\nCollections.sort(externals);\ntry {\nMessageDigest digest = MessageDigest.getInstance(\"SHA1\");\ndigest.update(name.getBytes());\nfor (XmlNode node : nodes) {\nnode.addToDigest(digest);\n}\nfor (XmlExternal external : externals) {\nexternal.addToDigest(digest);\n}\nmessageDigest = SvUtil.getHexString(digest.digest());\n} catch (NoSuchAlgorithmException nsae) {\nthrow new SarasvatiException(\"Unable to load SHA1 algorithm\", nsae);\n}\n}\nreturn messageDigest;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 347
                },
                {
                        "id": "pretrain_java_data_3731050",
                        "content": "<gh_stars>10-100\n@Override\npublic String getMessageDigest() throws SarasvatiLoadException {\nif (messageDigest == null) {\nCollections.sort(nodes);\nCollections.sort(externals);\ntry {\nMessageDigest digest = MessageDigest.getInstance(\"SHA1\");\ndigest.update(name.getBytes());\nfor (XmlNode node : nodes) {\nnode.addToDigest(digest);\n}\nfor (XmlExternal external : externals) {\nexternal.addToDigest(digest);\n}\nmessageDigest = SvUtil.getHexString(digest.digest());\n} catch (NoSuchAlgorithmException nsae) {\nthrow new SarasvatiException(\"Unable to load SHA1 algorithm\", nsae);\n}\n}\nreturn messageDigest;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2523937#64#84.java",
                        "__cluster__": 347
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8087001",
                        "content": "public static String generateStackHashKey() {\nException e = null;\ntry {\nthrow new Exception();\n} catch (Exception ex) {\ne = ex;\n}\nMessageDigest digest;\ntry {\ndigest = java.security.MessageDigest.getInstance(\"MD5\");\ndigest.update(getStackTrace(e).getBytes());\nbyte[] hash = digest.digest();\nString rtn = Base64.encode(new String(hash));\nif (keys.contains(rtn)) {\nreturn generatedIterStackHashKey(rtn);\n}\nkeys.add(rtn);\nreturn rtn;\n} catch (NoSuchAlgorithmException ex) {\nthrow new RuntimeException(ex);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 644
                },
                {
                        "id": "pretrain_java_data_3736228",
                        "content": "public static String generateStackHashKey() {\nException e = null;\ntry {\nthrow new Exception();\n} catch (Exception ex) {\ne = ex;\n}\nMessageDigest digest;\ntry {\ndigest = java.security.MessageDigest.getInstance(\"MD5\");\ndigest.update(getStackTrace(e).getBytes());\nbyte[] hash = digest.digest();\nString rtn = Base64.encode(new String(hash));\nif (keys.contains(rtn)) {\nreturn generatedIterStackHashKey(rtn);\n}\nkeys.add(rtn);\nreturn rtn;\n} catch (NoSuchAlgorithmException ex) {\nthrow new RuntimeException(ex);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#772295#35#56.java",
                        "__cluster__": 644
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_15445861",
                        "content": "public static void copyFile(File srcFile, File destFile) throws IOException {\nif (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(\"Source file doesn't exist: \" + srcFile.getAbsolutePath());\nif (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(\"Destination file is directory: \" + destFile.getAbsolutePath());\nFileInputStream in = new FileInputStream(srcFile);\nFileOutputStream out = new FileOutputStream(destFile);\nbyte[] buffer = new byte[4096];\nint no = 0;\ntry {\nwhile ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n} finally {\nin.close();\nout.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 753
                },
                {
                        "id": "pretrain_java_data_3764871",
                        "content": "public static void copyFile(File srcFile, File destFile) throws IOException {\nif (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(\"Source file doesn't exist: \" + srcFile.getAbsolutePath());\nif (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(\"Destination file is directory: \" + destFile.getAbsolutePath());\nFileInputStream in = new FileInputStream(srcFile);\nFileOutputStream out = new FileOutputStream(destFile);\nbyte[] buffer = new byte[4096];\nint no = 0;\ntry {\nwhile ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n} finally {\nin.close();\nout.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#630719#131#144.java",
                        "__cluster__": 753
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21488518",
                        "content": "@Override\npublic Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\nFile dest = new File(this.realFile, name);\nif (allowedClient) {\nif (\".request\".equals(name) || \".tokens\".equals(name)) {\nFileOutputStream out = null;\ntry {\nout = new FileOutputStream(dest);\nIOUtils.copy(in, out);\n} finally {\nIOUtils.closeQuietly(out);\n}\nif (\".request\".equals(name)) {\nFile request = new File(realFile.getAbsolutePath() + \"/\" + name);\nRequestManager.manageRequest(request, null, true);\nreturn new OverEncryptedFriendsFile(factory, folderPath + \"/.response\", allowedClient);\n}\nreturn new OverEncryptedFriendsFile(factory, folderPath + \"/\" + name, allowedClient);\n} else {\nreturn null;\n}\n} else {\nLOGGER.error(\"User isn't owner of this folder\");\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 800
                },
                {
                        "id": "pretrain_java_data_3682277",
                        "content": "@Override\npublic Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\nFile dest = new File(this.realFile, name);\nif (allowedClient) {\nif (\".request\".equals(name) || \".tokens\".equals(name)) {\nFileOutputStream out = null;\ntry {\nout = new FileOutputStream(dest);\nIOUtils.copy(in, out);\n} finally {\nIOUtils.closeQuietly(out);\n}\nif (\".request\".equals(name)) {\nFile request = new File(realFile.getAbsolutePath() + \"/\" + name);\nRequestManager.manageRequest(request, null, true);\nreturn new OverEncryptedFriendsFile(factory, folderPath + \"/.response\", allowedClient);\n}\nreturn new OverEncryptedFriendsFile(factory, folderPath + \"/\" + name, allowedClient);\n} else {\nreturn null;\n}\n} else {\nLOGGER.error(\"User isn't owner of this folder\");\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1692203#164#189.java",
                        "__cluster__": 800
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_3633862",
                        "content": "public static String load(String id) {\nString xml = \"\";\nif (id.length() < 5) return \"\";\ntry {\nworking = true;\nURL url = new URL(\"http://pastebin.com/download.php?i=\" + id);\nURLConnection conn = url.openConnection();\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\nxml = \"\";\nString str;\nwhile ((str = reader.readLine()) != null) {\nxml += str;\n}\nreader.close();\nworking = false;\nreturn xml.toString();\n} catch (IOException ex) {\nJOptionPane.showMessageDialog(null, \" Load error\");\n}\nworking = false;\nreturn xml;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#246717#99#120.java",
                        "__cluster__": 901
                },
                {
                        "id": "test_bigclonebench_data_9319440",
                        "content": "public static String load(String id) {\nString xml = \"\";\nif (id.length() < 5) return \"\";\ntry {\nworking = true;\nURL url = new URL(\"http://pastebin.com/download.php?i=\" + id);\nURLConnection conn = url.openConnection();\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\nxml = \"\";\nString str;\nwhile ((str = reader.readLine()) != null) {\nxml += str;\n}\nreader.close();\nworking = false;\nreturn xml.toString();\n} catch (IOException ex) {\nJOptionPane.showMessageDialog(null, \" Load error\");\n}\nworking = false;\nreturn xml;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 901
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8182932",
                        "content": "public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\nLOG.info(\"Unzipping zip file '\" + file.getAbsolutePath() + \"' to directory '\" + targetDirectory.getAbsolutePath() + \"'.\");\nassert (file.exists() && file.isFile());\nif (targetDirectory.exists() == false) {\nLOG.debug(\"Creating target directory.\");\nif (targetDirectory.mkdirs() == false) {\nthrow new BusinessException(\"Could not create target directory at '\" + targetDirectory.getAbsolutePath() + \"'!\");\n}\n}\nZipInputStream zipin = null;\ntry {\nzipin = new ZipInputStream(new FileInputStream(file));\nZipEntry entry = null;\nwhile ((entry = zipin.getNextEntry()) != null) {\nLOG.debug(\"Unzipping entry '\" + entry.getName() + \"'.\");\nif (entry.isDirectory()) {\nLOG.debug(\"Skipping directory.\");\ncontinue;\n}\nfinal File targetFile = new File(targetDirectory, entry.getName());\nfinal File parentTargetFile = targetFile.getParentFile();\nif (parentTargetFile.exists() == false) {\nLOG.debug(\"Creating directory '\" + parentTargetFile.getAbsolutePath() + \"'.\");\nif (parentTargetFile.mkdirs() == false) {\nthrow new BusinessException(\"Could not create target directory at '\" + parentTargetFile.getAbsolutePath() + \"'!\");\n}\n}\nInputStream input = null;\nFileOutputStream output = null;\ntry {\ninput = zipFile.getInputStream(entry);\nif (targetFile.createNewFile() == false) {\nthrow new BusinessException(\"Could not create target file '\" + targetFile.getAbsolutePath() + \"'!\");\n}\noutput = new FileOutputStream(targetFile);\nint readBytes = 0;\nbyte[] buffer = new byte[BUFFER_SIZE];\nwhile ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\noutput.write(buffer, 0, readBytes);\n}\n} finally {\nFileUtil.closeCloseable(input);\nFileUtil.closeCloseable(output);\n}\n}\n} catch (IOException e) {\nthrow new BusinessException(\"Could not unzip file '\" + file.getAbsolutePath() + \"'!\", e);\n} finally {\nFileUtil.closeCloseable(zipin);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 508
                },
                {
                        "id": "pretrain_java_data_3652508",
                        "content": "public static void unzip(final File file, final ZipFile zipFile, final File targetDirectory) throws PtException {\nLOG.info(\"Unzipping zip file '\" + file.getAbsolutePath() + \"' to directory \" + \"'\" + targetDirectory.getAbsolutePath() + \"'.\");\nassert (file.exists() && file.isFile());\nif (targetDirectory.exists() == false) {\nLOG.debug(\"Creating target directory.\");\nif (targetDirectory.mkdirs() == false) {\nthrow new PtException(\"Could not create target directory at \" + \"'\" + targetDirectory.getAbsolutePath() + \"'!\");\n}\n}\nZipInputStream zipin = null;\ntry {\nzipin = new ZipInputStream(new FileInputStream(file));\nZipEntry nextZipEntry = zipin.getNextEntry();\nwhile (nextZipEntry != null) {\nLOG.debug(\"Unzipping entry '\" + nextZipEntry.getName() + \"'.\");\nif (nextZipEntry.isDirectory()) {\nLOG.debug(\"Skipping directory.\");\ncontinue;\n}\nfinal File targetFile = new File(targetDirectory, nextZipEntry.getName());\nfinal File parentTargetFile = targetFile.getParentFile();\nif (parentTargetFile.exists() == false) {\nLOG.debug(\"Creating directory '\" + parentTargetFile.getAbsolutePath() + \"'.\");\nif (parentTargetFile.mkdirs() == false) {\nthrow new PtException(\"Could not create target directory at \" + \"'\" + parentTargetFile.getAbsolutePath() + \"'!\");\n}\n}\nInputStream input = null;\nFileOutputStream output = null;\ntry {\ninput = zipFile.getInputStream(nextZipEntry);\nif (targetFile.createNewFile() == false) {\nthrow new PtException(\"Could not create target file \" + \"'\" + targetFile.getAbsolutePath() + \"'!\");\n}\noutput = new FileOutputStream(targetFile);\nbyte[] buffer = new byte[BUFFER_SIZE];\nint readBytes = input.read(buffer, 0, buffer.length);\nwhile (readBytes > 0) {\noutput.write(buffer, 0, readBytes);\nreadBytes = input.read(buffer, 0, buffer.length);\n}\n} finally {\nPtCloseUtil.close(input, output);\n}\nnextZipEntry = zipin.getNextEntry();\n}\n} catch (IOException e) {\nthrow new PtException(\"Could not unzip file '\" + file.getAbsolutePath() + \"'!\", e);\n} finally {\nPtCloseUtil.close(zipin);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#924464#31#82.java",
                        "__cluster__": 508
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_3741205",
                        "content": "<filename>references/bcb_chosen_clones/selected#1356734#24#46.java\npublic TableDirectory(RandomAccessFile raf) throws IOException {\nversion = raf.readInt();\nnumTables = raf.readShort();\nsearchRange = raf.readShort();\nentrySelector = raf.readShort();\nrangeShift = raf.readShort();\nentries = new DirectoryEntry[numTables];\nfor (int i = 0; i < numTables; i++) {\nentries[i] = new DirectoryEntry(raf);\n}\nboolean modified = true;\nwhile (modified) {\nmodified = false;\nfor (int i = 0; i < numTables - 1; i++) {\nif (entries[i].getOffset() > entries[i + 1].getOffset()) {\nDirectoryEntry temp = entries[i];\nentries[i] = entries[i + 1];\nentries[i + 1] = temp;\nmodified = true;\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1356734#24#46.java",
                        "__cluster__": 687
                },
                {
                        "id": "test_bigclonebench_data_15822137",
                        "content": "public TableDirectory(RandomAccessFile raf) throws IOException {\nversion = raf.readInt();\nnumTables = raf.readShort();\nsearchRange = raf.readShort();\nentrySelector = raf.readShort();\nrangeShift = raf.readShort();\nentries = new DirectoryEntry[numTables];\nfor (int i = 0; i < numTables; i++) {\nentries[i] = new DirectoryEntry(raf);\n}\nboolean modified = true;\nwhile (modified) {\nmodified = false;\nfor (int i = 0; i < numTables - 1; i++) {\nif (entries[i].getOffset() > entries[i + 1].getOffset()) {\nDirectoryEntry temp = entries[i];\nentries[i] = entries[i + 1];\nentries[i + 1] = temp;\nmodified = true;\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 687
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_5276728",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copyFile(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\nlong count = 0;\nlong size = source.size();\nwhile ((count += destination.transferFrom(source, 0, size - count)) < size) ;\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#418831#80#100.java",
                        "__cluster__": 277
                },
                {
                        "id": "test_bigclonebench_data_19849797",
                        "content": "public static void copyFile(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_5276728",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copyFile(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\nlong count = 0;\nlong size = source.size();\nwhile ((count += destination.transferFrom(source, 0, size - count)) < size) ;\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#418831#80#100.java",
                        "__cluster__": 277
                },
                {
                        "id": "test_bigclonebench_data_21824901",
                        "content": "public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\ncloseQuietly(source);\ncloseQuietly(destination);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_4716110",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_8440470",
                        "content": "public static void copyFile(final File in, final File out) throws IOException {\nfinal FileChannel sourceChannel = new FileInputStream(in).getChannel();\nfinal FileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1325991#37#43.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_10131427",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_8440470",
                        "content": "public static void copyFile(final File in, final File out) throws IOException {\nfinal FileChannel sourceChannel = new FileInputStream(in).getChannel();\nfinal FileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1325991#37#43.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_14598566",
                        "content": "public static void copyFileByNIO(File in, File out) throws IOException {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_8440470",
                        "content": "public static void copyFile(final File in, final File out) throws IOException {\nfinal FileChannel sourceChannel = new FileInputStream(in).getChannel();\nfinal FileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1325991#37#43.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_15768167",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = null;\nFileChannel destinationChannel = null;\ntry {\nsourceChannel = new FileInputStream(in).getChannel();\ndestinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n} finally {\nif (sourceChannel != null) sourceChannel.close();\nif (destinationChannel != null) destinationChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_8440470",
                        "content": "public static void copyFile(final File in, final File out) throws IOException {\nfinal FileChannel sourceChannel = new FileInputStream(in).getChannel();\nfinal FileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1325991#37#43.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_6985091",
                        "content": "public static void main(String[] args) {\nString logFileName = args[0];\nint extractLineEvery = new Integer(args[1]).intValue();\nString filterToken = \"P0\";\nif (args.length > 2) {\nfilterToken = args[2];\n}\ntry {\nBufferedReader br = new BufferedReader(new FileReader(logFileName));\nBufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + \".trim\")));\nString readLine;\nint x = 0;\nwhile ((readLine = br.readLine()) != null) {\nif ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\nbw.write(readLine + \"\\n\");\n}\n}\nbw.flush();\nbw.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1249865#18#40.java",
                        "__cluster__": 197
                },
                {
                        "id": "test_bigclonebench_data_19096138",
                        "content": "public static void main(String[] args) {\nString logFileName = args[0];\nint extractLineEvery = new Integer(args[1]).intValue();\nString filterToken = \"P0\";\nif (args.length > 2) {\nfilterToken = args[2];\n}\ntry {\nBufferedReader br = new BufferedReader(new FileReader(logFileName));\nBufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + \".trim\")));\nString readLine;\nint x = 0;\nwhile ((readLine = br.readLine()) != null) {\nif ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\nbw.write(readLine + \"\\n\");\n}\n}\nbw.flush();\nbw.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 197
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_22503685",
                        "content": "public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) {\nif (TESTING) {\nHashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>();\nret.add(new Tuple<String, ArrayList<String>>(\"teste\", new ArrayList<String>()));\nreturn ret;\n}\nint retries = 0;\nwhile (retries < 3) {\ntry {\nArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>();\nString reqPre = \"<?xml version=\\\"1.0\\\"?>\\r\\n\" + (getGazeteerIds ? \"<GetFeature\" : \"<GetParsing\") + \" xmlns=\\\"http://www.opengis.net/gp\\\" xmlns:wfs=\\\"http://www.opengis.net/wfs\\\"\" + \" xmlns:xsi=\\\"http://www.w3.org/2000/10/XMLSchema-instance\\\"\" + \" xsi:schemaLocation=\\\"http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\\\"\\r\\n\" + \" wfs:outputFormat=\\\"GML2\\\">\" + \"<wfs:Query wfs:TypeName=\\\"PlaceName\\\" />\" + \"<Resource mine=\\\"text/plain\\\">\" + \"<Contents></Contents>\" + \"</Resource>\" + (getGazeteerIds ? \"</GetFeature>\" : \"</GetParsing>\");\nDocument doc = DocumentHelper.parseText(reqPre);\ndoc.getRootElement().element(\"Resource\").element(\"Contents\").setText(recordContent);\nURL url = new URL(geoParserBaseUrl + \"?request=\" + URLEncoder.encode(doc.asXML(), \"ISO8859-1\"));\nInputStreamReader reader = new InputStreamReader(url.openStream(), \"UTF-8\");\nBufferedReader buffered = new BufferedReader(reader);\nStringBuffer sb = new StringBuffer();\nString line;\nwhile ((line = buffered.readLine()) != null) {\nsb.append(line);\n}\nDocument d = DocumentHelper.parseText(sb.toString());\nHashSet<String> places = new HashSet<String>();\nfor (Iterator<Element> it = d.getRootElement().element(\"EntryCollection\").elementIterator(\"PlaceName\"); it.hasNext(); ) {\nElement plcEl = it.next();\nString val = plcEl.elementTextTrim(\"TermName\");\nif (!val.equals(\"\") && !places.contains(val)) {\nplaces.add(val);\nString entryID = plcEl.attributeValue(\"entryID\");\nTuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>());\nfor (Iterator<Element> it2 = d.getRootElement().element(\"EntryCollection\").elementIterator(\"GazetteerEntry\"); it2.hasNext(); ) {\nElement idEl = it2.next();\nif (idEl.attributeValue(\"entryID\").equals(entryID)) plc.getV2().add(idEl.attributeValue(\"id\"));\n}\nret.add(plc);\n}\n}\nreturn ret;\n} catch (Exception e) {\nlog.debug(\"Erro ao pesquisar a lista de termos para o registo \" + recordContent + \"! \" + e.getMessage(), e);\nSystem.out.println(\"Erro ao pesquisar a lista de termos para o registo \" + recordContent + \"! \" + e.getMessage());\nretries++;\n}\n}\nSystem.out.println(\"Too many retries. Giving up.\");\nreturn new HashSet<Tuple<String, ArrayList<String>>>();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 226
                },
                {
                        "id": "pretrain_java_data_8416437",
                        "content": "<filename>references/bcb_chosen_clones/selected#1078366#51#97.java\npublic static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) {\nif (TESTING) {\nHashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>();\nret.add(new Tuple<String, ArrayList<String>>(\"teste\", new ArrayList<String>()));\nreturn ret;\n}\nint retries = 0;\nwhile (retries < 3) {\ntry {\nArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>();\nString reqPre = \"<?xml version=\\\"1.0\\\"?>\\r\\n\" + (getGazeteerIds ? \"<GetFeature\" : \"<GetParsing\") + \" xmlns=\\\"http://www.opengis.net/gp\\\" xmlns:wfs=\\\"http://www.opengis.net/wfs\\\"\" + \" xmlns:xsi=\\\"http://www.w3.org/2000/10/XMLSchema-instance\\\"\" + \" xsi:schemaLocation=\\\"http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\\\"\\r\\n\" + \" wfs:outputFormat=\\\"GML2\\\">\" + \"<wfs:Query wfs:TypeName=\\\"PlaceName\\\" />\" + \"<Resource mine=\\\"text/plain\\\">\" + \"<Contents></Contents>\" + \"</Resource>\" + (getGazeteerIds ? \"</GetFeature>\" : \"</GetParsing>\");\nDocument doc = DocumentHelper.parseText(reqPre);\ndoc.getRootElement().element(\"Resource\").element(\"Contents\").setText(recordContent);\nURL url = new URL(geoParserBaseUrl + \"?request=\" + URLEncoder.encode(doc.asXML(), \"ISO8859-1\"));\nInputStreamReader reader = new InputStreamReader(url.openStream(), \"UTF-8\");\nBufferedReader buffered = new BufferedReader(reader);\nStringBuffer sb = new StringBuffer();\nString line;\nwhile ((line = buffered.readLine()) != null) {\nsb.append(line);\n}\nDocument d = DocumentHelper.parseText(sb.toString());\nHashSet<String> places = new HashSet<String>();\nfor (Iterator<Element> it = d.getRootElement().element(\"EntryCollection\").elementIterator(\"PlaceName\"); it.hasNext(); ) {\nElement plcEl = it.next();\nString val = plcEl.elementTextTrim(\"TermName\");\nif (!val.equals(\"\") && !places.contains(val)) {\nplaces.add(val);\nString entryID = plcEl.attributeValue(\"entryID\");\nTuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>());\nfor (Iterator<Element> it2 = d.getRootElement().element(\"EntryCollection\").elementIterator(\"GazetteerEntry\"); it2.hasNext(); ) {\nElement idEl = it2.next();\nif (idEl.attributeValue(\"entryID\").equals(entryID)) plc.getV2().add(idEl.attributeValue(\"id\"));\n}\nret.add(plc);\n}\n}\nreturn ret;\n} catch (Exception e) {\nlog.debug(\"Erro ao pesquisar a lista de termos para o registo \" + recordContent + \"! \" + e.getMessage(), e);\nSystem.out.println(\"Erro ao pesquisar a lista de termos para o registo \" + recordContent + \"! \" + e.getMessage());\nretries++;\n}\n}\nSystem.out.println(\"Too many retries. Giving up.\");\nreturn new HashSet<Tuple<String, ArrayList<String>>>();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1078366#51#97.java",
                        "__cluster__": 226
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6371580",
                        "content": "public void insertDomain(final List<String> domains) {\ntry {\nconnection.setAutoCommit(false);\nnew ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n@Override\npublic void executeProcessReturnNull() throws SQLException {\npsImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"domain.add\"));\nIterator<String> iter = domains.iterator();\nString domain;\nwhile (iter.hasNext()) {\ndomain = iter.next();\npsImpl.setString(1, domain);\npsImpl.setString(2, domain.toLowerCase(locale));\npsImpl.executeUpdate();\n}\n}\n});\nconnection.commit();\ncmDB.updateDomains(null, null);\n} catch (SQLException sqle) {\nlog.error(sqle);\nif (connection != null) {\ntry {\nconnection.rollback();\n} catch (SQLException ex) {\n}\n}\n} finally {\nif (connection != null) {\ntry {\nconnection.setAutoCommit(true);\n} catch (SQLException ex) {\nlog.error(ex);\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 340
                },
                {
                        "id": "pretrain_java_data_6977298",
                        "content": "public void insertDomain(final List<String> domains) {\ntry {\nconnection.setAutoCommit(false);\nnew ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n@Override\npublic void executeProcessReturnNull() throws SQLException {\npsImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"domain.add\"));\nIterator<String> iter = domains.iterator();\nString domain;\nwhile (iter.hasNext()) {\ndomain = iter.next();\npsImpl.setString(1, domain);\npsImpl.setString(2, domain.toLowerCase(locale));\npsImpl.executeUpdate();\n}\n}\n});\nconnection.commit();\ncmDB.updateDomains(null, null);\n} catch (SQLException sqle) {\nlog.error(sqle);\nif (connection != null) {\ntry {\nconnection.rollback();\n} catch (SQLException ex) {\n}\n}\n} finally {\nif (connection != null) {\ntry {\nconnection.setAutoCommit(true);\n} catch (SQLException ex) {\nlog.error(ex);\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2462101#38#75.java",
                        "__cluster__": 340
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_8409482",
                        "content": "public void deleteAuthors() throws Exception {\nif (proposalIds.equals(\"\") || usrIds.equals(\"\")) throw new Exception(\"No proposal or author selected.\");\nString[] pids = proposalIds.split(\",\");\nString[] uids = usrIds.split(\",\");\nint pnum = pids.length;\nint unum = uids.length;\nif (pnum == 0 || unum == 0) throw new Exception(\"No proposal or author selected.\");\nint i, j;\nPreparedStatement prepStmt = null;\ntry {\ncon = database.getConnection();\ncon.setAutoCommit(false);\nString pStr = \"delete from event where ACTION_ID='member added' AND PROPOSAL_ID=? AND SUBJECTUSR_ID=?\";\nprepStmt = con.prepareStatement(pStr);\nfor (i = 0; i < pnum; i++) {\nfor (j = 0; j < unum; j++) {\nif (!uids[j].equals(userId)) {\nprepStmt.setString(1, pids[i]);\nprepStmt.setString(2, uids[j]);\nprepStmt.executeUpdate();\n}\n}\n}\ncon.commit();\n} catch (Exception e) {\nif (!con.isClosed()) {\ncon.rollback();\nprepStmt.close();\ncon.close();\n}\nthrow e;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2656762#668#700.java",
                        "__cluster__": 580
                },
                {
                        "id": "test_bigclonebench_data_17116123",
                        "content": "public void deleteAuthors() throws Exception {\nif (proposalIds.equals(\"\") || usrIds.equals(\"\")) throw new Exception(\"No proposal or author selected.\");\nString[] pids = proposalIds.split(\",\");\nString[] uids = usrIds.split(\",\");\nint pnum = pids.length;\nint unum = uids.length;\nif (pnum == 0 || unum == 0) throw new Exception(\"No proposal or author selected.\");\nint i, j;\nPreparedStatement prepStmt = null;\ntry {\ncon = database.getConnection();\ncon.setAutoCommit(false);\nString pStr = \"delete from event where ACTION_ID='member added' AND PROPOSAL_ID=? AND SUBJECTUSR_ID=?\";\nprepStmt = con.prepareStatement(pStr);\nfor (i = 0; i < pnum; i++) {\nfor (j = 0; j < unum; j++) {\nif (!uids[j].equals(userId)) {\nprepStmt.setString(1, pids[i]);\nprepStmt.setString(2, uids[j]);\nprepStmt.executeUpdate();\n}\n}\n}\ncon.commit();\n} catch (Exception e) {\nif (!con.isClosed()) {\ncon.rollback();\nprepStmt.close();\ncon.close();\n}\nthrow e;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 580
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_10547671",
                        "content": "private String retrieveTemplate() throws Exception {\nif (cachedTemplate == null) {\nfinal URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());\nfinal BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nfinal StringBuilder result = new StringBuilder();\nString line;\nwhile ((line = in.readLine()) != null) {\nresult.append(line);\n}\nin.close();\ncachedTemplate = result.toString();\n}\nreturn cachedTemplate;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 602
                },
                {
                        "id": "pretrain_java_data_8509997",
                        "content": "private String retrieveTemplate() throws Exception {\nif (cachedTemplate == null) {\nfinal URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());\nfinal BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nfinal StringBuilder result = new StringBuilder();\nString line;\nwhile ((line = in.readLine()) != null) {\nresult.append(line);\n}\nin.close();\ncachedTemplate = result.toString();\n}\nreturn cachedTemplate;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#908961#196#209.java",
                        "__cluster__": 602
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_19810820",
                        "content": "public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {\nFileChannel inputChannel = null;\nFileChannel outputChannel = null;\nlong length = 0;\ntry {\ninputChannel = new FileInputStream(src).getChannel();\nlength = inputChannel.size();\noutputChannel = new FileOutputStream(dst).getChannel();\nlong total = 0;\nwhile (total < length) {\ntotal += inputChannel.transferTo(0, length, outputChannel);\n}\nif (preserveModificationTime) {\ndst.setLastModified(src.lastModified());\n}\n} finally {\nif (inputChannel != null) {\ninputChannel.close();\n}\nif (outputChannel != null) {\noutputChannel.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 690
                },
                {
                        "id": "pretrain_java_data_6891894",
                        "content": "public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {\nFileChannel inputChannel = null;\nFileChannel outputChannel = null;\nlong length = 0;\ntry {\ninputChannel = new FileInputStream(src).getChannel();\nlength = inputChannel.size();\noutputChannel = new FileOutputStream(dst).getChannel();\nlong total = 0;\nwhile (total < length) {\ntotal += inputChannel.transferTo(0, length, outputChannel);\n}\nif (preserveModificationTime) {\ndst.setLastModified(src.lastModified());\n}\n} finally {\nif (inputChannel != null) {\ninputChannel.close();\n}\nif (outputChannel != null) {\noutputChannel.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#834062#173#196.java",
                        "__cluster__": 690
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18793482",
                        "content": "public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\nProperties properties = new Properties();\ntry {\nString i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(\"/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties\").getPath()).toString();\nFile englishFile = new File(i18nPath + \"TranubeConstants_en.properties\");\nif (!englishFile.exists()) throw new Exception(\"English file not found\");\nString propertiesFilePath = i18nPath + \"TranubeConstants_\" + locale + \".properties\";\nFile file = new File(propertiesFilePath);\nif (!file.exists()) {\nFileReader in = new FileReader(englishFile);\nFileWriter out = new FileWriter(file);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}\nInputStream is = ConfigurationServiceImpl.class.getResourceAsStream(\"/es/ua/tranube/prototype/main/client/TranubeConstants_\" + locale + \".properties\");\nBufferedReader breader = new BufferedReader(new InputStreamReader(is));\nString line = null;\nStringBuilder strBuilder = new StringBuilder();\nboolean found = false;\nwhile ((line = breader.readLine()) != null) {\nif (line.startsWith(\"#\")) strBuilder.append(line).append(\"\\n\"); else {\nString[] pieces = line.split(\"=\");\nif (pieces.length == 2) {\nif (pieces[0].trim().equals(messageName)) {\nstrBuilder.append(pieces[0].trim() + \" = \" + messageValue + \"\\n\");\nfound = true;\n} else strBuilder.append(line).append(\"\\n\");\n} else strBuilder.append(line).append(\"\\n\");\n}\n}\nif (!found) strBuilder.append(messageName).append(\" = \").append(messageValue).append(\"\\n\");\nbreader.close();\nis.close();\nFileWriter writer = new FileWriter(file);\nwriter.write(strBuilder.toString());\nwriter.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 810
                },
                {
                        "id": "pretrain_java_data_8516095",
                        "content": "public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\nProperties properties = new Properties();\ntry {\nString i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(\"/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties\").getPath()).toString();\nFile englishFile = new File(i18nPath + \"TranubeConstants_en.properties\");\nif (!englishFile.exists()) throw new Exception(\"English file not found\");\nString propertiesFilePath = i18nPath + \"TranubeConstants_\" + locale + \".properties\";\nFile file = new File(propertiesFilePath);\nif (!file.exists()) {\nFileReader in = new FileReader(englishFile);\nFileWriter out = new FileWriter(file);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}\nInputStream is = ConfigurationServiceImpl.class.getResourceAsStream(\"/es/ua/tranube/prototype/main/client/TranubeConstants_\" + locale + \".properties\");\nBufferedReader breader = new BufferedReader(new InputStreamReader(is));\nString line = null;\nStringBuilder strBuilder = new StringBuilder();\nboolean found = false;\nwhile ((line = breader.readLine()) != null) {\nif (line.startsWith(\"#\")) strBuilder.append(line).append(\"\\n\"); else {\nString[] pieces = line.split(\"=\");\nif (pieces.length == 2) {\nif (pieces[0].trim().equals(messageName)) {\nstrBuilder.append(pieces[0].trim() + \" = \" + messageValue + \"\\n\");\nfound = true;\n} else strBuilder.append(line).append(\"\\n\");\n} else strBuilder.append(line).append(\"\\n\");\n}\n}\nif (!found) strBuilder.append(messageName).append(\" = \").append(messageValue).append(\"\\n\");\nbreader.close();\nis.close();\nFileWriter writer = new FileWriter(file);\nwriter.write(strBuilder.toString());\nwriter.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2032520#56#97.java",
                        "__cluster__": 810
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8430178",
                        "content": "public static void copyFile(String source_name, String dest_name) throws IOException {\nsource_name = Shell.getUtils().constructPath(source_name);\nFile source_file = new File(source_name);\ndest_name = Shell.getUtils().constructPath(dest_name);\nFile destination_file = new File(dest_name);\nFileInputStream source = null;\nFileOutputStream destination = null;\nbyte[] buffer;\nint bytes_read;\ntry {\nif (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(\"cp: no such source file: \" + source_name);\nif (!source_file.canRead()) throw new FileCopyException(\"cp: source file \" + \"is unreadable: \" + source_name);\nif (destination_file.exists()) {\nif (destination_file.isFile()) {\nBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\nString response;\nif (!destination_file.canWrite()) throw new FileCopyException(\"cp: destination \" + \"file is unwriteable: \" + dest_name);\nSystem.out.print(\"cp: file \" + dest_name + \" already exists. Overwrite it ? (Y/N): \");\nSystem.out.flush();\nresponse = in.readLine();\nif (!response.equals(\"Y\") && !response.equals(\"y\")) throw new FileCopyException(\"cp: copy cancelled.\");\n} else throw new FileCopyException(\"cp: destination \" + \"is not a file: \" + dest_name);\n} else {\nFile parentdir = parent(destination_file);\nif (!parentdir.exists()) throw new FileCopyException(\"cp: destination \" + \"directory doesn't exist: \" + dest_name);\nif (!parentdir.canWrite()) throw new FileCopyException(\"cp: destination \" + \"directory is unwriteable: \" + dest_name);\n}\nsource = new FileInputStream(source_file);\ndestination = new FileOutputStream(destination_file);\nbuffer = new byte[1024];\nint size = (new Long((source_file.length() / 1024) / 50)).intValue();\nint c = 1;\nint written = 0;\nSystem.out.print(\"cp: \");\nwhile (true) {\nif (written < 50) {\nif ((c - 1) == size && size != 0) {\nSystem.out.print(\"#\");\nc = 1;\nwritten++;\n} else if (size == 0) {\nint j = 1;\nif (c > 1) j = (50 / c) - 50; else j = 50 / c;\nfor (int i = 0; i < j; i++) System.out.print(\"#\");\nwritten += j;\n}\n}\nbytes_read = source.read(buffer);\nif (bytes_read == -1) break;\ndestination.write(buffer, 0, bytes_read);\nc++;\n}\nSystem.out.println();\n} finally {\nif (source != null) try {\nsource.close();\n} catch (IOException e) {\n}\nif (destination != null) try {\ndestination.close();\n} catch (IOException e) {\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 833
                },
                {
                        "id": "pretrain_java_data_6958213",
                        "content": "<gh_stars>10-100\npublic static void copyFile(String source_name, String dest_name) throws IOException {\nsource_name = Shell.getUtils().constructPath(source_name);\nFile source_file = new File(source_name);\ndest_name = Shell.getUtils().constructPath(dest_name);\nFile destination_file = new File(dest_name);\nFileInputStream source = null;\nFileOutputStream destination = null;\nbyte[] buffer;\nint bytes_read;\ntry {\nif (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(\"cp: no such source file: \" + source_name);\nif (!source_file.canRead()) throw new FileCopyException(\"cp: source file \" + \"is unreadable: \" + source_name);\nif (destination_file.exists()) {\nif (destination_file.isFile()) {\nBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\nString response;\nif (!destination_file.canWrite()) throw new FileCopyException(\"cp: destination \" + \"file is unwriteable: \" + dest_name);\nSystem.out.print(\"cp: file \" + dest_name + \" already exists. Overwrite it ? (Y/N): \");\nSystem.out.flush();\nresponse = in.readLine();\nif (!response.equals(\"Y\") && !response.equals(\"y\")) throw new FileCopyException(\"cp: copy cancelled.\");\n} else throw new FileCopyException(\"cp: destination \" + \"is not a file: \" + dest_name);\n} else {\nFile parentdir = parent(destination_file);\nif (!parentdir.exists()) throw new FileCopyException(\"cp: destination \" + \"directory doesn't exist: \" + dest_name);\nif (!parentdir.canWrite()) throw new FileCopyException(\"cp: destination \" + \"directory is unwriteable: \" + dest_name);\n}\nsource = new FileInputStream(source_file);\ndestination = new FileOutputStream(destination_file);\nbuffer = new byte[1024];\nint size = (new Long((source_file.length() / 1024) / 50)).intValue();\nint c = 1;\nint written = 0;\nSystem.out.print(\"cp: \");\nwhile (true) {\nif (written < 50) {\nif ((c - 1) == size && size != 0) {\nSystem.out.print(\"#\");\nc = 1;\nwritten++;\n} else if (size == 0) {\nint j = 1;\nif (c > 1) j = (50 / c) - 50; else j = 50 / c;\nfor (int i = 0; i < j; i++) System.out.print(\"#\");\nwritten += j;\n}\n}\nbytes_read = source.read(buffer);\nif (bytes_read == -1) break;\ndestination.write(buffer, 0, bytes_read);\nc++;\n}\nSystem.out.println();\n} finally {\nif (source != null) try {\nsource.close();\n} catch (IOException e) {\n}\nif (destination != null) try {\ndestination.close();\n} catch (IOException e) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1782695#11#74.java",
                        "__cluster__": 833
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6894620",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static boolean copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf) throws IOException {\nif (srcFS.getFileStatus(src).isDir()) {\nif (!dst.mkdirs()) {\nreturn false;\n}\nFileStatus contents[] = srcFS.listStatus(src);\nfor (int i = 0; i < contents.length; i++) {\ncopy(srcFS, contents[i].getPath(), new File(dst, contents[i].getPath().getName()), deleteSource, conf);\n}\n} else if (srcFS.isFile(src)) {\nInputStream in = srcFS.open(src);\nIOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n} else {\nthrow new IOException(src.toString() + \": No such file or directory\");\n}\nif (deleteSource) {\nreturn srcFS.delete(src, true);\n} else {\nreturn true;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#603372#237#257.java",
                        "__cluster__": 431
                },
                {
                        "id": "test_bigclonebench_data_7396682",
                        "content": "public static boolean copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf) throws IOException {\nif (srcFS.getFileStatus(src).isDir()) {\nif (!dst.mkdirs()) {\nreturn false;\n}\nFileStatus contents[] = srcFS.listStatus(src);\nfor (int i = 0; i < contents.length; i++) {\ncopy(srcFS, contents[i].getPath(), new File(dst, contents[i].getPath().getName()), deleteSource, conf);\n}\n} else if (srcFS.isFile(src)) {\nInputStream in = srcFS.open(src);\nIOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n} else {\nthrow new IOException(src.toString() + \": No such file or directory\");\n}\nif (deleteSource) {\nreturn srcFS.delete(src, true);\n} else {\nreturn true;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 431
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9796161",
                        "content": "public static String getMD5(String s) {\ntry {\nMessageDigest m = MessageDigest.getInstance(\"MD5\");\nm.update(s.getBytes(), 0, s.length());\nreturn \"\" + new BigInteger(1, m.digest()).toString(16);\n} catch (NoSuchAlgorithmException e) {\nlogger.error(\"MD5 is not supported !!!\");\n}\nreturn s;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 57
                },
                {
                        "id": "pretrain_java_data_6987525",
                        "content": "public static String MD5(String s) {\ntry {\nMessageDigest m = MessageDigest.getInstance(\"MD5\");\nm.update(s.getBytes(), 0, s.length());\nreturn new BigInteger(1, m.digest()).toString(16);\n} catch (NoSuchAlgorithmException ex) {\nreturn \"\";\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2558813#16#24.java",
                        "__cluster__": 57
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_20663364",
                        "content": "public void testPreparedStatement0009() throws Exception {\nStatement stmt = con.createStatement();\nstmt.executeUpdate(\"create table #t0009 \" + \"  (i  integer  not null,      \" + \"   s  char(10) not null)      \");\ncon.setAutoCommit(false);\nPreparedStatement pstmt = con.prepareStatement(\"insert into #t0009 values (?, ?)\");\nint rowsToAdd = 8;\nfinal String theString = \"abcdefghijklmnopqrstuvwxyz\";\nint count = 0;\nfor (int i = 1; i <= rowsToAdd; i++) {\npstmt.setInt(1, i);\npstmt.setString(2, theString.substring(0, i));\ncount += pstmt.executeUpdate();\n}\npstmt.close();\nassertEquals(count, rowsToAdd);\ncon.rollback();\nResultSet rs = stmt.executeQuery(\"select s, i from #t0009\");\nassertNotNull(rs);\ncount = 0;\nwhile (rs.next()) {\ncount++;\nassertEquals(rs.getString(1).trim().length(), rs.getInt(2));\n}\nassertEquals(count, 0);\ncon.commit();\npstmt = con.prepareStatement(\"insert into #t0009 values (?, ?)\");\nrowsToAdd = 6;\ncount = 0;\nfor (int i = 1; i <= rowsToAdd; i++) {\npstmt.setInt(1, i);\npstmt.setString(2, theString.substring(0, i));\ncount += pstmt.executeUpdate();\n}\nassertEquals(count, rowsToAdd);\ncon.commit();\npstmt.close();\nrs = stmt.executeQuery(\"select s, i from #t0009\");\ncount = 0;\nwhile (rs.next()) {\ncount++;\nassertEquals(rs.getString(1).trim().length(), rs.getInt(2));\n}\nassertEquals(count, rowsToAdd);\ncon.commit();\nstmt.close();\ncon.setAutoCommit(true);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 858
                },
                {
                        "id": "pretrain_java_data_6978981",
                        "content": "<filename>references/bcb_chosen_clones/selected#776211#242#290.java\npublic void testTransactions0010() throws Exception {\nStatement stmt = con.createStatement();\nstmt.executeUpdate(\"create table #t0010 \" + \"  (i  integer  not null,      \" + \"   s  char(10) not null)      \");\ncon.setAutoCommit(false);\nPreparedStatement pstmt = con.prepareStatement(\"insert into #t0010 values (?, ?)\");\nint rowsToAdd = 8;\nfinal String theString = \"abcdefghijklmnopqrstuvwxyz\";\nint count = 0;\nfor (int i = 1; i <= rowsToAdd; i++) {\npstmt.setInt(1, i);\npstmt.setString(2, theString.substring(0, i));\ncount += pstmt.executeUpdate();\n}\nassertEquals(count, rowsToAdd);\ncon.rollback();\nResultSet rs = stmt.executeQuery(\"select s, i from #t0010\");\nassertNotNull(rs);\ncount = 0;\nwhile (rs.next()) {\ncount++;\nassertEquals(rs.getString(1).trim().length(), rs.getInt(2));\n}\nassertEquals(count, 0);\nrowsToAdd = 6;\nfor (int j = 1; j <= 2; j++) {\ncount = 0;\nfor (int i = 1; i <= rowsToAdd; i++) {\npstmt.setInt(1, i + ((j - 1) * rowsToAdd));\npstmt.setString(2, theString.substring(0, i));\ncount += pstmt.executeUpdate();\n}\nassertEquals(count, rowsToAdd);\ncon.commit();\n}\nrs = stmt.executeQuery(\"select s, i from #t0010\");\ncount = 0;\nwhile (rs.next()) {\ncount++;\nint i = rs.getInt(2);\nif (i > rowsToAdd) {\ni -= rowsToAdd;\n}\nassertEquals(rs.getString(1).trim().length(), i);\n}\nassertEquals(count, (2 * rowsToAdd));\nstmt.close();\npstmt.close();\ncon.setAutoCommit(true);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#776211#242#290.java",
                        "__cluster__": 858
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_15768167",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = null;\nFileChannel destinationChannel = null;\ntry {\nsourceChannel = new FileInputStream(in).getChannel();\ndestinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n} finally {\nif (sourceChannel != null) sourceChannel.close();\nif (destinationChannel != null) destinationChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_8564429",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = null;\nFileChannel destinationChannel = null;\ntry {\nsourceChannel = new FileInputStream(in).getChannel();\ndestinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n} finally {\nif (sourceChannel != null) sourceChannel.close();\nif (destinationChannel != null) destinationChannel.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2354960#15#26.java",
                        "__cluster__": 19
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_8564429",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = null;\nFileChannel destinationChannel = null;\ntry {\nsourceChannel = new FileInputStream(in).getChannel();\ndestinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n} finally {\nif (sourceChannel != null) sourceChannel.close();\nif (destinationChannel != null) destinationChannel.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2354960#15#26.java",
                        "__cluster__": 19
                },
                {
                        "id": "test_bigclonebench_data_4716110",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_8564429",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = null;\nFileChannel destinationChannel = null;\ntry {\nsourceChannel = new FileInputStream(in).getChannel();\ndestinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n} finally {\nif (sourceChannel != null) sourceChannel.close();\nif (destinationChannel != null) destinationChannel.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2354960#15#26.java",
                        "__cluster__": 19
                },
                {
                        "id": "test_bigclonebench_data_11933797",
                        "content": "public static void CopyFile(String in, String out) throws Exception {\nFileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();\nFileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_8564429",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = null;\nFileChannel destinationChannel = null;\ntry {\nsourceChannel = new FileInputStream(in).getChannel();\ndestinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n} finally {\nif (sourceChannel != null) sourceChannel.close();\nif (destinationChannel != null) destinationChannel.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2354960#15#26.java",
                        "__cluster__": 19
                },
                {
                        "id": "test_bigclonebench_data_10131427",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_17190057",
                        "content": "private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(input.getBytes(\"UTF-8\"));\nreturn toHexString(md.digest());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 64
                },
                {
                        "id": "pretrain_java_data_10008719",
                        "content": "<filename>references/bcb_chosen_clones/selected#7500#57#62.java\nprivate static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(input.getBytes(\"UTF-8\"));\nreturn toHexString(md.digest());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#7500#57#62.java",
                        "__cluster__": 64
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10141777",
                        "content": "private String encode(String str) {\nStringBuffer buf = new StringBuffer();\ntry {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(str.getBytes());\nbyte bytes[] = md5.digest();\nfor (int i = 0; i < bytes.length; i++) {\nString s = Integer.toHexString(bytes[i] & 0xff);\nif (s.length() == 1) {\nbuf.append(\"0\");\n}\nbuf.append(s);\n}\n} catch (Exception ex) {\n}\nreturn buf.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2122716#23#39.java",
                        "__cluster__": 150
                },
                {
                        "id": "test_bigclonebench_data_8164056",
                        "content": "private String encode(String str) {\nStringBuffer buf = new StringBuffer();\ntry {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(str.getBytes());\nbyte bytes[] = md5.digest();\nfor (int i = 0; i < bytes.length; i++) {\nString s = Integer.toHexString(bytes[i] & 0xff);\nif (s.length() == 1) {\nbuf.append(\"0\");\n}\nbuf.append(s);\n}\n} catch (Exception ex) {\n}\nreturn buf.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 150
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_16760971",
                        "content": "public static String generateHash(String key) {\nkey += \"use_your_key_here\";\nMessageDigest md;\ntry {\nmd = java.security.MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(key.getBytes());\nbyte[] bytes = md.digest();\nStringBuffer buff = new StringBuffer();\nfor (int l = 0; l < bytes.length; l++) {\nString hx = Integer.toHexString(0xFF & bytes[l]);\nif (hx.length() == 1) buff.append(\"0\");\nbuff.append(hx);\n}\nreturn buff.toString().trim();\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 518
                },
                {
                        "id": "pretrain_java_data_8593766",
                        "content": "public static String generateHash(String key) {\nkey += \"use_your_key_here\";\nMessageDigest md;\ntry {\nmd = java.security.MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(key.getBytes());\nbyte[] bytes = md.digest();\nStringBuffer buff = new StringBuffer();\nfor (int l = 0; l < bytes.length; l++) {\nString hx = Integer.toHexString(0xFF & bytes[l]);\nif (hx.length() == 1) buff.append(\"0\");\nbuff.append(hx);\n}\nreturn buff.toString().trim();\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1109903#36#55.java",
                        "__cluster__": 518
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2199604",
                        "content": "private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\nif (entry.isDirectory()) {\ncreateDir(new File(outputDir, entry.getName()));\nreturn;\n}\nFile outputFile = new File(outputDir, entry.getName());\nif (!outputFile.getParentFile().exists()) {\ncreateDir(outputFile.getParentFile());\n}\nBufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\nBufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\ntry {\nIOUtils.copy(inputStream, outputStream);\n} finally {\noutputStream.close();\ninputStream.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 529
                },
                {
                        "id": "pretrain_java_data_8538787",
                        "content": "private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\nif (entry.isDirectory()) {\ncreateDir(new File(outputDir, entry.getName()));\nreturn;\n}\nFile outputFile = new File(outputDir, entry.getName());\nif (!outputFile.getParentFile().exists()) {\ncreateDir(outputFile.getParentFile());\n}\nBufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\nBufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\ntry {\nIOUtils.copy(inputStream, outputStream);\n} finally {\noutputStream.close();\ninputStream.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#974343#27#44.java",
                        "__cluster__": 529
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10031096",
                        "content": "<filename>references/bcb_chosen_clones/selected#1080393#313#354.java\npublic PTask stop(PTask task, SyrupConnection con) throws Exception {\nPreparedStatement s = null;\nResultSet result = null;\ntry {\ns = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());\ns.setString(1, task.key());\nresult = s.executeQuery();\ncon.commit();\nif (result.next()) {\nString url = result.getString(\"worker\");\nInputStream i = null;\ntry {\nObject b = new URL(url).getContent();\nif (b instanceof InputStream) {\ni = (InputStream) b;\nbyte[] bb = new byte[256];\nint ll = i.read(bb);\nString k = new String(bb, 0, ll);\nif (k.equals(task.key())) {\nreturn task;\n}\n}\n} catch (Exception e) {\n} finally {\nif (i != null) {\ni.close();\n}\n}\nPreparedStatement s2 = null;\ns2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());\ns2.setString(1, task.key());\ns2.executeUpdate();\ntask = sqlImpl().queryFunctions().readPTask(task.key(), con);\nsqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);\ncon.commit();\n}\n} finally {\ncon.rollback();\nclose(result);\n}\nreturn task;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1080393#313#354.java",
                        "__cluster__": 551
                },
                {
                        "id": "test_bigclonebench_data_22411381",
                        "content": "public PTask stop(PTask task, SyrupConnection con) throws Exception {\nPreparedStatement s = null;\nResultSet result = null;\ntry {\ns = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());\ns.setString(1, task.key());\nresult = s.executeQuery();\ncon.commit();\nif (result.next()) {\nString url = result.getString(\"worker\");\nInputStream i = null;\ntry {\nObject b = new URL(url).getContent();\nif (b instanceof InputStream) {\ni = (InputStream) b;\nbyte[] bb = new byte[256];\nint ll = i.read(bb);\nString k = new String(bb, 0, ll);\nif (k.equals(task.key())) {\nreturn task;\n}\n}\n} catch (Exception e) {\n} finally {\nif (i != null) {\ni.close();\n}\n}\nPreparedStatement s2 = null;\ns2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());\ns2.setString(1, task.key());\ns2.executeUpdate();\ntask = sqlImpl().queryFunctions().readPTask(task.key(), con);\nsqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);\ncon.commit();\n}\n} finally {\ncon.rollback();\nclose(result);\n}\nreturn task;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 551
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10073721",
                        "content": "public void doUpdateByLoginID() throws Exception {\nif (!isValidate()) {\nthrow new CesSystemException(\"User_session.doUpdateByLoginID(): Illegal data values for update\");\n}\nConnection con = null;\nPreparedStatement ps = null;\nString strQuery = \"UPDATE \" + Common.USER_SESSION_TABLE + \" SET \" + \"session_id = ?, user_id = ?, begin_date = ? , \" + \"ip_address = ?, mac_no = ? \" + \"WHERE  login_id= ?\";\nDBOperation dbo = factory.createDBOperation(POOL_NAME);\ntry {\ncon = dbo.getConnection();\ncon.setAutoCommit(false);\nps = con.prepareStatement(strQuery);\nps.setString(1, this.sessionID);\nps.setInt(2, this.user.getUserID());\nps.setTimestamp(3, this.beginDate);\nps.setString(4, this.ipAddress);\nps.setString(5, this.macNO);\nps.setString(6, this.loginID);\nint resultCount = ps.executeUpdate();\nif (resultCount != 1) {\ncon.rollback();\nthrow new CesSystemException(\"User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! \" + \"resultCount = \" + resultCount);\n}\ncon.commit();\n} catch (SQLException se) {\nif (con != null) {\ncon.rollback();\n}\nthrow new CesSystemException(\"User_session.doUpdateByLoginID(): SQLException while updating user_session; \" + \"session_id = \" + this.sessionID + \" :\\n\\t\" + se);\n} finally {\ncon.setAutoCommit(true);\nclosePreparedStatement(ps);\ncloseConnection(dbo);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1841359#499#533.java",
                        "__cluster__": 630
                },
                {
                        "id": "test_bigclonebench_data_23531898",
                        "content": "public void doUpdateByLoginID() throws Exception {\nif (!isValidate()) {\nthrow new CesSystemException(\"User_session.doUpdateByLoginID(): Illegal data values for update\");\n}\nConnection con = null;\nPreparedStatement ps = null;\nString strQuery = \"UPDATE \" + Common.USER_SESSION_TABLE + \" SET \" + \"session_id = ?, user_id = ?, begin_date = ? , \" + \"ip_address = ?, mac_no = ? \" + \"WHERE  login_id= ?\";\nDBOperation dbo = factory.createDBOperation(POOL_NAME);\ntry {\ncon = dbo.getConnection();\ncon.setAutoCommit(false);\nps = con.prepareStatement(strQuery);\nps.setString(1, this.sessionID);\nps.setInt(2, this.user.getUserID());\nps.setTimestamp(3, this.beginDate);\nps.setString(4, this.ipAddress);\nps.setString(5, this.macNO);\nps.setString(6, this.loginID);\nint resultCount = ps.executeUpdate();\nif (resultCount != 1) {\ncon.rollback();\nthrow new CesSystemException(\"User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! \" + \"resultCount = \" + resultCount);\n}\ncon.commit();\n} catch (SQLException se) {\nif (con != null) {\ncon.rollback();\n}\nthrow new CesSystemException(\"User_session.doUpdateByLoginID(): SQLException while updating user_session; \" + \"session_id = \" + this.sessionID + \" :\\n\\t\" + se);\n} finally {\ncon.setAutoCommit(true);\nclosePreparedStatement(ps);\ncloseConnection(dbo);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 630
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_16851955",
                        "content": "@Test\npublic void testTrainingBackprop() throws IOException {\nFile temp = File.createTempFile(\"fannj_\", \".tmp\");\ntemp.deleteOnExit();\nIOUtils.copy(this.getClass().getResourceAsStream(\"xor.data\"), new FileOutputStream(temp));\nList<Layer> layers = new ArrayList<Layer>();\nlayers.add(Layer.create(2));\nlayers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\nlayers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\nlayers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\nFann fann = new Fann(layers);\nTrainer trainer = new Trainer(fann);\ntrainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\nfloat desiredError = .001f;\nfloat mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\nassertTrue(\"\" + mse, mse <= desiredError);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 779
                },
                {
                        "id": "pretrain_java_data_10041798",
                        "content": "@Test\npublic void testTrainingDefault() throws IOException {\nFile temp = File.createTempFile(\"fannj_\", \".tmp\");\ntemp.deleteOnExit();\nIOUtils.copy(this.getClass().getResourceAsStream(\"xor.data\"), new FileOutputStream(temp));\nList<Layer> layers = new ArrayList<Layer>();\nlayers.add(Layer.create(2));\nlayers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\nlayers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\nFann fann = new Fann(layers);\nTrainer trainer = new Trainer(fann);\nfloat desiredError = .001f;\nfloat mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\nassertTrue(\"\" + mse, mse <= desiredError);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2324737#15#29.java",
                        "__cluster__": 779
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_14882263",
                        "content": "private void UploadActionPerformed(ActionEvent evt) {\nJFileChooser chooser = new JFileChooser();\nFileNameExtensionFilter filter = new FileNameExtensionFilter(\"*.jpg\", \"jpg\");\nchooser.setFileFilter(filter);\nFile dir = new File(System.getProperty(\"user.home\"));\nchooser.setCurrentDirectory(dir);\nComponent parent = null;\nint returnVal = chooser.showOpenDialog(parent);\nif (returnVal == JFileChooser.APPROVE_OPTION) {\nUserStatus.setText(\"Bitte warten\");\n}\ntry {\nPic.setVisible(false);\nFTPClient client = new FTPClient();\nclient.connect(\"showus.de\");\nclient.login(\"web2\", \"kcinnay88\");\nclient.enterLocalActiveMode();\nclient.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);\nclient.setFileType(FTPClient.BINARY_FILE_TYPE);\nint reply = client.getReplyCode();\nSystem.out.println(\"Connect returned: \" + reply);\nFileInputStream in = new FileInputStream(chooser.getSelectedFile().getAbsolutePath());\nSystem.out.println(\"Uploading File\");\nclient.storeFile(\"/html/Applet/user/\" + Config.id + \".jpg\", in);\nclient.logout();\nin.close();\nSystem.out.println(\"done\");\nUserStatus.setText(\"Upload fertig, Bild wird aktuallisiert\");\n} catch (SocketException e) {\ne.printStackTrace();\n} catch (IOException e) {\nUserStatus.setText(\"Fehler beim Upload\");\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 819
                },
                {
                        "id": "pretrain_java_data_8558164",
                        "content": "private void UploadActionPerformed(ActionEvent evt) {\nJFileChooser chooser = new JFileChooser();\nFileNameExtensionFilter filter = new FileNameExtensionFilter(\"*.jpg\", \"jpg\");\nchooser.setFileFilter(filter);\nFile dir = new File(System.getProperty(\"user.home\"));\nchooser.setCurrentDirectory(dir);\nComponent parent = null;\nint returnVal = chooser.showOpenDialog(parent);\nif (returnVal == JFileChooser.APPROVE_OPTION) {\nUserStatus.setText(\"Bitte warten\");\n}\ntry {\nPic.setVisible(false);\nFTPClient client = new FTPClient();\nclient.connect(\"showus.de\");\nclient.login(\"web2\", \"kcinnay88\");\nclient.enterLocalActiveMode();\nclient.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);\nclient.setFileType(FTPClient.BINARY_FILE_TYPE);\nint reply = client.getReplyCode();\nSystem.out.println(\"Connect returned: \" + reply);\nFileInputStream in = new FileInputStream(chooser.getSelectedFile().getAbsolutePath());\nSystem.out.println(\"Uploading File\");\nclient.storeFile(\"/html/Applet/user/\" + Config.id + \".jpg\", in);\nclient.logout();\nin.close();\nSystem.out.println(\"done\");\nUserStatus.setText(\"Upload fertig, Bild wird aktuallisiert\");\n} catch (SocketException e) {\ne.printStackTrace();\n} catch (IOException e) {\nUserStatus.setText(\"Fehler beim Upload\");\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2119665#291#325.java",
                        "__cluster__": 819
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2668634",
                        "content": "public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\nFile tempFile = null;\nJarFile jin = null;\nJarOutputStream jout = null;\nFileChannel srcChannel = null;\nFileChannel dstChannel = null;\ntry {\nString portletApplicationName = getPortletApplicationName(outputName);\nSystem.out.println(\"portletApplicationName = \" + portletApplicationName);\ntempFile = File.createTempFile(\"webmill-delpoy-\", \"\");\ntempFile.deleteOnExit();\njin = new JarFile(inputName);\njout = new JarOutputStream(new FileOutputStream(tempFile));\nDocument webXml = null;\nDocument portletXml = null;\nDocument contextXml = null;\nZipEntry src;\nInputStream source;\nEnumeration zipEntries = jin.entries();\nwhile (zipEntries.hasMoreElements()) {\nsrc = (ZipEntry) zipEntries.nextElement();\nsource = jin.getInputStream(src);\ntry {\nString target = src.getName();\nif (WEB_INF_WEB_XML.equals(target)) {\nSystem.out.println(\"Found web.xml\");\nwebXml = parseXml(source);\n} else if (WEB_INF_PORTLET_XML.equals(target)) {\nSystem.out.println(\"Found WEB-INF/portlet.xml\");\nportletXml = parseXml(source);\n} else if (META_INF_CONTEXT_XML.equals(target)) {\nSystem.out.println(\"Found META-INF/context.xml\");\ncontextXml = parseXml(source);\n}\n} finally {\nsource.close();\n}\n}\nif (webXml == null) {\nthrow new IllegalArgumentException(\"WEB-INF/web.xml not found\");\n}\nif (portletXml == null) {\nthrow new IllegalArgumentException(\"WEB-INF/portlet.xml not found\");\n}\nWebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\nwebRewriter.processWebXML();\nWebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\ncontextRewriter.processContextXML();\njin = new JarFile(inputName);\nzipEntries = jin.entries();\nwhile (zipEntries.hasMoreElements()) {\nsrc = (ZipEntry) zipEntries.nextElement();\nsource = jin.getInputStream(src);\ntry {\nString target = src.getName();\nString fullTarget = '/' + target;\nif (stripLoggers && target.endsWith(\".jar\") && (target.startsWith(\"WEB-INF/lib/commons-logging\") || target.startsWith(\"WEB-INF/lib/log4j\"))) {\nSystem.out.println(\"Skip logger \" + target);\ncontinue;\n} else {\nif (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\nSystem.out.println(\"Skip portlet tld file \" + fullTarget);\ncontinue;\n} else if (target.equals(WEB_INF_WEB_XML)) {\nSystem.out.println(\"Skip web.xml file \" + target);\ncontinue;\n} else if (target.equals(WEB_INF_PORTLET_XML)) {\nSystem.out.println(\"Skip portlet.xml file \" + target);\ncontinue;\n} else if (target.equals(META_INF_CONTEXT_XML)) {\nSystem.out.println(\"Skip context.xml file \" + target);\ncontinue;\n}\nSystem.out.println(\"Add file \" + target);\n}\naddFile(target, source, jout);\n} finally {\nsource.close();\n}\n}\naddFile(WEB_INF_WEB_XML, webXml, jout);\naddFile(WEB_INF_PORTLET_XML, portletXml, jout);\naddFile(META_INF_CONTEXT_XML, contextXml, jout);\nSystem.out.println(\"Attempting to add portlet.tld to war...\");\nInputStream is = this.getClass().getResourceAsStream(\"/org/riverock/webmill/container/tags/portlet.tld\");\nif (is == null) {\nSystem.out.println(\"Failed to find portlet.tld in classpath\");\n} else {\nString portletTldFile = webRewriter.getRealPortletTldFile();\nif (portletTldFile.charAt(0) == '/') {\nportletTldFile = portletTldFile.substring(1);\n}\nSystem.out.println(\"Adding file \" + portletTldFile);\ntry {\naddFile(portletTldFile, is, jout);\n} finally {\nis.close();\n}\n}\njout.close();\njin.close();\njin = null;\njout = null;\nSystem.out.println(\"Creating war \" + outputName + \" ...\");\nSystem.out.flush();\nsrcChannel = new FileInputStream(tempFile).getChannel();\ndstChannel = new FileOutputStream(outputName).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\nsrcChannel = null;\ndstChannel.close();\ndstChannel = null;\ntempFile.delete();\ntempFile = null;\nSystem.out.println(\"War \" + outputName + \" created\");\nSystem.out.flush();\n} finally {\nif (srcChannel != null && srcChannel.isOpen()) {\ntry {\nsrcChannel.close();\n} catch (IOException e1) {\n}\n}\nif (dstChannel != null && dstChannel.isOpen()) {\ntry {\ndstChannel.close();\n} catch (IOException e1) {\n}\n}\nif (jin != null) {\ntry {\njin.close();\njin = null;\n} catch (IOException e1) {\n}\n}\nif (jout != null) {\ntry {\njout.close();\njout = null;\n} catch (IOException e1) {\n}\n}\nif (tempFile != null && tempFile.exists()) {\ntempFile.delete();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 299
                },
                {
                        "id": "pretrain_java_data_10021803",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#867324#52#199.java\npublic WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\nFile tempFile = null;\nJarFile jin = null;\nJarOutputStream jout = null;\nFileChannel srcChannel = null;\nFileChannel dstChannel = null;\ntry {\nString portletApplicationName = getPortletApplicationName(outputName);\nSystem.out.println(\"portletApplicationName = \" + portletApplicationName);\ntempFile = File.createTempFile(\"webmill-delpoy-\", \"\");\ntempFile.deleteOnExit();\njin = new JarFile(inputName);\njout = new JarOutputStream(new FileOutputStream(tempFile));\nDocument webXml = null;\nDocument portletXml = null;\nDocument contextXml = null;\nZipEntry src;\nInputStream source;\nEnumeration zipEntries = jin.entries();\nwhile (zipEntries.hasMoreElements()) {\nsrc = (ZipEntry) zipEntries.nextElement();\nsource = jin.getInputStream(src);\ntry {\nString target = src.getName();\nif (WEB_INF_WEB_XML.equals(target)) {\nSystem.out.println(\"Found web.xml\");\nwebXml = parseXml(source);\n} else if (WEB_INF_PORTLET_XML.equals(target)) {\nSystem.out.println(\"Found WEB-INF/portlet.xml\");\nportletXml = parseXml(source);\n} else if (META_INF_CONTEXT_XML.equals(target)) {\nSystem.out.println(\"Found META-INF/context.xml\");\ncontextXml = parseXml(source);\n}\n} finally {\nsource.close();\n}\n}\nif (webXml == null) {\nthrow new IllegalArgumentException(\"WEB-INF/web.xml not found\");\n}\nif (portletXml == null) {\nthrow new IllegalArgumentException(\"WEB-INF/portlet.xml not found\");\n}\nWebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\nwebRewriter.processWebXML();\nWebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\ncontextRewriter.processContextXML();\njin = new JarFile(inputName);\nzipEntries = jin.entries();\nwhile (zipEntries.hasMoreElements()) {\nsrc = (ZipEntry) zipEntries.nextElement();\nsource = jin.getInputStream(src);\ntry {\nString target = src.getName();\nString fullTarget = '/' + target;\nif (stripLoggers && target.endsWith(\".jar\") && (target.startsWith(\"WEB-INF/lib/commons-logging\") || target.startsWith(\"WEB-INF/lib/log4j\"))) {\nSystem.out.println(\"Skip logger \" + target);\ncontinue;\n} else {\nif (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\nSystem.out.println(\"Skip portlet tld file \" + fullTarget);\ncontinue;\n} else if (target.equals(WEB_INF_WEB_XML)) {\nSystem.out.println(\"Skip web.xml file \" + target);\ncontinue;\n} else if (target.equals(WEB_INF_PORTLET_XML)) {\nSystem.out.println(\"Skip portlet.xml file \" + target);\ncontinue;\n} else if (target.equals(META_INF_CONTEXT_XML)) {\nSystem.out.println(\"Skip context.xml file \" + target);\ncontinue;\n}\nSystem.out.println(\"Add file \" + target);\n}\naddFile(target, source, jout);\n} finally {\nsource.close();\n}\n}\naddFile(WEB_INF_WEB_XML, webXml, jout);\naddFile(WEB_INF_PORTLET_XML, portletXml, jout);\naddFile(META_INF_CONTEXT_XML, contextXml, jout);\nSystem.out.println(\"Attempting to add portlet.tld to war...\");\nInputStream is = this.getClass().getResourceAsStream(\"/org/riverock/webmill/container/tags/portlet.tld\");\nif (is == null) {\nSystem.out.println(\"Failed to find portlet.tld in classpath\");\n} else {\nString portletTldFile = webRewriter.getRealPortletTldFile();\nif (portletTldFile.charAt(0) == '/') {\nportletTldFile = portletTldFile.substring(1);\n}\nSystem.out.println(\"Adding file \" + portletTldFile);\ntry {\naddFile(portletTldFile, is, jout);\n} finally {\nis.close();\n}\n}\njout.close();\njin.close();\njin = null;\njout = null;\nSystem.out.println(\"Creating war \" + outputName + \" ...\");\nSystem.out.flush();\nsrcChannel = new FileInputStream(tempFile).getChannel();\ndstChannel = new FileOutputStream(outputName).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\nsrcChannel = null;\ndstChannel.close();\ndstChannel = null;\ntempFile.delete();\ntempFile = null;\nSystem.out.println(\"War \" + outputName + \" created\");\nSystem.out.flush();\n} finally {\nif (srcChannel != null && srcChannel.isOpen()) {\ntry {\nsrcChannel.close();\n} catch (IOException e1) {\n}\n}\nif (dstChannel != null && dstChannel.isOpen()) {\ntry {\ndstChannel.close();\n} catch (IOException e1) {\n}\n}\nif (jin != null) {\ntry {\njin.close();\njin = null;\n} catch (IOException e1) {\n}\n}\nif (jout != null) {\ntry {\njout.close();\njout = null;\n} catch (IOException e1) {\n}\n}\nif (tempFile != null && tempFile.exists()) {\ntempFile.delete();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#867324#52#199.java",
                        "__cluster__": 299
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_693636",
                        "content": "public static int createEmptyCart() {\nint SHOPPING_ID = 0;\nConnection con = null;\ntry {\ncon = getConnection();\n} catch (java.lang.Exception ex) {\nex.printStackTrace();\n}\ntry {\nPreparedStatement insert_cart = null;\nSHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(\"shopping_cart\"));\ninsert_cart = con.prepareStatement(\"INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )\");\ninsert_cart.setInt(1, SHOPPING_ID);\ninsert_cart.executeUpdate();\ncon.commit();\ninsert_cart.close();\nreturnConnection(con);\n} catch (java.lang.Exception ex) {\ntry {\ncon.rollback();\nex.printStackTrace();\n} catch (Exception se) {\nSystem.err.println(\"Transaction rollback failed.\");\n}\n}\nreturn SHOPPING_ID;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 224
                },
                {
                        "id": "pretrain_java_data_11715998",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static int createEmptyCart() {\nint SHOPPING_ID = 0;\nConnection con = null;\ntry {\ncon = getConnection();\n} catch (java.lang.Exception ex) {\nex.printStackTrace();\n}\ntry {\nPreparedStatement insert_cart = null;\nSHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(\"shopping_cart\"));\ninsert_cart = con.prepareStatement(\"INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )\");\ninsert_cart.setInt(1, SHOPPING_ID);\ninsert_cart.executeUpdate();\ncon.commit();\ninsert_cart.close();\nreturnConnection(con);\n} catch (java.lang.Exception ex) {\ntry {\ncon.rollback();\nex.printStackTrace();\n} catch (Exception se) {\nSystem.err.println(\"Transaction rollback failed.\");\n}\n}\nreturn SHOPPING_ID;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#12420#520#546.java",
                        "__cluster__": 224
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21395184",
                        "content": "@Test\npublic void test30_passwordAging() throws Exception {\nDb db = DbConnection.defaultCieDbRW();\ntry {\ndb.begin();\nConfig.setProperty(db, \"com.entelience.esis.security.passwordAge\", \"5\", 1);\nPreparedStatement pst = db.prepareStatement(\"UPDATE e_people SET last_passwd_change = '2006-07-01' WHERE user_name = ?\");\npst.setString(1, \"esis\");\ndb.executeUpdate(pst);\ndb.commit();\np_logout();\nt30login1();\nassertTrue(isPasswordExpired());\nPeopleInfoLine me = getCurrentPeople();\nassertNotNull(me.getPasswordExpirationDate());\nassertTrue(me.getPasswordExpirationDate().before(DateHelper.now()));\nt30chgpasswd();\nassertFalse(isPasswordExpired());\nme = getCurrentPeople();\nassertNotNull(me.getPasswordExpirationDate());\nassertTrue(me.getPasswordExpirationDate().after(DateHelper.now()));\np_logout();\nt30login2();\nassertFalse(isPasswordExpired());\nt30chgpasswd2();\ndb.begin();\nConfig.setProperty(db, \"com.entelience.esis.security.passwordAge\", \"0\", 1);\ndb.commit();\n} catch (Exception e) {\ne.printStackTrace();\ndb.rollback();\n} finally {\ndb.safeClose();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 274
                },
                {
                        "id": "pretrain_java_data_11744959",
                        "content": "<reponame>cragkhit/elasticsearch\n@Test\npublic void test30_passwordAging() throws Exception {\nDb db = DbConnection.defaultCieDbRW();\ntry {\ndb.begin();\nConfig.setProperty(db, \"com.entelience.esis.security.passwordAge\", \"5\", 1);\nPreparedStatement pst = db.prepareStatement(\"UPDATE e_people SET last_passwd_change = '<PASSWORD>' WHERE user_name = ?\");\npst.setString(1, \"esis\");\ndb.executeUpdate(pst);\ndb.commit();\np_logout();\nt30login1();\nassertTrue(isPasswordExpired());\nPeopleInfoLine me = getCurrentPeople();\nassertNotNull(me.getPasswordExpirationDate());\nassertTrue(me.getPasswordExpirationDate().before(DateHelper.now()));\nt30chgpasswd();\nassertFalse(isPasswordExpired());\nme = getCurrentPeople();\nassertNotNull(me.getPasswordExpirationDate());\nassertTrue(me.getPasswordExpirationDate().after(DateHelper.now()));\np_logout();\nt30login2();\nassertFalse(isPasswordExpired());\nt30chgpasswd2();\ndb.begin();\nConfig.setProperty(db, \"com.entelience.esis.security.passwordAge\", \"0\", 1);\ndb.commit();\n} catch (Exception e) {\ne.printStackTrace();\ndb.rollback();\n} finally {\ndb.safeClose();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#631294#460#494.java",
                        "__cluster__": 274
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_3409084",
                        "content": "protected String getRequestContent(String urlText) throws Exception {\nURL url = new URL(urlText);\nHttpURLConnection urlcon = (HttpURLConnection) url.openConnection();\nurlcon.connect();\nBufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));\nString line = reader.readLine();\nreader.close();\nurlcon.disconnect();\nreturn line;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 76
                },
                {
                        "id": "pretrain_java_data_11656322",
                        "content": "protected String getRequestContent(String urlText, String method) throws Exception {\nURL url = new URL(urlText);\nHttpURLConnection urlcon = (HttpURLConnection) url.openConnection();\nurlcon.setRequestProperty(\"Referer\", REFERER_STR);\nurlcon.setRequestMethod(method);\nurlcon.setUseCaches(false);\nurlcon.connect();\nBufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));\nString line = reader.readLine();\nreader.close();\nurlcon.disconnect();\nreturn line;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1922939#44#56.java",
                        "__cluster__": 76
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_11690352",
                        "content": "<gh_stars>0\n//\u4f20\u5165\u53c2\u6570:\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4\n//\u4f20\u51fa\u53c2\u6570:\u5b57\u8282\u6570\u7ec4\u7684MD5\u7ed3\u679c\u5b57\u7b26\u4e32\npublic class MD5{\npublic static String getMD5(byte[] source){\nString s=null;\n//\u7528\u6765\u5c06\u5b57\u8282\u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u7684\u5b57\u7b26\nchar hexDigits[]={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};\ntry\n{\n//java.security.MessageDigest\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u4e86MD5\u8ba1\u7b97\njava.security.MessageDigest md=\njava.security.MessageDigest.getInstance(\"MD5\");\nmd.updata(source);\nbyte tmp[] = md.digest();\n//MD5\u7684\u8ba1\u7b97\u7ed3\u679c\u662f\u4e00\u4e2a128\u4f4d\u7684\u957f\u6574\u6570\nchar str[] = new char[16*2];\n//\u6bcf\u4e2a\u5b57\u7b26\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a\uff0c\u4f7f\u7528\u4e24\u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u8868\u793a\u6210\u5341\u516d\u8fdb\u5236\u9700\u898132\u4e2a\u5b57\u7b26\nint k=0;   //\u8868\u793a\u8f6c\u6362\u7ed3\u679c\u4e2d\u5bf9\u5e94\u7684\u5b57\u7b26\u4f4d\u7f6e\nfor(int i=0;i<16;i++){\n//\u4ece\u7b2c\u4e00\u4e2a\u5b57\u8282\u5f00\u59cb\u5c06MD5\u6bcf\u4e00\u4e2a\u5b57\u8282\u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u5b57\u7b26\nbyte byte0 = tmp[i];\n//\u53d6\u5b57\u8282\u4e2d\u9ad8\u56db\u4f4d\u7684\u6570\u5b57\u8f6c\u6362,\u5c06\u7b26\u53f7\u4f4d\u4e00\u8d77\u53f3\u79fb\u52a8\nstr[k++] = hexDigits[byte0 >>> 4 & 0xf];\nstr[k++] = hexDigits[byte0 & 0xf]; //\u53d6\u5b57\u8282\u4e2d\u4f4e\u5730\u4f4d\u7684\u5b57\u8282\u8f6c\u6362\n}\n//\u8f6c\u6362\u540e\u7684\u7ed3\u679c\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\ns = new String(str);\n}\ncatch(Exception e)\n{\ne.printStackTrace();\n}\nreturn s;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "Kris-zf/Spider",
                        "max_stars_repo_path": "algorithm/MD5.java",
                        "__cluster__": 815
                },
                {
                        "id": "test_bigclonebench_data_3252116",
                        "content": "public static String getMD5(String source) {\nString s = null;\nchar hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\ntry {\njava.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");\nmd.update(source.getBytes());\nbyte tmp[] = md.digest();\nchar str[] = new char[16 * 2];\nint k = 0;\nfor (int i = 0; i < 16; i++) {\nbyte byte0 = tmp[i];\nstr[k++] = hexDigits[byte0 >>> 4 & 0xf];\nstr[k++] = hexDigits[byte0 & 0xf];\n}\ns = new String(str);\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn s;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 815
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_11618517",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#1628840#642#656.java\npublic static void copyFile(File src, File dst) throws IOException {\ntry {\nInputStream in = new FileInputStream(src);\nOutputStream out = new FileOutputStream(dst);\nbyte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nin.close();\nout.close();\n} catch (FileNotFoundException e1) {\nMLUtil.runtimeError(e1, src.toString());\n} catch (IOException e2) {\nMLUtil.runtimeError(e2, src.toString());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1628840#642#656.java",
                        "__cluster__": 119
                },
                {
                        "id": "test_bigclonebench_data_8490297",
                        "content": "public static void copyFile(File src, File dst) throws IOException {\ntry {\nInputStream in = new FileInputStream(src);\nOutputStream out = new FileOutputStream(dst);\nbyte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nin.close();\nout.close();\n} catch (FileNotFoundException e1) {\nMLUtil.runtimeError(e1, src.toString());\n} catch (IOException e2) {\nMLUtil.runtimeError(e2, src.toString());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 119
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_12306305",
                        "content": "private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\nif (destFile.exists() && destFile.isDirectory()) {\nthrow new IOException(\"Destination '\" + destFile + \"' exists but is a directory\");\n}\nFileChannel input = new FileInputStream(srcFile).getChannel();\ntry {\nFileChannel output = new FileOutputStream(destFile).getChannel();\ntry {\noutput.transferFrom(input, 0, input.size());\n} finally {\nIOUtil.closeQuietly(output);\n}\n} finally {\nIOUtil.closeQuietly(input);\n}\nif (srcFile.length() != destFile.length()) {\nthrow new IOException(\"Failed to copy full contents from '\" + srcFile + \"' to '\" + destFile + \"'\");\n}\nif (preserveFileDate) {\ndestFile.setLastModified(srcFile.lastModified());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 153
                },
                {
                        "id": "pretrain_java_data_13318868",
                        "content": "private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\nif (destFile.exists() && destFile.isDirectory()) {\nthrow new IOException(\"Destination '\" + destFile + \"' exists but is a directory\");\n}\nFileChannel input = new FileInputStream(srcFile).getChannel();\ntry {\nFileChannel output = new FileOutputStream(destFile).getChannel();\ntry {\noutput.transferFrom(input, 0, input.size());\n} finally {\nIOUtils.closeQuietly(output);\n}\n} finally {\nIOUtils.closeQuietly(input);\n}\nif (srcFile.length() != destFile.length()) {\nthrow new IOException(\"Failed to copy full contents from '\" + srcFile + \"' to '\" + destFile + \"'\");\n}\nif (preserveFileDate) {\ndestFile.setLastModified(srcFile.lastModified());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1208869#460#481.java",
                        "__cluster__": 153
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8166767",
                        "content": "public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {\nretryTimes--;\ntry {\nString url = getServiceUrl() + \"/\" + invocation.getMethod().getName();\nHttpPost postMethod = new HttpPost(url);\nif (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));\nHttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);\nStatusLine sl = rsp.getStatusLine();\nif (sl.getStatusCode() >= 300) {\nthrow new RuntimeException(\"Did not receive successful HTTP response: status code = \" + sl.getStatusCode() + \", status message = [\" + sl.getReasonPhrase() + \"]\");\n}\nHttpEntity entity = rsp.getEntity();\nStringBuilder sb = new StringBuilder();\nInputStream is = entity.getContent();\nBufferedReader reader = new BufferedReader(new InputStreamReader(is, \"utf-8\"));\nString line;\nwhile ((line = reader.readLine()) != null) sb.append(line).append(\"\\n\");\nreader.close();\nis.close();\nString responseBody = null;\nif (sb.length() > 0) {\nsb.deleteCharAt(sb.length() - 1);\nresponseBody = sb.toString();\n}\nType t = invocation.getMethod().getGenericReturnType();\nif (t.equals(Void.class) || responseBody == null) return null;\nreturn JsonUtils.fromJson(responseBody, t);\n} catch (ConnectTimeoutException e) {\nif (retryTimes < 0) throw e;\nif (urlFromDiscovery) {\nString serviceUrl = discoverServiceUrl(getServiceInterface().getName());\nif (!serviceUrl.equals(getServiceUrl())) {\nsetServiceUrl(serviceUrl);\nlog.info(\"relocate service url:\" + serviceUrl);\n}\n}\nreturn invoke(invocation, retryTimes);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 201
                },
                {
                        "id": "pretrain_java_data_11796181",
                        "content": "<reponame>cragkhit/elasticsearch\npublic Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {\nretryTimes--;\ntry {\nString url = getServiceUrl() + \"/\" + invocation.getMethod().getName();\nHttpPost postMethod = new HttpPost(url);\nif (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));\nHttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);\nStatusLine sl = rsp.getStatusLine();\nif (sl.getStatusCode() >= 300) {\nthrow new RuntimeException(\"Did not receive successful HTTP response: status code = \" + sl.getStatusCode() + \", status message = [\" + sl.getReasonPhrase() + \"]\");\n}\nHttpEntity entity = rsp.getEntity();\nStringBuilder sb = new StringBuilder();\nInputStream is = entity.getContent();\nBufferedReader reader = new BufferedReader(new InputStreamReader(is, \"utf-8\"));\nString line;\nwhile ((line = reader.readLine()) != null) sb.append(line).append(\"\\n\");\nreader.close();\nis.close();\nString responseBody = null;\nif (sb.length() > 0) {\nsb.deleteCharAt(sb.length() - 1);\nresponseBody = sb.toString();\n}\nType t = invocation.getMethod().getGenericReturnType();\nif (t.equals(Void.class) || responseBody == null) return null;\nreturn JsonUtils.fromJson(responseBody, t);\n} catch (ConnectTimeoutException e) {\nif (retryTimes < 0) throw e;\nif (urlFromDiscovery) {\nString serviceUrl = discoverServiceUrl(getServiceInterface().getName());\nif (!serviceUrl.equals(getServiceUrl())) {\nsetServiceUrl(serviceUrl);\nlog.info(\"relocate service url:\" + serviceUrl);\n}\n}\nreturn invoke(invocation, retryTimes);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1677687#136#174.java",
                        "__cluster__": 201
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3745402",
                        "content": "static Cipher createCipher(String passwd, int mode) throws Exception {\nPBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\nSecretKey key = keyFactory.generateSecret(keySpec);\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(\"input\".getBytes());\nbyte[] digest = md.digest();\nbyte[] salt = new byte[8];\nfor (int i = 0; i < 8; ++i) salt[i] = digest[i];\nPBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);\nCipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\ncipher.init(mode, key, paramSpec);\nreturn cipher;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 322
                },
                {
                        "id": "pretrain_java_data_13221271",
                        "content": "static Cipher createCipher(String passwd, int mode) throws Exception {\nPBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\nSecretKey key = keyFactory.generateSecret(keySpec);\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(\"input\".getBytes());\nbyte[] digest = md.digest();\nbyte[] salt = new byte[8];\nfor (int i = 0; i < 8; ++i) salt[i] = digest[i];\nPBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);\nCipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\ncipher.init(mode, key, paramSpec);\nreturn cipher;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2143657#27#40.java",
                        "__cluster__": 322
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_13253464",
                        "content": "public void execUpdate(String sqlStmts[]) throws SQLException {\nif (conn == null || conn.isClosed()) throw new SQLException(\"The connection has not been established yet.\");\nif (sqlStmts == null || sqlStmts.length == 0) throw new SQLException(\"SQL-statement is null.\");\nconn.setAutoCommit(false);\ntry {\nfor (int i = 0; i < sqlStmts.length; i++) {\nstmt = conn.createStatement();\nstmt.executeUpdate(sqlStmts[i]);\nlogger.debug(sqlStmts[i]);\nstmt.close();\n}\nconn.commit();\n} catch (SQLException ex) {\nconn.rollback();\nthrow ex;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#670167#157#173.java",
                        "__cluster__": 557
                },
                {
                        "id": "test_bigclonebench_data_17193692",
                        "content": "public void execUpdate(String sqlStmts[]) throws SQLException {\nif (conn == null || conn.isClosed()) throw new SQLException(\"The connection has not been established yet.\");\nif (sqlStmts == null || sqlStmts.length == 0) throw new SQLException(\"SQL-statement is null.\");\nconn.setAutoCommit(false);\ntry {\nfor (int i = 0; i < sqlStmts.length; i++) {\nstmt = conn.createStatement();\nstmt.executeUpdate(sqlStmts[i]);\nlogger.debug(sqlStmts[i]);\nstmt.close();\n}\nconn.commit();\n} catch (SQLException ex) {\nconn.rollback();\nthrow ex;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 557
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11784397",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static String fetchUrl(String urlString) {\ntry {\nURL url = new URL(urlString);\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\nString line = null;\nStringBuilder builder = new StringBuilder();\nwhile ((line = reader.readLine()) != null) {\nbuilder.append(line);\n}\nreader.close();\nreturn builder.toString();\n} catch (MalformedURLException e) {\n} catch (IOException e) {\n}\nreturn \"\";\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2544207#15#30.java",
                        "__cluster__": 62
                },
                {
                        "id": "test_bigclonebench_data_14038176",
                        "content": "public static String fetchUrl(String urlString) {\ntry {\nURL url = new URL(urlString);\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\nString line = null;\nStringBuilder builder = new StringBuilder();\nwhile ((line = reader.readLine()) != null) {\nbuilder.append(line);\n}\nreader.close();\nreturn builder.toString();\n} catch (MalformedURLException e) {\n} catch (IOException e) {\n}\nreturn \"\";\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 62
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_13322299",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\nFileChannel inputChannel = new FileInputStream(inputFile).getChannel();\nFileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\ntry {\ninputChannel.transferTo(0, inputChannel.size(), outputChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inputChannel != null) inputChannel.close();\nif (outputChannel != null) outputChannel.close();\n}\n}",
                        "max_stars_count": 24,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#310688#127#138.java",
                        "__cluster__": 787
                },
                {
                        "id": "test_bigclonebench_data_19868933",
                        "content": "public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\nFileChannel inputChannel = new FileInputStream(inputFile).getChannel();\nFileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\ntry {\ninputChannel.transferTo(0, inputChannel.size(), outputChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inputChannel != null) inputChannel.close();\nif (outputChannel != null) outputChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 787
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8953394",
                        "content": "private void update(String statement, SyrupConnection con, boolean do_log) throws Exception {\nStatement s = null;\ntry {\ns = con.createStatement();\ns.executeUpdate(statement);\ncon.commit();\n} catch (Throwable e) {\nif (do_log) {\nlogger.log(Level.INFO, \"Update failed. Transaction is rolled back\", e);\n}\ncon.rollback();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 17
                },
                {
                        "id": "pretrain_java_data_11790808",
                        "content": "<filename>references/bcb_chosen_clones/selected#1115945#174#186.java\nprivate void update(String statement, SyrupConnection con, boolean do_log) throws Exception {\nStatement s = null;\ntry {\ns = con.createStatement();\ns.executeUpdate(statement);\ncon.commit();\n} catch (Throwable e) {\nif (do_log) {\nlogger.log(Level.INFO, \"Update failed. Transaction is rolled back\", e);\n}\ncon.rollback();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1115945#174#186.java",
                        "__cluster__": 17
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_19134229",
                        "content": "private void copyFile(final String sourceFileName, final File path) throws IOException {\nfinal File source = new File(sourceFileName);\nfinal File destination = new File(path, source.getName());\nFileChannel srcChannel = null;\nFileChannel dstChannel = null;\ntry {\nsrcChannel = new FileInputStream(source).getChannel();\ndstChannel = new FileOutputStream(destination).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n} finally {\ntry {\nif (dstChannel != null) {\ndstChannel.close();\n}\n} catch (Exception exception) {\n}\ntry {\nif (srcChannel != null) {\nsrcChannel.close();\n}\n} catch (Exception exception) {\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 195
                },
                {
                        "id": "pretrain_java_data_14945096",
                        "content": "private void copyFile(final String sourceFileName, final File path) throws IOException {\nfinal File source = new File(sourceFileName);\nfinal File destination = new File(path, source.getName());\nFileChannel srcChannel = null;\nFileChannel dstChannel = null;\ntry {\nsrcChannel = new FileInputStream(source).getChannel();\ndstChannel = new FileOutputStream(destination).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n} finally {\ntry {\nif (dstChannel != null) {\ndstChannel.close();\n}\n} catch (Exception exception) {\n}\ntry {\nif (srcChannel != null) {\nsrcChannel.close();\n}\n} catch (Exception exception) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#115970#33#56.java",
                        "__cluster__": 195
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_14949274",
                        "content": "private String getPrefsKey(String key) {\ntry {\nif (MD5 == null) MD5 = MessageDigest.getInstance(\"MD5\");\nMD5.reset();\nMD5.update(key.getBytes(\"UTF-8\"));\nbyte[] resultBytes = MD5.digest();\nreturn toHexString(resultBytes);\n} catch (Exception nsae) {\nreturn key;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2105151#94#104.java",
                        "__cluster__": 388
                },
                {
                        "id": "test_bigclonebench_data_6517139",
                        "content": "private String getPrefsKey(String key) {\ntry {\nif (MD5 == null) MD5 = MessageDigest.getInstance(\"MD5\");\nMD5.reset();\nMD5.update(key.getBytes(\"UTF-8\"));\nbyte[] resultBytes = MD5.digest();\nreturn toHexString(resultBytes);\n} catch (Exception nsae) {\nreturn key;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 388
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2465747",
                        "content": "public static String postRequest(String urlString, HashMap data) {\nString returnData = \"\";\ntry {\nURL url = new URL(urlString);\nURLConnection connection = url.openConnection();\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nPrintWriter out = new PrintWriter(connection.getOutputStream());\nObject[] keySet = data.keySet().toArray();\nObject[] values = data.values().toArray();\nfor (int count = 0; count < keySet.length; count++) {\nout.print(URLEncoder.encode((String) keySet[count]) + \"=\" + URLEncoder.encode((String) values[count]));\nif ((count + 1) < keySet.length) out.print(\"&\");\n}\nout.close();\nBufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\nreturnData += inputLine;\n}\nin.close();\n} catch (Exception e) {\ne.printStackTrace();\nreturnData = null;\n}\nreturn (returnData);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 476
                },
                {
                        "id": "pretrain_java_data_14987159",
                        "content": "public static String postRequest(String urlString, HashMap data) {\nString returnData = \"\";\ntry {\nURL url = new URL(urlString);\nURLConnection connection = url.openConnection();\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nPrintWriter out = new PrintWriter(connection.getOutputStream());\nObject[] keySet = data.keySet().toArray();\nObject[] values = data.values().toArray();\nfor (int count = 0; count < keySet.length; count++) {\nout.print(URLEncoder.encode((String) keySet[count]) + \"=\" + URLEncoder.encode((String) values[count]));\nif ((count + 1) < keySet.length) out.print(\"&\");\n}\nout.close();\nBufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\nreturnData += inputLine;\n}\nin.close();\n} catch (Exception e) {\ne.printStackTrace();\nreturnData = null;\n}\nreturn (returnData);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1370450#123#149.java",
                        "__cluster__": 476
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_14951475",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\nHttpURLConnection con = null;\nInputStream is = null;\ntry {\nURL u = new URL(url);\nif (url.startsWith(\"file://\")) {\nis = new BufferedInputStream(u.openStream());\n} else {\nProxy proxy;\nif (proxyHost != null) {\nproxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n} else {\nproxy = Proxy.NO_PROXY;\n}\ncon = (HttpURLConnection) u.openConnection(proxy);\ncon.addRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\");\ncon.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\ncon.addRequestProperty(\"Accept-Language\", \"en-US,en\");\ncon.addRequestProperty(\"Accept\", \"text/html,image/*\");\ncon.setDoInput(true);\ncon.setDoOutput(false);\ncon.connect();\nis = new BufferedInputStream(con.getInputStream());\n}\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nIOUtils.copy(is, baos);\nreturn baos.toByteArray();\n} finally {\nIOUtils.closeQuietly(is);\nif (con != null) {\ncon.disconnect();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2152346#38#71.java",
                        "__cluster__": 507
                },
                {
                        "id": "test_bigclonebench_data_1180878",
                        "content": "public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\nHttpURLConnection con = null;\nInputStream is = null;\ntry {\nURL u = new URL(url);\nif (url.startsWith(\"file://\")) {\nis = new BufferedInputStream(u.openStream());\n} else {\nProxy proxy;\nif (proxyHost != null) {\nproxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n} else {\nproxy = Proxy.NO_PROXY;\n}\ncon = (HttpURLConnection) u.openConnection(proxy);\ncon.addRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\");\ncon.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\ncon.addRequestProperty(\"Accept-Language\", \"en-US,en\");\ncon.addRequestProperty(\"Accept\", \"text/html,image/*\");\ncon.setDoInput(true);\ncon.setDoOutput(false);\ncon.connect();\nis = new BufferedInputStream(con.getInputStream());\n}\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nIOUtils.copy(is, baos);\nreturn baos.toByteArray();\n} finally {\nIOUtils.closeQuietly(is);\nif (con != null) {\ncon.disconnect();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 507
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_947406",
                        "content": "static void copy(String src, String dest) throws IOException {\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = new FileInputStream(src);\nout = new FileOutputStream(dest);\nbyte[] buf = new byte[1024];\nint n;\nwhile ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n} finally {\nif (in != null) in.close();\nif (out != null) out.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 712
                },
                {
                        "id": "pretrain_java_data_14855090",
                        "content": "<reponame>cragkhit/elasticsearch\nstatic void copy(String src, String dest) throws IOException {\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = new FileInputStream(src);\nout = new FileOutputStream(dest);\nbyte[] buf = new byte[1024];\nint n;\nwhile ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n} finally {\nif (in != null) in.close();\nif (out != null) out.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#56130#5#18.java",
                        "__cluster__": 712
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21999120",
                        "content": "public String encrypt(String password) throws Exception {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(password.getBytes());\nBigInteger hash = new BigInteger(1, md5.digest());\nString hashword = hash.toString(16);\nreturn hashword;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 401
                },
                {
                        "id": "pretrain_java_data_14889964",
                        "content": "<gh_stars>10-100\npublic String encrypt(String password) throws Exception {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(password.getBytes());\nBigInteger hash = new BigInteger(1, md5.digest());\nString hashword = hash.toString(16);\nreturn hashword;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2476664#67#73.java",
                        "__cluster__": 401
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_10690321",
                        "content": "private static void readData() {\nStringTokenizer sTok;\ntopSet = new HashSet();\nsTok = new StringTokenizer(tops, \",\");\nwhile (sTok.hasMoreTokens()) topSet.add(sTok.nextToken());\nleftSet = new HashSet();\nsTok = new StringTokenizer(lefts, \",\");\nwhile (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken());\nrightSet = new HashSet();\nsTok = new StringTokenizer(rights, \",\");\nwhile (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken());\nfarRightSet = new HashSet();\nsTok = new StringTokenizer(farrights, \",\");\nwhile (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken());\nvowelSet = new HashSet();\nsTok = new StringTokenizer(vowels, \",\");\nwhile (sTok.hasMoreTokens()) {\nString ntk;\nvowelSet.add(ntk = sTok.nextToken());\nif (maxEwtsVowelLength < ntk.length()) maxEwtsVowelLength = ntk.length();\nvalidInputSequences.put(ntk, anyOldObjectWillDo);\n}\npuncSet = new HashSet();\nsTok = new StringTokenizer(others, \",\");\nwhile (sTok.hasMoreTokens()) {\nString ntk;\npuncSet.add(ntk = sTok.nextToken());\nvalidInputSequences.put(ntk, anyOldObjectWillDo);\n}\ncharSet = new HashSet();\ntibSet = new HashSet();\nsTok = new StringTokenizer(tibetanConsonants, \",\");\nwhile (sTok.hasMoreTokens()) {\nString ntk;\ncharSet.add(ntk = sTok.nextToken());\ntibSet.add(ntk);\nvalidInputSequences.put(ntk, anyOldObjectWillDo);\n}\nsanskritStackSet = new HashSet();\nsTok = new StringTokenizer(otherConsonants, \",\");\nwhile (sTok.hasMoreTokens()) {\nString ntk;\ncharSet.add(ntk = sTok.nextToken());\nsanskritStackSet.add(ntk);\nvalidInputSequences.put(ntk, anyOldObjectWillDo);\n}\nnumberSet = new HashSet();\nsTok = new StringTokenizer(numbers, \",\");\nwhile (sTok.hasMoreTokens()) {\nString ntk;\ncharSet.add(ntk = sTok.nextToken());\nnumberSet.add(ntk);\nvalidInputSequences.put(ntk, anyOldObjectWillDo);\n}\ncharSet.add(\"Y\");\ncharSet.add(\"R\");\ncharSet.add(\"W\");\nvalidInputSequences.put(\"Y\", anyOldObjectWillDo);\nvalidInputSequences.put(\"R\", anyOldObjectWillDo);\nvalidInputSequences.put(\"W\", anyOldObjectWillDo);\nsTok = null;\ntop_vowels = new HashSet();\ntop_vowels.add(i_VOWEL);\ntop_vowels.add(e_VOWEL);\ntop_vowels.add(o_VOWEL);\ntop_vowels.add(ai_VOWEL);\ntop_vowels.add(au_VOWEL);\ntop_vowels.add(reverse_i_VOWEL);\ntry {\nURL url = TibetanMachineWeb.class.getResource(fileName);\nif (url == null) {\nSystem.err.println(\"Cannot find \" + fileName + \"; aborting.\");\nSystem.exit(1);\n}\nInputStreamReader isr = new InputStreamReader(url.openStream());\nBufferedReader in = new BufferedReader(isr);\nSystem.out.println(\"Reading Tibetan Machine Web code table \" + fileName);\nString line;\nboolean hashOn = false;\nboolean isTibetan = false;\nboolean isSanskrit = false;\nboolean ignore = false;\nwhile ((line = in.readLine()) != null) {\nif (line.startsWith(\"<?\")) {\nif (line.equalsIgnoreCase(\"<?Consonants?>\")) {\nisSanskrit = false;\nisTibetan = true;\nhashOn = false;\nignore = false;\ndo {\nline = in.readLine();\n} while (line.startsWith(\"//\") || line.equals(\"\"));\n} else if (line.equalsIgnoreCase(\"<?Numbers?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = false;\nignore = false;\ndo {\nline = in.readLine();\n} while (line.startsWith(\"//\") || line.equals(\"\"));\n} else if (line.equalsIgnoreCase(\"<?Vowels?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = false;\nignore = false;\ndo {\nline = in.readLine();\n} while (line.startsWith(\"//\") || line.equals(\"\"));\n} else if (line.equalsIgnoreCase(\"<?Other?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = false;\nignore = false;\ndo {\nline = in.readLine();\n} while (line.startsWith(\"//\") || line.equals(\"\"));\n} else if (line.equalsIgnoreCase(\"<?Input:Punctuation?>\") || line.equalsIgnoreCase(\"<?Input:Vowels?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = true;\nignore = false;\n} else if (line.equalsIgnoreCase(\"<?Input:Tibetan?>\")) {\nisSanskrit = false;\nisTibetan = true;\nhashOn = true;\nignore = false;\n} else if (line.equalsIgnoreCase(\"<?Input:Numbers?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = true;\nignore = false;\n} else if (line.equalsIgnoreCase(\"<?Input:Sanskrit?>\")) {\nisSanskrit = true;\nisTibetan = false;\nhashOn = true;\nignore = false;\n} else if (line.equalsIgnoreCase(\"<?ToWylie?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = false;\nignore = false;\n} else if (line.equalsIgnoreCase(\"<?Ignore?>\")) {\nisSanskrit = false;\nignore = true;\n}\n} else if (line.startsWith(\"//\")) {\n;\n} else if (line.equals(\"\")) {\n;\n} else {\nStringTokenizer st = new StringTokenizer(line, DELIMITER, true);\nString wylie = null;\nDuffCode[] duffCodes;\nduffCodes = new DuffCode[11];\nint k = 0;\nStringBuffer escapedToken = new StringBuffer(\"\");\nThdlDebug.verify(escapedToken.length() == 0);\nwhile (st.hasMoreTokens()) {\nString val = getEscapedToken(st, escapedToken);\nif (val.equals(DELIMITER) && escapedToken.length() == 0) {\nk++;\n} else if (!val.equals(\"\")) {\nif (escapedToken.length() != 0) {\nescapedToken = new StringBuffer(\"\");\nThdlDebug.verify(escapedToken.length() == 0);\n}\nswitch(k) {\ncase 0:\nwylie = val;\nbreak;\ncase 1:\nduffCodes[TM] = new DuffCode(val, false);\nbreak;\ncase 2:\nif (!ignore) {\nduffCodes[REDUCED_C] = new DuffCode(val, true);\n}\nbreak;\ncase 3:\nduffCodes[TMW] = new DuffCode(val, true);\nif (null != duffCodes[TM]) {\nTMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW];\n}\nif (null != TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32]) throw new Error(\"tibwn.ini is supposed to use the TibetanMachineWeb glyph as the unique key, but \" + val + \" appears two or more times.\");\nTMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = duffCodes[TM];\nif (wylie.toLowerCase().startsWith(\"\\\\uf0\")) {\nint x = Integer.parseInt(wylie.substring(\"\\\\u\".length()), 16);\nThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF));\nNonUnicodeToTMW[x - '\uf000'] = new DuffCode[] { duffCodes[TMW] };\n}\nbreak;\ncase 4:\ncase 5:\ncase 6:\ncase 7:\ncase 8:\ncase 9:\nif (!ignore) {\ntry {\nduffCodes[k - 1] = new DuffCode(val, true);\n} catch (Exception e) {\nSystem.err.println(\"Couldn't make a DuffCode out of \" + val + \"; line is \" + line + \"; k is \" + k);\n}\n}\nbreak;\ncase 10:\nif (!val.equals(\"none\")) {\nStringBuffer unicodeBuffer = new StringBuffer();\nStringTokenizer uTok = new StringTokenizer(val, \",\");\nwhile (uTok.hasMoreTokens()) {\nString subval = uTok.nextToken();\nThdlDebug.verify(subval.length() == 4 || subval.length() == 3);\ntry {\nint x = Integer.parseInt(subval, 16);\nThdlDebug.verify((x >= 0x0F00 && x <= 0x0FFF) || x == 0x5350 || x == 0x534D || x == 0x0020 || x == 0x00A0 || x == 0x2003);\nunicodeBuffer.append((char) x);\n} catch (NumberFormatException e) {\nThdlDebug.verify(false);\n}\n}\nTMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString();\nchar ch;\nif (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) {\nif (null != UnicodeToTMW[ch - '\u0f00'][0] && '\u0f00' != ch && '\u0f02' != ch && '\u0f03' != ch && '\u0f0b' != ch && '\u0f0e' != ch && '\u0f40' != ch && '\u0f42' != ch && '\u0f49' != ch && '\u0f4f' != ch && '\u0f51' != ch && '\u0f53' != ch && '\u0f5e' != ch && '\u0f62' != ch && '\u0f64' != ch && '\u0f67' != ch && '\u0f6a' != ch && '\u0f71' != ch && '\u0f72' != ch && '\u0f73' != ch && '\u0f74' != ch && '\u0f75' != ch && '\u0f76' != ch && '\u0f77' != ch && '\u0f78' != ch && '\u0f79' != ch && '\u0f7a' != ch && '\u0f7c' != ch && '\u0f7e' != ch && '\u0f81' != ch) {\nthrow new Error(\"tibwn.ini has more than one TMW fellow listed that has the Unicode \" + val + \", but it's not on the list of specially handled glyphs\");\n}\nUnicodeToTMW[ch - '\u0f00'][0] = duffCodes[TMW];\n}\n}\nbreak;\ncase 11:\nif (!ignore) {\nduffCodes[HALF_C] = new DuffCode(val, true);\n}\nbreak;\ncase 12:\nif (!ignore) {\nDuffCode binduCode = new DuffCode(val, true);\nbinduMap.put(duffCodes[TMW], binduCode);\n}\nbreak;\ncase 13:\nthrow new Error(\"tibwn.ini has only 13 columns, you tried to use a 14th column.\");\n}\n} else {\nif (k == 10) {\nthrow new Error(\"needed none or some unicode; line is \" + line);\n}\n}\n}\nif (k < 10) {\nthrow new Error(\"needed none or some unicode; line is \" + line);\n}\nif (!ignore) {\nif (null == wylie) throw new Error(fileName + \" has a line ^\" + DELIMITER + \" which means that no Wylie is assigned.  That isn't supported.\");\nif (hashOn) {\ntibHash.put(Manipulate.unescape(wylie), duffCodes);\n}\nif (isTibetan) {\nStringBuffer wylieWithoutDashes = new StringBuffer(wylie);\nfor (int wl = 0; wl < wylieWithoutDashes.length(); wl++) {\nif (wylieWithoutDashes.charAt(wl) == '-') {\nwylieWithoutDashes.deleteCharAt(wl);\n--wl;\n}\n}\ntibSet.add(wylieWithoutDashes.toString());\n}\nif (isSanskrit) {\nsanskritStackSet.add(wylie);\n}\nif (null == duffCodes[TMW]) throw new Error(fileName + \" has a line with wylie \" + wylie + \" but no TMW; that's not allowed\");\nint font = duffCodes[TMW].getFontNum();\nint code = duffCodes[TMW].getCharNum() - 32;\ntoHashKey[font][code] = Manipulate.unescape(wylie);\n}\n}\n}\n} catch (IOException e) {\nSystem.out.println(\"file Disappeared\");\nThdlDebug.noteIffyCode();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 257
                },
                {
                        "id": "pretrain_java_data_2249594",
                        "content": "private static void readData() {\nStringTokenizer sTok;\ntopSet = new HashSet();\nsTok = new StringTokenizer(tops, \",\");\nwhile (sTok.hasMoreTokens()) topSet.add(sTok.nextToken());\nleftSet = new HashSet();\nsTok = new StringTokenizer(lefts, \",\");\nwhile (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken());\nrightSet = new HashSet();\nsTok = new StringTokenizer(rights, \",\");\nwhile (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken());\nfarRightSet = new HashSet();\nsTok = new StringTokenizer(farrights, \",\");\nwhile (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken());\nvowelSet = new HashSet();\nsTok = new StringTokenizer(vowels, \",\");\nwhile (sTok.hasMoreTokens()) {\nString ntk;\nvowelSet.add(ntk = sTok.nextToken());\nif (maxEwtsVowelLength < ntk.length()) maxEwtsVowelLength = ntk.length();\nvalidInputSequences.put(ntk, anyOldObjectWillDo);\n}\npuncSet = new HashSet();\nsTok = new StringTokenizer(others, \",\");\nwhile (sTok.hasMoreTokens()) {\nString ntk;\npuncSet.add(ntk = sTok.nextToken());\nvalidInputSequences.put(ntk, anyOldObjectWillDo);\n}\ncharSet = new HashSet();\ntibSet = new HashSet();\nsTok = new StringTokenizer(tibetanConsonants, \",\");\nwhile (sTok.hasMoreTokens()) {\nString ntk;\ncharSet.add(ntk = sTok.nextToken());\ntibSet.add(ntk);\nvalidInputSequences.put(ntk, anyOldObjectWillDo);\n}\nsanskritStackSet = new HashSet();\nsTok = new StringTokenizer(otherConsonants, \",\");\nwhile (sTok.hasMoreTokens()) {\nString ntk;\ncharSet.add(ntk = sTok.nextToken());\nsanskritStackSet.add(ntk);\nvalidInputSequences.put(ntk, anyOldObjectWillDo);\n}\nnumberSet = new HashSet();\nsTok = new StringTokenizer(numbers, \",\");\nwhile (sTok.hasMoreTokens()) {\nString ntk;\ncharSet.add(ntk = sTok.nextToken());\nnumberSet.add(ntk);\nvalidInputSequences.put(ntk, anyOldObjectWillDo);\n}\ncharSet.add(\"Y\");\ncharSet.add(\"R\");\ncharSet.add(\"W\");\nvalidInputSequences.put(\"Y\", anyOldObjectWillDo);\nvalidInputSequences.put(\"R\", anyOldObjectWillDo);\nvalidInputSequences.put(\"W\", anyOldObjectWillDo);\nsTok = null;\ntop_vowels = new HashSet();\ntop_vowels.add(i_VOWEL);\ntop_vowels.add(e_VOWEL);\ntop_vowels.add(o_VOWEL);\ntop_vowels.add(ai_VOWEL);\ntop_vowels.add(au_VOWEL);\ntop_vowels.add(reverse_i_VOWEL);\ntry {\nURL url = TibetanMachineWeb.class.getResource(fileName);\nif (url == null) {\nSystem.err.println(\"Cannot find \" + fileName + \"; aborting.\");\nSystem.exit(1);\n}\nInputStreamReader isr = new InputStreamReader(url.openStream());\nBufferedReader in = new BufferedReader(isr);\nSystem.out.println(\"Reading Tibetan Machine Web code table \" + fileName);\nString line;\nboolean hashOn = false;\nboolean isTibetan = false;\nboolean isSanskrit = false;\nboolean ignore = false;\nwhile ((line = in.readLine()) != null) {\nif (line.startsWith(\"<?\")) {\nif (line.equalsIgnoreCase(\"<?Consonants?>\")) {\nisSanskrit = false;\nisTibetan = true;\nhashOn = false;\nignore = false;\ndo {\nline = in.readLine();\n} while (line.startsWith(\"//\") || line.equals(\"\"));\n} else if (line.equalsIgnoreCase(\"<?Numbers?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = false;\nignore = false;\ndo {\nline = in.readLine();\n} while (line.startsWith(\"//\") || line.equals(\"\"));\n} else if (line.equalsIgnoreCase(\"<?Vowels?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = false;\nignore = false;\ndo {\nline = in.readLine();\n} while (line.startsWith(\"//\") || line.equals(\"\"));\n} else if (line.equalsIgnoreCase(\"<?Other?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = false;\nignore = false;\ndo {\nline = in.readLine();\n} while (line.startsWith(\"//\") || line.equals(\"\"));\n} else if (line.equalsIgnoreCase(\"<?Input:Punctuation?>\") || line.equalsIgnoreCase(\"<?Input:Vowels?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = true;\nignore = false;\n} else if (line.equalsIgnoreCase(\"<?Input:Tibetan?>\")) {\nisSanskrit = false;\nisTibetan = true;\nhashOn = true;\nignore = false;\n} else if (line.equalsIgnoreCase(\"<?Input:Numbers?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = true;\nignore = false;\n} else if (line.equalsIgnoreCase(\"<?Input:Sanskrit?>\")) {\nisSanskrit = true;\nisTibetan = false;\nhashOn = true;\nignore = false;\n} else if (line.equalsIgnoreCase(\"<?ToWylie?>\")) {\nisSanskrit = false;\nisTibetan = false;\nhashOn = false;\nignore = false;\n} else if (line.equalsIgnoreCase(\"<?Ignore?>\")) {\nisSanskrit = false;\nignore = true;\n}\n} else if (line.startsWith(\"//\")) {\n;\n} else if (line.equals(\"\")) {\n;\n} else {\nStringTokenizer st = new StringTokenizer(line, DELIMITER, true);\nString wylie = null;\nDuffCode[] duffCodes;\nduffCodes = new DuffCode[11];\nint k = 0;\nStringBuffer escapedToken = new StringBuffer(\"\");\nThdlDebug.verify(escapedToken.length() == 0);\nwhile (st.hasMoreTokens()) {\nString val = getEscapedToken(st, escapedToken);\nif (val.equals(DELIMITER) && escapedToken.length() == 0) {\nk++;\n} else if (!val.equals(\"\")) {\nif (escapedToken.length() != 0) {\nescapedToken = new StringBuffer(\"\");\nThdlDebug.verify(escapedToken.length() == 0);\n}\nswitch(k) {\ncase 0:\nwylie = val;\nbreak;\ncase 1:\nduffCodes[TM] = new DuffCode(val, false);\nbreak;\ncase 2:\nif (!ignore) {\nduffCodes[REDUCED_C] = new DuffCode(val, true);\n}\nbreak;\ncase 3:\nduffCodes[TMW] = new DuffCode(val, true);\nif (null != duffCodes[TM]) {\nTMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW];\n}\nif (null != TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32]) throw new Error(\"tibwn.ini is supposed to use the TibetanMachineWeb glyph as the unique key, but \" + val + \" appears two or more times.\");\nTMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = duffCodes[TM];\nif (wylie.toLowerCase().startsWith(\"\\\\uf0\")) {\nint x = Integer.parseInt(wylie.substring(\"\\\\u\".length()), 16);\nThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF));\nNonUnicodeToTMW[x - '\uf000'] = new DuffCode[] { duffCodes[TMW] };\n}\nbreak;\ncase 4:\ncase 5:\ncase 6:\ncase 7:\ncase 8:\ncase 9:\nif (!ignore) {\ntry {\nduffCodes[k - 1] = new DuffCode(val, true);\n} catch (Exception e) {\nSystem.err.println(\"Couldn't make a DuffCode out of \" + val + \"; line is \" + line + \"; k is \" + k);\n}\n}\nbreak;\ncase 10:\nif (!val.equals(\"none\")) {\nStringBuffer unicodeBuffer = new StringBuffer();\nStringTokenizer uTok = new StringTokenizer(val, \",\");\nwhile (uTok.hasMoreTokens()) {\nString subval = uTok.nextToken();\nThdlDebug.verify(subval.length() == 4 || subval.length() == 3);\ntry {\nint x = Integer.parseInt(subval, 16);\nThdlDebug.verify((x >= 0x0F00 && x <= 0x0FFF) || x == 0x5350 || x == 0x534D || x == 0x0020 || x == 0x00A0 || x == 0x2003);\nunicodeBuffer.append((char) x);\n} catch (NumberFormatException e) {\nThdlDebug.verify(false);\n}\n}\nTMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString();\nchar ch;\nif (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) {\nif (null != UnicodeToTMW[ch - '\u0f00'][0] && '\u0f00' != ch && '\u0f02' != ch && '\u0f03' != ch && '\u0f0b' != ch && '\u0f0e' != ch && '\u0f40' != ch && '\u0f42' != ch && '\u0f49' != ch && '\u0f4f' != ch && '\u0f51' != ch && '\u0f53' != ch && '\u0f5e' != ch && '\u0f62' != ch && '\u0f64' != ch && '\u0f67' != ch && '\u0f6a' != ch && '\u0f71' != ch && '\u0f72' != ch && '\u0f73' != ch && '\u0f74' != ch && '\u0f75' != ch && '\u0f76' != ch && '\u0f77' != ch && '\u0f78' != ch && '\u0f79' != ch && '\u0f7a' != ch && '\u0f7c' != ch && '\u0f7e' != ch && '\u0f81' != ch) {\nthrow new Error(\"tibwn.ini has more than one TMW fellow listed that has the Unicode \" + val + \", but it's not on the list of specially handled glyphs\");\n}\nUnicodeToTMW[ch - '\u0f00'][0] = duffCodes[TMW];\n}\n}\nbreak;\ncase 11:\nif (!ignore) {\nduffCodes[HALF_C] = new DuffCode(val, true);\n}\nbreak;\ncase 12:\nif (!ignore) {\nDuffCode binduCode = new DuffCode(val, true);\nbinduMap.put(duffCodes[TMW], binduCode);\n}\nbreak;\ncase 13:\nthrow new Error(\"tibwn.ini has only 13 columns, you tried to use a 14th column.\");\n}\n} else {\nif (k == 10) {\nthrow new Error(\"needed none or some unicode; line is \" + line);\n}\n}\n}\nif (k < 10) {\nthrow new Error(\"needed none or some unicode; line is \" + line);\n}\nif (!ignore) {\nif (null == wylie) throw new Error(fileName + \" has a line ^\" + DELIMITER + \" which means that no Wylie is assigned.  That isn't supported.\");\nif (hashOn) {\ntibHash.put(Manipulate.unescape(wylie), duffCodes);\n}\nif (isTibetan) {\nStringBuffer wylieWithoutDashes = new StringBuffer(wylie);\nfor (int wl = 0; wl < wylieWithoutDashes.length(); wl++) {\nif (wylieWithoutDashes.charAt(wl) == '-') {\nwylieWithoutDashes.deleteCharAt(wl);\n--wl;\n}\n}\ntibSet.add(wylieWithoutDashes.toString());\n}\nif (isSanskrit) {\nsanskritStackSet.add(wylie);\n}\nif (null == duffCodes[TMW]) throw new Error(fileName + \" has a line with wylie \" + wylie + \" but no TMW; that's not allowed\");\nint font = duffCodes[TMW].getFontNum();\nint code = duffCodes[TMW].getCharNum() - 32;\ntoHashKey[font][code] = Manipulate.unescape(wylie);\n}\n}\n}\n} catch (IOException e) {\nSystem.out.println(\"file Disappeared\");\nThdlDebug.noteIffyCode();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#208714#296#578.java",
                        "__cluster__": 257
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_793136",
                        "content": "private IProject createJavaProject() {\nIProject proj = ResourcesPlugin.getWorkspace().getRoot().getProject(\"DefaultFolderPropertiesTest\");\nif (!proj.exists()) {\ntry {\nproj.create(null);\nproj.open(null);\nIProjectDescription desc = proj.getDescription();\ndesc.setNatureIds(new String[] { JavaCore.NATURE_ID });\nproj.setDescription(desc, null);\nIJavaProject javaProject = JavaCore.create(proj);\njavaProject.open(null);\nIFolder srcFolder1 = proj.getFolder(new Path(\"src\"));\nsrcFolder1.create(true, true, null);\nIFolder srcFolder2 = proj.getFolder(new Path(\"custom_src\"));\nsrcFolder2.create(true, true, null);\nIClasspathEntry[] classpathEntries = new IClasspathEntry[] { JavaCore.newSourceEntry(srcFolder1.getFullPath()), JavaCore.newSourceEntry(srcFolder2.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() };\njavaProject.setRawClasspath(classpathEntries, null);\nIFolder binFolder = proj.getFolder(new Path(\"bin\"));\nif (!binFolder.exists()) {\nbinFolder.create(true, true, null);\n}\njavaProject.setOutputLocation(binFolder.getFullPath(), null);\nIFolder testFolder = proj.getFolder(new Path(\"test\"));\ntestFolder.create(true, true, null);\nIFolder resultFolder = proj.getFolder(new Path(\"result\"));\nresultFolder.create(true, true, null);\n} catch (CoreException e) {\nfail(e.getMessage());\n}\n}\nreturn proj;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1201356#61#92.java",
                        "__cluster__": 330
                },
                {
                        "id": "test_bigclonebench_data_20939940",
                        "content": "private IProject createJavaProject() {\nIProject proj = ResourcesPlugin.getWorkspace().getRoot().getProject(\"DefaultFolderPropertiesTest\");\nif (!proj.exists()) {\ntry {\nproj.create(null);\nproj.open(null);\nIProjectDescription desc = proj.getDescription();\ndesc.setNatureIds(new String[] { JavaCore.NATURE_ID });\nproj.setDescription(desc, null);\nIJavaProject javaProject = JavaCore.create(proj);\njavaProject.open(null);\nIFolder srcFolder1 = proj.getFolder(new Path(\"src\"));\nsrcFolder1.create(true, true, null);\nIFolder srcFolder2 = proj.getFolder(new Path(\"custom_src\"));\nsrcFolder2.create(true, true, null);\nIClasspathEntry[] classpathEntries = new IClasspathEntry[] { JavaCore.newSourceEntry(srcFolder1.getFullPath()), JavaCore.newSourceEntry(srcFolder2.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() };\njavaProject.setRawClasspath(classpathEntries, null);\nIFolder binFolder = proj.getFolder(new Path(\"bin\"));\nif (!binFolder.exists()) {\nbinFolder.create(true, true, null);\n}\njavaProject.setOutputLocation(binFolder.getFullPath(), null);\nIFolder testFolder = proj.getFolder(new Path(\"test\"));\ntestFolder.create(true, true, null);\nIFolder resultFolder = proj.getFolder(new Path(\"result\"));\nresultFolder.create(true, true, null);\n} catch (CoreException e) {\nfail(e.getMessage());\n}\n}\nreturn proj;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 330
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18891988",
                        "content": "public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {\nmLog.debug(\"Downloading WSDL file from: \" + wsdlLocation);\nmLog.debug(\"Received endpoint: \" + endpoint);\nString fileLocation = null;\ntry {\nString tempDir = System.getProperty(\"java.io.tmpdir\");\nURL url = new URL(wsdlLocation);\nString WSDLFile = tempDir + File.separator + serviceName + \".wsdl\";\nString tmpWSDLFile = WSDLFile + \".tmp\";\nFile inputFile = new File(WSDLFile);\nFile tmpFile = new File(tmpWSDLFile);\nif (!inputFile.exists() || inputFile.length() == 0) {\nmLog.debug(\"Downloading the WSDL\");\ninputFile.createNewFile();\nInputStream in = url.openStream();\nFileOutputStream out = new FileOutputStream(inputFile);\nURLConnection con = url.openConnection();\nint fileLength = con.getContentLength();\nReadableByteChannel channelIn = Channels.newChannel(in);\nFileChannel channelOut = out.getChannel();\nchannelOut.transferFrom(channelIn, 0, fileLength);\nchannelIn.close();\nchannelOut.close();\nout.flush();\nout.close();\nin.close();\nDocument tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));\nNodeList nl1 = tmpDocument.getElementsByTagName(\"wsdlsoap:address\");\nfor (int i = 0; i < nl1.getLength(); i++) {\nNode node1 = nl1.item(i);\nif (node1.getNodeName().equals(\"wsdlsoap:address\")) {\n((Element) node1).setAttribute(\"location\", endpoint);\n}\n}\nFileOutputStream tmpOut = new FileOutputStream(tmpFile);\nXMLUtils.DocumentToStream(tmpDocument, tmpOut);\ntmpOut.flush();\ntmpOut.close();\nboolean retVal = inputFile.delete();\nif (retVal) {\nretVal = tmpFile.renameTo(new File(WSDLFile));\n}\nmLog.debug(\"Return Value: \" + retVal);\n} else {\nmLog.debug(\"The WSDL is already at the ServiceProvider\");\n}\nfileLocation = WSDLFile;\n} catch (MalformedURLException mx) {\nmLog.error(\"MalformedURLException: \" + mx.getMessage() + \", cause: \" + mx.getCause().getMessage());\nthrow new AxisFault(mx.getMessage(), mx.getCause());\n} catch (IOException ix) {\nmLog.error(\"IOException: \" + ix.getMessage() + \", cause: \" + ix.getCause().getMessage());\nthrow new AxisFault(ix.getMessage(), ix.getCause());\n} catch (ParserConfigurationException px) {\nmLog.error(\"ParserConfigurationException: \" + px.getMessage() + \", cause: \" + px.getCause().getMessage());\nthrow new AxisFault(px.getMessage(), px.getCause());\n} catch (SAXException sx) {\nmLog.error(\"SAXException: \" + sx.getMessage() + \", cause: \" + sx.getCause().getMessage());\nthrow new AxisFault(sx.getMessage(), sx.getCause());\n}\nreturn fileLocation;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 906
                },
                {
                        "id": "pretrain_java_data_2242771",
                        "content": "public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {\nmLog.debug(\"Downloading WSDL file from: \" + wsdlLocation);\nmLog.debug(\"Received endpoint: \" + endpoint);\nString fileLocation = null;\ntry {\nString tempDir = System.getProperty(\"java.io.tmpdir\");\nURL url = new URL(wsdlLocation);\nString WSDLFile = tempDir + File.separator + serviceName + \".wsdl\";\nString tmpWSDLFile = WSDLFile + \".tmp\";\nFile inputFile = new File(WSDLFile);\nFile tmpFile = new File(tmpWSDLFile);\nif (!inputFile.exists() || inputFile.length() == 0) {\nmLog.debug(\"Downloading the WSDL\");\ninputFile.createNewFile();\nInputStream in = url.openStream();\nFileOutputStream out = new FileOutputStream(inputFile);\nURLConnection con = url.openConnection();\nint fileLength = con.getContentLength();\nReadableByteChannel channelIn = Channels.newChannel(in);\nFileChannel channelOut = out.getChannel();\nchannelOut.transferFrom(channelIn, 0, fileLength);\nchannelIn.close();\nchannelOut.close();\nout.flush();\nout.close();\nin.close();\nDocument tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));\nNodeList nl1 = tmpDocument.getElementsByTagName(\"wsdlsoap:address\");\nfor (int i = 0; i < nl1.getLength(); i++) {\nNode node1 = nl1.item(i);\nif (node1.getNodeName().equals(\"wsdlsoap:address\")) {\n((Element) node1).setAttribute(\"location\", endpoint);\n}\n}\nFileOutputStream tmpOut = new FileOutputStream(tmpFile);\nXMLUtils.DocumentToStream(tmpDocument, tmpOut);\ntmpOut.flush();\ntmpOut.close();\nboolean retVal = inputFile.delete();\nif (retVal) {\nretVal = tmpFile.renameTo(new File(WSDLFile));\n}\nmLog.debug(\"Return Value: \" + retVal);\n} else {\nmLog.debug(\"The WSDL is already at the ServiceProvider\");\n}\nfileLocation = WSDLFile;\n} catch (MalformedURLException mx) {\nmLog.error(\"MalformedURLException: \" + mx.getMessage() + \", cause: \" + mx.getCause().getMessage());\nthrow new AxisFault(mx.getMessage(), mx.getCause());\n} catch (IOException ix) {\nmLog.error(\"IOException: \" + ix.getMessage() + \", cause: \" + ix.getCause().getMessage());\nthrow new AxisFault(ix.getMessage(), ix.getCause());\n} catch (ParserConfigurationException px) {\nmLog.error(\"ParserConfigurationException: \" + px.getMessage() + \", cause: \" + px.getCause().getMessage());\nthrow new AxisFault(px.getMessage(), px.getCause());\n} catch (SAXException sx) {\nmLog.error(\"SAXException: \" + sx.getMessage() + \", cause: \" + sx.getCause().getMessage());\nthrow new AxisFault(sx.getMessage(), sx.getCause());\n}\nreturn fileLocation;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1083462#121#182.java",
                        "__cluster__": 906
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_728006",
                        "content": "<reponame>cragkhit/elasticsearch\npublic ArrayList<String> showTopLetters() {\nint[] tempArray = new int[engCountLetters.length];\nchar[] tempArrayLetters = new char[abcEng.length];\nArrayList<String> resultTopFiveLetters = new ArrayList<String>();\ntempArray = engCountLetters.clone();\ntempArrayLetters = abcEng.clone();\nint tempCount;\nchar tempLetters;\nfor (int j = 0; j < (abcEng.length * abcEng.length); j++) {\nfor (int i = 0; i < abcEng.length - 1; i++) {\nif (tempArray[i] > tempArray[i + 1]) {\ntempCount = tempArray[i];\ntempLetters = tempArrayLetters[i];\ntempArray[i] = tempArray[i + 1];\ntempArrayLetters[i] = tempArrayLetters[i + 1];\ntempArray[i + 1] = tempCount;\ntempArrayLetters[i + 1] = tempLetters;\n}\n}\n}\nfor (int i = tempArrayLetters.length - 1; i > tempArrayLetters.length - 6; i--) {\nresultTopFiveLetters.add(tempArrayLetters[i] + \":\" + tempArray[i]);\n}\nreturn resultTopFiveLetters;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#949062#30#54.java",
                        "__cluster__": 247
                },
                {
                        "id": "test_bigclonebench_data_3197876",
                        "content": "public ArrayList<String> showTopLetters() {\nint[] tempArray = new int[engCountLetters.length];\nchar[] tempArrayLetters = new char[abcEng.length];\nArrayList<String> resultTopFiveLetters = new ArrayList<String>();\ntempArray = engCountLetters.clone();\ntempArrayLetters = abcEng.clone();\nint tempCount;\nchar tempLetters;\nfor (int j = 0; j < (abcEng.length * abcEng.length); j++) {\nfor (int i = 0; i < abcEng.length - 1; i++) {\nif (tempArray[i] > tempArray[i + 1]) {\ntempCount = tempArray[i];\ntempLetters = tempArrayLetters[i];\ntempArray[i] = tempArray[i + 1];\ntempArrayLetters[i] = tempArrayLetters[i + 1];\ntempArray[i + 1] = tempCount;\ntempArrayLetters[i + 1] = tempLetters;\n}\n}\n}\nfor (int i = tempArrayLetters.length - 1; i > tempArrayLetters.length - 6; i--) {\nresultTopFiveLetters.add(tempArrayLetters[i] + \":\" + tempArray[i]);\n}\nreturn resultTopFiveLetters;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 247
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_17083703",
                        "content": "public void savaRolePerm(String roleid, Collection role_perm_collect) throws DAOException, SQLException {\nConnectionProvider cp = null;\nConnection conn = null;\nResultSet rs = null;\nPreparedStatement pstmt = null;\nPrivilegeFactory factory = PrivilegeFactory.getInstance();\nOperation op = factory.createOperation();\ntry {\ncp = ConnectionProviderFactory.getConnectionProvider(Constants.DATA_SOURCE);\nconn = cp.getConnection();\ntry {\npstmt = conn.prepareStatement(DEL_ROLE_PERM);\npstmt.setString(1, roleid);\npstmt.executeUpdate();\n} catch (Exception e) {\n}\nif ((role_perm_collect == null) || (role_perm_collect.size() == 0)) {\nreturn;\n} else {\nconn.setAutoCommit(false);\npstmt = conn.prepareStatement(ADD_ROLE_PERM);\nIterator role_perm_ir = role_perm_collect.iterator();\nwhile (role_perm_ir.hasNext()) {\nRolePermission rolePerm = (RolePermission) role_perm_ir.next();\npstmt.setString(1, String.valueOf(rolePerm.getRoleid()));\npstmt.setString(2, String.valueOf(rolePerm.getResourceid()));\npstmt.setString(3, String.valueOf(rolePerm.getResopid()));\npstmt.executeUpdate();\n}\nconn.commit();\nconn.setAutoCommit(true);\n}\n} catch (Exception e) {\nconn.rollback();\nthrow new DAOException();\n} finally {\ntry {\nif (conn != null) {\nconn.close();\n}\nif (pstmt != null) {\npstmt.close();\n}\n} catch (Exception e) {\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 163
                },
                {
                        "id": "pretrain_java_data_2310010",
                        "content": "public void savaRolePerm(String roleid, Collection role_perm_collect) throws DAOException, SQLException {\nConnectionProvider cp = null;\nConnection conn = null;\nResultSet rs = null;\nPreparedStatement pstmt = null;\nPrivilegeFactory factory = PrivilegeFactory.getInstance();\nOperation op = factory.createOperation();\ntry {\ncp = ConnectionProviderFactory.getConnectionProvider(Constants.DATA_SOURCE);\nconn = cp.getConnection();\ntry {\npstmt = conn.prepareStatement(DEL_ROLE_PERM);\npstmt.setString(1, roleid);\npstmt.executeUpdate();\n} catch (Exception e) {\n}\nif ((role_perm_collect == null) || (role_perm_collect.size() == 0)) {\nreturn;\n} else {\nconn.setAutoCommit(false);\npstmt = conn.prepareStatement(ADD_ROLE_PERM);\nIterator role_perm_ir = role_perm_collect.iterator();\nwhile (role_perm_ir.hasNext()) {\nRolePermission rolePerm = (RolePermission) role_perm_ir.next();\npstmt.setString(1, String.valueOf(rolePerm.getRoleid()));\npstmt.setString(2, String.valueOf(rolePerm.getResourceid()));\npstmt.setString(3, String.valueOf(rolePerm.getResopid()));\npstmt.executeUpdate();\n}\nconn.commit();\nconn.setAutoCommit(true);\n}\n} catch (Exception e) {\nconn.rollback();\nthrow new DAOException();\n} finally {\ntry {\nif (conn != null) {\nconn.close();\n}\nif (pstmt != null) {\npstmt.close();\n}\n} catch (Exception e) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1239781#414#460.java",
                        "__cluster__": 163
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_16666766",
                        "content": "<gh_stars>10-100\npublic int delete(BusinessObject o) throws DAOException {\nint delete = 0;\nBill bill = (Bill) o;\ntry {\nPreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"DELETE_BILL\"));\npst.setInt(1, bill.getId());\ndelete = pst.executeUpdate();\nif (delete <= 0) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows <= 0\");\n} else if (delete > 1) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows > 1\");\n}\nconnection.commit();\n} catch (SQLException e) {\nLog.write(e.getMessage());\nthrow new DAOException(\"A SQLException has occured\");\n} catch (NullPointerException npe) {\nLog.write(npe.getMessage());\nthrow new DAOException(\"Connection null\");\n}\nreturn delete;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1540543#91#114.java",
                        "__cluster__": 167
                },
                {
                        "id": "test_bigclonebench_data_20306677",
                        "content": "public int update(BusinessObject o) throws DAOException {\nint update = 0;\nBill bill = (Bill) o;\ntry {\nPreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"UPDATE_BILL\"));\npst.setInt(1, bill.getId());\nupdate = pst.executeUpdate();\nif (update <= 0) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows <= 0\");\n} else if (update > 1) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows > 1\");\n}\nconnection.commit();\n} catch (SQLException e) {\nLog.write(e.getMessage());\nthrow new DAOException(\"A SQLException has occured\");\n} catch (NullPointerException npe) {\nLog.write(npe.getMessage());\nthrow new DAOException(\"Connection null\");\n}\nreturn update;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 167
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_21642215",
                        "content": "private int addIDs(PeakListRow row, String name) {\n{\nBufferedReader in = null;\ntry {\nString urlName = \"http://gmd.mpimp-golm.mpg.de/search.aspx?query=\" + name;\nURL url = new URL(urlName);\nin = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine, score = \"0\";\nwhile ((inputLine = in.readLine()) != null) {\nString metaboliteID = \"\";\nif (inputLine.contains(\"href=\\\"Metabolites/\")) {\nString[] dataScore = inputLine.split(\"</td><td>\");\nscore = dataScore[0].substring(dataScore[0].indexOf(\"<td>\") + 4);\nmetaboliteID = inputLine.substring(inputLine.indexOf(\"href=\\\"Metabolites/\") + 18, inputLine.indexOf(\"aspx\\\">\") + 4);\nurlName = \"http://gmd.mpimp-golm.mpg.de/Metabolites/\" + metaboliteID;\ninputLine = in.readLine();\ninputLine = in.readLine();\nString[] data = inputLine.split(\"</td><td>\");\nString molecularWeight = data[data.length - 1].replaceAll(\"&nbsp;\", \"\");\nrow.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\nbreak;\n} else if (inputLine.contains(\"href=\\\"Analytes/\")) {\nString[] dataScore = inputLine.split(\"</td><td>\");\nscore = dataScore[0].substring(dataScore[0].indexOf(\"<td>\") + 4);\nmetaboliteID = inputLine.substring(inputLine.indexOf(\"href=\\\"Analytes/\") + 15, inputLine.indexOf(\"aspx\\\">\") + 4);\nurlName = \"http://gmd.mpimp-golm.mpg.de/Analytes/\" + metaboliteID;\ninputLine = in.readLine();\ninputLine = in.readLine();\nString[] data = inputLine.split(\"</td><td>\");\nString molecularWeight = data[data.length - 1].replaceAll(\"&nbsp;\", \"\");\nrow.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\nbreak;\n} else if (inputLine.contains(\"href=\\\"ReferenceSubstances/\")) {\nString[] dataScore = inputLine.split(\"</td><td>\");\nscore = dataScore[0].substring(dataScore[0].indexOf(\"<td>\") + 4);\nmetaboliteID = inputLine.substring(inputLine.indexOf(\"href=\\\"ReferenceSubstances/\") + 26, inputLine.indexOf(\"aspx\\\">\") + 4);\nurlName = \"http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/\" + metaboliteID;\ninputLine = in.readLine();\ninputLine = in.readLine();\nString[] data = inputLine.split(\"</td><td>\");\nString molecularWeight = data[data.length - 1].replaceAll(\"&nbsp;\", \"\");\nrow.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\nbreak;\n}\n}\nin.close();\nurlName = searchMetabolite(urlName);\nif (urlName != null && urlName.contains(\".aspx\")) {\nurl = new URL(urlName);\nin = new BufferedReader(new InputStreamReader(url.openStream()));\nwhile ((inputLine = in.readLine()) != null) {\nif (inputLine.contains(\"<meta http-equiv=\\\"keywords\\\" content=\")) {\nString line = inputLine.substring(inputLine.indexOf(\"<meta http-equiv=\\\"keywords\\\" content=\") + 37, inputLine.indexOf(\"\\\" /></head>\"));\nString[] names = line.split(\", \");\nfor (String id : names) {\nif (id.contains(\"PubChem\")) {\nid = id.substring(id.indexOf(\"PubChem\") + 8);\nString pubChem = (String) row.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());\nif (pubChem.length() == 0) {\npubChem += id;\n} else {\npubChem += \", \" + id;\n}\nrow.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);\n} else if (id.contains(\"ChEBI\")) {\nid = id.substring(id.indexOf(\"ChEBI:\") + 6);\nrow.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);\n} else if (id.contains(\"KEGG\")) {\nid = id.substring(id.indexOf(\"KEGG:\") + 6);\nrow.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);\n} else if (id.contains(\"CAS\")) {\nid = id.substring(id.indexOf(\"CAS:\") + 5);\nrow.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);\n} else if (id.contains(\"ChemSpider\") || id.contains(\"MAPMAN\") || id.contains(\"Beilstein:\")) {\n} else {\nString synonym = (String) row.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());\nif (synonym.length() == 0) {\nsynonym += id;\n} else {\nsynonym += \" // \" + id;\n}\nsynonym = synonym.replaceAll(\"&amp;#39;\", \"'\");\nrow.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);\n}\n}\nbreak;\n}\n}\nin.close();\n}\nreturn Integer.parseInt(score);\n} catch (IOException ex) {\nLogger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);\nreturn 0;\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 186
                },
                {
                        "id": "pretrain_java_data_16644578",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#1035522#119#215.java\nprivate int addIDs(PeakListRow row, String name) {\n{\nBufferedReader in = null;\ntry {\nString urlName = \"http://gmd.mpimp-golm.mpg.de/search.aspx?query=\" + name;\nURL url = new URL(urlName);\nin = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine, score = \"0\";\nwhile ((inputLine = in.readLine()) != null) {\nString metaboliteID = \"\";\nif (inputLine.contains(\"href=\\\"Metabolites/\")) {\nString[] dataScore = inputLine.split(\"</td><td>\");\nscore = dataScore[0].substring(dataScore[0].indexOf(\"<td>\") + 4);\nmetaboliteID = inputLine.substring(inputLine.indexOf(\"href=\\\"Metabolites/\") + 18, inputLine.indexOf(\"aspx\\\">\") + 4);\nurlName = \"http://gmd.mpimp-golm.mpg.de/Metabolites/\" + metaboliteID;\ninputLine = in.readLine();\ninputLine = in.readLine();\nString[] data = inputLine.split(\"</td><td>\");\nString molecularWeight = data[data.length - 1].replaceAll(\"&nbsp;\", \"\");\nrow.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\nbreak;\n} else if (inputLine.contains(\"href=\\\"Analytes/\")) {\nString[] dataScore = inputLine.split(\"</td><td>\");\nscore = dataScore[0].substring(dataScore[0].indexOf(\"<td>\") + 4);\nmetaboliteID = inputLine.substring(inputLine.indexOf(\"href=\\\"Analytes/\") + 15, inputLine.indexOf(\"aspx\\\">\") + 4);\nurlName = \"http://gmd.mpimp-golm.mpg.de/Analytes/\" + metaboliteID;\ninputLine = in.readLine();\ninputLine = in.readLine();\nString[] data = inputLine.split(\"</td><td>\");\nString molecularWeight = data[data.length - 1].replaceAll(\"&nbsp;\", \"\");\nrow.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\nbreak;\n} else if (inputLine.contains(\"href=\\\"ReferenceSubstances/\")) {\nString[] dataScore = inputLine.split(\"</td><td>\");\nscore = dataScore[0].substring(dataScore[0].indexOf(\"<td>\") + 4);\nmetaboliteID = inputLine.substring(inputLine.indexOf(\"href=\\\"ReferenceSubstances/\") + 26, inputLine.indexOf(\"aspx\\\">\") + 4);\nurlName = \"http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/\" + metaboliteID;\ninputLine = in.readLine();\ninputLine = in.readLine();\nString[] data = inputLine.split(\"</td><td>\");\nString molecularWeight = data[data.length - 1].replaceAll(\"&nbsp;\", \"\");\nrow.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\nbreak;\n}\n}\nin.close();\nurlName = searchMetabolite(urlName);\nif (urlName != null && urlName.contains(\".aspx\")) {\nurl = new URL(urlName);\nin = new BufferedReader(new InputStreamReader(url.openStream()));\nwhile ((inputLine = in.readLine()) != null) {\nif (inputLine.contains(\"<meta http-equiv=\\\"keywords\\\" content=\")) {\nString line = inputLine.substring(inputLine.indexOf(\"<meta http-equiv=\\\"keywords\\\" content=\") + 37, inputLine.indexOf(\"\\\" /></head>\"));\nString[] names = line.split(\", \");\nfor (String id : names) {\nif (id.contains(\"PubChem\")) {\nid = id.substring(id.indexOf(\"PubChem\") + 8);\nString pubChem = (String) row.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());\nif (pubChem.length() == 0) {\npubChem += id;\n} else {\npubChem += \", \" + id;\n}\nrow.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);\n} else if (id.contains(\"ChEBI\")) {\nid = id.substring(id.indexOf(\"ChEBI:\") + 6);\nrow.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);\n} else if (id.contains(\"KEGG\")) {\nid = id.substring(id.indexOf(\"KEGG:\") + 6);\nrow.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);\n} else if (id.contains(\"CAS\")) {\nid = id.substring(id.indexOf(\"CAS:\") + 5);\nrow.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);\n} else if (id.contains(\"ChemSpider\") || id.contains(\"MAPMAN\") || id.contains(\"Beilstein:\")) {\n} else {\nString synonym = (String) row.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());\nif (synonym.length() == 0) {\nsynonym += id;\n} else {\nsynonym += \" // \" + id;\n}\nsynonym = synonym.replaceAll(\"&amp;#39;\", \"'\");\nrow.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);\n}\n}\nbreak;\n}\n}\nin.close();\n}\nreturn Integer.parseInt(score);\n} catch (IOException ex) {\nLogger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);\nreturn 0;\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1035522#119#215.java",
                        "__cluster__": 186
                },
                [
                        {
                                "real_dup": 3
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8079516",
                        "content": "public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {\nTransformer oTransformer;\nStreamResult oStreamResult;\nStreamSource oStreamSrcXML;\nStringWriter oStrWritter;\nInputStream oXMLStream = null;\nString sTransformed;\nStringBuffer oPostTransform;\nString sKey;\nString sMedia;\nObject sVal;\nPage oCurrentPage;\nint iCloseHead, iOpenBody, iCloseBody;\nint iReaded;\nchar CharBuffer[] = new char[8192];\nString sCharBuffer;\nlong lElapsed = 0;\nfinal String sSep = System.getProperty(\"file.separator\");\nif (DebugFile.trace) {\nlElapsed = System.currentTimeMillis();\nDebugFile.writeln(\"Begin Pageset.buildSiteForEdit(\" + sBasePath + \",\" + sOutputPath + \",\" + sCtrlPath + \",\" + sMenuPath + \")\");\nDebugFile.incIdent();\n}\nFileSystem oFS = new FileSystem();\nVector vPages = pages();\nif (!sBasePath.endsWith(sSep)) sBasePath += sSep;\nString sWebServer = oEnvironmentProps.getProperty(\"webserver\", \"\");\nif (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(\"WARNING: webserver property not set at EnvironmentProperties\");\nif (!sWebServer.endsWith(\"/\")) sWebServer += \"/\";\nNode oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), \"containers\");\nif (oContainers == null) {\nif (DebugFile.trace) DebugFile.writeln(\"ERROR: <containers> node not found.\");\nthrow new DOMException(DOMException.NOT_FOUND_ERR, \"<containers> node not found\");\n}\nif (DebugFile.trace) DebugFile.writeln(\"new FileInputStream(\" + (sURI.startsWith(\"file://\") ? sURI.substring(7) : sURI) + \")\");\nfor (int c = 0; c < vPages.size(); c++) {\noCurrentPage = (Page) vPages.get(c);\noXMLStream = new FileInputStream(sURI.startsWith(\"file://\") ? sURI.substring(7) : sURI);\noStreamSrcXML = new StreamSource(oXMLStream);\noStrWritter = new StringWriter();\noStreamResult = new StreamResult(oStrWritter);\ntry {\noTransformer = StylesheetCache.newTransformer(sBasePath + \"xslt\" + sSep + \"templates\" + sSep + oMSite.name() + sSep + oCurrentPage.template());\nsMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);\nif (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + \"=\" + sMedia);\nif (null == sMedia) sMedia = \"html\"; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);\nif (null == oCurrentPage.getTitle()) throw new NullPointerException(\"Page \" + String.valueOf(c) + \" title is null\");\nif (DebugFile.trace) DebugFile.writeln(\"Page.filePath(\" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \".\" + sMedia + \")\");\noCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \".\" + sMedia);\nStylesheetCache.setParameters(oTransformer, oEnvironmentProps);\nStylesheetCache.setParameters(oTransformer, oUserProps);\noTransformer.setParameter(\"param_page\", ((Page) (vPages.get(c))).getTitle());\noTransformer.transform(oStreamSrcXML, oStreamResult);\n} catch (TransformerConfigurationException e) {\noLastXcpt = e;\nsMedia = null;\nSourceLocator sl = e.getLocator();\nif (DebugFile.trace) {\nif (sl == null) {\nDebugFile.writeln(\"ERROR TransformerConfigurationException \" + e.getMessage());\n} else {\nDebugFile.writeln(\"ERROR TransformerConfigurationException \" + e.getMessage() + \" line=\" + String.valueOf(sl.getLineNumber()) + \" column=\" + String.valueOf(sl.getColumnNumber()));\n}\n}\n} catch (TransformerException e) {\noLastXcpt = e;\nsMedia = null;\nif (DebugFile.trace) DebugFile.writeln(\"ERROR TransformerException \" + e.getMessageAndLocation());\n}\noTransformer = null;\noStreamResult = null;\nsTransformed = oStrWritter.toString();\nif (DebugFile.trace) DebugFile.writeln(\"transformation length=\" + String.valueOf(sTransformed.length()));\nif (sTransformed.length() > 0) {\niCloseHead = sTransformed.indexOf(\"</head\");\nif (iCloseHead < 0) iCloseHead = sTransformed.indexOf(\"</HEAD\");\niOpenBody = sTransformed.indexOf(\"<body\", iCloseHead);\nif (iOpenBody < 0) iOpenBody = sTransformed.indexOf(\"<BODY\", iCloseHead);\niCloseBody = sTransformed.indexOf(\">\", iOpenBody + 5);\nfor (char s = sTransformed.charAt(iCloseBody + 1); s == '\\r' || s == '\\n' || s == ' ' || s == '\\t'; s = sTransformed.charAt(++iCloseBody)) ;\noPostTransform = new StringBuffer(sTransformed.length() + 4096);\noPostTransform.append(sTransformed.substring(0, iCloseHead));\noPostTransform.append(\"\\n<script language=\\\"JavaScript\\\" src=\\\"\" + sMenuPath + \"\\\"></script>\");\noPostTransform.append(\"\\n<script language=\\\"JavaScript\\\" src=\\\"\" + sIntegradorPath + \"\\\"></script>\\n\");\noPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));\noPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));\ntry {\nsCharBuffer = oFS.readfilestr(sCtrlPath, \"UTF-8\");\nif (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + \" characters readed\");\n} catch (com.enterprisedt.net.ftp.FTPException ftpe) {\nthrow new IOException(ftpe.getMessage());\n}\ntry {\nif (DebugFile.trace) DebugFile.writeln(\"Gadgets.replace(\" + sCtrlPath + \",http://demo.hipergate.com/,\" + sWebServer + \")\");\nGadgets.replace(sCharBuffer, \"http://demo.hipergate.com/\", sWebServer);\n} catch (org.apache.oro.text.regex.MalformedPatternException e) {\n}\noPostTransform.append(\"<!--Begin \" + sCtrlPath + \"-->\\n\");\noPostTransform.append(sCharBuffer);\nsCharBuffer = null;\noPostTransform.append(\"\\n<!--End \" + sCtrlPath + \"-->\\n\");\noPostTransform.append(sTransformed.substring(iCloseBody));\n} else {\noPostTransform = new StringBuffer(\"Page \" + ((Page) vPages.get(c)).getTitle() + \" could not be rendered.\");\nif (oLastXcpt != null) oPostTransform.append(\"<BR>\" + oLastXcpt.getMessageAndLocation());\n}\nif (DebugFile.trace) DebugFile.writeln(\"new FileWriter(\" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia + \")\");\nif (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia, oPostTransform.toString(), \"UTF-8\"); else try {\noFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia, Gadgets.replace(oPostTransform.toString(), \":selPageOptions\", sSelPageOptions), \"UTF-8\");\n} catch (Exception e) {\n}\noPostTransform = null;\nsTransformed = null;\n}\noXMLStream.close();\nif (DebugFile.trace) {\nDebugFile.writeln(\"done in \" + String.valueOf(System.currentTimeMillis() - lElapsed) + \" miliseconds\");\nDebugFile.decIdent();\nDebugFile.writeln(\"End Pageset.buildSiteForEdit()\");\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 552
                },
                {
                        "id": "pretrain_java_data_2399380",
                        "content": "public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {\nTransformer oTransformer;\nStreamResult oStreamResult;\nStreamSource oStreamSrcXML;\nStringWriter oStrWritter;\nInputStream oXMLStream = null;\nString sTransformed;\nStringBuffer oPostTransform;\nString sKey;\nString sMedia;\nObject sVal;\nPage oCurrentPage;\nint iCloseHead, iOpenBody, iCloseBody;\nint iReaded;\nchar CharBuffer[] = new char[8192];\nString sCharBuffer;\nlong lElapsed = 0;\nfinal String sSep = System.getProperty(\"file.separator\");\nif (DebugFile.trace) {\nlElapsed = System.currentTimeMillis();\nDebugFile.writeln(\"Begin Pageset.buildSiteForEdit(\" + sBasePath + \",\" + sOutputPath + \",\" + sCtrlPath + \",\" + sMenuPath + \")\");\nDebugFile.incIdent();\n}\nFileSystem oFS = new FileSystem();\nVector vPages = pages();\nif (!sBasePath.endsWith(sSep)) sBasePath += sSep;\nString sWebServer = oEnvironmentProps.getProperty(\"webserver\", \"\");\nif (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(\"WARNING: webserver property not set at EnvironmentProperties\");\nif (!sWebServer.endsWith(\"/\")) sWebServer += \"/\";\nNode oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), \"containers\");\nif (oContainers == null) {\nif (DebugFile.trace) DebugFile.writeln(\"ERROR: <containers> node not found.\");\nthrow new DOMException(DOMException.NOT_FOUND_ERR, \"<containers> node not found\");\n}\nif (DebugFile.trace) DebugFile.writeln(\"new FileInputStream(\" + (sURI.startsWith(\"file://\") ? sURI.substring(7) : sURI) + \")\");\nfor (int c = 0; c < vPages.size(); c++) {\noCurrentPage = (Page) vPages.get(c);\noXMLStream = new FileInputStream(sURI.startsWith(\"file://\") ? sURI.substring(7) : sURI);\noStreamSrcXML = new StreamSource(oXMLStream);\noStrWritter = new StringWriter();\noStreamResult = new StreamResult(oStrWritter);\ntry {\noTransformer = StylesheetCache.newTransformer(sBasePath + \"xslt\" + sSep + \"templates\" + sSep + oMSite.name() + sSep + oCurrentPage.template());\nsMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);\nif (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + \"=\" + sMedia);\nif (null == sMedia) sMedia = \"html\"; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);\nif (null == oCurrentPage.getTitle()) throw new NullPointerException(\"Page \" + String.valueOf(c) + \" title is null\");\nif (DebugFile.trace) DebugFile.writeln(\"Page.filePath(\" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \".\" + sMedia + \")\");\noCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \".\" + sMedia);\nStylesheetCache.setParameters(oTransformer, oEnvironmentProps);\nStylesheetCache.setParameters(oTransformer, oUserProps);\noTransformer.setParameter(\"param_page\", ((Page) (vPages.get(c))).getTitle());\noTransformer.transform(oStreamSrcXML, oStreamResult);\n} catch (TransformerConfigurationException e) {\noLastXcpt = e;\nsMedia = null;\nSourceLocator sl = e.getLocator();\nif (DebugFile.trace) {\nif (sl == null) {\nDebugFile.writeln(\"ERROR TransformerConfigurationException \" + e.getMessage());\n} else {\nDebugFile.writeln(\"ERROR TransformerConfigurationException \" + e.getMessage() + \" line=\" + String.valueOf(sl.getLineNumber()) + \" column=\" + String.valueOf(sl.getColumnNumber()));\n}\n}\n} catch (TransformerException e) {\noLastXcpt = e;\nsMedia = null;\nif (DebugFile.trace) DebugFile.writeln(\"ERROR TransformerException \" + e.getMessageAndLocation());\n}\noTransformer = null;\noStreamResult = null;\nsTransformed = oStrWritter.toString();\nif (DebugFile.trace) DebugFile.writeln(\"transformation length=\" + String.valueOf(sTransformed.length()));\nif (sTransformed.length() > 0) {\niCloseHead = sTransformed.indexOf(\"</head\");\nif (iCloseHead < 0) iCloseHead = sTransformed.indexOf(\"</HEAD\");\niOpenBody = sTransformed.indexOf(\"<body\", iCloseHead);\nif (iOpenBody < 0) iOpenBody = sTransformed.indexOf(\"<BODY\", iCloseHead);\niCloseBody = sTransformed.indexOf(\">\", iOpenBody + 5);\nfor (char s = sTransformed.charAt(iCloseBody + 1); s == '\\r' || s == '\\n' || s == ' ' || s == '\\t'; s = sTransformed.charAt(++iCloseBody)) ;\noPostTransform = new StringBuffer(sTransformed.length() + 4096);\noPostTransform.append(sTransformed.substring(0, iCloseHead));\noPostTransform.append(\"\\n<script language=\\\"JavaScript\\\" src=\\\"\" + sMenuPath + \"\\\"></script>\");\noPostTransform.append(\"\\n<script language=\\\"JavaScript\\\" src=\\\"\" + sIntegradorPath + \"\\\"></script>\\n\");\noPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));\noPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));\ntry {\nsCharBuffer = oFS.readfilestr(sCtrlPath, \"UTF-8\");\nif (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + \" characters readed\");\n} catch (com.enterprisedt.net.ftp.FTPException ftpe) {\nthrow new IOException(ftpe.getMessage());\n}\ntry {\nif (DebugFile.trace) DebugFile.writeln(\"Gadgets.replace(\" + sCtrlPath + \",http://demo.hipergate.com/,\" + sWebServer + \")\");\nGadgets.replace(sCharBuffer, \"http://demo.hipergate.com/\", sWebServer);\n} catch (org.apache.oro.text.regex.MalformedPatternException e) {\n}\noPostTransform.append(\"<!--Begin \" + sCtrlPath + \"-->\\n\");\noPostTransform.append(sCharBuffer);\nsCharBuffer = null;\noPostTransform.append(\"\\n<!--End \" + sCtrlPath + \"-->\\n\");\noPostTransform.append(sTransformed.substring(iCloseBody));\n} else {\noPostTransform = new StringBuffer(\"Page \" + ((Page) vPages.get(c)).getTitle() + \" could not be rendered.\");\nif (oLastXcpt != null) oPostTransform.append(\"<BR>\" + oLastXcpt.getMessageAndLocation());\n}\nif (DebugFile.trace) DebugFile.writeln(\"new FileWriter(\" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia + \")\");\nif (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia, oPostTransform.toString(), \"UTF-8\"); else try {\noFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia, Gadgets.replace(oPostTransform.toString(), \":selPageOptions\", sSelPageOptions), \"UTF-8\");\n} catch (Exception e) {\n}\noPostTransform = null;\nsTransformed = null;\n}\noXMLStream.close();\nif (DebugFile.trace) {\nDebugFile.writeln(\"done in \" + String.valueOf(System.currentTimeMillis() - lElapsed) + \" miliseconds\");\nDebugFile.decIdent();\nDebugFile.writeln(\"End Pageset.buildSiteForEdit()\");\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1096011#546#666.java",
                        "__cluster__": 552
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20568568",
                        "content": "private String createHTML(PAGE_TYPE requestPage) {\nString result = \"<html><head>\";\nURL url = getClass().getClassLoader().getResource(\"org/compiere/images/PAPanel.css\");\nInputStreamReader ins;\ntry {\nins = new InputStreamReader(url.openStream());\nBufferedReader bufferedReader = new BufferedReader(ins);\nString cssLine;\nwhile ((cssLine = bufferedReader.readLine()) != null) result += cssLine + \"\\n\";\n} catch (IOException e1) {\nlog.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n}\nswitch(requestPage) {\ncase PAGE_LOGO:\nresult += \"</head><body class=\\\"header\\\">\" + \"<table width=\\\"100%\\\"><tr><td>\" + \"<img src=\\\"res:org/compiere/images/logo_ad.png\\\">\" + \"</td><td></td><td width=\\\"290\\\">\" + \"</td></tr></table>\" + \"</body></html>\";\nbreak;\ncase PAGE_HOME:\nresult += \"</head><body><div class=\\\"content\\\">\\n\";\nqueryZoom = null;\nqueryZoom = new ArrayList<MQuery>();\nString appendToHome = null;\nString sql = \" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID\" + \" FROM PA_DASHBOARDCONTENT x\" + \" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id\" + \" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'\" + \" ORDER BY LINE\";\nPreparedStatement pstmt = null;\nResultSet rs = null;\ntry {\npstmt = DB.prepareStatement(sql, null);\npstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\nrs = pstmt.executeQuery();\nwhile (rs.next()) {\nappendToHome = rs.getString(\"HTML\");\nif (appendToHome != null) {\nif (rs.getString(\"DESCRIPTION\") != null) result += \"<H2>\" + rs.getString(\"DESCRIPTION\") + \"</H2>\\n\";\nresult += stripHtml(appendToHome, false) + \"<br>\\n\";\n}\nif (rs.getInt(\"AD_MENU_ID\") > 0) {\nresult += \"<a class=\\\"hrefNode\\\" href=\\\"http:///window/node#\" + String.valueOf(rs.getInt(\"AD_WINDOW_ID\") + \"\\\">\" + rs.getString(\"DESCRIPTION\") + \"</a><br>\\n\");\n}\nresult += \"<br>\\n\";\nif (rs.getInt(\"PA_GOAL_ID\") > 0) result += goalsDetail(rs.getInt(\"PA_GOAL_ID\"));\n}\n} catch (SQLException e) {\nlog.log(Level.SEVERE, sql, e);\n} finally {\nDB.close(rs, pstmt);\nrs = null;\npstmt = null;\n}\nresult += \"<br><br><br>\\n\" + \"</div>\\n</body>\\n</html>\\n\";\nbreak;\ndefault:\nlog.warning(\"Unknown option - \" + requestPage);\n}\nreturn result;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 568
                },
                {
                        "id": "pretrain_java_data_16628444",
                        "content": "<filename>references/bcb_chosen_clones/selected#1469008#103#156.java\nprivate String createHTML(PAGE_TYPE requestPage) {\nString result = \"<html><head>\";\nURL url = getClass().getClassLoader().getResource(\"org/compiere/images/PAPanel.css\");\nInputStreamReader ins;\ntry {\nins = new InputStreamReader(url.openStream());\nBufferedReader bufferedReader = new BufferedReader(ins);\nString cssLine;\nwhile ((cssLine = bufferedReader.readLine()) != null) result += cssLine + \"\\n\";\n} catch (IOException e1) {\nlog.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n}\nswitch(requestPage) {\ncase PAGE_LOGO:\nresult += \"</head><body class=\\\"header\\\">\" + \"<table width=\\\"100%\\\"><tr><td>\" + \"<img src=\\\"res:org/compiere/images/logo_ad.png\\\">\" + \"</td><td></td><td width=\\\"290\\\">\" + \"</td></tr></table>\" + \"</body></html>\";\nbreak;\ncase PAGE_HOME:\nresult += \"</head><body><div class=\\\"content\\\">\\n\";\nqueryZoom = null;\nqueryZoom = new ArrayList<MQuery>();\nString appendToHome = null;\nString sql = \" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID\" + \" FROM PA_DASHBOARDCONTENT x\" + \" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id\" + \" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'\" + \" ORDER BY LINE\";\nPreparedStatement pstmt = null;\nResultSet rs = null;\ntry {\npstmt = DB.prepareStatement(sql, null);\npstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\nrs = pstmt.executeQuery();\nwhile (rs.next()) {\nappendToHome = rs.getString(\"HTML\");\nif (appendToHome != null) {\nif (rs.getString(\"DESCRIPTION\") != null) result += \"<H2>\" + rs.getString(\"DESCRIPTION\") + \"</H2>\\n\";\nresult += stripHtml(appendToHome, false) + \"<br>\\n\";\n}\nif (rs.getInt(\"AD_MENU_ID\") > 0) {\nresult += \"<a class=\\\"hrefNode\\\" href=\\\"http:///window/node#\" + String.valueOf(rs.getInt(\"AD_WINDOW_ID\") + \"\\\">\" + rs.getString(\"DESCRIPTION\") + \"</a><br>\\n\");\n}\nresult += \"<br>\\n\";\nif (rs.getInt(\"PA_GOAL_ID\") > 0) result += goalsDetail(rs.getInt(\"PA_GOAL_ID\"));\n}\n} catch (SQLException e) {\nlog.log(Level.SEVERE, sql, e);\n} finally {\nDB.close(rs, pstmt);\nrs = null;\npstmt = null;\n}\nresult += \"<br><br><br>\\n\" + \"</div>\\n</body>\\n</html>\\n\";\nbreak;\ndefault:\nlog.warning(\"Unknown option - \" + requestPage);\n}\nreturn result;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1469008#103#156.java",
                        "__cluster__": 568
                },
                [
                        {
                                "real_dup": 3
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_324679",
                        "content": "public boolean import_hints(String filename) {\nint pieceId;\nint i, col, row;\nint rotation;\nint number;\nboolean byurl = true;\ne2piece temppiece;\nString lineread;\nStringTokenizer tok;\nBufferedReader entree;\ntry {\nif (byurl == true) {\nURL url = new URL(baseURL, filename);\nInputStream in = url.openStream();\nentree = new BufferedReader(new InputStreamReader(in));\n} else {\nentree = new BufferedReader(new FileReader(filename));\n}\npieceId = 0;\nlineread = entree.readLine();\ntok = new StringTokenizer(lineread, \" \");\nnumber = Integer.parseInt(tok.nextToken());\nfor (i = 0; i < number; i++) {\nlineread = entree.readLine();\nif (lineread == null) {\nbreak;\n}\ntok = new StringTokenizer(lineread, \" \");\npieceId = Integer.parseInt(tok.nextToken());\ncol = Integer.parseInt(tok.nextToken()) - 1;\nrow = Integer.parseInt(tok.nextToken()) - 1;\nrotation = Integer.parseInt(tok.nextToken());\nSystem.out.println(\"placing hint piece : \" + pieceId);\nplace_piece_at(pieceId, col, row, 0);\ntemppiece = board.get_piece_at(col, row);\ntemppiece.reset_rotation();\ntemppiece.rotate(rotation);\ntemppiece.set_as_hint();\n}\nreturn true;\n} catch (IOException err) {\nreturn false;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 592
                },
                {
                        "id": "pretrain_java_data_16663672",
                        "content": "public boolean import_hints(String filename) {\nint pieceId;\nint i, col, row;\nint rotation;\nint number;\nboolean byurl = true;\ne2piece temppiece;\nString lineread;\nStringTokenizer tok;\nBufferedReader entree;\ntry {\nif (byurl == true) {\nURL url = new URL(baseURL, filename);\nInputStream in = url.openStream();\nentree = new BufferedReader(new InputStreamReader(in));\n} else {\nentree = new BufferedReader(new FileReader(filename));\n}\npieceId = 0;\nlineread = entree.readLine();\ntok = new StringTokenizer(lineread, \" \");\nnumber = Integer.parseInt(tok.nextToken());\nfor (i = 0; i < number; i++) {\nlineread = entree.readLine();\nif (lineread == null) {\nbreak;\n}\ntok = new StringTokenizer(lineread, \" \");\npieceId = Integer.parseInt(tok.nextToken());\ncol = Integer.parseInt(tok.nextToken()) - 1;\nrow = Integer.parseInt(tok.nextToken()) - 1;\nrotation = Integer.parseInt(tok.nextToken());\nSystem.out.println(\"placing hint piece : \" + pieceId);\nplace_piece_at(pieceId, col, row, 0);\ntemppiece = board.get_piece_at(col, row);\ntemppiece.reset_rotation();\ntemppiece.rotate(rotation);\ntemppiece.set_as_hint();\n}\nreturn true;\n} catch (IOException err) {\nreturn false;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#37375#115#158.java",
                        "__cluster__": 592
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6625074",
                        "content": "public static String SHA1(String text) {\nbyte[] sha1hash = new byte[40];\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nsha1hash = md.digest();\n} catch (UnsupportedEncodingException ex) {\nLogger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n} catch (NoSuchAlgorithmException ex) {\nLogger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n}\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 740
                },
                {
                        "id": "pretrain_java_data_16695699",
                        "content": "public static String SHA1(String text) {\nbyte[] sha1hash = new byte[40];\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nsha1hash = md.digest();\n} catch (UnsupportedEncodingException ex) {\nLogger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n} catch (NoSuchAlgorithmException ex) {\nLogger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n}\nreturn convertToHex(sha1hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2104219#48#60.java",
                        "__cluster__": 740
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_16608687",
                        "content": "<filename>references/bcb_chosen_clones/selected#855185#104#142.java<gh_stars>10-100\npublic static void fileCopy(String from_name, String to_name) throws IOException {\nFile fromFile = new File(from_name);\nFile toFile = new File(to_name);\nif (fromFile.equals(toFile)) abort(\"cannot copy on itself: \" + from_name);\nif (!fromFile.exists()) abort(\"no such currentSourcepartName file: \" + from_name);\nif (!fromFile.isFile()) abort(\"can't copy directory: \" + from_name);\nif (!fromFile.canRead()) abort(\"currentSourcepartName file is unreadable: \" + from_name);\nif (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\nif (toFile.exists()) {\nif (!toFile.canWrite()) abort(\"destination file is unwriteable: \" + to_name);\n} else {\nString parent = toFile.getParent();\nif (parent == null) abort(\"destination directory doesn't exist: \" + parent);\nFile dir = new File(parent);\nif (!dir.exists()) abort(\"destination directory doesn't exist: \" + parent);\nif (dir.isFile()) abort(\"destination is not a directory: \" + parent);\nif (!dir.canWrite()) abort(\"destination directory is unwriteable: \" + parent);\n}\nFileInputStream from = null;\nFileOutputStream to = null;\ntry {\nfrom = new FileInputStream(fromFile);\nto = new FileOutputStream(toFile);\nbyte[] buffer = new byte[4096];\nint bytes_read;\nwhile ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n} finally {\nif (from != null) try {\nfrom.close();\n} catch (IOException e) {\n;\n}\nif (to != null) try {\nto.close();\n} catch (IOException e) {\n;\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#855185#104#142.java",
                        "__cluster__": 294
                },
                {
                        "id": "test_bigclonebench_data_9109613",
                        "content": "public static void fileCopy(String from_name, String to_name) throws IOException {\nFile fromFile = new File(from_name);\nFile toFile = new File(to_name);\nif (fromFile.equals(toFile)) abort(\"cannot copy on itself: \" + from_name);\nif (!fromFile.exists()) abort(\"no such currentSourcepartName file: \" + from_name);\nif (!fromFile.isFile()) abort(\"can't copy directory: \" + from_name);\nif (!fromFile.canRead()) abort(\"currentSourcepartName file is unreadable: \" + from_name);\nif (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\nif (toFile.exists()) {\nif (!toFile.canWrite()) abort(\"destination file is unwriteable: \" + to_name);\n} else {\nString parent = toFile.getParent();\nif (parent == null) abort(\"destination directory doesn't exist: \" + parent);\nFile dir = new File(parent);\nif (!dir.exists()) abort(\"destination directory doesn't exist: \" + parent);\nif (dir.isFile()) abort(\"destination is not a directory: \" + parent);\nif (!dir.canWrite()) abort(\"destination directory is unwriteable: \" + parent);\n}\nFileInputStream from = null;\nFileOutputStream to = null;\ntry {\nfrom = new FileInputStream(fromFile);\nto = new FileOutputStream(toFile);\nbyte[] buffer = new byte[4096];\nint bytes_read;\nwhile ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n} finally {\nif (from != null) try {\nfrom.close();\n} catch (IOException e) {\n;\n}\nif (to != null) try {\nto.close();\n} catch (IOException e) {\n;\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 294
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2355134",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\nInputStream inStream = null;\nOutputStream outStream = null;\ntry {\ninStream = MatsimResource.getAsInputStream(resourceFilename);\noutStream = new FileOutputStream(destinationFilename);\nIOUtils.copyStream(inStream, outStream);\n} finally {\nif (inStream != null) {\ntry {\ninStream.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\nif (outStream != null) {\ntry {\noutStream.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#376177#69#92.java",
                        "__cluster__": 11
                },
                {
                        "id": "test_bigclonebench_data_21656668",
                        "content": "private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\nInputStream inStream = null;\nOutputStream outStream = null;\ntry {\ninStream = MatsimResource.getAsInputStream(resourceFilename);\noutStream = new FileOutputStream(destinationFilename);\nIOUtils.copyStream(inStream, outStream);\n} finally {\nif (inStream != null) {\ntry {\ninStream.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\nif (outStream != null) {\ntry {\noutStream.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 11
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_18302835",
                        "content": "<filename>references/bcb_chosen_clones/selected#724165#213#222.java<gh_stars>10-100\npublic static String getHash(String uri) throws NoSuchAlgorithmException {\nMessageDigest mDigest = MessageDigest.getInstance(\"MD5\");\nmDigest.update(uri.getBytes());\nbyte d[] = mDigest.digest();\nStringBuffer hash = new StringBuffer();\nfor (int i = 0; i < d.length; i++) {\nhash.append(Integer.toHexString(0xFF & d[i]));\n}\nreturn hash.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#724165#213#222.java",
                        "__cluster__": 156
                },
                {
                        "id": "test_bigclonebench_data_13024538",
                        "content": "public static String getHash(String uri) throws NoSuchAlgorithmException {\nMessageDigest mDigest = MessageDigest.getInstance(\"MD5\");\nmDigest.update(uri.getBytes());\nbyte d[] = mDigest.digest();\nStringBuffer hash = new StringBuffer();\nfor (int i = 0; i < d.length; i++) {\nhash.append(Integer.toHexString(0xFF & d[i]));\n}\nreturn hash.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 156
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_10218878",
                        "content": "public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\nbyte magicKey = 0;\nbyte[] buffer = new byte[2048];\nint nread;\nInputStream map;\nOutputStream output;\ntry {\nmap = new FileInputStream(mapFile);\n} catch (Exception e) {\nthrow new Exception(\"Map file error\", e);\n}\ntry {\noutput = new FileOutputStream(outputFile);\n} catch (Exception e) {\nthrow new Exception(\"Map file error\", e);\n}\nwhile ((nread = map.read(buffer, 0, 2048)) != 0) {\nfor (int i = 0; i < nread; ++i) {\nbuffer[i] ^= magicKey;\nmagicKey += 43;\n}\noutput.write(buffer, 0, nread);\n}\nmap.close();\noutput.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 187
                },
                {
                        "id": "pretrain_java_data_16791480",
                        "content": "public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\nbyte magicKey = 0;\nbyte[] buffer = new byte[2048];\nint nread;\nInputStream map;\nOutputStream output;\ntry {\nmap = new FileInputStream(mapFile);\n} catch (Exception e) {\nthrow new Exception(\"Map file error\", e);\n}\ntry {\noutput = new FileOutputStream(outputFile);\n} catch (Exception e) {\nthrow new Exception(\"Map file error\", e);\n}\nwhile ((nread = map.read(buffer, 0, 2048)) != 0) {\nfor (int i = 0; i < nread; ++i) {\nbuffer[i] ^= magicKey;\nmagicKey += 43;\n}\noutput.write(buffer, 0, nread);\n}\nmap.close();\noutput.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#661312#132#157.java",
                        "__cluster__": 187
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_17996547",
                        "content": "public static File copyFile(File fileToCopy, File copiedFile) {\nBufferedInputStream in = null;\nBufferedOutputStream outWriter = null;\nif (!copiedFile.exists()) {\ntry {\ncopiedFile.createNewFile();\n} catch (IOException e1) {\ne1.printStackTrace();\nreturn null;\n}\n}\ntry {\nin = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);\noutWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);\nint c;\nwhile ((c = in.read()) != -1) outWriter.write(c);\nin.close();\noutWriter.close();\n} catch (FileNotFoundException e) {\ne.printStackTrace();\nreturn null;\n} catch (IOException e) {\ne.printStackTrace();\nreturn null;\n}\nreturn copiedFile;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 208
                },
                {
                        "id": "pretrain_java_data_18243669",
                        "content": "<gh_stars>10-100\npublic static File copyFile(File fileToCopy, File copiedFile) {\nBufferedInputStream in = null;\nBufferedOutputStream outWriter = null;\nif (!copiedFile.exists()) {\ntry {\ncopiedFile.createNewFile();\n} catch (IOException e1) {\ne1.printStackTrace();\nreturn null;\n}\n}\ntry {\nin = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);\noutWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);\nint c;\nwhile ((c = in.read()) != -1) outWriter.write(c);\nin.close();\noutWriter.close();\n} catch (FileNotFoundException e) {\ne.printStackTrace();\nreturn null;\n} catch (IOException e) {\ne.printStackTrace();\nreturn null;\n}\nreturn copiedFile;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#960745#177#203.java",
                        "__cluster__": 208
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_22752444",
                        "content": "public synchronized String encrypt(String plainText) {\nString hash = null;\ntry {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\n} catch (NoSuchAlgorithmException e) {\nthrow new NoSuchAlgorithmException();\n}\ntry {\nif (plainText != null) md.update(plainText.getBytes(\"UTF-8\"));\n} catch (UnsupportedEncodingException e) {\nthrow new UnsupportedEncodingException();\n}\nbyte raw[] = md.digest();\nhash = (new BASE64Encoder()).encode(raw);\n} catch (NoSuchAlgorithmException e) {\nMessageLog.writeErrorMessage(e, this);\n} catch (UnsupportedEncodingException e) {\nMessageLog.writeErrorMessage(e, this);\n}\nreturn Util.stripChars(hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 114
                },
                {
                        "id": "pretrain_java_data_18269261",
                        "content": "<gh_stars>10-100\npublic synchronized String encrypt(String plainText) {\nString hash = null;\ntry {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\n} catch (NoSuchAlgorithmException e) {\nthrow new NoSuchAlgorithmException();\n}\ntry {\nif (plainText != null) md.update(plainText.getBytes(\"UTF-8\"));\n} catch (UnsupportedEncodingException e) {\nthrow new UnsupportedEncodingException();\n}\nbyte raw[] = md.digest();\nhash = (new BASE64Encoder()).encode(raw);\n} catch (NoSuchAlgorithmException e) {\nMessageLog.writeErrorMessage(e, this);\n} catch (UnsupportedEncodingException e) {\nMessageLog.writeErrorMessage(e, this);\n}\nreturn Util.stripChars(hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#181641#26#48.java",
                        "__cluster__": 114
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_23611215",
                        "content": "public String uploadFile(String url, int port, String uname, String upass, InputStream input) {\nString serverPath = config.getServerPath() + DateUtil.getSysmonth();\nFTPClient ftp = new FTPClient();\ntry {\nint replyCode;\nftp.connect(url, port);\nftp.login(uname, upass);\nreplyCode = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(replyCode)) {\nftp.disconnect();\nreturn config.getServerPath();\n}\nif (!ftp.changeWorkingDirectory(serverPath)) {\nftp.makeDirectory(DateUtil.getSysmonth());\nftp.changeWorkingDirectory(serverPath);\n}\nftp.storeFile(getFileName(), input);\ninput.close();\nftp.logout();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn serverPath;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 416
                },
                {
                        "id": "pretrain_java_data_16711451",
                        "content": "public String uploadFile(String url, int port, String uname, String upass, InputStream input) {\nString serverPath = config.getServerPath() + DateUtil.getSysmonth();\nFTPClient ftp = new FTPClient();\ntry {\nint replyCode;\nftp.connect(url, port);\nftp.login(uname, upass);\nreplyCode = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(replyCode)) {\nftp.disconnect();\nreturn config.getServerPath();\n}\nif (!ftp.changeWorkingDirectory(serverPath)) {\nftp.makeDirectory(DateUtil.getSysmonth());\nftp.changeWorkingDirectory(serverPath);\n}\nftp.storeFile(getFileName(), input);\ninput.close();\nftp.logout();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn serverPath;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1382037#94#117.java",
                        "__cluster__": 416
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14001795",
                        "content": "public static void copyOverWarFile() {\nSystem.out.println(\"Copy Over War File:\");\nFile dir = new File(theAppsDataDir);\nFileFilter ff = new WildcardFileFilter(\"*.war\");\nif (dir.listFiles(ff).length == 0) {\ndir = new File(System.getProperty(\"user.dir\") + \"/war\");\nif (dir.exists()) {\nFile[] files = dir.listFiles(ff);\nfor (File f : files) {\ntry {\nFile newFile = new File(\"\" + theAppsDataDir + \"/\" + f.getName());\nSystem.out.println(\"Creating new file \\\"\" + f.getAbsolutePath() + \"\\\"\");\nnewFile.createNewFile();\nInputStream fi = new FileInputStream(f);\nOutputStream fo = new FileOutputStream(newFile);\nIOUtils.copy(fi, fo);\nmoveUnzipAndExtract(newFile);\n} catch (Exception ex) {\nLogger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n}\n}\n}\n} else {\nSystem.out.println(\"Found a war in the apps data dir, ignoring a fresh copy\");\n}\nnew JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\nSystem.setProperty(\"user.dir\", theAppsDataDir);\nSystem.out.println(\"User.dir : \" + System.getProperty(\"user.dir\"));\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 619
                },
                {
                        "id": "pretrain_java_data_16707194",
                        "content": "<filename>references/bcb_chosen_clones/selected#1083413#88#116.java\npublic static void copyOverWarFile() {\nSystem.out.println(\"Copy Over War File:\");\nFile dir = new File(theAppsDataDir);\nFileFilter ff = new WildcardFileFilter(\"*.war\");\nif (dir.listFiles(ff).length == 0) {\ndir = new File(System.getProperty(\"user.dir\") + \"/war\");\nif (dir.exists()) {\nFile[] files = dir.listFiles(ff);\nfor (File f : files) {\ntry {\nFile newFile = new File(\"\" + theAppsDataDir + \"/\" + f.getName());\nSystem.out.println(\"Creating new file \\\"\" + f.getAbsolutePath() + \"\\\"\");\nnewFile.createNewFile();\nInputStream fi = new FileInputStream(f);\nOutputStream fo = new FileOutputStream(newFile);\nIOUtils.copy(fi, fo);\nmoveUnzipAndExtract(newFile);\n} catch (Exception ex) {\nLogger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n}\n}\n}\n} else {\nSystem.out.println(\"Found a war in the apps data dir, ignoring a fresh copy\");\n}\nnew JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\nSystem.setProperty(\"user.dir\", theAppsDataDir);\nSystem.out.println(\"User.dir : \" + System.getProperty(\"user.dir\"));\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1083413#88#116.java",
                        "__cluster__": 619
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_18217612",
                        "content": "public static boolean copyFile(final File src, final File dst) {\nboolean result = false;\nFileChannel inChannel = null;\nFileChannel outChannel = null;\nsynchronized (FileUtil.DATA_LOCK) {\ntry {\ninChannel = new FileInputStream(src).getChannel();\noutChannel = new FileOutputStream(dst).getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\nresult = true;\n} catch (IOException e) {\n} finally {\nif (inChannel != null && inChannel.isOpen()) {\ntry {\ninChannel.close();\n} catch (IOException e) {\n}\n}\nif (outChannel != null && outChannel.isOpen()) {\ntry {\noutChannel.close();\n} catch (IOException e) {\n}\n}\n}\n}\nreturn result;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1395872#99#126.java",
                        "__cluster__": 799
                },
                {
                        "id": "test_bigclonebench_data_5035872",
                        "content": "public static boolean copyFile(final File src, final File dst) {\nboolean result = false;\nFileChannel inChannel = null;\nFileChannel outChannel = null;\nsynchronized (FileUtil.DATA_LOCK) {\ntry {\ninChannel = new FileInputStream(src).getChannel();\noutChannel = new FileOutputStream(dst).getChannel();\ninChannel.transferTo(0, inChannel.size(), outChannel);\nresult = true;\n} catch (IOException e) {\n} finally {\nif (inChannel != null && inChannel.isOpen()) {\ntry {\ninChannel.close();\n} catch (IOException e) {\n}\n}\nif (outChannel != null && outChannel.isOpen()) {\ntry {\noutChannel.close();\n} catch (IOException e) {\n}\n}\n}\n}\nreturn result;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 799
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6988216",
                        "content": "public void testSimpleQuery() throws Exception {\nJCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + \"users/alexander.klimetschek\");\nassertNotNull(dummySource);\nOutputStream os = ((ModifiableSource) dummySource).getOutputStream();\nassertNotNull(os);\nString dummyContent = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>\";\nos.write(dummyContent.getBytes());\nos.flush();\nos.close();\nJCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + \"users/bastian\");\nassertNotNull(source);\nos = ((ModifiableSource) source).getOutputStream();\nassertNotNull(os);\nString content = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>\";\nos.write(content.getBytes());\nos.flush();\nos.close();\nQueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + \"users?/*[.//user/teamspace='mindquarry']\");\nassertNotNull(qResult);\nCollection results = qResult.getChildren();\nassertEquals(1, results.size());\nIterator it = results.iterator();\nJCRNodeSource rSrc = (JCRNodeSource) it.next();\nInputStream rSrcIn = rSrc.getInputStream();\nByteArrayOutputStream actualOut = new ByteArrayOutputStream();\nIOUtils.copy(rSrcIn, actualOut);\nrSrcIn.close();\nassertEquals(content, actualOut.toString());\nactualOut.close();\nrSrc.delete();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 872
                },
                {
                        "id": "pretrain_java_data_18298974",
                        "content": "public void testSimpleQuery() throws Exception {\nJCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + \"users/alexander.klimetschek\");\nassertNotNull(dummySource);\nOutputStream os = ((ModifiableSource) dummySource).getOutputStream();\nassertNotNull(os);\nString dummyContent = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>\";\nos.write(dummyContent.getBytes());\nos.flush();\nos.close();\nJCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + \"users/bastian\");\nassertNotNull(source);\nos = ((ModifiableSource) source).getOutputStream();\nassertNotNull(os);\nString content = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>\";\nos.write(content.getBytes());\nos.flush();\nos.close();\nQueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + \"users?/*[.//user/teamspace='mindquarry']\");\nassertNotNull(qResult);\nCollection results = qResult.getChildren();\nassertEquals(1, results.size());\nIterator it = results.iterator();\nJCRNodeSource rSrc = (JCRNodeSource) it.next();\nInputStream rSrcIn = rSrc.getInputStream();\nByteArrayOutputStream actualOut = new ByteArrayOutputStream();\nIOUtils.copy(rSrcIn, actualOut);\nrSrcIn.close();\nassertEquals(content, actualOut.toString());\nactualOut.close();\nrSrc.delete();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1988911#21#51.java",
                        "__cluster__": 872
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_18280083",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate static boolean copyFile(File in, File out) {\nboolean ok = true;\nInputStream is = null;\nOutputStream os = null;\ntry {\nis = new FileInputStream(in);\nos = new FileOutputStream(out);\nbyte[] buffer = new byte[0xFFFF];\nfor (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);\n} catch (IOException e) {\nSystem.err.println(e);\nok = false;\n} finally {\nif (is != null) {\ntry {\nis.close();\n} catch (IOException e) {\nSystem.err.println(e);\n}\n}\nif (os != null) {\ntry {\nos.close();\n} catch (IOException e) {\nSystem.err.println(e);\n}\n}\n}\nreturn ok;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1010035#178#207.java",
                        "__cluster__": 373
                },
                {
                        "id": "test_bigclonebench_data_8150996",
                        "content": "private static boolean copyFile(File in, File out) {\nboolean ok = true;\nInputStream is = null;\nOutputStream os = null;\ntry {\nis = new FileInputStream(in);\nos = new FileOutputStream(out);\nbyte[] buffer = new byte[0xFFFF];\nfor (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);\n} catch (IOException e) {\nSystem.err.println(e);\nok = false;\n} finally {\nif (is != null) {\ntry {\nis.close();\n} catch (IOException e) {\nSystem.err.println(e);\n}\n}\nif (os != null) {\ntry {\nos.close();\n} catch (IOException e) {\nSystem.err.println(e);\n}\n}\n}\nreturn ok;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 373
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18693224",
                        "content": "public void runDynusT(final boolean cleanUp) {\nfinal String[] exeFiles = new String[] { \"DynusT.exe\", \"DLL_ramp.dll\", \"Ramp_Meter_Fixed_CDLL.dll\", \"Ramp_Meter_Feedback_CDLL.dll\", \"Ramp_Meter_Feedback_FDLL.dll\", \"libifcoremd.dll\", \"libmmd.dll\", \"Ramp_Meter_Fixed_FDLL.dll\", \"libiomp5md.dll\" };\nfinal String[] modelFiles = new String[] { \"network.dat\", \"scenario.dat\", \"control.dat\", \"ramp.dat\", \"incident.dat\", \"movement.dat\", \"vms.dat\", \"origin.dat\", \"destination.dat\", \"StopCap4Way.dat\", \"StopCap2Way.dat\", \"YieldCap.dat\", \"WorkZone.dat\", \"GradeLengthPCE.dat\", \"leftcap.dat\", \"system.dat\", \"output_option.dat\", \"bg_demand_adjust.dat\", \"xy.dat\", \"TrafficFlowModel.dat\", \"parameter.dat\" };\nlog.info(\"Creating iteration-directory...\");\nFile iterDir = new File(this.tmpDir);\nif (!iterDir.exists()) {\niterDir.mkdir();\n}\nlog.info(\"Copying application files to iteration-directory...\");\nfor (String filename : exeFiles) {\nlog.info(\"  Copying \" + filename);\nIOUtils.copyFile(new File(this.dynusTDir + \"/\" + filename), new File(this.tmpDir + \"/\" + filename));\n}\nlog.info(\"Copying model files to iteration-directory...\");\nfor (String filename : modelFiles) {\nlog.info(\"  Copying \" + filename);\nIOUtils.copyFile(new File(this.modelDir + \"/\" + filename), new File(this.tmpDir + \"/\" + filename));\n}\nfor (File f : new File(this.modelDir).listFiles()) {\nif (f.getName().toLowerCase(Locale.ROOT).endsWith(\".dws\")) {\nlog.info(\"  Copying \" + f.getName());\nIOUtils.copyFile(f, new File(this.tmpDir + \"/\" + f.getName()));\n}\n}\nString logfileName = this.tmpDir + \"/dynus-t.log\";\nString cmd = this.tmpDir + \"/DynusT.exe\";\nlog.info(\"running command: \" + cmd + \" in directory \" + this.tmpDir);\nint timeout = 7200;\nint exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\nif (exitcode != 0) {\nthrow new RuntimeException(\"There was a problem running Dynus-T. exit code: \" + exitcode);\n}\nif (cleanUp) {\nfor (String filename : exeFiles) {\nlog.info(\"  Deleting \" + filename);\nnew File(this.tmpDir + \"/\" + filename).delete();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 409
                },
                {
                        "id": "pretrain_java_data_18238417",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#1298281#24#50.java\npublic void runDynusT() {\nfinal String[] exeFiles = new String[] { \"DynusT.exe\", \"DLL_ramp.dll\", \"Ramp_Meter_Fixed_CDLL.dll\", \"Ramp_Meter_Feedback_CDLL.dll\", \"Ramp_Meter_Feedback_FDLL.dll\", \"libifcoremd.dll\", \"libmmd.dll\", \"Ramp_Meter_Fixed_FDLL.dll\", \"libiomp5md.dll\" };\nfinal String[] modelFiles = new String[] { \"network.dat\", \"scenario.dat\", \"control.dat\", \"ramp.dat\", \"incident.dat\", \"movement.dat\", \"vms.dat\", \"origin.dat\", \"destination.dat\", \"StopCap4Way.dat\", \"StopCap2Way.dat\", \"YieldCap.dat\", \"WorkZone.dat\", \"GradeLengthPCE.dat\", \"leftcap.dat\", \"system.dat\", \"output_option.dat\", \"bg_demand_adjust.dat\", \"xy.dat\", \"TrafficFlowModel.dat\", \"parameter.dat\" };\nlog.info(\"Creating iteration-directory...\");\nFile iterDir = new File(this.tmpDir);\nif (!iterDir.exists()) {\niterDir.mkdir();\n}\nlog.info(\"Copying application files to iteration-directory...\");\nfor (String filename : exeFiles) {\nlog.info(\"  Copying \" + filename);\nIOUtils.copyFile(new File(this.dynusTDir + \"/\" + filename), new File(this.tmpDir + \"/\" + filename));\n}\nlog.info(\"Copying model files to iteration-directory...\");\nfor (String filename : modelFiles) {\nlog.info(\"  Copying \" + filename);\nIOUtils.copyFile(new File(this.modelDir + \"/\" + filename), new File(this.tmpDir + \"/\" + filename));\n}\nString logfileName = this.tmpDir + \"/dynus-t.log\";\nString cmd = this.tmpDir + \"/DynusT.exe\";\nlog.info(\"running command: \" + cmd);\nint timeout = 14400;\nint exitcode = ExeRunner.run(cmd, logfileName, timeout);\nif (exitcode != 0) {\nthrow new RuntimeException(\"There was a problem running Dynus-T. exit code: \" + exitcode);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1298281#24#50.java",
                        "__cluster__": 409
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_19865955",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate static byte[] baseHash(String name, String password) {\ntry {\nMessageDigest digest = MessageDigest.getInstance(\"MD5\");\ndigest.reset();\ndigest.update(name.toLowerCase().getBytes());\ndigest.update(password.getBytes());\nreturn digest.digest();\n} catch (NoSuchAlgorithmException ex) {\nd(\"MD5 algorithm not found!\");\nthrow new RuntimeException(\"MD5 algorithm not found! Unable to authenticate\");\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2660043#50#61.java",
                        "__cluster__": 54
                },
                {
                        "id": "test_bigclonebench_data_14567939",
                        "content": "private static byte[] baseHash(String name, String password) {\ntry {\nMessageDigest digest = MessageDigest.getInstance(\"MD5\");\ndigest.reset();\ndigest.update(name.toLowerCase().getBytes());\ndigest.update(password.getBytes());\nreturn digest.digest();\n} catch (NoSuchAlgorithmException ex) {\nd(\"MD5 algorithm not found!\");\nthrow new RuntimeException(\"MD5 algorithm not found! Unable to authenticate\");\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 54
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_18390961",
                        "content": "protected int deleteBitstreamInfo(int id, Connection conn) {\nPreparedStatement stmt = null;\nint numDeleted = 0;\ntry {\nstmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);\nstmt.setInt(1, id);\nnumDeleted = stmt.executeUpdate();\nif (numDeleted > 1) {\nconn.rollback();\nthrow new IllegalStateException(\"Too many rows deleted! Number of rows deleted: \" + numDeleted + \" only one row should be deleted for bitstream id \" + id);\n}\n} catch (SQLException e) {\nLOG.error(\"Problem deleting bitstream. \" + e.getMessage(), e);\nthrow new RuntimeException(\"Problem deleting bitstream. \" + e.getMessage(), e);\n} finally {\ncleanup(stmt);\n}\nreturn numDeleted;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2427299#193#211.java",
                        "__cluster__": 361
                },
                {
                        "id": "test_bigclonebench_data_20414923",
                        "content": "protected int deleteBitstreamInfo(int id, Connection conn) {\nPreparedStatement stmt = null;\nint numDeleted = 0;\ntry {\nstmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);\nstmt.setInt(1, id);\nnumDeleted = stmt.executeUpdate();\nif (numDeleted > 1) {\nconn.rollback();\nthrow new IllegalStateException(\"Too many rows deleted! Number of rows deleted: \" + numDeleted + \" only one row should be deleted for bitstream id \" + id);\n}\n} catch (SQLException e) {\nLOG.error(\"Problem deleting bitstream. \" + e.getMessage(), e);\nthrow new RuntimeException(\"Problem deleting bitstream. \" + e.getMessage(), e);\n} finally {\ncleanup(stmt);\n}\nreturn numDeleted;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 361
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19959489",
                        "content": "public static String str2md5(String str) {\ntry {\nMessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\nalga.update(str.getBytes());\nbyte[] digesta = alga.digest();\nreturn byte2hex(digesta);\n} catch (NoSuchAlgorithmException ex) {\nreturn str;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1645494#18#27.java",
                        "__cluster__": 410
                },
                {
                        "id": "test_bigclonebench_data_14473711",
                        "content": "public static String str2md5(String str) {\ntry {\nMessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\nalga.update(str.getBytes());\nbyte[] digesta = alga.digest();\nreturn byte2hex(digesta);\n} catch (NoSuchAlgorithmException ex) {\nreturn str;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 410
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13063241",
                        "content": "public static void copyFile(File src, File dest) throws IOException {\nFileInputStream fis = new FileInputStream(src);\nFileOutputStream fos = new FileOutputStream(dest);\njava.nio.channels.FileChannel channelSrc = fis.getChannel();\njava.nio.channels.FileChannel channelDest = fos.getChannel();\nchannelSrc.transferTo(0, channelSrc.size(), channelDest);\nfis.close();\nfos.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 498
                },
                {
                        "id": "pretrain_java_data_19965485",
                        "content": "public static void copyFile(File src, File dest) throws IOException {\nFileInputStream fis = new FileInputStream(src);\nFileOutputStream fos = new FileOutputStream(dest);\nFileChannel channelSrc = fis.getChannel();\nFileChannel channelDest = fos.getChannel();\nchannelSrc.transferTo(0, channelSrc.size(), channelDest);\nfis.close();\nfos.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1741101#263#271.java",
                        "__cluster__": 498
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_19877426",
                        "content": "public static final synchronized String hash(String data) {\nif (digest == null) {\ntry {\ndigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException nsae) {\nlog.error(\"Failed to load the MD5 MessageDigest. \" + \"Jive will be unable to function normally.\", nsae);\n}\n}\ntry {\ndigest.update(data.getBytes(\"utf-8\"));\n} catch (UnsupportedEncodingException e) {\nlog.error(e);\n}\nreturn encodeHex(digest.digest());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#59909#317#331.java",
                        "__cluster__": 133
                },
                {
                        "id": "test_bigclonebench_data_12128591",
                        "content": "public static final synchronized String hash(String data) {\nif (digest == null) {\ntry {\ndigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException nsae) {\nlog.error(\"Failed to load the MD5 MessageDigest. \" + \"Jive will be unable to function normally.\", nsae);\n}\n}\ntry {\ndigest.update(data.getBytes(\"utf-8\"));\n} catch (UnsupportedEncodingException e) {\nlog.error(e);\n}\nreturn encodeHex(digest.digest());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 133
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19877426",
                        "content": "public static final synchronized String hash(String data) {\nif (digest == null) {\ntry {\ndigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException nsae) {\nlog.error(\"Failed to load the MD5 MessageDigest. \" + \"Jive will be unable to function normally.\", nsae);\n}\n}\ntry {\ndigest.update(data.getBytes(\"utf-8\"));\n} catch (UnsupportedEncodingException e) {\nlog.error(e);\n}\nreturn encodeHex(digest.digest());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#59909#317#331.java",
                        "__cluster__": 133
                },
                {
                        "id": "test_bigclonebench_data_4852691",
                        "content": "public static final synchronized String hash(String data) {\nif (digest == null) {\ntry {\ndigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException nsae) {\nSystem.err.println(\"Failed to load the MD5 MessageDigest. \" + \"Jive will be unable to function normally.\");\nnsae.printStackTrace();\n}\n}\ndigest.update(data.getBytes());\nreturn toHex(digest.digest());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 133
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_18347489",
                        "content": "public static void updatePicInfo(Connection conn, int nr, int lock, DBPicInfo picInfo) throws SQLException {\nString sql = \"\";\nPreparedStatement pstmt = null;\ntry {\nif (!picInfo.getName().equals(\"\")) {\nsql = \"update DBPic set name=? where bnr=?\";\npstmt = conn.prepareStatement(sql);\npstmt.setString(1, picInfo.getName());\npstmt.setInt(2, nr);\npstmt.executeUpdate();\n}\nif (picInfo.getRate() != 0) {\nsql = \"update DBPic set rate=? where bnr=?\";\npstmt = conn.prepareStatement(sql);\npstmt.setInt(1, picInfo.getRate());\npstmt.setInt(2, nr);\npstmt.executeUpdate();\n}\nsql = \"update DBThumb set thumb_lock=? where bnr=?\";\npstmt = conn.prepareStatement(sql);\npstmt.setInt(1, lock);\npstmt.setInt(2, nr);\npstmt.executeUpdate();\nif (picInfo.getCategories() != null) {\nsql = \"delete from Zuordnen where bnr=?\";\npstmt = conn.prepareStatement(sql);\npstmt.setInt(1, nr);\npstmt.executeUpdate();\nDaoUpdate.insertPicInCategories(conn, nr, picInfo.getCategories());\n}\nif (picInfo.getKeywords() != null) {\nsql = \"delete from Haben where bnr=?\";\npstmt = conn.prepareStatement(sql);\npstmt.setInt(1, nr);\npstmt.executeUpdate();\nDaoUpdate.insertPicInKeywords(conn, nr, picInfo.getKeywords());\n}\nconn.commit();\n} catch (SQLException e) {\nconn.rollback();\nthrow e;\n} finally {\npstmt.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1626345#109#153.java",
                        "__cluster__": 665
                },
                {
                        "id": "test_bigclonebench_data_8266672",
                        "content": "public static void updatePicInfo(Connection conn, int nr, int lock, DBPicInfo picInfo) throws SQLException {\nString sql = \"\";\nPreparedStatement pstmt = null;\ntry {\nif (!picInfo.getName().equals(\"\")) {\nsql = \"update DBPic set name=? where bnr=?\";\npstmt = conn.prepareStatement(sql);\npstmt.setString(1, picInfo.getName());\npstmt.setInt(2, nr);\npstmt.executeUpdate();\n}\nif (picInfo.getRate() != 0) {\nsql = \"update DBPic set rate=? where bnr=?\";\npstmt = conn.prepareStatement(sql);\npstmt.setInt(1, picInfo.getRate());\npstmt.setInt(2, nr);\npstmt.executeUpdate();\n}\nsql = \"update DBThumb set thumb_lock=? where bnr=?\";\npstmt = conn.prepareStatement(sql);\npstmt.setInt(1, lock);\npstmt.setInt(2, nr);\npstmt.executeUpdate();\nif (picInfo.getCategories() != null) {\nsql = \"delete from Zuordnen where bnr=?\";\npstmt = conn.prepareStatement(sql);\npstmt.setInt(1, nr);\npstmt.executeUpdate();\nDaoUpdate.insertPicInCategories(conn, nr, picInfo.getCategories());\n}\nif (picInfo.getKeywords() != null) {\nsql = \"delete from Haben where bnr=?\";\npstmt = conn.prepareStatement(sql);\npstmt.setInt(1, nr);\npstmt.executeUpdate();\nDaoUpdate.insertPicInKeywords(conn, nr, picInfo.getKeywords());\n}\nconn.commit();\n} catch (SQLException e) {\nconn.rollback();\nthrow e;\n} finally {\npstmt.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 665
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19865211",
                        "content": "public void read() throws IOException {\nif (log.isInfoEnabled()) {\nlog.info(\"Reading the camera log, \" + url);\n}\nfinal BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString line;\nint i = 0;\ntry {\nwhile ((line = in.readLine()) != null) {\ni++;\ntry {\nfinal CameraLogRecord logDatum = new CameraLogRecord(line);\nrecords.add(logDatum);\n} catch (LogParseException e) {\nif (log.isInfoEnabled()) {\nlog.info(\"Bad record in \" + url + \" at line:\" + i);\n}\n}\n}\n} finally {\nin.close();\n}\nCollections.sort(records);\nif (log.isInfoEnabled()) {\nlog.info(\"Finished reading the camera log, \" + url);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#594896#235#261.java",
                        "__cluster__": 798
                },
                {
                        "id": "test_bigclonebench_data_12197169",
                        "content": "public void read() throws IOException {\nif (log.isInfoEnabled()) {\nlog.info(\"Reading the camera log, \" + url);\n}\nfinal BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString line;\nint i = 0;\ntry {\nwhile ((line = in.readLine()) != null) {\ni++;\ntry {\nfinal CameraLogRecord logDatum = new CameraLogRecord(line);\nrecords.add(logDatum);\n} catch (LogParseException e) {\nif (log.isInfoEnabled()) {\nlog.info(\"Bad record in \" + url + \" at line:\" + i);\n}\n}\n}\n} finally {\nin.close();\n}\nCollections.sort(records);\nif (log.isInfoEnabled()) {\nlog.info(\"Finished reading the camera log, \" + url);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 798
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19953914",
                        "content": "<gh_stars>10-100\npublic static String plainToMD(LoggerCollection loggerCol, String input) {\nbyte[] byteHash = null;\nMessageDigest md = null;\nStringBuilder md5result = new StringBuilder();\ntry {\nmd = MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(input.getBytes());\nbyteHash = md.digest();\nfor (int i = 0; i < byteHash.length; i++) {\nmd5result.append(Integer.toHexString(0xFF & byteHash[i]));\n}\n} catch (NoSuchAlgorithmException ex) {\nloggerCol.logException(CLASSDEBUG, \"de.searchworkorange.lib.misc.hash.MD5Hash\", Level.FATAL, ex);\n}\nreturn (md5result.toString());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#252396#37#53.java",
                        "__cluster__": 157
                },
                {
                        "id": "test_bigclonebench_data_17716716",
                        "content": "public static String plainToMD(LoggerCollection loggerCol, String input) {\nbyte[] byteHash = null;\nMessageDigest md = null;\nStringBuilder md5result = new StringBuilder();\ntry {\nmd = MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(input.getBytes());\nbyteHash = md.digest();\nfor (int i = 0; i < byteHash.length; i++) {\nmd5result.append(Integer.toHexString(0xFF & byteHash[i]));\n}\n} catch (NoSuchAlgorithmException ex) {\nloggerCol.logException(CLASSDEBUG, \"de.searchworkorange.lib.misc.hash.MD5Hash\", Level.FATAL, ex);\n}\nreturn (md5result.toString());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 157
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19819193",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {\ntry {\nConnection conn = null;\nStatement stmt = null;\ntry {\nconn = FidoDataSource.getConnection();\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nif (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);\nif (isRuleUnique(stmt, language, tag, root, surface) == false) return;\nint row;\nif (root.equals(\"*\") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);\nboolean use = determineRecognitionUse(root, surface);\nbumpAllRowsDown(stmt, language, tag, row);\nString sql = \"insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) \" + \"values ('\" + language + \"', \" + row + \", '\" + root + \"', '\" + surface + \"', '\" + tag + \"', \";\nif (use == true) sql = sql + \"TRUE)\"; else sql = sql + \"FALSE)\";\nstmt.executeUpdate(sql);\nconn.commit();\n} catch (SQLException e) {\nif (conn != null) conn.rollback();\nthrow e;\n} finally {\nif (stmt != null) stmt.close();\nif (conn != null) conn.close();\n}\n} catch (SQLException e) {\nthrow new FidoDatabaseException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#464210#182#210.java",
                        "__cluster__": 801
                },
                {
                        "id": "test_bigclonebench_data_10158738",
                        "content": "public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {\ntry {\nConnection conn = null;\nStatement stmt = null;\ntry {\nconn = FidoDataSource.getConnection();\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nif (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);\nif (isRuleUnique(stmt, language, tag, root, surface) == false) return;\nint row;\nif (root.equals(\"*\") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);\nboolean use = determineRecognitionUse(root, surface);\nbumpAllRowsDown(stmt, language, tag, row);\nString sql = \"insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) \" + \"values ('\" + language + \"', \" + row + \", '\" + root + \"', '\" + surface + \"', '\" + tag + \"', \";\nif (use == true) sql = sql + \"TRUE)\"; else sql = sql + \"FALSE)\";\nstmt.executeUpdate(sql);\nconn.commit();\n} catch (SQLException e) {\nif (conn != null) conn.rollback();\nthrow e;\n} finally {\nif (stmt != null) stmt.close();\nif (conn != null) conn.close();\n}\n} catch (SQLException e) {\nthrow new FidoDatabaseException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 801
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8064604",
                        "content": "public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {\n_cman = mgr;\n_sock = sock;\nfor (int i = 0; i < 256; i++) {\nString key = Integer.toHexString(i);\nif (key.length() < 2) key = \"0\" + key;\navailcmd.push(key);\ncommands.put(key, null);\n}\ntry {\n_sout = new PrintWriter(_sock.getOutputStream(), true);\n_sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));\nString seed = \"\";\nRandom rand = new Random();\nfor (int i = 0; i < 16; i++) {\nString hex = Integer.toHexString(rand.nextInt(256));\nif (hex.length() < 2) hex = \"0\" + hex;\nseed += hex.substring(hex.length() - 2);\n}\nString pass = _mpsw + seed + _spsw;\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.reset();\nmd5.update(pass.getBytes());\nString hash = hash2hex(md5.digest()).toLowerCase();\nString banner = \"INIT \" + \"servername\" + \" \" + hash + \" \" + seed;\nsendLine(banner);\nString txt = readLine(5);\nif (txt == null) {\nthrow new IOException(\"Slave did not send banner !!\");\n}\nString sname = \"\";\nString spass = \"\";\nString sseed = \"\";\ntry {\nString[] items = txt.split(\" \");\nsname = items[1].trim();\nspass = items[2].trim();\nsseed = items[3].trim();\n} catch (Exception e) {\nAsyncSlaveListener.invalidSlave(\"INITFAIL BadKey\", _sock);\n}\npass = _spsw + sseed + _mpsw;\nmd5 = MessageDigest.getInstance(\"MD5\");\nmd5.reset();\nmd5.update(pass.getBytes());\nhash = hash2hex(md5.digest()).toLowerCase();\nif (!sname.equals(_name)) {\nAsyncSlaveListener.invalidSlave(\"INITFAIL Unknown\", _sock);\n}\nif (!spass.toLowerCase().equals(hash.toLowerCase())) {\nAsyncSlaveListener.invalidSlave(\"INITFAIL BadKey\", _sock);\n}\n_cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);\nstart();\n} catch (IOException e) {\nif (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {\nlogger.info(\"Check slaves.xml on the master that you are allowed to connect.\");\n}\nlogger.info(\"IOException: \" + e.toString());\ntry {\nsock.close();\n} catch (Exception e1) {\n}\n} catch (Exception e) {\nlogger.warn(\"Exception: \" + e.toString());\ntry {\nsock.close();\n} catch (Exception e2) {\n}\n}\nSystem.gc();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 137
                },
                {
                        "id": "pretrain_java_data_3957617",
                        "content": "public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {\n_cman = mgr;\n_sock = sock;\nfor (int i = 0; i < 256; i++) {\nString key = Integer.toHexString(i);\nif (key.length() < 2) key = \"0\" + key;\navailcmd.push(key);\ncommands.put(key, null);\n}\ntry {\n_sout = new PrintWriter(_sock.getOutputStream(), true);\n_sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));\nString seed = \"\";\nRandom rand = new Random();\nfor (int i = 0; i < 16; i++) {\nString hex = Integer.toHexString(rand.nextInt(256));\nif (hex.length() < 2) hex = \"0\" + hex;\nseed += hex.substring(hex.length() - 2);\n}\nString pass = _mpsw + seed + _spsw;\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.reset();\nmd5.update(pass.getBytes());\nString hash = hash2hex(md5.digest()).toLowerCase();\nString banner = \"INIT \" + \"servername\" + \" \" + hash + \" \" + seed;\nsendLine(banner);\nString txt = readLine(5);\nif (txt == null) {\nthrow new IOException(\"Slave did not send banner !!\");\n}\nString sname = \"\";\nString spass = \"\";\nString sseed = \"\";\ntry {\nString[] items = txt.split(\" \");\nsname = items[1].trim();\nspass = items[2].trim();\nsseed = items[3].trim();\n} catch (Exception e) {\nAsyncSlaveListener.invalidSlave(\"INITFAIL BadKey\", _sock);\n}\npass = _spsw + sseed + _mpsw;\nmd5 = MessageDigest.getInstance(\"MD5\");\nmd5.reset();\nmd5.update(pass.getBytes());\nhash = hash2hex(md5.digest()).toLowerCase();\nif (!sname.equals(_name)) {\nAsyncSlaveListener.invalidSlave(\"INITFAIL Unknown\", _sock);\n}\nif (!spass.toLowerCase().equals(hash.toLowerCase())) {\nAsyncSlaveListener.invalidSlave(\"INITFAIL BadKey\", _sock);\n}\n_cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);\nstart();\n} catch (IOException e) {\nif (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {\nlogger.info(\"Check slaves.xml on the master that you are allowed to connect.\");\n}\nlogger.info(\"IOException: \" + e.toString());\ntry {\nsock.close();\n} catch (Exception e1) {\n}\n} catch (Exception e) {\nlogger.warn(\"Exception: \" + e.toString());\ntry {\nsock.close();\n} catch (Exception e2) {\n}\n}\nSystem.gc();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2172271#119#190.java",
                        "__cluster__": 137
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19972279",
                        "content": "public static void copy(File sourceFile, File destinationFile) {\ntry {\nif (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {\nSystem.out.println(\"sourceFile & destinationFile is null\");\nSystem.exit(-1);\n}\nif (sourceFile.isDirectory()) {\nFile[] tmp = sourceFile.listFiles();\nFile f;\nfor (int i = 0; i < tmp.length; i++) {\nf = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());\nf.getParentFile().mkdirs();\ncopy(tmp[i], f);\n}\n} else {\nSystem.out.println(\"\\nCopy from: \" + sourceFile + \"\\n\\n     to: \" + destinationFile);\nFileChannel source = new FileInputStream(sourceFile).getChannel();\nFileChannel destination = new FileOutputStream(destinationFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\nsource.close();\ndestination.close();\n}\n} catch (IOException e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1927390#21#46.java",
                        "__cluster__": 254
                },
                {
                        "id": "test_bigclonebench_data_20011285",
                        "content": "public static void copy(File sourceFile, File destinationFile) {\ntry {\nif (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {\nSystem.out.println(\"sourceFile & destinationFile is null\");\nSystem.exit(-1);\n}\nif (sourceFile.isDirectory()) {\nFile[] tmp = sourceFile.listFiles();\nFile f;\nfor (int i = 0; i < tmp.length; i++) {\nf = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());\nf.getParentFile().mkdirs();\ncopy(tmp[i], f);\n}\n} else {\nSystem.out.println(\"\\nCopy from: \" + sourceFile + \"\\n\\n     to: \" + destinationFile);\nFileChannel source = new FileInputStream(sourceFile).getChannel();\nFileChannel destination = new FileOutputStream(destinationFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\nsource.close();\ndestination.close();\n}\n} catch (IOException e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 254
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14390569",
                        "content": "private DialogHelper(String title, final URL imageURL) {\njd = new JDialog();\njd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\njd.setAlwaysOnTop(true);\njd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\njd.setTitle(title);\nJLabel jl = new JLabel();\nImageIcon icon = new ImageIcon(imageURL);\njl.setIcon(icon);\njd.add(new JScrollPane(jl));\nfinal JFileChooser chooser = getSaveImageChooser();\nJPanel jp = new JPanel();\nJButton jb = new JButton(getMessage(\"btn_save_as\"));\njb.addActionListener(new ActionListener() {\npublic void actionPerformed(ActionEvent e) {\nint returnVal = chooser.showSaveDialog(jd);\nif (returnVal == JFileChooser.APPROVE_OPTION) {\nFile file = chooser.getSelectedFile();\nString fileName = file.getPath();\nString ext = StringUtil.getLowerExtension(fileName);\nif (!\"png\".equals(ext)) {\nfileName += \".png\";\nfile = new File(fileName);\n}\nboolean doIt = true;\nif (file.exists()) {\nint i = JOptionPane.showConfirmDialog(jd, getMessage(\"warn_file_exist\"));\nif (i != JOptionPane.YES_OPTION) doIt = false;\n} else if (!file.getParentFile().exists()) {\ndoIt = file.getParentFile().mkdirs();\n}\nif (doIt) {\nFileChannel src = null;\nFileChannel dest = null;\ntry {\nsrc = new FileInputStream(imageURL.getPath()).getChannel();\ndest = new FileOutputStream(fileName).getChannel();\nsrc.transferTo(0, src.size(), dest);\n} catch (FileNotFoundException e1) {\nwarn(jd, getMessage(\"err_no_source_file\"));\n} catch (IOException e2) {\nwarn(jd, getMessage(\"err_output_target\"));\n} finally {\ntry {\nif (src != null) src.close();\n} catch (IOException e1) {\n}\ntry {\nif (dest != null) dest.close();\n} catch (IOException e1) {\n}\nsrc = null;\ndest = null;\n}\n}\n}\n}\n});\njp.add(jb);\njb = new JButton(getMessage(\"btn_close\"));\njb.addActionListener(new ActionListener() {\npublic void actionPerformed(ActionEvent e) {\njd.dispose();\n}\n});\njp.add(jb);\njd.add(jp);\njd.pack();\nsetCentral(jd);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 288
                },
                {
                        "id": "pretrain_java_data_3911227",
                        "content": "private DialogHelper(String title, final URL imageURL) {\njd = new JDialog();\njd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\njd.setAlwaysOnTop(true);\njd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\njd.setTitle(title);\nJLabel jl = new JLabel();\nImageIcon icon = new ImageIcon(imageURL);\njl.setIcon(icon);\njd.add(new JScrollPane(jl));\nfinal JFileChooser chooser = getSaveImageChooser();\nJPanel jp = new JPanel();\nJButton jb = new JButton(getMessage(\"btn_save_as\"));\njb.addActionListener(new ActionListener() {\npublic void actionPerformed(ActionEvent e) {\nint returnVal = chooser.showSaveDialog(jd);\nif (returnVal == JFileChooser.APPROVE_OPTION) {\nFile file = chooser.getSelectedFile();\nString fileName = file.getPath();\nString ext = StringUtil.getLowerExtension(fileName);\nif (!\"png\".equals(ext)) {\nfileName += \".png\";\nfile = new File(fileName);\n}\nboolean doIt = true;\nif (file.exists()) {\nint i = JOptionPane.showConfirmDialog(jd, getMessage(\"warn_file_exist\"));\nif (i != JOptionPane.YES_OPTION) doIt = false;\n} else if (!file.getParentFile().exists()) {\ndoIt = file.getParentFile().mkdirs();\n}\nif (doIt) {\nFileChannel src = null;\nFileChannel dest = null;\ntry {\nsrc = new FileInputStream(imageURL.getPath()).getChannel();\ndest = new FileOutputStream(fileName).getChannel();\nsrc.transferTo(0, src.size(), dest);\n} catch (FileNotFoundException e1) {\nwarn(jd, getMessage(\"err_no_source_file\"));\n} catch (IOException e2) {\nwarn(jd, getMessage(\"err_output_target\"));\n} finally {\ntry {\nif (src != null) src.close();\n} catch (IOException e1) {\n}\ntry {\nif (dest != null) dest.close();\n} catch (IOException e1) {\n}\nsrc = null;\ndest = null;\n}\n}\n}\n}\n});\njp.add(jb);\njb = new JButton(getMessage(\"btn_close\"));\njb.addActionListener(new ActionListener() {\npublic void actionPerformed(ActionEvent e) {\njd.dispose();\n}\n});\njp.add(jb);\njd.add(jp);\njd.pack();\nsetCentral(jd);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#265583#186#257.java",
                        "__cluster__": 288
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14758866",
                        "content": "public synchronized InputStream getResourceAsStream(String name) {\nInputStream inputStream = null;\nBufferedInputStream in = null;\nBufferedOutputStream out = null;\ntry {\nURL url = getResource(name);\nString remoteName = url.toExternalForm();\nString localName = (String) cacheHashtable.get(remoteName);\nif (localName != null) {\nSystem.out.println(\"Retrieving \\\"\" + localName + \"\\\"...\");\nreturn new FileInputStream(localName);\n}\nString host = url.getHost();\nString prot = url.getProtocol();\nint port = url.getPort();\nFile cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + \"port\" + (port == -1 ? \"\" : Integer.toString(port)) + File.separator + name);\ncacheFile = new File(cacheFile.getCanonicalPath());\nlocalName = cacheFile.getCanonicalPath();\nSystem.out.println(\"Comparing \\\"\" + localName + \"\\\"...\");\nURLConnection urlConnection = url.openConnection();\nif (cacheFile.exists()) {\nurlConnection.setIfModifiedSince(cacheFile.lastModified());\n}\nif (urlConnection instanceof HttpURLConnection) {\nHttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\nhttpURLConnection.setFollowRedirects(true);\nhttpURLConnection.setRequestMethod(\"GET\");\nint responseCode = httpURLConnection.getResponseCode();\nSystem.out.println(httpURLConnection.getResponseMessage() + \", \" + httpURLConnection.getContentLength() + \" bytes\" + \", \" + new Date(httpURLConnection.getDate()) + \", \" + new Date(httpURLConnection.getLastModified()));\nif (responseCode != HttpURLConnection.HTTP_OK) {\nreturn null;\n}\n}\ninputStream = urlConnection.getInputStream();\nif (inputStream == null) return null;\nif (cacheFile.exists()) {\nlong lastModified = urlConnection.getLastModified();\nif ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\ninputStream.close();\ncacheHashtable.put(remoteName, localName);\nSystem.out.println(\"Retrieving \\\"\" + localName + \"\\\"...\");\nreturn new FileInputStream(cacheFile);\n}\n}\nFile parentFile = new File(cacheFile.getParent());\nparentFile.mkdirs();\nlocalName = cacheFile.getCanonicalPath();\nSystem.out.println(\"CACHING \\\"\" + localName + \"\\\"...\");\nin = new BufferedInputStream(inputStream);\nout = new BufferedOutputStream(new FileOutputStream(cacheFile));\nint i;\nwhile ((i = in.read()) > -1) out.write(i);\nout.close();\nin.close();\ncacheHashtable.put(remoteName, localName);\nSystem.out.println(\"Retrieving \\\"\" + localName + \"\\\"...\");\nreturn new FileInputStream(localName);\n} catch (Exception ex) {\ntry {\ninputStream.close();\n} catch (Exception ex1) {\n}\ntry {\nin.close();\n} catch (Exception ex1) {\n}\ntry {\nout.close();\n} catch (Exception ex1) {\n}\nex.printStackTrace();\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 292
                },
                {
                        "id": "pretrain_java_data_3912587",
                        "content": "<filename>references/bcb_chosen_clones/selected#1827843#71#144.java\npublic synchronized InputStream getResourceAsStream(String name) {\nInputStream inputStream = null;\nBufferedInputStream in = null;\nBufferedOutputStream out = null;\ntry {\nURL url = getResource(name);\nString remoteName = url.toExternalForm();\nString localName = (String) cacheHashtable.get(remoteName);\nif (localName != null) {\nSystem.out.println(\"Retrieving \\\"\" + localName + \"\\\"...\");\nreturn new FileInputStream(localName);\n}\nString host = url.getHost();\nString prot = url.getProtocol();\nint port = url.getPort();\nFile cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + \"port\" + (port == -1 ? \"\" : Integer.toString(port)) + File.separator + name);\ncacheFile = new File(cacheFile.getCanonicalPath());\nlocalName = cacheFile.getCanonicalPath();\nSystem.out.println(\"Comparing \\\"\" + localName + \"\\\"...\");\nURLConnection urlConnection = url.openConnection();\nif (cacheFile.exists()) {\nurlConnection.setIfModifiedSince(cacheFile.lastModified());\n}\nif (urlConnection instanceof HttpURLConnection) {\nHttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\nhttpURLConnection.setFollowRedirects(true);\nhttpURLConnection.setRequestMethod(\"GET\");\nint responseCode = httpURLConnection.getResponseCode();\nSystem.out.println(httpURLConnection.getResponseMessage() + \", \" + httpURLConnection.getContentLength() + \" bytes\" + \", \" + new Date(httpURLConnection.getDate()) + \", \" + new Date(httpURLConnection.getLastModified()));\nif (responseCode != HttpURLConnection.HTTP_OK) {\nreturn null;\n}\n}\ninputStream = urlConnection.getInputStream();\nif (inputStream == null) return null;\nif (cacheFile.exists()) {\nlong lastModified = urlConnection.getLastModified();\nif ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\ninputStream.close();\ncacheHashtable.put(remoteName, localName);\nSystem.out.println(\"Retrieving \\\"\" + localName + \"\\\"...\");\nreturn new FileInputStream(cacheFile);\n}\n}\nFile parentFile = new File(cacheFile.getParent());\nparentFile.mkdirs();\nlocalName = cacheFile.getCanonicalPath();\nSystem.out.println(\"CACHING \\\"\" + localName + \"\\\"...\");\nin = new BufferedInputStream(inputStream);\nout = new BufferedOutputStream(new FileOutputStream(cacheFile));\nint i;\nwhile ((i = in.read()) > -1) out.write(i);\nout.close();\nin.close();\ncacheHashtable.put(remoteName, localName);\nSystem.out.println(\"Retrieving \\\"\" + localName + \"\\\"...\");\nreturn new FileInputStream(localName);\n} catch (Exception ex) {\ntry {\ninputStream.close();\n} catch (Exception ex1) {\n}\ntry {\nin.close();\n} catch (Exception ex1) {\n}\ntry {\nout.close();\n} catch (Exception ex1) {\n}\nex.printStackTrace();\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1827843#71#144.java",
                        "__cluster__": 292
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3584508",
                        "content": "private void copyResource() throws Exception {\nURL url = getResource(source);\nInputStream input;\nif (url != null) {\ninput = url.openStream();\n} else if (new File(source).exists()) {\ninput = new FileInputStream(source);\n} else {\nthrow new Exception(\"Could not load resource: \" + source);\n}\nOutputStream output = new FileOutputStream(destinationFile());\nint b;\nwhile ((b = input.read()) != -1) output.write(b);\ninput.close();\noutput.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 320
                },
                {
                        "id": "pretrain_java_data_3821578",
                        "content": "private void copyResource() throws Exception {\nURL url = getResource(source);\nInputStream input;\nif (url != null) {\ninput = url.openStream();\n} else if (new File(source).exists()) {\ninput = new FileInputStream(source);\n} else {\nthrow new Exception(\"Could not load resource: \" + source);\n}\nOutputStream output = new FileOutputStream(destinationFile());\nint b;\nwhile ((b = input.read()) != -1) output.write(b);\ninput.close();\noutput.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2526418#44#59.java",
                        "__cluster__": 320
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_3912209",
                        "content": "public final int wordFrequency(String word) {\nString replWebQuery = webQuery.replaceFirst(\"WORDREPLACE\", word);\ntry {\nURL url = new URL(replWebQuery);\nString content = url.toString();\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\nif (inputLine.matches(nrResultsPattern)) {\nint fr = matchedLine(inputLine);\nif (fr >= 0) {\nreturn fr;\n}\n}\n}\n} catch (MalformedURLException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn 0;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1571908#30#51.java",
                        "__cluster__": 459
                },
                {
                        "id": "test_bigclonebench_data_11334468",
                        "content": "public final int wordFrequency(String word) {\nString replWebQuery = webQuery.replaceFirst(\"WORDREPLACE\", word);\ntry {\nURL url = new URL(replWebQuery);\nString content = url.toString();\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\nif (inputLine.matches(nrResultsPattern)) {\nint fr = matchedLine(inputLine);\nif (fr >= 0) {\nreturn fr;\n}\n}\n}\n} catch (MalformedURLException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn 0;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 459
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_3889636",
                        "content": "public int updateuser(User u) {\nint i = 0;\nConnection conn = null;\nPreparedStatement pm = null;\ntry {\nconn = Pool.getConnection();\nconn.setAutoCommit(false);\npm = conn.prepareStatement(\"update user set username=?,passwd=?,existstate=?,management=? where userid=?\");\npm.setString(1, u.getUsername());\npm.setString(2, u.getPasswd());\npm.setInt(3, u.getExiststate());\npm.setInt(4, u.getManagement());\npm.setString(5, u.getUserid());\ni = pm.executeUpdate();\nconn.commit();\nPool.close(pm);\nPool.close(conn);\n} catch (Exception e) {\ne.printStackTrace();\ntry {\nconn.rollback();\n} catch (SQLException e1) {\ne1.printStackTrace();\n}\nPool.close(pm);\nPool.close(conn);\n} finally {\nPool.close(pm);\nPool.close(conn);\n}\nreturn i;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2225290#42#73.java",
                        "__cluster__": 582
                },
                {
                        "id": "test_bigclonebench_data_21531069",
                        "content": "public int updateuser(User u) {\nint i = 0;\nConnection conn = null;\nPreparedStatement pm = null;\ntry {\nconn = Pool.getConnection();\nconn.setAutoCommit(false);\npm = conn.prepareStatement(\"update user set username=?,passwd=?,existstate=?,management=? where userid=?\");\npm.setString(1, u.getUsername());\npm.setString(2, u.getPasswd());\npm.setInt(3, u.getExiststate());\npm.setInt(4, u.getManagement());\npm.setString(5, u.getUserid());\ni = pm.executeUpdate();\nconn.commit();\nPool.close(pm);\nPool.close(conn);\n} catch (Exception e) {\ne.printStackTrace();\ntry {\nconn.rollback();\n} catch (SQLException e1) {\ne1.printStackTrace();\n}\nPool.close(pm);\nPool.close(conn);\n} finally {\nPool.close(pm);\nPool.close(conn);\n}\nreturn i;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 582
                },
                [
                        {
                                "real_dup": 3
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14231545",
                        "content": "public void createTempFile(String resourceName) throws IOException {\nInputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);\nif (input == null) {\nfail(\"Couldn't resolve resource '\" + resourceName + \"'!\");\n}\ninputFile = File.createTempFile(\"Import\", \"test\");\ninputFile.delete();\nFileOutputStream output = new FileOutputStream(inputFile);\nIOUtils.copyLarge(input, output);\nIOUtilities.closeQuietly(output);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 400
                },
                {
                        "id": "pretrain_java_data_3950865",
                        "content": "public void createTempFile(String resourceName) throws IOException {\nInputStream input = Log4jImportCallableTest.class.getResourceAsStream(resourceName);\nif (input == null) {\nfail(\"Couldn't resolve resource '\" + resourceName + \"'!\");\n}\ninputFile = File.createTempFile(\"Import\", \"test\");\ninputFile.delete();\nFileOutputStream output = new FileOutputStream(inputFile);\nIOUtils.copyLarge(input, output);\nIOUtilities.closeQuietly(output);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2059561#59#69.java",
                        "__cluster__": 400
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_4750967",
                        "content": "public void patch() throws IOException {\nif (mods.isEmpty()) {\nreturn;\n}\nIOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));\nJarFile mcjar = new JarFile(Paths.getMinecraftJarPath());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 684
                },
                {
                        "id": "pretrain_java_data_3905070",
                        "content": "<gh_stars>10-100\npublic void patch() throws IOException {\nif (mods.isEmpty()) {\nreturn;\n}\nIOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));\nJarFile mcjar = new JarFile(Paths.getMinecraftJarPath());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#933495#30#36.java",
                        "__cluster__": 684
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_7010469",
                        "content": "public static void copyFile(File in, File out) {\ntry {\nFileChannel inChannel = null, outChannel = null;\ntry {\nout.getParentFile().mkdirs();\ninChannel = new FileInputStream(in).getChannel();\noutChannel = new FileOutputStream(out).getChannel();\noutChannel.transferFrom(inChannel, 0, inChannel.size());\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n} catch (Exception e) {\nObjectUtils.throwAsError(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1115268#80#99.java",
                        "__cluster__": 20
                },
                {
                        "id": "test_bigclonebench_data_23666867",
                        "content": "public static void copyFile(File in, File out) {\ntry {\nFileChannel inChannel = null, outChannel = null;\ntry {\nout.getParentFile().mkdirs();\ninChannel = new FileInputStream(in).getChannel();\noutChannel = new FileOutputStream(out).getChannel();\noutChannel.transferFrom(inChannel, 0, inChannel.size());\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n} catch (Exception e) {\nObjectUtils.throwAsError(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 20
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6299111",
                        "content": "public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException {\nURL url = new URL(urlToRetrieve);\nURLConnection uc = url.openConnection();\nInputStream is = uc.getInputStream();\nBufferedReader in = new BufferedReader(new InputStreamReader(is));\nStringBuilder output = new StringBuilder(16384);\nString str;\nboolean first = true;\nwhile ((str = in.readLine()) != null) {\nif (!first) output.append(\"\\n\");\nfirst = false;\noutput.append(str);\n}\nin.close();\nSystem.err.println(((HttpURLConnection) uc).getResponseMessage());\nreturn output.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 275
                },
                {
                        "id": "pretrain_java_data_5558763",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException {\nURL url = new URL(urlToRetrieve);\nURLConnection uc = url.openConnection();\nInputStream is = uc.getInputStream();\nBufferedReader in = new BufferedReader(new InputStreamReader(is));\nStringBuilder output = new StringBuilder(16384);\nString str;\nboolean first = true;\nwhile ((str = in.readLine()) != null) {\nif (!first) output.append(\"\\n\");\nfirst = false;\noutput.append(str);\n}\nin.close();\nSystem.err.println(((HttpURLConnection) uc).getResponseMessage());\nreturn output.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2496579#134#150.java",
                        "__cluster__": 275
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_17773263",
                        "content": "public boolean visar() throws SQLException, ClassNotFoundException, Exception {\nConnection conn = null;\nPreparedStatement ps = null;\nDate fechaSystem = new Date();\nDateFormat aaaammdd = new SimpleDateFormat(\"yyyyMMdd\");\nDateFormat hhmmss = new SimpleDateFormat(\"HHmmss\");\nDateFormat sss = new SimpleDateFormat(\"S\");\nString ss = sss.format(fechaSystem);\nif (ss.length() > 2) {\nss = ss.substring(0, 2);\n}\nboolean visado = false;\ntry {\nconn = ToolsBD.getConn();\nconn.setAutoCommit(false);\nString sentenciaSql = \"UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?\" + ((hayVisadoExtracto) ? \", FZJIEXTR=?\" : \"\") + ((hayVisadoRemitente) ? \", FZJIREMI=?\" : \"\") + \" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?\";\nps = conn.prepareStatement(sentenciaSql);\nps.setString(1, usuarioVisado);\nps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));\nps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));\nint contador = 4;\nif (hayVisadoExtracto) {\nps.setString(contador++, \"X\");\n}\nif (hayVisadoRemitente) {\nps.setString(contador++, \"X\");\n}\nps.setInt(contador++, oficina);\nps.setInt(contador++, numeroRegistro);\nps.setInt(contador++, anoSalida);\nps.setString(contador++, fechaModificacion);\nps.setString(contador++, horaModificacion);\nint registrosAfectados = ps.executeUpdate();\nif (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {\nvisado = true;\n}\nif (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {\nboolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));\nif (generado) {\nvisado = actualizarBZSALIDA(conn);\n}\nString rem = \"\";\nString com = \"\";\nif (hayVisadoRemitente) {\nif (!remitente.trim().equals(\"\")) {\nrem = remitente;\n} else {\njavax.naming.InitialContext contexto = new javax.naming.InitialContext();\nObject ref = contexto.lookup(\"es.caib.regweb.ValoresHome\");\nValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\nValores valor = home.create();\nrem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + \"\");\nvalor.remove();\n}\n} else {\nif (!altres.trim().equals(\"\")) {\nrem = remitente;\n} else {\njavax.naming.InitialContext contexto = new javax.naming.InitialContext();\nObject ref = contexto.lookup(\"es.caib.regweb.ValoresHome\");\nValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\nValores valor = home.create();\nrem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + \"\");\nvalor.remove();\n}\n}\nif (hayVisadoExtracto) {\ncom = extracto;\n} else {\ncom = comentario;\n}\ntry {\nClass t = Class.forName(\"es.caib.regweb.module.PluginHook\");\nClass[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };\nObject[] params = { \"V\", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };\njava.lang.reflect.Method metodo = t.getMethod(\"salida\", partypes);\nmetodo.invoke(null, params);\n} catch (IllegalAccessException iae) {\n} catch (IllegalArgumentException iae) {\n} catch (InvocationTargetException ite) {\n} catch (NullPointerException npe) {\n} catch (ExceptionInInitializerError eiie) {\n} catch (NoSuchMethodException nsme) {\n} catch (SecurityException se) {\n} catch (LinkageError le) {\n} catch (ClassNotFoundException le) {\n}\n}\nconn.commit();\nint fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);\nString Stringsss = sss.format(fechaSystem);\nswitch(Stringsss.length()) {\ncase (1):\nStringsss = \"00\" + Stringsss;\nbreak;\ncase (2):\nStringsss = \"0\" + Stringsss;\nbreak;\n}\nint horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);\nint fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));\nlogLopdBZMODIF(\"UPDATE\", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));\n} catch (Exception e) {\nSystem.out.println(\"Error: \" + e.getMessage());\ne.printStackTrace();\nvisado = false;\ntry {\nif (conn != null) conn.rollback(); else System.out.println(\"ERROR: No es pot fer rollback sense connexi\u00f3!\");\n} catch (Exception ex) {\nSystem.out.println(\"Error: \" + e.getMessage());\nex.printStackTrace();\n}\n} finally {\nToolsBD.closeConn(conn, ps, null);\n}\nreturn visado;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 458
                },
                {
                        "id": "pretrain_java_data_5578852",
                        "content": "public boolean visar() throws SQLException, ClassNotFoundException, Exception {\nConnection conn = null;\nPreparedStatement ps = null;\nDate fechaSystem = new Date();\nDateFormat aaaammdd = new SimpleDateFormat(\"yyyyMMdd\");\nDateFormat hhmmss = new SimpleDateFormat(\"HHmmss\");\nDateFormat sss = new SimpleDateFormat(\"S\");\nString ss = sss.format(fechaSystem);\nif (ss.length() > 2) {\nss = ss.substring(0, 2);\n}\nboolean visado = false;\ntry {\nconn = ToolsBD.getConn();\nconn.setAutoCommit(false);\nString sentenciaSql = \"UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?\" + ((hayVisadoExtracto) ? \", FZJIEXTR=?\" : \"\") + ((hayVisadoRemitente) ? \", FZJIREMI=?\" : \"\") + \" WHERE FZJCENSA='E' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?\";\nps = conn.prepareStatement(sentenciaSql);\nps.setString(1, usuarioVisado);\nps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));\nps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));\nint contador = 4;\nif (hayVisadoExtracto) {\nps.setString(contador++, \"X\");\n}\nif (hayVisadoRemitente) {\nps.setString(contador++, \"X\");\n}\nps.setInt(contador++, oficina);\nps.setInt(contador++, numeroRegistro);\nps.setInt(contador++, anoEntrada);\nps.setString(contador++, fechaModificacion);\nps.setString(contador++, horaModificacion);\nint registrosAfectados = ps.executeUpdate();\nif (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {\nvisado = true;\n}\nif (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {\nboolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));\nif (generado) {\nvisado = actualizarBZENTRA(conn);\n}\nString rem = \"\";\nString com = \"\";\nif (hayVisadoRemitente) {\nif (!remitente.trim().equals(\"\")) {\nrem = remitente;\n} else {\njavax.naming.InitialContext contexto = new javax.naming.InitialContext();\nObject ref = contexto.lookup(\"es.caib.regweb.ValoresHome\");\nValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\nValores valor = home.create();\nrem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + \"\");\nvalor.remove();\n}\n} else {\nif (!altres.trim().equals(\"\")) {\nrem = remitente;\n} else {\njavax.naming.InitialContext contexto = new javax.naming.InitialContext();\nObject ref = contexto.lookup(\"es.caib.regweb.ValoresHome\");\nValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\nValores valor = home.create();\nrem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + \"\");\nvalor.remove();\n}\n}\nif (hayVisadoExtracto) {\ncom = extracto;\n} else {\ncom = comentario;\n}\ntry {\nClass t = Class.forName(\"es.caib.regweb.module.PluginHook\");\nClass[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class, String.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class };\nObject[] params = { \"V\", new Integer(anoEntrada), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma, null, null, null, null, null, null, null };\njava.lang.reflect.Method metodo = t.getMethod(\"entrada\", partypes);\nmetodo.invoke(null, params);\n} catch (IllegalAccessException iae) {\n} catch (IllegalArgumentException iae) {\n} catch (InvocationTargetException ite) {\n} catch (NullPointerException npe) {\n} catch (ExceptionInInitializerError eiie) {\n} catch (NoSuchMethodException nsme) {\n} catch (SecurityException se) {\n} catch (LinkageError le) {\n} catch (ClassNotFoundException le) {\n}\n}\nconn.commit();\nint fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);\nString Stringsss = sss.format(fechaSystem);\nswitch(Stringsss.length()) {\ncase (1):\nStringsss = \"00\" + Stringsss;\nbreak;\ncase (2):\nStringsss = \"0\" + Stringsss;\nbreak;\n}\nint horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);\nint fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));\nlogLopdBZMODIF(\"UPDATE\", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'E', numeroRegistro, anoEntrada, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));\n} catch (Exception e) {\nSystem.out.println(\"Error: \" + e.getMessage());\ne.printStackTrace();\nvisado = false;\ntry {\nif (conn != null) conn.rollback(); else System.out.println(\"ERROR: No es pot fer rollback sense connexi\u00f3!\");\n} catch (Exception ex) {\nSystem.out.println(\"Error: \" + ex.getMessage());\nex.printStackTrace();\n}\n} finally {\nToolsBD.closeConn(conn, ps, null);\n}\nreturn visado;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#683159#227#343.java",
                        "__cluster__": 458
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_5498189",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic void uncaughtException(final Thread t, final Throwable e) {\nfinal Display display = Display.getCurrent();\nfinal Shell shell = new Shell(display);\nfinal MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);\nmessage.setText(\"Hawkscope Error\");\nmessage.setMessage(e.getMessage() + \"\\nSubmit Hawkscope Error Report to Issue Tracker?\");\nlog.error(\"Uncaught exception\", e);\nif (message.open() == SWT.OK) {\nIOUtils.copyToClipboard(Version.getBugReport(e));\ntry {\nProgram.launch(Constants.HAWKSCOPE_URL_ROOT + \"issues/entry?comment=\" + URLEncoder.encode(\"Please paste the Hawkscope Error \" + \"Report here. It's currently copied to your \" + \"clipboard. Thank you for your support!\", Constants.ENCODING));\n} catch (final Exception e1) {\nProgram.launch(Constants.HAWKSCOPE_URL_ROOT + \"issues/entry\");\n}\n}\nshell.dispose();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1280769#31#47.java",
                        "__cluster__": 711
                },
                {
                        "id": "test_bigclonebench_data_19335986",
                        "content": "public void uncaughtException(final Thread t, final Throwable e) {\nfinal Display display = Display.getCurrent();\nfinal Shell shell = new Shell(display);\nfinal MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);\nmessage.setText(\"Hawkscope Error\");\nmessage.setMessage(e.getMessage() + \"\\nSubmit Hawkscope Error Report to Issue Tracker?\");\nlog.error(\"Uncaught exception\", e);\nif (message.open() == SWT.OK) {\nIOUtils.copyToClipboard(Version.getBugReport(e));\ntry {\nProgram.launch(Constants.HAWKSCOPE_URL_ROOT + \"issues/entry?comment=\" + URLEncoder.encode(\"Please paste the Hawkscope Error \" + \"Report here. It's currently copied to your \" + \"clipboard. Thank you for your support!\", Constants.ENCODING));\n} catch (final Exception e1) {\nProgram.launch(Constants.HAWKSCOPE_URL_ROOT + \"issues/entry\");\n}\n}\nshell.dispose();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 711
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3375718",
                        "content": "public void importarHistoricoDeCotacoesDoDolar(Andamento pAndamento) throws FileNotFoundException, SQLException, Exception {\npAndamento.delimitarIntervaloDeVariacao(0, 49);\nWSValorSerieVO[] cotacoesPendentesDoDolar = obterCotacoesPendentesDoDolar(pAndamento);\npAndamento.delimitarIntervaloDeVariacao(50, 100);\nif (cotacoesPendentesDoDolar != null && cotacoesPendentesDoDolar.length > 0) {\nString sql = \"INSERT INTO tmp_TB_COTACAO_DOLAR(DATA, PRECO) VALUES(:DATA, :PRECO)\";\nOraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\nstmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\nint quantidadeDeRegistrosASeremImportados = cotacoesPendentesDoDolar.length;\ntry {\nint quantidadeDeRegistrosImportados = 0;\nint numeroDoRegistro = 0;\nfor (WSValorSerieVO cotacaoPendenteDoDolar : cotacoesPendentesDoDolar) {\n++numeroDoRegistro;\nstmtDestino.clearParameters();\nint ano = cotacaoPendenteDoDolar.getAno(), mes = cotacaoPendenteDoDolar.getMes() - 1, dia = cotacaoPendenteDoDolar.getDia();\nCalendar calendario = Calendar.getInstance();\ncalendario.clear();\ncalendario.set(ano, mes, dia);\njava.sql.Date vDATA = new java.sql.Date(calendario.getTimeInMillis());\nBigDecimal vPRECO = cotacaoPendenteDoDolar.getValor();\nstmtDestino.setDateAtName(\"DATA\", vDATA);\nstmtDestino.setBigDecimalAtName(\"PRECO\", vPRECO);\nint contagemDasInsercoes = stmtDestino.executeUpdate();\nquantidadeDeRegistrosImportados++;\ndouble percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosASeremImportados * 100;\npAndamento.setPercentualCompleto((int) percentualCompleto);\n}\nconDestino.commit();\n} catch (Exception ex) {\nconDestino.rollback();\nthrow ex;\n} finally {\nif (stmtDestino != null && (!stmtDestino.isClosed())) {\nstmtDestino.close();\n}\n}\n}\npAndamento.setPercentualCompleto(100);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 337
                },
                {
                        "id": "pretrain_java_data_5514267",
                        "content": "<filename>references/bcb_chosen_clones/selected#1834968#549#588.java\npublic void importarHistoricoDeCotacoesDoDolar(Andamento pAndamento) throws FileNotFoundException, SQLException, Exception {\npAndamento.delimitarIntervaloDeVariacao(0, 49);\nWSValorSerieVO[] cotacoesPendentesDoDolar = obterCotacoesPendentesDoDolar(pAndamento);\npAndamento.delimitarIntervaloDeVariacao(50, 100);\nif (cotacoesPendentesDoDolar != null && cotacoesPendentesDoDolar.length > 0) {\nString sql = \"INSERT INTO tmp_TB_COTACAO_DOLAR(DATA, PRECO) VALUES(:DATA, :PRECO)\";\nOraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\nstmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\nint quantidadeDeRegistrosASeremImportados = cotacoesPendentesDoDolar.length;\ntry {\nint quantidadeDeRegistrosImportados = 0;\nint numeroDoRegistro = 0;\nfor (WSValorSerieVO cotacaoPendenteDoDolar : cotacoesPendentesDoDolar) {\n++numeroDoRegistro;\nstmtDestino.clearParameters();\nint ano = cotacaoPendenteDoDolar.getAno(), mes = cotacaoPendenteDoDolar.getMes() - 1, dia = cotacaoPendenteDoDolar.getDia();\nCalendar calendario = Calendar.getInstance();\ncalendario.clear();\ncalendario.set(ano, mes, dia);\njava.sql.Date vDATA = new java.sql.Date(calendario.getTimeInMillis());\nBigDecimal vPRECO = cotacaoPendenteDoDolar.getValor();\nstmtDestino.setDateAtName(\"DATA\", vDATA);\nstmtDestino.setBigDecimalAtName(\"PRECO\", vPRECO);\nint contagemDasInsercoes = stmtDestino.executeUpdate();\nquantidadeDeRegistrosImportados++;\ndouble percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosASeremImportados * 100;\npAndamento.setPercentualCompleto((int) percentualCompleto);\n}\nconDestino.commit();\n} catch (Exception ex) {\nconDestino.rollback();\nthrow ex;\n} finally {\nif (stmtDestino != null && (!stmtDestino.isClosed())) {\nstmtDestino.close();\n}\n}\n}\npAndamento.setPercentualCompleto(100);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1834968#549#588.java",
                        "__cluster__": 337
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_5509414",
                        "content": "<gh_stars>10-100\npublic static void main(String[] argv) {\nif (1 < argv.length) {\nFile[] sources = Source(argv[0]);\nif (null != sources) {\nfor (File src : sources) {\nFile[] targets = Target(src, argv);\nif (null != targets) {\nfinal long srclen = src.length();\ntry {\nFileChannel source = new FileInputStream(src).getChannel();\ntry {\nfor (File tgt : targets) {\nFileChannel target = new FileOutputStream(tgt).getChannel();\ntry {\nsource.transferTo(0L, srclen, target);\n} finally {\ntarget.close();\n}\nSystem.out.printf(\"Updated %s\\n\", tgt.getPath());\nFile[] deletes = Delete(src, tgt);\nif (null != deletes) {\nfor (File del : deletes) {\nif (SVN) {\nif (SvnDelete(del)) System.out.printf(\"Deleted %s\\n\", del.getPath()); else System.out.printf(\"Failed to delete %s\\n\", del.getPath());\n} else if (del.delete()) System.out.printf(\"Deleted %s\\n\", del.getPath()); else System.out.printf(\"Failed to delete %s\\n\", del.getPath());\n}\n}\nif (SVN) SvnAdd(tgt);\n}\n} finally {\nsource.close();\n}\n} catch (Exception exc) {\nexc.printStackTrace();\nSystem.exit(1);\n}\n}\n}\nSystem.exit(0);\n} else {\nSystem.err.printf(\"Source file(s) not found in '%s'\\n\", argv[0]);\nSystem.exit(1);\n}\n} else {\nusage();\nSystem.exit(1);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#49870#60#107.java",
                        "__cluster__": 351
                },
                {
                        "id": "test_bigclonebench_data_659316",
                        "content": "public static void main(String[] argv) {\nif (1 < argv.length) {\nFile[] sources = Source(argv[0]);\nif (null != sources) {\nfor (File src : sources) {\nFile[] targets = Target(src, argv);\nif (null != targets) {\nfinal long srclen = src.length();\ntry {\nFileChannel source = new FileInputStream(src).getChannel();\ntry {\nfor (File tgt : targets) {\nFileChannel target = new FileOutputStream(tgt).getChannel();\ntry {\nsource.transferTo(0L, srclen, target);\n} finally {\ntarget.close();\n}\nSystem.out.printf(\"Updated %s\\n\", tgt.getPath());\nFile[] deletes = Delete(src, tgt);\nif (null != deletes) {\nfor (File del : deletes) {\nif (SVN) {\nif (SvnDelete(del)) System.out.printf(\"Deleted %s\\n\", del.getPath()); else System.out.printf(\"Failed to delete %s\\n\", del.getPath());\n} else if (del.delete()) System.out.printf(\"Deleted %s\\n\", del.getPath()); else System.out.printf(\"Failed to delete %s\\n\", del.getPath());\n}\n}\nif (SVN) SvnAdd(tgt);\n}\n} finally {\nsource.close();\n}\n} catch (Exception exc) {\nexc.printStackTrace();\nSystem.exit(1);\n}\n}\n}\nSystem.exit(0);\n} else {\nSystem.err.printf(\"Source file(s) not found in '%s'\\n\", argv[0]);\nSystem.exit(1);\n}\n} else {\nusage();\nSystem.exit(1);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 351
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_4593012",
                        "content": "private void upgradeSchema() throws IOException {\nStatement stmt = null;\ntry {\nint i = getSchema();\nLOG.info(\"DB is currently at schema \" + i);\nif (i < SCHEMA_VERSION) {\nLOG.info(\"Upgrading from schema \" + i + \" to schema \" + SCHEMA_VERSION);\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nwhile (i < SCHEMA_VERSION) {\nString qry;\nswitch(i) {\ncase 1:\nqry = \"UPDATE settings SET val = '2' WHERE var = 'schema'\";\nstmt.executeUpdate(qry);\nbreak;\n}\ni++;\n}\nconn.commit();\n}\n} catch (SQLException e) {\ntry {\nconn.rollback();\n} catch (SQLException e2) {\nLOG.error(SQL_ERROR, e2);\n}\nLOG.fatal(SQL_ERROR, e);\nthrow new IOException(\"Error upgrading data store\", e);\n} finally {\ntry {\nif (stmt != null) stmt.close();\nconn.setAutoCommit(true);\n} catch (SQLException e) {\nLOG.error(SQL_ERROR, e);\nthrow new IOException(\"Unable to cleanup SQL resources\", e);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 466
                },
                {
                        "id": "pretrain_java_data_5488784",
                        "content": "<gh_stars>10-100\nprivate void upgradeSchema() throws IOException {\nStatement stmt = null;\ntry {\nint i = getSchema();\nLOG.info(\"DB is currently at schema \" + i);\nif (i < SCHEMA_VERSION) {\nLOG.info(\"Upgrading from schema \" + i + \" to schema \" + SCHEMA_VERSION);\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nwhile (i < SCHEMA_VERSION) {\nString qry;\nswitch(i) {\ncase 1:\nqry = \"UPDATE settings SET val = '2' WHERE var = 'schema'\";\nstmt.executeUpdate(qry);\nbreak;\n}\ni++;\n}\nconn.commit();\n}\n} catch (SQLException e) {\ntry {\nconn.rollback();\n} catch (SQLException e2) {\nLOG.error(SQL_ERROR, e2);\n}\nLOG.fatal(SQL_ERROR, e);\nthrow new IOException(\"Error upgrading data store\", e);\n} finally {\ntry {\nif (stmt != null) stmt.close();\nconn.setAutoCommit(true);\n} catch (SQLException e) {\nLOG.error(SQL_ERROR, e);\nthrow new IOException(\"Unable to cleanup SQL resources\", e);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#647988#228#266.java",
                        "__cluster__": 466
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8801436",
                        "content": "public static void copy(File from_file, File to_file) throws IOException {\nif (!from_file.exists()) abort(\"FileCopy: no such source file: \" + from_file.getName());\nif (!from_file.isFile()) abort(\"FileCopy: can't copy directory: \" + from_file.getName());\nif (!from_file.canRead()) abort(\"FileCopy: source file is unreadable: \" + from_file.getName());\nif (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\nif (to_file.exists()) {\nif (!to_file.canWrite()) abort(\"FileCopy: destination file is unwriteable: \" + to_file.getName());\n} else {\nString parent = to_file.getParent();\nif (parent == null) parent = System.getProperty(\"user.dir\");\nFile dir = new File(parent);\nif (!dir.exists()) abort(\"FileCopy: destination directory doesn't exist: \" + parent);\nif (dir.isFile()) abort(\"FileCopy: destination is not a directory: \" + parent);\nif (!dir.canWrite()) abort(\"FileCopy: destination directory is unwriteable: \" + parent);\n}\nFileInputStream from = null;\nFileOutputStream to = null;\ntry {\nfrom = new FileInputStream(from_file);\nto = new FileOutputStream(to_file);\nbyte[] buffer = new byte[4096];\nint bytes_read;\nwhile ((bytes_read = from.read(buffer)) != -1) {\nto.write(buffer, 0, bytes_read);\n}\n} finally {\nif (from != null) try {\nfrom.close();\n} catch (IOException e) {\n;\n}\nif (to != null) try {\nto.close();\n} catch (IOException e) {\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 65
                },
                {
                        "id": "pretrain_java_data_5448554",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copy(File from_file, File to_file) throws IOException {\nfrom_file = checkFile(from_file);\nif (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\nif (to_file.exists()) {\nif (!to_file.canWrite()) abort(\"FileCopy: destination file is unwriteable: \" + to_file.getName());\n} else {\nString parent = to_file.getParent();\nif (parent == null) parent = System.getProperty(\"user.dir\");\nFile dir = new File(parent);\nif (!dir.exists()) abort(\"FileCopy: destination directory doesn't exist: \" + parent);\nif (dir.isFile()) abort(\"FileCopy: destination is not a directory: \" + parent);\nif (!dir.canWrite()) abort(\"FileCopy: destination directory is unwriteable: \" + parent);\n}\nFileInputStream from = null;\nFileOutputStream to = null;\ntry {\nfrom = new FileInputStream(from_file);\nto = new FileOutputStream(to_file);\nbyte[] buffer = new byte[4096];\nint bytes_read;\nwhile ((bytes_read = from.read(buffer)) != -1) {\nto.write(buffer, 0, bytes_read);\n}\n} finally {\nif (from != null) try {\nfrom.close();\n} catch (IOException e) {\n;\n}\nif (to != null) try {\nto.close();\n} catch (IOException e) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1394229#175#209.java",
                        "__cluster__": 65
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_2521141",
                        "content": "public static void copy(String from_name, String to_name) throws IOException {\nFile from_file = new File(from_name);\nFile to_file = new File(to_name);\nif (!from_file.exists()) abort(\"FileCopy: no such source file: \" + from_name);\nif (!from_file.isFile()) abort(\"FileCopy: can't copy directory: \" + from_name);\nif (!from_file.canRead()) abort(\"FileCopy: source file is unreadable: \" + from_name);\nif (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\nif (to_file.exists()) {\nif (!to_file.canWrite()) abort(\"FileCopy: destination file is unwriteable: \" + to_name);\n} else {\nString parent = to_file.getParent();\nif (parent == null) parent = System.getProperty(\"user.dir\");\nFile dir = new File(parent);\nif (!dir.exists()) abort(\"FileCopy: destination directory doesn't exist: \" + parent);\nif (dir.isFile()) abort(\"FileCopy: destination is not a directory: \" + parent);\nif (!dir.canWrite()) abort(\"FileCopy: destination directory is unwriteable: \" + parent);\n}\nFileInputStream from = null;\nFileOutputStream to = null;\ntry {\nfrom = new FileInputStream(from_file);\nto = new FileOutputStream(to_file);\nbyte[] buffer = new byte[4096];\nint bytes_read;\nwhile ((bytes_read = from.read(buffer)) != -1) {\nto.write(buffer, 0, bytes_read);\n}\n} finally {\nif (from != null) {\ntry {\nfrom.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\nif (to != null) {\ntry {\nto.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 65
                },
                {
                        "id": "pretrain_java_data_5448554",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copy(File from_file, File to_file) throws IOException {\nfrom_file = checkFile(from_file);\nif (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\nif (to_file.exists()) {\nif (!to_file.canWrite()) abort(\"FileCopy: destination file is unwriteable: \" + to_file.getName());\n} else {\nString parent = to_file.getParent();\nif (parent == null) parent = System.getProperty(\"user.dir\");\nFile dir = new File(parent);\nif (!dir.exists()) abort(\"FileCopy: destination directory doesn't exist: \" + parent);\nif (dir.isFile()) abort(\"FileCopy: destination is not a directory: \" + parent);\nif (!dir.canWrite()) abort(\"FileCopy: destination directory is unwriteable: \" + parent);\n}\nFileInputStream from = null;\nFileOutputStream to = null;\ntry {\nfrom = new FileInputStream(from_file);\nto = new FileOutputStream(to_file);\nbyte[] buffer = new byte[4096];\nint bytes_read;\nwhile ((bytes_read = from.read(buffer)) != -1) {\nto.write(buffer, 0, bytes_read);\n}\n} finally {\nif (from != null) try {\nfrom.close();\n} catch (IOException e) {\n;\n}\nif (to != null) try {\nto.close();\n} catch (IOException e) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1394229#175#209.java",
                        "__cluster__": 65
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_13783898",
                        "content": "public static boolean encodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8778962",
                        "content": "public static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_21488868",
                        "content": "public static boolean encodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_22993368",
                        "content": "public static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_14317425",
                        "content": "public static boolean encodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_19584877",
                        "content": "public static boolean encodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_16388708",
                        "content": "public static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_12172485",
                        "content": "public static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_1421557",
                        "content": "public static boolean encodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8625346",
                        "content": "public static boolean encodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_19912848",
                        "content": "public static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_2461169",
                        "content": "public static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (Exception exc) {\n}\ntry {\nout.close();\n} catch (Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_7139510",
                        "content": "<filename>references/bcb_chosen_clones/selected#438322#897#917.java\npublic static boolean decodeFileToFile(String infile, String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nbyte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ncloseQuietly(in);\ncloseQuietly(out);\n}\nreturn success;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#438322#897#917.java",
                        "__cluster__": 35
                },
                {
                        "id": "test_bigclonebench_data_2668853",
                        "content": "public static boolean decodeFileToFile(final String infile, final String outfile) {\nboolean success = false;\njava.io.InputStream in = null;\njava.io.OutputStream out = null;\ntry {\nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\nout = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\nfinal byte[] buffer = new byte[65536];\nint read = -1;\nwhile ((read = in.read(buffer)) >= 0) {\nout.write(buffer, 0, read);\n}\nsuccess = true;\n} catch (final java.io.IOException exc) {\nexc.printStackTrace();\n} finally {\ntry {\nin.close();\n} catch (final Exception exc) {\n}\ntry {\nout.close();\n} catch (final Exception exc) {\n}\n}\nreturn success;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 35
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8665321",
                        "content": "public Vector<String> getNetworkServersIPs(String netaddress) {\nVector<String> result = new Vector<String>();\nboolean serverline = false;\nString line;\nString[] splitline;\ntry {\nURL url = new URL(netaddress);\nURLConnection connection = url.openConnection();\nBufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\nwhile ((line = reader.readLine()) != null) {\nif ((serverline) && line.startsWith(\";\")) {\nserverline = false;\n}\nif (serverline) {\nsplitline = line.split(\":\");\nresult.add(splitline[1]);\n}\nif (line.startsWith(\"!SERVERS\")) {\nserverline = true;\n}\n}\n} catch (MalformedURLException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn result;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 171
                },
                {
                        "id": "pretrain_java_data_7087961",
                        "content": "public Vector<String> getNetworkServersIPs(String netaddress) {\nVector<String> result = new Vector<String>();\nboolean serverline = false;\nString line;\nString[] splitline;\ntry {\nURL url = new URL(netaddress);\nURLConnection connection = url.openConnection();\nBufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\nwhile ((line = reader.readLine()) != null) {\nif ((serverline) && line.startsWith(\";\")) {\nserverline = false;\n}\nif (serverline) {\nsplitline = line.split(\":\");\nresult.add(splitline[1]);\n}\nif (line.startsWith(\"!SERVERS\")) {\nserverline = true;\n}\n}\n} catch (MalformedURLException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn result;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2561166#64#91.java",
                        "__cluster__": 171
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_15896098",
                        "content": "public String getSHA256Checksum(String source) {\nString checksum = \"\";\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nmd.update(source.getBytes());\nbyte[] byteData = md.digest();\nStringBuffer sb = new StringBuffer();\nfor (int i = 0; i < byteData.length; i++) {\nsb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n}\nSystem.out.println(\"Hex format : \" + sb.toString());\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < byteData.length; i++) {\nString hex = Integer.toHexString(0xff & byteData[i]);\nif (hex.length() == 1) {\nhexString.append('0');\n}\nhexString.append(hex);\n}\nchecksum = hexString.toString();\n} catch (NoSuchAlgorithmException ex) {\nLogger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);\n}\nreturn checksum;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 454
                },
                {
                        "id": "pretrain_java_data_7067090",
                        "content": "public String getSHA256Checksum(String source) {\nString checksum = \"\";\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nmd.update(source.getBytes());\nbyte[] byteData = md.digest();\nStringBuffer sb = new StringBuffer();\nfor (int i = 0; i < byteData.length; i++) {\nsb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n}\nSystem.out.println(\"Hex format : \" + sb.toString());\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < byteData.length; i++) {\nString hex = Integer.toHexString(0xff & byteData[i]);\nif (hex.length() == 1) {\nhexString.append('0');\n}\nhexString.append(hex);\n}\nchecksum = hexString.toString();\n} catch (NoSuchAlgorithmException ex) {\nLogger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);\n}\nreturn checksum;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#723422#78#102.java",
                        "__cluster__": 454
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_7152246",
                        "content": "@Override\npublic void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {\njndiManagerConnection connection = new jndiManagerConnection();\nAttributes attrs = new BasicAttributes();\nattrs.put(\"sn\", lastname);\nattrs.put(\"givenName\", firstname);\nattrs.put(\"cn\", firstname + \" \" + lastname);\nif (!pwd.isEmpty()) {\nMessageDigest sha = MessageDigest.getInstance(\"md5\");\nsha.reset();\nsha.update(pwd.getBytes(\"utf-8\"));\nbyte[] digest = sha.digest();\nString hash = Base64.encodeBase64String(digest);\nattrs.put(\"userPassword\", <PASSWORD>);\n}\nDirContext ctx = connection.getLDAPDirContext();\nctx.modifyAttributes(\"mail=\" + mail + \",\" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);\nif (!mail.equals(email)) {\nString newName = \"mail=\" + email + \",\" + dn;\nString oldName = \"mail=\" + mail + \",\" + dn;\nctx.rename(oldName, newName);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2379879#103#125.java",
                        "__cluster__": 839
                },
                {
                        "id": "test_bigclonebench_data_7981642",
                        "content": "@Override\npublic void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {\njndiManagerConnection connection = new jndiManagerConnection();\nAttributes attrs = new BasicAttributes();\nattrs.put(\"sn\", lastname);\nattrs.put(\"givenName\", firstname);\nattrs.put(\"cn\", firstname + \" \" + lastname);\nif (!pwd.isEmpty()) {\nMessageDigest sha = MessageDigest.getInstance(\"md5\");\nsha.reset();\nsha.update(pwd.getBytes(\"utf-8\"));\nbyte[] digest = sha.digest();\nString hash = Base64.encodeBase64String(digest);\nattrs.put(\"userPassword\", \"{MD5}\" + hash);\n}\nDirContext ctx = connection.getLDAPDirContext();\nctx.modifyAttributes(\"mail=\" + mail + \",\" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);\nif (!mail.equals(email)) {\nString newName = \"mail=\" + email + \",\" + dn;\nString oldName = \"mail=\" + mail + \",\" + dn;\nctx.rename(oldName, newName);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 839
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_7092773",
                        "content": "<gh_stars>10-100\npublic int update(BusinessObject o) throws DAOException {\nint update = 0;\nBill bill = (Bill) o;\ntry {\nPreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"UPDATE_BILL\"));\npst.setInt(1, bill.getId());\nupdate = pst.executeUpdate();\nif (update <= 0) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows <= 0\");\n} else if (update > 1) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows > 1\");\n}\nconnection.commit();\n} catch (SQLException e) {\nLog.write(e.getMessage());\nthrow new DAOException(\"A SQLException has occured\");\n} catch (NullPointerException npe) {\nLog.write(npe.getMessage());\nthrow new DAOException(\"Connection null\");\n}\nreturn update;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1540543#164#187.java",
                        "__cluster__": 167
                },
                {
                        "id": "test_bigclonebench_data_20306677",
                        "content": "public int update(BusinessObject o) throws DAOException {\nint update = 0;\nBill bill = (Bill) o;\ntry {\nPreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"UPDATE_BILL\"));\npst.setInt(1, bill.getId());\nupdate = pst.executeUpdate();\nif (update <= 0) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows <= 0\");\n} else if (update > 1) {\nconnection.rollback();\nthrow new DAOException(\"Number of rows > 1\");\n}\nconnection.commit();\n} catch (SQLException e) {\nLog.write(e.getMessage());\nthrow new DAOException(\"A SQLException has occured\");\n} catch (NullPointerException npe) {\nLog.write(npe.getMessage());\nthrow new DAOException(\"Connection null\");\n}\nreturn update;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 167
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10286203",
                        "content": "<gh_stars>10-100\npublic ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {\nProgramProfilingMessageSymbol profilingMessageSymbol = null;\nConnection connection = null;\nStatement statement = null;\nResultSet resultSet = null;\ntry {\nString query = \"INSERT INTO ProgramProfilingMessageSymbols\" + \"(projectDeploymentConfigurationID, programMessageSymbolID)\" + \" VALUES (\" + configID + \", \" + programMessageSymbolID + \")\";\nconnection = DriverManager.getConnection(CONN_STR);\nstatement = connection.createStatement();\nstatement.executeUpdate(query);\nquery = \"SELECT * FROM ProgramProfilingMessageSymbols WHERE \" + \"projectDeploymentConfigurationID = \" + configID + \" AND \" + \"programMessageSymbolID           = \" + programMessageSymbolID;\nresultSet = statement.executeQuery(query);\nif (!resultSet.next()) {\nconnection.rollback();\nString msg = \"Attempt to create program profiling message \" + \"symbol failed.\";\nlog.error(msg);\nthrow new AdaptationException(msg);\n}\nprofilingMessageSymbol = getProfilingMessageSymbol(resultSet);\nconnection.commit();\n} catch (SQLException ex) {\ntry {\nconnection.rollback();\n} catch (Exception e) {\n}\nString msg = \"SQLException in createNewProfilingMessageSymbol\";\nlog.error(msg, ex);\nthrow new AdaptationException(msg, ex);\n} finally {\ntry {\nresultSet.close();\n} catch (Exception ex) {\n}\ntry {\nstatement.close();\n} catch (Exception ex) {\n}\ntry {\nconnection.close();\n} catch (Exception ex) {\n}\n}\nreturn profilingMessageSymbol;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2645034#66#109.java",
                        "__cluster__": 263
                },
                {
                        "id": "test_bigclonebench_data_16511008",
                        "content": "public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {\nProgramProfilingMessageSymbol profilingMessageSymbol = null;\nConnection connection = null;\nStatement statement = null;\nResultSet resultSet = null;\ntry {\nString query = \"INSERT INTO ProgramProfilingMessageSymbols\" + \"(projectDeploymentConfigurationID, programMessageSymbolID)\" + \" VALUES (\" + configID + \", \" + programMessageSymbolID + \")\";\nconnection = DriverManager.getConnection(CONN_STR);\nstatement = connection.createStatement();\nstatement.executeUpdate(query);\nquery = \"SELECT * FROM ProgramProfilingMessageSymbols WHERE \" + \"projectDeploymentConfigurationID = \" + configID + \" AND \" + \"programMessageSymbolID           = \" + programMessageSymbolID;\nresultSet = statement.executeQuery(query);\nif (!resultSet.next()) {\nconnection.rollback();\nString msg = \"Attempt to create program profiling message \" + \"symbol failed.\";\nlog.error(msg);\nthrow new AdaptationException(msg);\n}\nprofilingMessageSymbol = getProfilingMessageSymbol(resultSet);\nconnection.commit();\n} catch (SQLException ex) {\ntry {\nconnection.rollback();\n} catch (Exception e) {\n}\nString msg = \"SQLException in createNewProfilingMessageSymbol\";\nlog.error(msg, ex);\nthrow new AdaptationException(msg, ex);\n} finally {\ntry {\nresultSet.close();\n} catch (Exception ex) {\n}\ntry {\nstatement.close();\n} catch (Exception ex) {\n}\ntry {\nconnection.close();\n} catch (Exception ex) {\n}\n}\nreturn profilingMessageSymbol;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 263
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_732800",
                        "content": "public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\nint k_blockSize = 1024;\nint byteCount;\nchar[] buf = new char[k_blockSize];\nFile ofp = new File(outFile);\nZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\nzos.setMethod(ZipOutputStream.DEFLATED);\nOutputStreamWriter osw = new OutputStreamWriter(zos, \"ISO-8859-1\");\nBufferedWriter bw = new BufferedWriter(osw);\nZipEntry zot = null;\nFile ifp = new File(inFile);\nZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\nInputStreamReader isr = new InputStreamReader(zis, \"ISO-8859-1\");\nBufferedReader br = new BufferedReader(isr);\nZipEntry zit = null;\nwhile ((zit = zis.getNextEntry()) != null) {\nif (zit.getName().equals(\"content.xml\")) {\ncontinue;\n}\nzot = new ZipEntry(zit.getName());\nzos.putNextEntry(zot);\nwhile ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\nbw.flush();\nzos.closeEntry();\n}\nzos.putNextEntry(new ZipEntry(\"content.xml\"));\nbw.flush();\nosw = new OutputStreamWriter(zos, \"UTF8\");\nbw = new BufferedWriter(osw);\nreturn bw;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 295
                },
                {
                        "id": "pretrain_java_data_10272208",
                        "content": "public Writer createWriter(File outfile, String encoding) throws UnsupportedEncodingException, IOException {\nint k_blockSize = 1024;\nint byteCount;\nchar[] buf = new char[k_blockSize];\nZipOutputStream zos = new ZipOutputStream(new FileOutputStream(outfile));\nzos.setMethod(ZipOutputStream.DEFLATED);\nOutputStreamWriter osw = new OutputStreamWriter(zos, \"ISO-8859-1\");\nBufferedWriter bw = new BufferedWriter(osw);\nZipEntry zot;\nZipInputStream zis = new ZipInputStream(new FileInputStream(infile));\nInputStreamReader isr = new InputStreamReader(zis, \"ISO-8859-1\");\nBufferedReader br = new BufferedReader(isr);\nZipEntry zit;\nwhile ((zit = zis.getNextEntry()) != null) {\nif (zit.getName().equals(\"content.xml\")) {\ncontinue;\n}\nzot = new ZipEntry(zit.getName());\nzos.putNextEntry(zot);\nwhile ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\nbw.flush();\nzos.closeEntry();\n}\nzos.putNextEntry(new ZipEntry(\"content.xml\"));\nbw.flush();\nreturn new OutputStreamWriter(zos, \"UTF-8\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1603133#65#91.java",
                        "__cluster__": 295
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_771802",
                        "content": "public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\nint k_blockSize = 1024;\nint byteCount;\nchar[] buf = new char[k_blockSize];\nFile ofp = new File(outFile);\nZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\nzos.setMethod(ZipOutputStream.DEFLATED);\nOutputStreamWriter osw = new OutputStreamWriter(zos, \"ISO-8859-1\");\nBufferedWriter bw = new BufferedWriter(osw);\nZipEntry zot = null;\nFile ifp = new File(inFile);\nZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\nInputStreamReader isr = new InputStreamReader(zis, \"ISO-8859-1\");\nBufferedReader br = new BufferedReader(isr);\nZipEntry zit = null;\nwhile ((zit = zis.getNextEntry()) != null) {\nif (zit.getName().equals(\"content.xml\")) {\ncontinue;\n}\nzot = new ZipEntry(zit.getName());\nzos.putNextEntry(zot);\nwhile ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\nbw.flush();\nzos.closeEntry();\n}\nzos.putNextEntry(new ZipEntry(\"content.xml\"));\nbw.flush();\nosw = new OutputStreamWriter(zos, \"UTF8\");\nbw = new BufferedWriter(osw);\nreturn bw;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 295
                },
                {
                        "id": "pretrain_java_data_10272208",
                        "content": "public Writer createWriter(File outfile, String encoding) throws UnsupportedEncodingException, IOException {\nint k_blockSize = 1024;\nint byteCount;\nchar[] buf = new char[k_blockSize];\nZipOutputStream zos = new ZipOutputStream(new FileOutputStream(outfile));\nzos.setMethod(ZipOutputStream.DEFLATED);\nOutputStreamWriter osw = new OutputStreamWriter(zos, \"ISO-8859-1\");\nBufferedWriter bw = new BufferedWriter(osw);\nZipEntry zot;\nZipInputStream zis = new ZipInputStream(new FileInputStream(infile));\nInputStreamReader isr = new InputStreamReader(zis, \"ISO-8859-1\");\nBufferedReader br = new BufferedReader(isr);\nZipEntry zit;\nwhile ((zit = zis.getNextEntry()) != null) {\nif (zit.getName().equals(\"content.xml\")) {\ncontinue;\n}\nzot = new ZipEntry(zit.getName());\nzos.putNextEntry(zot);\nwhile ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\nbw.flush();\nzos.closeEntry();\n}\nzos.putNextEntry(new ZipEntry(\"content.xml\"));\nbw.flush();\nreturn new OutputStreamWriter(zos, \"UTF-8\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1603133#65#91.java",
                        "__cluster__": 295
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_160739",
                        "content": "public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\nint k_blockSize = 1024;\nint byteCount;\nchar[] buf = new char[k_blockSize];\nFile ofp = new File(outFile);\nZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\nzos.setMethod(ZipOutputStream.DEFLATED);\nOutputStreamWriter osw = new OutputStreamWriter(zos, \"ISO-8859-1\");\nBufferedWriter bw = new BufferedWriter(osw);\nZipEntry zot = null;\nFile ifp = new File(inFile);\nZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\nInputStreamReader isr = new InputStreamReader(zis, \"ISO-8859-1\");\nBufferedReader br = new BufferedReader(isr);\nZipEntry zit = null;\nwhile ((zit = zis.getNextEntry()) != null) {\nif (zit.getName().equals(\"content.xml\")) {\ncontinue;\n}\nzot = new ZipEntry(zit.getName());\nzos.putNextEntry(zot);\nwhile ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\nbw.flush();\nzos.closeEntry();\n}\nzos.putNextEntry(new ZipEntry(\"content.xml\"));\nbw.flush();\nosw = new OutputStreamWriter(zos, \"UTF8\");\nbw = new BufferedWriter(osw);\nreturn bw;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 295
                },
                {
                        "id": "pretrain_java_data_10272208",
                        "content": "public Writer createWriter(File outfile, String encoding) throws UnsupportedEncodingException, IOException {\nint k_blockSize = 1024;\nint byteCount;\nchar[] buf = new char[k_blockSize];\nZipOutputStream zos = new ZipOutputStream(new FileOutputStream(outfile));\nzos.setMethod(ZipOutputStream.DEFLATED);\nOutputStreamWriter osw = new OutputStreamWriter(zos, \"ISO-8859-1\");\nBufferedWriter bw = new BufferedWriter(osw);\nZipEntry zot;\nZipInputStream zis = new ZipInputStream(new FileInputStream(infile));\nInputStreamReader isr = new InputStreamReader(zis, \"ISO-8859-1\");\nBufferedReader br = new BufferedReader(isr);\nZipEntry zit;\nwhile ((zit = zis.getNextEntry()) != null) {\nif (zit.getName().equals(\"content.xml\")) {\ncontinue;\n}\nzot = new ZipEntry(zit.getName());\nzos.putNextEntry(zot);\nwhile ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\nbw.flush();\nzos.closeEntry();\n}\nzos.putNextEntry(new ZipEntry(\"content.xml\"));\nbw.flush();\nreturn new OutputStreamWriter(zos, \"UTF-8\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1603133#65#91.java",
                        "__cluster__": 295
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_8715730",
                        "content": "<gh_stars>10-100\nprivate static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {\ntry {\nStringBuilder dataSB = new StringBuilder();\ndataSB.append(URLEncoder.encode(\"secret\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(\"badsecurity\", \"UTF-8\"));\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"version\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, \"UTF-8\"));\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"os\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(System.getProperty(\"os.name\") + \" \" + System.getProperty(\"os.version\"), \"UTF-8\"));\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"user\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(System.getProperty(\"user.name\"), \"UTF-8\"));\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"msg\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(ex.getMessage(), \"UTF-8\"));\nByteArrayOutputStream trace = new ByteArrayOutputStream();\nex.printStackTrace(new PrintStream(trace));\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"trace\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(trace.toString(), \"UTF-8\"));\nif (config != null) {\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"config\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(config, \"UTF-8\"));\n}\nif (prob != null) {\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"problem\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(prob, \"UTF-8\"));\n}\nURL url = new URL(errorServerURL);\nURLConnection conn = url.openConnection();\nconn.setDoOutput(true);\nOutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\nwr.write(dataSB.toString());\nwr.flush();\nBufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nString response = null;\nString line = null;\nwhile ((line = rd.readLine()) != null) {\nif (response == null) response = line; else System.out.println(line);\n}\nwr.close();\nrd.close();\nif (response.equals(\"success\")) System.out.println(\"Exception sent to maRla development team\"); else System.out.println(\"Unable to send exception to development team: \" + response);\n} catch (IOException ex2) {\nSystem.out.println(\"Unable to send exception to development team: \" + ex2.getMessage());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2007477#652#710.java",
                        "__cluster__": 341
                },
                {
                        "id": "test_bigclonebench_data_7044153",
                        "content": "private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {\ntry {\nStringBuilder dataSB = new StringBuilder();\ndataSB.append(URLEncoder.encode(\"secret\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(\"badsecurity\", \"UTF-8\"));\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"version\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, \"UTF-8\"));\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"os\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(System.getProperty(\"os.name\") + \" \" + System.getProperty(\"os.version\"), \"UTF-8\"));\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"user\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(System.getProperty(\"user.name\"), \"UTF-8\"));\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"msg\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(ex.getMessage(), \"UTF-8\"));\nByteArrayOutputStream trace = new ByteArrayOutputStream();\nex.printStackTrace(new PrintStream(trace));\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"trace\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(trace.toString(), \"UTF-8\"));\nif (config != null) {\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"config\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(config, \"UTF-8\"));\n}\nif (prob != null) {\ndataSB.append('&');\ndataSB.append(URLEncoder.encode(\"problem\", \"UTF-8\"));\ndataSB.append('=');\ndataSB.append(URLEncoder.encode(prob, \"UTF-8\"));\n}\nURL url = new URL(errorServerURL);\nURLConnection conn = url.openConnection();\nconn.setDoOutput(true);\nOutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\nwr.write(dataSB.toString());\nwr.flush();\nBufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nString response = null;\nString line = null;\nwhile ((line = rd.readLine()) != null) {\nif (response == null) response = line; else System.out.println(line);\n}\nwr.close();\nrd.close();\nif (response.equals(\"success\")) System.out.println(\"Exception sent to maRla development team\"); else System.out.println(\"Unable to send exception to development team: \" + response);\n} catch (IOException ex2) {\nSystem.out.println(\"Unable to send exception to development team: \" + ex2.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 341
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10222459",
                        "content": "protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nString path = request.getPathInfo();\nif (!path.startsWith(alias)) {\nthrow new ServletException(\"Path '\" + path + \"' does not start with registered alias '\" + alias + \"'\");\n}\nString internal;\nif (alias.equals(\"/\")) {\ninternal = name + path;\n} else {\ninternal = name + path.substring(alias.length(), path.length());\n}\nURL resource = httpContext.getResource(internal);\nif (resource == null) {\nreturn false;\n}\nString mimeType = servletContext.getMimeType(internal);\nif (mimeType != null) {\nresponse.setContentType(mimeType);\n}\nInputStream is = resource.openStream();\nOutputStream os = response.getOutputStream();\nIOUtils.copyAndClose(is, os);\nreturn true;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#373645#41#64.java",
                        "__cluster__": 346
                },
                {
                        "id": "test_bigclonebench_data_6457199",
                        "content": "protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nString path = request.getPathInfo();\nif (!path.startsWith(alias)) {\nthrow new ServletException(\"Path '\" + path + \"' does not start with registered alias '\" + alias + \"'\");\n}\nString internal;\nif (alias.equals(\"/\")) {\ninternal = name + path;\n} else {\ninternal = name + path.substring(alias.length(), path.length());\n}\nURL resource = httpContext.getResource(internal);\nif (resource == null) {\nreturn false;\n}\nString mimeType = servletContext.getMimeType(internal);\nif (mimeType != null) {\nresponse.setContentType(mimeType);\n}\nInputStream is = resource.openStream();\nOutputStream os = response.getOutputStream();\nIOUtils.copyAndClose(is, os);\nreturn true;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 346
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2511579",
                        "content": "private void extractZipFile(String filename, JTextPane progressText) throws IOException {\nString destinationname = \"\";\nbyte[] buf = new byte[1024];\nZipInputStream zipinputstream = null;\nZipEntry zipentry;\nzipinputstream = new ZipInputStream(new FileInputStream(filename));\nwhile ((zipentry = zipinputstream.getNextEntry()) != null) {\nString entryName = zipentry.getName();\nif (progressText != null) {\nprogressText.setText(\"extracting \" + entryName);\n}\nint n;\nFileOutputStream fileoutputstream;\nif (zipentry.isDirectory()) {\n(new File(destinationname + entryName)).mkdir();\ncontinue;\n}\nfileoutputstream = new FileOutputStream(destinationname + entryName);\nwhile ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\nfileoutputstream.close();\nzipinputstream.closeEntry();\n}\nif (progressText != null) {\nprogressText.setText(\"Files extracted\");\n}\nzipinputstream.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 480
                },
                {
                        "id": "pretrain_java_data_8708969",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#2358769#237#263.java\nprivate void extractZipFile(String filename, JTextPane progressText) throws IOException {\nString destinationname = \"\";\nbyte[] buf = new byte[1024];\nZipInputStream zipinputstream = null;\nZipEntry zipentry;\nzipinputstream = new ZipInputStream(new FileInputStream(filename));\nwhile ((zipentry = zipinputstream.getNextEntry()) != null) {\nString entryName = zipentry.getName();\nif (progressText != null) {\nprogressText.setText(\"extracting \" + entryName);\n}\nint n;\nFileOutputStream fileoutputstream;\nif (zipentry.isDirectory()) {\n(new File(destinationname + entryName)).mkdir();\ncontinue;\n}\nfileoutputstream = new FileOutputStream(destinationname + entryName);\nwhile ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\nfileoutputstream.close();\nzipinputstream.closeEntry();\n}\nif (progressText != null) {\nprogressText.setText(\"Files extracted\");\n}\nzipinputstream.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2358769#237#263.java",
                        "__cluster__": 480
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10205897",
                        "content": "public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {\nlong now = new Date().getTime() / 1000;\nOutputStream deb = new FileOutputStream(debFile);\ndeb.write(\"!<arch>\\n\".getBytes());\nstartFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());\ndeb.write(DEBIAN_BINARY_CONTENT.getBytes());\nendFileEntry(deb, DEBIAN_BINARY_CONTENT.length());\nstartFileEntry(deb, CONTROL_NAME, now, controlFile.length());\nFileInputStream control = new FileInputStream(controlFile);\nbyte[] buffer = new byte[1024];\nwhile (true) {\nint read = control.read(buffer);\nif (read == -1) break;\ndeb.write(buffer, 0, read);\n}\ncontrol.close();\nendFileEntry(deb, controlFile.length());\nstartFileEntry(deb, DATA_NAME, now, dataFile.length());\nFileInputStream data = new FileInputStream(dataFile);\nwhile (true) {\nint read = data.read(buffer);\nif (read == -1) break;\ndeb.write(buffer, 0, read);\n}\ndata.close();\nendFileEntry(deb, dataFile.length());\ndeb.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#496812#19#46.java",
                        "__cluster__": 813
                },
                {
                        "id": "test_bigclonebench_data_4164833",
                        "content": "public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {\nlong now = new Date().getTime() / 1000;\nOutputStream deb = new FileOutputStream(debFile);\ndeb.write(\"!<arch>\\n\".getBytes());\nstartFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());\ndeb.write(DEBIAN_BINARY_CONTENT.getBytes());\nendFileEntry(deb, DEBIAN_BINARY_CONTENT.length());\nstartFileEntry(deb, CONTROL_NAME, now, controlFile.length());\nFileInputStream control = new FileInputStream(controlFile);\nbyte[] buffer = new byte[1024];\nwhile (true) {\nint read = control.read(buffer);\nif (read == -1) break;\ndeb.write(buffer, 0, read);\n}\ncontrol.close();\nendFileEntry(deb, controlFile.length());\nstartFileEntry(deb, DATA_NAME, now, dataFile.length());\nFileInputStream data = new FileInputStream(dataFile);\nwhile (true) {\nint read = data.read(buffer);\nif (read == -1) break;\ndeb.write(buffer, 0, read);\n}\ndata.close();\nendFileEntry(deb, dataFile.length());\ndeb.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 813
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_12744653",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) {\nsb.append('0');\n}\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "id": "pretrain_java_data_10338255",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1499140#41#74.java",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_10338255",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1499140#41#74.java",
                        "__cluster__": 96
                },
                {
                        "id": "test_bigclonebench_data_15166511",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_10338255",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1499140#41#74.java",
                        "__cluster__": 96
                },
                {
                        "id": "test_bigclonebench_data_15500892",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_10338255",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1499140#41#74.java",
                        "__cluster__": 96
                },
                {
                        "id": "test_bigclonebench_data_23161545",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_10338255",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1499140#41#74.java",
                        "__cluster__": 96
                },
                {
                        "id": "test_bigclonebench_data_8024375",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_10338255",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1499140#41#74.java",
                        "__cluster__": 96
                },
                {
                        "id": "test_bigclonebench_data_7948308",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nlogger.error(\"At RandomGUID !!!\", e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nlogger.error(\"At RandomGUID !!!\", e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_11824039",
                        "content": "@Override\npublic String readFixString(final int len) {\nif (len < 1) {\nreturn StringUtils.EMPTY;\n}\nfinal StringWriter sw = new StringWriter();\ntry {\nIOUtils.copy(createLimitedInputStream(len), sw, null);\n} catch (IOException e) {\nthrow createRuntimeException(e);\n}\nreturn sw.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#519642#100#112.java",
                        "__cluster__": 127
                },
                {
                        "id": "test_bigclonebench_data_4599372",
                        "content": "@Override\npublic String readFixString(final int len) {\nif (len < 1) {\nreturn StringUtils.EMPTY;\n}\nfinal StringWriter sw = new StringWriter();\ntry {\nIOUtils.copy(createLimitedInputStream(len), sw, null);\n} catch (IOException e) {\nthrow createRuntimeException(e);\n}\nreturn sw.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 127
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20310134",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 160
                },
                {
                        "id": "pretrain_java_data_10304308",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic static void copyFile(String inFile, String outFile) {\nFile in = new File(inFile);\nFile out = new File(outFile);\ntry {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1472052#50#65.java",
                        "__cluster__": 160
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_10304308",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic static void copyFile(String inFile, String outFile) {\nFile in = new File(inFile);\nFile out = new File(outFile);\ntry {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1472052#50#65.java",
                        "__cluster__": 160
                },
                {
                        "id": "test_bigclonebench_data_8132219",
                        "content": "public static void copyFile(String inFile, String outFile) {\nFile in = new File(inFile);\nFile out = new File(outFile);\ntry {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 160
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11877104",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate void Reserve() throws SQLException {\nStatement stbookings, stchartwl;\nString sp = \"\";\nif (useragent) sp = \"agent\"; else sp = \"user\";\nString userbooksql = \"\";\nString agentbooksql = \"\";\nString bookingid = String.valueOf(System.currentTimeMillis());\nString currentcoach;\nString currentseat;\ntry {\nif (useragent) {\nagentbooksql = \"update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\nagentbooksql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n} else if (!useragent) {\nuserbooksql = \"update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\nuserbooksql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n}\nfor (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {\ncurrentcoach = coach.get(tickpos);\ncurrentseat = seatno.get(tickpos);\nif (!currentcoach.equals(\"WL\")) {\nString chartavailupdsql = \"update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert \";\nchartavailupdsql += \"<seat number=\\\"\" + currentseat + \"\\\"><details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + sp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\"  /></seat>\";\nchartavailupdsql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"]/coach[@number=\\\"\" + currentcoach + \"\\\"] \";\nchartavailupdsql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\nSystem.out.println(chartavailupdsql);\nstchartwl = conn.createStatement();\nint updstat = stchartwl.executeUpdate(chartavailupdsql);\nif (updstat > 0) System.out.println(\"chart_wl  availability  updated\");\n} else if (currentcoach.equals(\"WL\")) {\nString chartwlupdsql = \"update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert \";\nchartwlupdsql += \"<details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + sp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\" /></seat>\";\nchartwlupdsql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"] \";\nchartwlupdsql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\nSystem.out.println(chartwlupdsql);\nstchartwl = conn.createStatement();\nint updstat = stchartwl.executeUpdate(chartwlupdsql);\nif (updstat > 0) System.out.println(\"chart_wl  waitlisting  updated\");\n}\nif (useragent) agentbooksql += \"<person><coach>\" + currentcoach + \"</coach><seat>\" + currentseat + \"</seat></person>\"; else userbooksql += \"<person><coach>\" + currentcoach + \"</coach><seat>\" + currentseat + \"</seat></person>\";\n}\nif (useragent) {\nagentbooksql += \"</detail>   as first into $new/book return  $new' ) where agent_id like '\" + booking_details.getUserId() + \"'\";\nSystem.out.println(agentbooksql);\nstbookings = conn.createStatement();\nint updstat = stbookings.executeUpdate(agentbooksql);\nif (updstat > 0) System.out.println(\"agent bookings updated\");\n} else {\nuserbooksql += \"</detail>   as first into $new/book return  $new' ) where user_id like '\" + booking_details.getUserId() + \"'\";\nSystem.out.println(userbooksql);\nstbookings = conn.createStatement();\nint updstat = stbookings.executeUpdate(userbooksql);\nif (updstat > 0) System.out.println(\"user bookings  updated\");\n}\n} catch (SQLException e) {\nconn.rollback();\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#562984#1001#1059.java",
                        "__cluster__": 318
                },
                {
                        "id": "test_bigclonebench_data_9647576",
                        "content": "private void Reserve() throws SQLException {\nStatement stbookings, stchartwl;\nString sp = \"\";\nif (useragent) sp = \"agent\"; else sp = \"user\";\nString userbooksql = \"\";\nString agentbooksql = \"\";\nString bookingid = String.valueOf(System.currentTimeMillis());\nString currentcoach;\nString currentseat;\ntry {\nif (useragent) {\nagentbooksql = \"update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\nagentbooksql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n} else if (!useragent) {\nuserbooksql = \"update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\nuserbooksql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n}\nfor (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {\ncurrentcoach = coach.get(tickpos);\ncurrentseat = seatno.get(tickpos);\nif (!currentcoach.equals(\"WL\")) {\nString chartavailupdsql = \"update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert \";\nchartavailupdsql += \"<seat number=\\\"\" + currentseat + \"\\\"><details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + sp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\"  /></seat>\";\nchartavailupdsql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"]/coach[@number=\\\"\" + currentcoach + \"\\\"] \";\nchartavailupdsql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\nSystem.out.println(chartavailupdsql);\nstchartwl = conn.createStatement();\nint updstat = stchartwl.executeUpdate(chartavailupdsql);\nif (updstat > 0) System.out.println(\"chart_wl  availability  updated\");\n} else if (currentcoach.equals(\"WL\")) {\nString chartwlupdsql = \"update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert \";\nchartwlupdsql += \"<details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + sp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\" /></seat>\";\nchartwlupdsql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"] \";\nchartwlupdsql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\nSystem.out.println(chartwlupdsql);\nstchartwl = conn.createStatement();\nint updstat = stchartwl.executeUpdate(chartwlupdsql);\nif (updstat > 0) System.out.println(\"chart_wl  waitlisting  updated\");\n}\nif (useragent) agentbooksql += \"<person><coach>\" + currentcoach + \"</coach><seat>\" + currentseat + \"</seat></person>\"; else userbooksql += \"<person><coach>\" + currentcoach + \"</coach><seat>\" + currentseat + \"</seat></person>\";\n}\nif (useragent) {\nagentbooksql += \"</detail>   as first into $new/book return  $new' ) where agent_id like '\" + booking_details.getUserId() + \"'\";\nSystem.out.println(agentbooksql);\nstbookings = conn.createStatement();\nint updstat = stbookings.executeUpdate(agentbooksql);\nif (updstat > 0) System.out.println(\"agent bookings updated\");\n} else {\nuserbooksql += \"</detail>   as first into $new/book return  $new' ) where user_id like '\" + booking_details.getUserId() + \"'\";\nSystem.out.println(userbooksql);\nstbookings = conn.createStatement();\nint updstat = stbookings.executeUpdate(userbooksql);\nif (updstat > 0) System.out.println(\"user bookings  updated\");\n}\n} catch (SQLException e) {\nconn.rollback();\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 318
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14878593",
                        "content": "public void hyperlinkUpdate(HyperlinkEvent e) {\nif (e.getEventType() == EventType.ACTIVATED) {\ntry {\nURL url = e.getURL();\nInputStream stream = url.openStream();\ntry {\nStringWriter writer = new StringWriter();\nIOUtils.copy(stream, writer, \"UTF-8\");\nJEditorPane editor = new JEditorPane(\"text/plain\", writer.toString());\neditor.setEditable(false);\neditor.setBackground(Color.WHITE);\neditor.setCaretPosition(0);\neditor.setPreferredSize(new Dimension(600, 400));\nString name = url.toString();\nname = name.substring(name.lastIndexOf('/') + 1);\nJDialog dialog = new JDialog(this, \"\u5185\u5bb9\u89e3\u6790: \" + name);\ndialog.add(new JScrollPane(editor));\ndialog.pack();\ndialog.setVisible(true);\n} finally {\nstream.close();\n}\n} catch (IOException exception) {\nexception.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 413
                },
                {
                        "id": "pretrain_java_data_11874637",
                        "content": "<reponame>cragkhit/elasticsearch\npublic void hyperlinkUpdate(HyperlinkEvent e) {\nif (e.getEventType() == EventType.ACTIVATED) {\ntry {\nURL url = e.getURL();\nInputStream stream = url.openStream();\ntry {\nStringWriter writer = new StringWriter();\nIOUtils.copy(stream, writer, \"UTF-8\");\nJEditorPane editor = new JEditorPane(\"text/plain\", writer.toString());\neditor.setEditable(false);\neditor.setBackground(Color.WHITE);\neditor.setCaretPosition(0);\neditor.setPreferredSize(new Dimension(600, 400));\nString name = url.toString();\nname = name.substring(name.lastIndexOf('/') + 1);\nJDialog dialog = new JDialog(this, \"\u5185\u5bb9\u89e3\u6790: \" + name);\ndialog.add(new JScrollPane(editor));\ndialog.pack();\ndialog.setVisible(true);\n} finally {\nstream.close();\n}\n} catch (IOException exception) {\nexception.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2379509#329#355.java",
                        "__cluster__": 413
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10313267",
                        "content": "<gh_stars>10-100\nprivate String encode(String plaintext) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA\");\nmd.update(plaintext.getBytes(\"UTF-8\"));\nbyte raw[] = md.digest();\nreturn (new BASE64Encoder()).encode(raw);\n} catch (NoSuchAlgorithmException e) {\nthrow new IllegalStateException(\"Error encoding: \" + e);\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"Error encoding: \" + e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2455424#284#295.java",
                        "__cluster__": 759
                },
                {
                        "id": "test_bigclonebench_data_17161805",
                        "content": "private String encode(String plaintext) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA\");\nmd.update(plaintext.getBytes(\"UTF-8\"));\nbyte raw[] = md.digest();\nreturn (new BASE64Encoder()).encode(raw);\n} catch (NoSuchAlgorithmException e) {\nthrow new IllegalStateException(\"Error encoding: \" + e);\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"Error encoding: \" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 759
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11032546",
                        "content": "@Test\npublic void testCopyUnknownSize() throws IOException {\nfinal InputStream in = new ByteArrayInputStream(TEST_DATA);\nfinal ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\nfinal int cpySize = ExtraIOUtils.copy(in, out, (-1));\nassertEquals(\"Mismatched copy size\", TEST_DATA.length, cpySize);\nfinal byte[] outArray = out.toByteArray();\nassertArrayEquals(\"Mismatched data\", TEST_DATA, outArray);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 259
                },
                {
                        "id": "pretrain_java_data_10318627",
                        "content": "<gh_stars>10-100\n@Test\npublic void testCopyUnknownSize() throws IOException {\nfinal InputStream in = new ByteArrayInputStream(TEST_DATA);\nfinal ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\nfinal int cpySize = ExtraIOUtils.copy(in, out, (-1));\nassertEquals(\"Mismatched copy size\", TEST_DATA.length, cpySize);\nfinal byte[] outArray = out.toByteArray();\nassertArrayEquals(\"Mismatched data\", TEST_DATA, outArray);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#187252#44#52.java",
                        "__cluster__": 259
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5682569",
                        "content": "public void metodo1() {\nint temp;\nboolean flagDesordenado = true;\nwhile (flagDesordenado) {\nflagDesordenado = false;\nfor (int i = 0; i < this.tamanoTabla - 1; i++) {\nif (tabla[i] > tabla[i + 1]) {\nflagDesordenado = true;\ntemp = tabla[i];\ntabla[i] = tabla[i + 1];\ntabla[i + 1] = temp;\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 372
                },
                {
                        "id": "pretrain_java_data_13432787",
                        "content": "public void metodo1() {\nint temp;\nboolean flagDesordenado = true;\nwhile (flagDesordenado) {\nflagDesordenado = false;\nfor (int i = 0; i < this.tamanoTabla - 1; i++) {\nif (tabla[i] > tabla[i + 1]) {\nflagDesordenado = true;\ntemp = tabla[i];\ntabla[i] = tabla[i + 1];\ntabla[i + 1] = temp;\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1230586#31#45.java",
                        "__cluster__": 372
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6421904",
                        "content": "public DataRecord addRecord(InputStream input) throws DataStoreException {\nFile temporary = null;\ntry {\ntemporary = newTemporaryFile();\nDataIdentifier tempId = new DataIdentifier(temporary.getName());\nusesIdentifier(tempId);\nlong length = 0;\nMessageDigest digest = MessageDigest.getInstance(DIGEST);\nOutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\ntry {\nlength = IOUtils.copyLarge(input, output);\n} finally {\noutput.close();\n}\nDataIdentifier identifier = new DataIdentifier(digest.digest());\nFile file;\nsynchronized (this) {\nusesIdentifier(identifier);\nfile = getFile(identifier);\nif (!file.exists()) {\nFile parent = file.getParentFile();\nparent.mkdirs();\nif (temporary.renameTo(file)) {\ntemporary = null;\n} else {\nthrow new IOException(\"Can not rename \" + temporary.getAbsolutePath() + \" to \" + file.getAbsolutePath() + \" (media read only?)\");\n}\n} else {\nlong now = System.currentTimeMillis();\nif (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\nsetLastModified(file, now + ACCESS_TIME_RESOLUTION);\n}\n}\nif (file.length() != length) {\nif (!file.isFile()) {\nthrow new IOException(\"Not a file: \" + file);\n}\nthrow new IOException(DIGEST + \" collision: \" + file);\n}\n}\ninUse.remove(tempId);\nreturn new FileDataRecord(identifier, file);\n} catch (NoSuchAlgorithmException e) {\nthrow new DataStoreException(DIGEST + \" not available\", e);\n} catch (IOException e) {\nthrow new DataStoreException(\"Could not add record\", e);\n} finally {\nif (temporary != null) {\ntemporary.delete();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 428
                },
                {
                        "id": "pretrain_java_data_11954947",
                        "content": "<gh_stars>10-100\npublic DataRecord addRecord(InputStream input) throws DataStoreException {\nFile temporary = null;\ntry {\ntemporary = newTemporaryFile();\nDataIdentifier tempId = new DataIdentifier(temporary.getName());\nusesIdentifier(tempId);\nlong length = 0;\nMessageDigest digest = MessageDigest.getInstance(DIGEST);\nOutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\ntry {\nlength = IOUtils.copyLarge(input, output);\n} finally {\noutput.close();\n}\nDataIdentifier identifier = new DataIdentifier(digest.digest());\nFile file;\nsynchronized (this) {\nusesIdentifier(identifier);\nfile = getFile(identifier);\nif (!file.exists()) {\nFile parent = file.getParentFile();\nparent.mkdirs();\nif (temporary.renameTo(file)) {\ntemporary = null;\n} else {\nthrow new IOException(\"Can not rename \" + temporary.getAbsolutePath() + \" to \" + file.getAbsolutePath() + \" (media read only?)\");\n}\n} else {\nlong now = System.currentTimeMillis();\nif (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\nsetLastModified(file, now + ACCESS_TIME_RESOLUTION);\n}\n}\nif (file.length() != length) {\nif (!file.isFile()) {\nthrow new IOException(\"Not a file: \" + file);\n}\nthrow new IOException(DIGEST + \" collision: \" + file);\n}\n}\ninUse.remove(tempId);\nreturn new FileDataRecord(identifier, file);\n} catch (NoSuchAlgorithmException e) {\nthrow new DataStoreException(DIGEST + \" not available\", e);\n} catch (IOException e) {\nthrow new DataStoreException(\"Could not add record\", e);\n} finally {\nif (temporary != null) {\ntemporary.delete();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1606452#174#225.java",
                        "__cluster__": 428
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_15079585",
                        "content": "public static String eventHash(String eventstr) {\ntry {\nif (md == null) {\nmd = MessageDigest.getInstance(\"MD5\");\n}\nmd.update(eventstr.getBytes(\"utf-8\"));\nbyte[] theDigest = md.digest();\nreturn new BASE64Encoder().encode(theDigest);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#239944#23#37.java",
                        "__cluster__": 94
                },
                {
                        "id": "test_bigclonebench_data_9371421",
                        "content": "public static String eventHash(String eventstr) {\ntry {\nif (md == null) {\nmd = MessageDigest.getInstance(\"MD5\");\n}\nmd.update(eventstr.getBytes(\"utf-8\"));\nbyte[] theDigest = md.digest();\nreturn new BASE64Encoder().encode(theDigest);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 94
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_13579185",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static synchronized String getMD5_Base64(String input) {\nMessageDigest msgDigest = null;\ntry {\nmsgDigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nthrow new IllegalStateException(\"System doesn't support MD5 algorithm.\");\n}\ntry {\nmsgDigest.update(input.getBytes(\"UTF-8\"));\n} catch (java.io.UnsupportedEncodingException ex) {\nthrow new IllegalStateException(\"System doesn't support your  EncodingException.\");\n}\nbyte[] rawData = msgDigest.digest();\nbyte[] encoded = Base64.encode(rawData);\nString retValue = new String(encoded);\nreturn retValue;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#648694#13#29.java",
                        "__cluster__": 559
                },
                {
                        "id": "test_bigclonebench_data_18631594",
                        "content": "public static synchronized String getMD5_Base64(String input) {\nMessageDigest msgDigest = null;\ntry {\nmsgDigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nthrow new IllegalStateException(\"System doesn't support MD5 algorithm.\");\n}\ntry {\nmsgDigest.update(input.getBytes(\"UTF-8\"));\n} catch (java.io.UnsupportedEncodingException ex) {\nthrow new IllegalStateException(\"System doesn't support your  EncodingException.\");\n}\nbyte[] rawData = msgDigest.digest();\nbyte[] encoded = Base64.encode(rawData);\nString retValue = new String(encoded);\nreturn retValue;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 559
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_13551454",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\n@Override\npublic void actionPerformed(ActionEvent e) {\ntry {\nPattern delim = Pattern.compile(\"[ ]\");\nBufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(\"/home/lindenb/jeter.txt.gz\"))));\nString line = null;\nURL url = new URL(\"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi\");\nURLConnection conn = url.openConnection();\nconn.setDoOutput(true);\nOutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\nwr.write(\"db=snp&retmode=xml\");\nwhile ((line = r.readLine()) != null) {\nString tokens[] = delim.split(line, 2);\nif (!tokens[0].startsWith(\"rs\")) continue;\nwr.write(\"&id=\" + tokens[0].substring(2).trim());\n}\nwr.flush();\nr.close();\nInputStream in = conn.getInputStream();\nIOUtils.copyTo(in, System.err);\nin.close();\nwr.close();\n} catch (IOException err) {\nerr.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2273008#59#84.java",
                        "__cluster__": 700
                },
                {
                        "id": "test_bigclonebench_data_2324868",
                        "content": "@Override\npublic void actionPerformed(ActionEvent e) {\ntry {\nPattern delim = Pattern.compile(\"[ ]\");\nBufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(\"/home/lindenb/jeter.txt.gz\"))));\nString line = null;\nURL url = new URL(\"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi\");\nURLConnection conn = url.openConnection();\nconn.setDoOutput(true);\nOutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\nwr.write(\"db=snp&retmode=xml\");\nwhile ((line = r.readLine()) != null) {\nString tokens[] = delim.split(line, 2);\nif (!tokens[0].startsWith(\"rs\")) continue;\nwr.write(\"&id=\" + tokens[0].substring(2).trim());\n}\nwr.flush();\nr.close();\nInputStream in = conn.getInputStream();\nIOUtils.copyTo(in, System.err);\nin.close();\nwr.close();\n} catch (IOException err) {\nerr.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 700
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_919393",
                        "content": "public void create() {\nConnection conn = OrmHandler.getInstance().getSession().getConnection(this);\nStatement stat = null;\nStringBuilder sql = new StringBuilder(256);\ntry {\ngetRenderer().printCreateDatabase(this, sql);\nconn = createConnection();\nstat = conn.createStatement();\nstat.executeUpdate(sql.toString());\nconn.commit();\nif (LOGGER.isLoggable(Level.INFO)) {\nLOGGER.info(sql.toString());\n}\n} catch (Throwable e) {\nif (conn != null) {\ntry {\nconn.rollback();\n} catch (SQLException ex) {\nLOGGER.log(Level.WARNING, \"Can't rollback DB\" + toString(), ex);\n}\n}\nthrow new IllegalArgumentException(\"Statement error:\\n\" + sql, e);\n} finally {\ntry {\nclose(conn, stat, null, true);\n} catch (IllegalStateException ex) {\nLOGGER.log(Level.WARNING, \"Can't rollback DB\" + toString(), ex);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1577665#224#253.java",
                        "__cluster__": 436
                },
                {
                        "id": "test_bigclonebench_data_7296597",
                        "content": "public void create() {\nConnection conn = OrmHandler.getInstance().getSession().getConnection(this);\nStatement stat = null;\nStringBuilder sql = new StringBuilder(256);\ntry {\ngetRenderer().printCreateDatabase(this, sql);\nconn = createConnection();\nstat = conn.createStatement();\nstat.executeUpdate(sql.toString());\nconn.commit();\nif (LOGGER.isLoggable(Level.INFO)) {\nLOGGER.info(sql.toString());\n}\n} catch (Throwable e) {\nif (conn != null) {\ntry {\nconn.rollback();\n} catch (SQLException ex) {\nLOGGER.log(Level.WARNING, \"Can't rollback DB\" + toString(), ex);\n}\n}\nthrow new IllegalArgumentException(\"Statement error:\\n\" + sql, e);\n} finally {\ntry {\nclose(conn, stat, null, true);\n} catch (IllegalStateException ex) {\nLOGGER.log(Level.WARNING, \"Can't rollback DB\" + toString(), ex);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 436
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_160705",
                        "content": "public static boolean downloadFile(String url, String destination) throws Exception {\nBufferedInputStream bi = null;\nBufferedOutputStream bo = null;\nFile destfile;\nbyte BUFFER[] = new byte[100];\njava.net.URL fileurl;\nURLConnection conn;\nfileurl = new java.net.URL(url);\nconn = fileurl.openConnection();\nlong fullsize = conn.getContentLength();\nlong onepercent = fullsize / 100;\nMessageFrame.setTotalDownloadSize(fullsize);\nbi = new BufferedInputStream(conn.getInputStream());\ndestfile = new File(destination);\nif (!destfile.createNewFile()) {\ndestfile.delete();\ndestfile.createNewFile();\n}\nbo = new BufferedOutputStream(new FileOutputStream(destfile));\nint read = 0;\nint sum = 0;\nlong i = 0;\nwhile ((read = bi.read(BUFFER)) != -1) {\nbo.write(BUFFER, 0, read);\nsum += read;\ni += read;\nif (i > onepercent) {\ni = 0;\nMessageFrame.setDownloadProgress(sum);\n}\n}\nbi.close();\nbo.close();\nMessageFrame.setDownloadProgress(fullsize);\nreturn true;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 598
                },
                {
                        "id": "pretrain_java_data_816504",
                        "content": "public static boolean downloadFile(String url, String destination) throws Exception {\nBufferedInputStream bi = null;\nBufferedOutputStream bo = null;\nFile destfile;\nbyte BUFFER[] = new byte[100];\njava.net.URL fileurl;\nURLConnection conn;\nfileurl = new java.net.URL(url);\nconn = fileurl.openConnection();\nlong fullsize = conn.getContentLength();\nlong onepercent = fullsize / 100;\nMessageFrame.setTotalDownloadSize(fullsize);\nbi = new BufferedInputStream(conn.getInputStream());\ndestfile = new File(destination);\nif (!destfile.createNewFile()) {\ndestfile.delete();\ndestfile.createNewFile();\n}\nbo = new BufferedOutputStream(new FileOutputStream(destfile));\nint read = 0;\nint sum = 0;\nlong i = 0;\nwhile ((read = bi.read(BUFFER)) != -1) {\nbo.write(BUFFER, 0, read);\nsum += read;\ni += read;\nif (i > onepercent) {\ni = 0;\nMessageFrame.setDownloadProgress(sum);\n}\n}\nbi.close();\nbo.close();\nMessageFrame.setDownloadProgress(fullsize);\nreturn true;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#29880#12#47.java",
                        "__cluster__": 598
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_7458833",
                        "content": "private void copyParseFileToCodeFile() throws IOException {\nInputStream in = new FileInputStream(new File(filenameParse));\nOutputStream out = new FileOutputStream(new File(filenameMisc));\nbyte[] buffer = new byte[1024];\nint length;\nwhile ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\nin.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 892
                },
                {
                        "id": "pretrain_java_data_929399",
                        "content": "<gh_stars>10-100\nprivate void copyParseFileToCodeFile() throws IOException {\nInputStream in = new FileInputStream(new File(filenameParse));\nOutputStream out = new FileOutputStream(new File(filenameMisc));\nbyte[] buffer = new byte[1024];\nint length;\nwhile ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\nin.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1483889#894#902.java",
                        "__cluster__": 892
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_850187",
                        "content": "public static int[] swap(int numbers[], int i, int j) {\nint temp = numbers[i];\nnumbers[i] = numbers[j];\nnumbers[j] = temp;\nreturn numbers;\n}\npublic static int[] sort(int numbers[]) {\nfor (int i = 0; i < numbers.length; i++) {\nfor (int j = 0; j < numbers.length - 1; j++) {\nif (numbers[j + 1] < numbers[j]) {\nnumbers = swap(numbers, j, j + 1);\n}\n}\n}\nreturn numbers;\n}",
                        "max_stars_count": 19,
                        "max_stars_repo_name": "yijunyu/demo-fast",
                        "max_stars_repo_path": "datasets/github_java_10/5/113.java",
                        "__cluster__": 660
                },
                {
                        "id": "test_bigclonebench_data_4272289",
                        "content": "public static int[] sortstring(int[] a1) {\nint temp;\nfor (int j = 0; j < (a1.length * a1.length); j++) {\nfor (int i = 0; i < a1.length - 1; i++) {\nif (a1[i] > a1[i + 1]) {\ntemp = a1[i];\na1[i] = a1[i + 1];\na1[i + 1] = temp;\n}\n}\n}\nreturn a1;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 660
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_19494842",
                        "content": "private void callService() {\ntry {\nURL url = new URL(baseUrl + servicePath + attributes);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nStringBuffer buf = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\nbuf.append(inputLine);\n}\nin.close();\nanswer = buf.toString();\n} catch (MalformedURLException e) {\nanswer = \"Malformed Url:\" + e.getMessage();\nreturn;\n} catch (IOException e) {\nanswer = \"I/O exception: \" + e.getMessage();\nreturn;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 10
                },
                {
                        "id": "pretrain_java_data_16839789",
                        "content": "private void callService() {\ntry {\nURL url = new URL(baseUrl + servicePath + attributes);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nStringBuffer buf = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\nbuf.append(inputLine);\n}\nin.close();\nanswer = buf.toString();\n} catch (MalformedURLException e) {\nanswer = \"Malformed Url:\" + e.getMessage();\nreturn;\n} catch (IOException e) {\nanswer = \"I/O exception: \" + e.getMessage();\nreturn;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1953968#125#143.java",
                        "__cluster__": 10
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2566627",
                        "content": "private static void copyFile(File src, File dst) throws IOException {\nFileChannel in = new FileInputStream(src).getChannel();\nFileChannel out = new FileOutputStream(dst).getChannel();\nin.transferTo(0, in.size(), out);\nin.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1600186#565#571.java",
                        "__cluster__": 135
                },
                {
                        "id": "test_bigclonebench_data_18613870",
                        "content": "private static void copyFile(File src, File dst) throws IOException {\nFileChannel in = new FileInputStream(src).getChannel();\nFileChannel out = new FileOutputStream(dst).getChannel();\nin.transferTo(0, in.size(), out);\nin.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 135
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6890417",
                        "content": "public static void main(String[] args) throws IOException {\nPostParameter a1 = new PostParameter(\"v\", Utils.encode(\"1.0\"));\nPostParameter a2 = new PostParameter(\"api_key\", Utils.encode(RenRenConstant.apiKey));\nPostParameter a3 = new PostParameter(\"method\", Utils.encode(\"feed.publishTemplatizedAction\"));\nPostParameter a4 = new PostParameter(\"call_id\", System.nanoTime());\nPostParameter a5 = new PostParameter(\"session_key\", Utils.encode(\"5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914\"));\nPostParameter a8 = new PostParameter(\"format\", Utils.encode(\"JSON\"));\nPostParameter a9 = new PostParameter(\"template_id\", Utils.encode(\"1\"));\nPostParameter a10 = new PostParameter(\"title_data\", Utils.encode(\"\\\"conteng\\\":\\\"xkt\\\"\"));\nPostParameter a11 = new PostParameter(\"body_data\", Utils.encode(\"\\\"conteng\\\":\\\"xkt\\\"\"));\nRenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));\nps.addParameter(a1);\nps.addParameter(a2);\nps.addParameter(a3);\nps.addParameter(a4);\nps.addParameter(a5);\nps.addParameter(a8);\nps.addParameter(a9);\nps.addParameter(a10);\nps.addParameter(a11);\nSystem.out.println(RenRenConstant.apiUrl + \"?\" + ps.generateUrl());\nURL url = new URL(RenRenConstant.apiUrl + \"?\" + ps.generateUrl());\nHttpURLConnection request = (HttpURLConnection) url.openConnection();\nrequest.setDoOutput(true);\nrequest.setRequestMethod(\"POST\");\nSystem.out.println(\"Sending request...\");\nrequest.connect();\nSystem.out.println(\"Response: \" + request.getResponseCode() + \" \" + request.getResponseMessage());\nBufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\nString b = null;\nwhile ((b = reader.readLine()) != null) {\nSystem.out.println(b);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 450
                },
                {
                        "id": "pretrain_java_data_2426705",
                        "content": "public static void main(String[] args) throws IOException {\nPostParameter a1 = new PostParameter(\"v\", Utils.encode(\"1.0\"));\nPostParameter a2 = new PostParameter(\"api_key\", Utils.encode(RenRenConstant.apiKey));\nPostParameter a3 = new PostParameter(\"method\", Utils.encode(\"feed.publishTemplatizedAction\"));\nPostParameter a4 = new PostParameter(\"call_id\", System.nanoTime());\nPostParameter a5 = new PostParameter(\"session_key\", Utils.encode(\"5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914\"));\nPostParameter a8 = new PostParameter(\"format\", Utils.encode(\"JSON\"));\nPostParameter a9 = new PostParameter(\"template_id\", Utils.encode(\"1\"));\nPostParameter a10 = new PostParameter(\"title_data\", Utils.encode(\"\\\"conteng\\\":\\\"xkt\\\"\"));\nPostParameter a11 = new PostParameter(\"body_data\", Utils.encode(\"\\\"conteng\\\":\\\"xkt\\\"\"));\nRenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));\nps.addParameter(a1);\nps.addParameter(a2);\nps.addParameter(a3);\nps.addParameter(a4);\nps.addParameter(a5);\nps.addParameter(a8);\nps.addParameter(a9);\nps.addParameter(a10);\nps.addParameter(a11);\nSystem.out.println(RenRenConstant.apiUrl + \"?\" + ps.generateUrl());\nURL url = new URL(RenRenConstant.apiUrl + \"?\" + ps.generateUrl());\nHttpURLConnection request = (HttpURLConnection) url.openConnection();\nrequest.setDoOutput(true);\nrequest.setRequestMethod(\"POST\");\nSystem.out.println(\"Sending request...\");\nrequest.connect();\nSystem.out.println(\"Response: \" + request.getResponseCode() + \" \" + request.getResponseMessage());\nBufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\nString b = null;\nwhile ((b = reader.readLine()) != null) {\nSystem.out.println(b);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#790417#13#46.java",
                        "__cluster__": 450
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_16820591",
                        "content": "@Override\npublic void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\nInputStream is = null;\nInputStream page = null;\nOutputStream os = null;\nString rootUrl = null;\ntry {\nboolean isMultipart = ServletFileUpload.isMultipartContent(request);\nif (!isMultipart) {\nrequest.setAttribute(\"error\", \"Form isn't a multipart form\");\nRequestDispatcher rd = request.getRequestDispatcher(\"/WEB-INF/error.jsp\");\nrd.forward(request, response);\n}\nServletFileUpload upload = new ServletFileUpload();\nString webUrl = null;\nFileItemIterator iter = upload.getItemIterator(request);\nwhile (iter.hasNext()) {\nFileItemStream item = iter.next();\nString name = item.getFieldName();\nif (name.equals(\"webpage\")) {\nis = item.openStream();\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nIOUtils.copy(is, baos);\npage = new ByteArrayInputStream(baos.toByteArray());\n} else if (name.equals(\"weburl\")) {\nInputStream wpIs = null;\ntry {\nwebUrl = Streams.asString(item.openStream());\nURL u = new URL(webUrl);\nwpIs = new BufferedInputStream(u.openStream());\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nIOUtils.copy(wpIs, baos);\npage = new ByteArrayInputStream(baos.toByteArray());\n} finally {\nIOUtils.closeQuietly(wpIs);\n}\n} else if (name.equals(\"rooturl\")) {\nrootUrl = Streams.asString(item.openStream());\n}\n}\nif (page == null) {\nrequest.setAttribute(\"error\", \"Form doesn't have an html file\");\nRequestDispatcher rd = request.getRequestDispatcher(\"/WEB-INF/error.jsp\");\nrd.forward(request, response);\n}\nToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);\nos = new BufferedOutputStream(response.getOutputStream());\nos.write(delegate.getMailer());\nos.flush();\n} catch (Exception e) {\nstreamException(request, response, e);\n} finally {\nIOUtils.closeQuietly(page);\nIOUtils.closeQuietly(is);\nIOUtils.closeQuietly(os);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#853692#50#106.java",
                        "__cluster__": 718
                },
                {
                        "id": "test_bigclonebench_data_8932510",
                        "content": "@Override\npublic void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\nInputStream is = null;\nInputStream page = null;\nOutputStream os = null;\nString rootUrl = null;\ntry {\nboolean isMultipart = ServletFileUpload.isMultipartContent(request);\nif (!isMultipart) {\nrequest.setAttribute(\"error\", \"Form isn't a multipart form\");\nRequestDispatcher rd = request.getRequestDispatcher(\"/WEB-INF/error.jsp\");\nrd.forward(request, response);\n}\nServletFileUpload upload = new ServletFileUpload();\nString webUrl = null;\nFileItemIterator iter = upload.getItemIterator(request);\nwhile (iter.hasNext()) {\nFileItemStream item = iter.next();\nString name = item.getFieldName();\nif (name.equals(\"webpage\")) {\nis = item.openStream();\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nIOUtils.copy(is, baos);\npage = new ByteArrayInputStream(baos.toByteArray());\n} else if (name.equals(\"weburl\")) {\nInputStream wpIs = null;\ntry {\nwebUrl = Streams.asString(item.openStream());\nURL u = new URL(webUrl);\nwpIs = new BufferedInputStream(u.openStream());\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nIOUtils.copy(wpIs, baos);\npage = new ByteArrayInputStream(baos.toByteArray());\n} finally {\nIOUtils.closeQuietly(wpIs);\n}\n} else if (name.equals(\"rooturl\")) {\nrootUrl = Streams.asString(item.openStream());\n}\n}\nif (page == null) {\nrequest.setAttribute(\"error\", \"Form doesn't have an html file\");\nRequestDispatcher rd = request.getRequestDispatcher(\"/WEB-INF/error.jsp\");\nrd.forward(request, response);\n}\nToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);\nos = new BufferedOutputStream(response.getOutputStream());\nos.write(delegate.getMailer());\nos.flush();\n} catch (Exception e) {\nstreamException(request, response, e);\n} finally {\nIOUtils.closeQuietly(page);\nIOUtils.closeQuietly(is);\nIOUtils.closeQuietly(os);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 718
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5759961",
                        "content": "@Override\npublic User saveUser(User user) {\ntry {\nMessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\ndigest.update(user.getPassword().getBytes(\"UTF-8\"));\nbyte[] hash = digest.digest();\nBigInteger bigInt = new BigInteger(1, hash);\nString hashtext = bigInt.toString(16);\nwhile (hashtext.length() < 32) {\nhashtext = \"0\" + hashtext;\n}\nuser.setPassword(hashtext);\nuser.setDataRegjistrimit(new Date());\nreturn em.merge(user);\n} catch (Exception e) {\nthrow new NestedException(e.getMessage(), e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 745
                },
                {
                        "id": "pretrain_java_data_16835480",
                        "content": "@Override\npublic User saveUser(User user) {\ntry {\nMessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\ndigest.update(user.getPassword().getBytes(\"UTF-8\"));\nbyte[] hash = digest.digest();\nBigInteger bigInt = new BigInteger(1, hash);\nString hashtext = bigInt.toString(16);\nwhile (hashtext.length() < 32) {\nhashtext = \"0\" + hashtext;\n}\nuser.setPassword(hashtext);\nuser.setDataRegjistrimit(new Date());\nreturn em.merge(user);\n} catch (Exception e) {\nthrow new NestedException(e.getMessage(), e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#341601#293#310.java",
                        "__cluster__": 745
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2491863",
                        "content": "public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {\nPrintWriter file = getWriter(name + \".txt\");\nfile.print(\"Filename\\t\");\nfile.print(\"Date\\t\");\nfile.print(\"Acquisition #\\t\");\nfile.print(\"\ufffdm Diameter\\t\");\nfor (int i = mzmin; i <= mzmax; i++) file.print(i + \"\\t\");\nfile.println();\nint nothing = 0;\nString fileLoc = \"C:/abcd/\" + name + \".txt\\t\";\nDate tempDate;\nfor (int i = 0; i < items; i++) {\ntempDate = new Date(tstart);\ntstart += tdelta;\nfile.print(fileLoc);\nfile.print(dateFormat.format(tempDate) + \"\\t\");\nfile.print(i + 1 + \"\\t\");\ndouble t = (double) (i) / 10;\nfile.print(t + \"\\t\");\nboolean peaked = false;\nfor (int k = mzmin; k <= mzmax; k++) {\nfor (int j = 0; j < peaks.length && !peaked; j++) {\nif (k == peaks[j]) {\nfile.print(peakVals[j % peakVals.length] + \"\\t\");\npeaked = true;\n}\n}\nif (!peaked) {\nif (k == mzmax) file.print(nothing); else file.print(nothing + \"\\t\");\n}\npeaked = false;\n}\nfile.println();\n}\ntry {\nScanner test = new Scanner(f);\nwhile (test.hasNext()) {\nSystem.out.println(test.nextLine());\n}\nSystem.out.println(\"test\");\n} catch (Exception e) {\n}\nfile.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1751936#84#127.java",
                        "__cluster__": 865
                },
                {
                        "id": "test_bigclonebench_data_9347451",
                        "content": "public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {\nPrintWriter file = getWriter(name + \".txt\");\nfile.print(\"Filename\\t\");\nfile.print(\"Date\\t\");\nfile.print(\"Acquisition #\\t\");\nfile.print(\"\ufffdm Diameter\\t\");\nfor (int i = mzmin; i <= mzmax; i++) file.print(i + \"\\t\");\nfile.println();\nint nothing = 0;\nString fileLoc = \"C:/abcd/\" + name + \".txt\\t\";\nDate tempDate;\nfor (int i = 0; i < items; i++) {\ntempDate = new Date(tstart);\ntstart += tdelta;\nfile.print(fileLoc);\nfile.print(dateFormat.format(tempDate) + \"\\t\");\nfile.print(i + 1 + \"\\t\");\ndouble t = (double) (i) / 10;\nfile.print(t + \"\\t\");\nboolean peaked = false;\nfor (int k = mzmin; k <= mzmax; k++) {\nfor (int j = 0; j < peaks.length && !peaked; j++) {\nif (k == peaks[j]) {\nfile.print(peakVals[j % peakVals.length] + \"\\t\");\npeaked = true;\n}\n}\nif (!peaked) {\nif (k == mzmax) file.print(nothing); else file.print(nothing + \"\\t\");\n}\npeaked = false;\n}\nfile.println();\n}\ntry {\nScanner test = new Scanner(f);\nwhile (test.hasNext()) {\nSystem.out.println(test.nextLine());\n}\nSystem.out.println(\"test\");\n} catch (Exception e) {\n}\nfile.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 865
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5138455",
                        "content": "public static int save(byte[] bytes, File outputFile) throws IOException {\nInputStream in = new ByteArrayInputStream(bytes);\noutputFile.getParentFile().mkdirs();\nOutputStream out = new FileOutputStream(outputFile);\ntry {\nreturn IOUtils.copy(in, out);\n} finally {\nIOUtils.closeQuietly(in);\nIOUtils.closeQuietly(out);\ntry {\nout.close();\n} catch (IOException ioe) {\nioe.getMessage();\n}\ntry {\nin.close();\n} catch (IOException ioe) {\nioe.getMessage();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 729
                },
                {
                        "id": "pretrain_java_data_2462596",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static int save(byte[] bytes, File outputFile) throws IOException {\nInputStream in = new ByteArrayInputStream(bytes);\noutputFile.getParentFile().mkdirs();\nOutputStream out = new FileOutputStream(outputFile);\ntry {\nreturn IOUtils.copy(in, out);\n} finally {\nIOUtils.closeQuietly(in);\nIOUtils.closeQuietly(out);\ntry {\nout.close();\n} catch (IOException ioe) {\nioe.getMessage();\n}\ntry {\nin.close();\n} catch (IOException ioe) {\nioe.getMessage();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1397044#179#199.java",
                        "__cluster__": 729
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2561959",
                        "content": "<gh_stars>10-100\n@Override\npublic String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\nNode[] node = xed.getActivatedNodes();\nX3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\nFileObject mySrc = dob.getPrimaryFile();\nFile mySrcF = FileUtil.toFile(mySrc);\nFile myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + \".x3d.gz\");\nTransformListener co = TransformListener.getInstance();\nco.message(NbBundle.getMessage(getClass(), \"Gzip_compression_starting\"));\nco.message(NbBundle.getMessage(getClass(), \"Saving_as_\") + myOutF.getAbsolutePath());\nco.moveToFront();\nco.setNode(node[0]);\ntry {\nFileInputStream fis = new FileInputStream(mySrcF);\nGZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\nbyte[] buf = new byte[4096];\nint ret;\nwhile ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\ngzos.close();\n} catch (Exception ex) {\nco.message(NbBundle.getMessage(getClass(), \"Exception:__\") + ex.getLocalizedMessage());\nreturn null;\n}\nco.message(NbBundle.getMessage(getClass(), \"Gzip_compression_complete\"));\nreturn myOutF.getAbsolutePath();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1851161#24#49.java",
                        "__cluster__": 547
                },
                {
                        "id": "test_bigclonebench_data_13666876",
                        "content": "@Override\npublic String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\nNode[] node = xed.getActivatedNodes();\nX3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\nFileObject mySrc = dob.getPrimaryFile();\nFile mySrcF = FileUtil.toFile(mySrc);\nFile myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + \".x3dv.gz\");\nTransformListener co = TransformListener.getInstance();\nco.message(NbBundle.getMessage(getClass(), \"Gzip_compression_starting\"));\nco.message(NbBundle.getMessage(getClass(), \"Saving_as_\") + myOutF.getAbsolutePath());\nco.moveToFront();\nco.setNode(node[0]);\ntry {\nString x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);\nFileInputStream fis = new FileInputStream(new File(x3dvFile));\nGZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\nbyte[] buf = new byte[4096];\nint ret;\nwhile ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\ngzos.close();\n} catch (Exception ex) {\nco.message(NbBundle.getMessage(getClass(), \"Exception:__\") + ex.getLocalizedMessage());\nreturn null;\n}\nco.message(NbBundle.getMessage(getClass(), \"Gzip_compression_complete\"));\nreturn myOutF.getAbsolutePath();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 547
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_12766394",
                        "content": "public void testReadHelloWorldTxt() throws Exception {\nfinal InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + \"/HelloWorld.txt\");\nFileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + \"/org/settings4j/contentresolver\"));\nfinal String helloWorldPath = this.testDir.getAbsolutePath() + \"/org/settings4j/contentresolver/HelloWorld.txt\";\nfinal FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\nIOUtils.copy(helloWorldIS, fileOutputStream);\nIOUtils.closeQuietly(helloWorldIS);\nIOUtils.closeQuietly(fileOutputStream);\nLOG.info(\"helloWorldPath: \" + helloWorldPath);\nfinal FSContentResolver contentResolver = new FSContentResolver();\ncontentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\nbyte[] content = contentResolver.getContent(\"org/settings4j/contentresolver/HelloWorld.txt\");\nassertNotNull(content);\nassertEquals(\"Hello World\", new String(content, \"UTF-8\"));\ncontent = contentResolver.getContent(\"file:org/settings4j/contentresolver/HelloWorld.txt\");\nassertNotNull(content);\nassertEquals(\"Hello World\", new String(content, \"UTF-8\"));\ncontent = contentResolver.getContent(\"file:/org/settings4j/contentresolver/HelloWorld.txt\");\nassertNotNull(content);\nassertEquals(\"Hello World\", new String(content, \"UTF-8\"));\ncontent = contentResolver.getContent(\"file:laksjdhalksdhfa\");\nassertNull(content);\ncontent = contentResolver.getContent(\"/org/settings4j/contentresolver/HelloWorld.txt\");\nassertNotNull(content);\nassertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 354
                },
                {
                        "id": "pretrain_java_data_18449603",
                        "content": "public void testReadHelloWorldTxt() throws Exception {\nfinal InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + \"/HelloWorld.txt\");\nFileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + \"/org/settings4j/contentresolver\"));\nfinal String helloWorldPath = this.testDir.getAbsolutePath() + \"/org/settings4j/contentresolver/HelloWorld.txt\";\nfinal FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\nIOUtils.copy(helloWorldIS, fileOutputStream);\nIOUtils.closeQuietly(helloWorldIS);\nIOUtils.closeQuietly(fileOutputStream);\nLOG.info(\"helloWorldPath: \" + helloWorldPath);\nfinal FSContentResolver contentResolver = new FSContentResolver();\ncontentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\nbyte[] content = contentResolver.getContent(\"org/settings4j/contentresolver/HelloWorld.txt\");\nassertNotNull(content);\nassertEquals(\"Hello World\", new String(content, \"UTF-8\"));\ncontent = contentResolver.getContent(\"file:org/settings4j/contentresolver/HelloWorld.txt\");\nassertNotNull(content);\nassertEquals(\"Hello World\", new String(content, \"UTF-8\"));\ncontent = contentResolver.getContent(\"file:/org/settings4j/contentresolver/HelloWorld.txt\");\nassertNotNull(content);\nassertEquals(\"Hello World\", new String(content, \"UTF-8\"));\ncontent = contentResolver.getContent(\"file:laksjdhalksdhfa\");\nassertNull(content);\ncontent = contentResolver.getContent(\"/org/settings4j/contentresolver/HelloWorld.txt\");\nassertNotNull(content);\nassertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#752068#32#57.java",
                        "__cluster__": 354
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2807585",
                        "content": "private static String encodeMd5(String key) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(key.getBytes());\nbyte[] bytes = md.digest();\nString result = toHexString(bytes);\nreturn result;\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 884
                },
                {
                        "id": "pretrain_java_data_18445891",
                        "content": "<gh_stars>10-100\nprivate static String encodeMd5(String key) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(key.getBytes());\nbyte[] bytes = md.digest();\nString result = toHexString(bytes);\nreturn result;\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1234334#22#34.java",
                        "__cluster__": 884
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13946197",
                        "content": "public String transformByMD5(String password) throws XSServiceException {\nMessageDigest md5;\nbyte[] output;\nStringBuffer bufferPass;\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nlogger.warn(\"DataAccessException thrown while getting MD5 algorithm:\" + e.getMessage(), e);\nthrow new XSServiceException(\"Database error while saving user\");\n}\nmd5.reset();\nmd5.update(password.getBytes());\noutput = md5.digest();\nbufferPass = new StringBuffer();\nfor (byte b : output) {\nbufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? \"0\" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));\n}\nreturn bufferPass.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 709
                },
                {
                        "id": "pretrain_java_data_18459740",
                        "content": "<reponame>cragkhit/elasticsearch\npublic String transformByMD5(String password) throws XSServiceException {\nMessageDigest md5;\nbyte[] output;\nStringBuffer bufferPass;\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nlogger.warn(\"DataAccessException thrown while getting MD5 algorithm:\" + e.getMessage(), e);\nthrow new XSServiceException(\"Database error while saving user\");\n}\nmd5.reset();\nmd5.update(password.getBytes());\noutput = md5.digest();\nbufferPass = new StringBuffer();\nfor (byte b : output) {\nbufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? \"0\" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));\n}\nreturn bufferPass.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2399600#56#74.java",
                        "__cluster__": 709
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_10361370",
                        "content": "public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nif (content == null) return null;\nfinal MessageDigest digest = MessageDigest.getInstance(DIGEST);\nif (digestLength == -1) digestLength = digest.getDigestLength();\nfor (int i = 0; i < repeatedHashingCount; i++) {\nif (i > 0) digest.update(digest.digest());\ndigest.update(saltBefore);\ndigest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));\ndigest.update(saltAfter);\n}\nreturn digest.digest();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 746
                },
                {
                        "id": "pretrain_java_data_16889704",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nif (content == null) return null;\nfinal MessageDigest digest = MessageDigest.getInstance(DIGEST);\nif (digestLength == -1) digestLength = digest.getDigestLength();\nfor (int i = 0; i < repeatedHashingCount; i++) {\nif (i > 0) digest.update(digest.digest());\ndigest.update(saltBefore);\ndigest.update(content.getBytes(WebCastellumParameter.DEFAULT_CHARACTER_ENCODING.getValue()));\ndigest.update(saltAfter);\n}\nreturn digest.digest();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#511612#122#133.java",
                        "__cluster__": 746
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_16939846",
                        "content": "public static final void copyFile(File argSource, File argDestination) throws IOException {\nFileChannel srcChannel = new FileInputStream(argSource).getChannel();\nFileChannel dstChannel = new FileOutputStream(argDestination).getChannel();\ntry {\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n} finally {\nsrcChannel.close();\ndstChannel.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2098134#737#746.java",
                        "__cluster__": 850
                },
                {
                        "id": "test_bigclonebench_data_14168494",
                        "content": "public static void copyFile(File dest, File src) throws IOException {\nFileChannel srcChannel = new FileInputStream(src).getChannel();\nFileChannel dstChannel = new FileOutputStream(dest).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 850
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_23677147",
                        "content": "public static void Sample1(String myField, String condition1, String condition2) throws SQLException {\nConnection connection = DriverManager.getConnection(\"jdbc:postgresql://localhost/test\", \"user\", \"password\");\nconnection.setAutoCommit(false);\nPreparedStatement ps = connection.prepareStatement(\"UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?\");\nps.setString(1, myField);\nps.setString(2, condition1);\nps.setString(3, condition2);\n// If more than 10 entries change, panic and rollback\nint numChanged = ps.executeUpdate();\nif(numChanged > 10) {\nconnection.rollback();\n} else {\nconnection.commit();\n}\nps.close();\nconnection.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 496
                },
                {
                        "id": "pretrain_java_data_16863300",
                        "content": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Statement;\npublic class DBUpdateAndRollback {\npublic static void Sample1(String myField, String condition1, String condition2) throws SQLException {\nConnection connection = DriverManager.getConnection(\"jdbc:postgresql://localhost/test\", \"user\", \"password\");\nconnection.setAutoCommit(false);\nPreparedStatement ps = connection.prepareStatement(\"UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?\");\nps.setString(1, myField);\nps.setString(2, condition1);\nps.setString(3, condition2);\n// If more than 10 entries change, panic and rollback\nint numChanged = ps.executeUpdate();\nif(numChanged > 10) {\nconnection.rollback();\n} else {\nconnection.commit();\n}\nps.close();\nconnection.close();\n}\npublic static void Sample2(String myField, String condition1, String condition2) throws SQLException {\nConnection connection = DriverManager.getConnection(\"jdbc:postgresql://localhost/test\", \"user\", \"password\");\nconnection.setAutoCommit(false);\nStatement st = connection.createStatement();\nString sql = \"UPDATE myTable SET myField = '\" + myField + \"' WHERE myOtherField1 = '\" + condition1 + \"' AND myOtherField2 = '\" + condition2 + \"'\";\nint numChanged = st.executeUpdate(sql);\n// If more than 10 entries change, panic and rollback\nif(numChanged > 10) {\nconnection.rollback();\n} else {\nconnection.commit();\n}\nst.close();\nconnection.close();\n}\n}",
                        "max_stars_count": 24,
                        "max_stars_repo_name": "FalconLK/FaCoY",
                        "max_stars_repo_path": "RQs/bigclone/sample_codes/DBUpdateAndRollback.java",
                        "__cluster__": 496
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4014623",
                        "content": "private void addQDInformation() {\ntry {\nlong qdDate = System.currentTimeMillis();\nif (_local == true) {\nFile qdFile = new File(\"qdinfo.dat\");\nif (!qdFile.exists()) {\nreturn;\n}\nqdDate = qdFile.lastModified();\n}\nif (qdDate > this._qdFileDate) {\nthis._qdFileDate = qdDate;\nfor (int ii = 0; ii < this._projectInfo.size(); ii++) {\nInformation info = getInfo(ii);\nif (info != null) {\ninfo._qdValue = null;\n}\n}\nReader reader = null;\nif (_local == true) {\nreader = new FileReader(\"qdinfo.dat\");\n} else {\nStringBuffer urlName = new StringBuffer();\nurlName.append(\"http://boston.quik.com/rph/\");\nurlName.append(\"qdinfo.dat\");\ntry {\nURL url = new URL(urlName.toString());\nInputStream stream = url.openStream();\nreader = new InputStreamReader(stream);\n} catch (MalformedURLException mue) {\nmue.printStackTrace();\n}\n}\nBufferedReader file = new BufferedReader(reader);\ntry {\nString line = null;\nwhile ((line = file.readLine()) != null) {\nif (line.startsWith(\"pg \")) {\nthis._qdDate = Long.parseLong(line.substring(3), 16);\nthis._qdDate = (this._qdDate + 946684800) * 1000;\n} else if (line.startsWith(\"pt \")) {\nline = line.substring(3).trim();\nint pos = -1;\nwhile ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {\nint projectNum = 0;\nDouble value = null;\nif (pos > 0) {\nprojectNum = Integer.parseInt(line.substring(0, pos));\nline = line.substring(pos).trim();\n}\npos = line.indexOf(' ');\nif (pos > 0) {\nvalue = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);\nline = line.substring(pos).trim();\n}\nInformation info = getInfo(projectNum);\nif (info == null) {\ninfo = createInfo(projectNum);\n}\nif (info._qdValue == null) {\ninfo._qdValue = value;\n}\n}\n}\n}\n} finally {\nfile.close();\n}\n}\n} catch (FileNotFoundException e) {\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2367697#351#423.java",
                        "__cluster__": 82
                },
                {
                        "id": "test_bigclonebench_data_12678045",
                        "content": "private void addQDInformation() {\ntry {\nlong qdDate = System.currentTimeMillis();\nif (_local == true) {\nFile qdFile = new File(\"qdinfo.dat\");\nif (!qdFile.exists()) {\nreturn;\n}\nqdDate = qdFile.lastModified();\n}\nif (qdDate > this._qdFileDate) {\nthis._qdFileDate = qdDate;\nfor (int ii = 0; ii < this._projectInfo.size(); ii++) {\nInformation info = getInfo(ii);\nif (info != null) {\ninfo._qdValue = null;\n}\n}\nReader reader = null;\nif (_local == true) {\nreader = new FileReader(\"qdinfo.dat\");\n} else {\nStringBuffer urlName = new StringBuffer();\nurlName.append(\"http://boston.quik.com/rph/\");\nurlName.append(\"qdinfo.dat\");\ntry {\nURL url = new URL(urlName.toString());\nInputStream stream = url.openStream();\nreader = new InputStreamReader(stream);\n} catch (MalformedURLException mue) {\nmue.printStackTrace();\n}\n}\nBufferedReader file = new BufferedReader(reader);\ntry {\nString line = null;\nwhile ((line = file.readLine()) != null) {\nif (line.startsWith(\"pg \")) {\nthis._qdDate = Long.parseLong(line.substring(3), 16);\nthis._qdDate = (this._qdDate + 946684800) * 1000;\n} else if (line.startsWith(\"pt \")) {\nline = line.substring(3).trim();\nint pos = -1;\nwhile ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {\nint projectNum = 0;\nDouble value = null;\nif (pos > 0) {\nprojectNum = Integer.parseInt(line.substring(0, pos));\nline = line.substring(pos).trim();\n}\npos = line.indexOf(' ');\nif (pos > 0) {\nvalue = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);\nline = line.substring(pos).trim();\n}\nInformation info = getInfo(projectNum);\nif (info == null) {\ninfo = createInfo(projectNum);\n}\nif (info._qdValue == null) {\ninfo._qdValue = value;\n}\n}\n}\n}\n} finally {\nfile.close();\n}\n}\n} catch (FileNotFoundException e) {\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 82
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_1798720",
                        "content": "public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\nString dirBase = Util.JAVA_DIR + File.separator + packageName;\nFile packageDir = new File(dirBase);\nif (!packageDir.exists()) {\nboolean created = packageDir.mkdir();\nif (!created) {\nFile currentPath = new File(\".\");\nthrow new Exception(\"Directory \" + packageName + \" could not be created. Current directory: \" + currentPath.getAbsolutePath());\n}\n}\nfor (int i = 0; i < fileContents.size(); i++) {\nFile file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\nFileOutputStream fos = new FileOutputStream(file);\nfos.write(fileContents.get(i));\nfos.flush();\nfos.close();\n}\nfor (int i = 0; i < fileNames.size(); i++) {\nFile fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\nFile fileDst = new File(dirBase + File.separator + fileNames.get(i));\nBufferedReader reader = new BufferedReader(new FileReader(fileSrc));\nBufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\nwriter.append(\"package \" + packageName + \";\\n\");\nString line = \"\";\nwhile ((line = reader.readLine()) != null) writer.append(line + \"\\n\");\nwriter.flush();\nwriter.close();\nreader.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 164
                },
                {
                        "id": "pretrain_java_data_18507152",
                        "content": "public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\nString dirBase = Util.JAVA_DIR + File.separator + packageName;\nFile packageDir = new File(dirBase);\nif (!packageDir.exists()) {\nboolean created = packageDir.mkdir();\nif (!created) {\nFile currentPath = new File(\".\");\nthrow new Exception(\"Directory \" + packageName + \" could not be created. Current directory: \" + currentPath.getAbsolutePath());\n}\n}\nfor (int i = 0; i < fileContents.size(); i++) {\nFile file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\nFileOutputStream fos = new FileOutputStream(file);\nfos.write(fileContents.get(i));\nfos.flush();\nfos.close();\n}\nfor (int i = 0; i < fileNames.size(); i++) {\nFile fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\nFile fileDst = new File(dirBase + File.separator + fileNames.get(i));\nBufferedReader reader = new BufferedReader(new FileReader(fileSrc));\nBufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\nwriter.append(\"package \" + packageName + \";\\n\");\nString line = \"\";\nwhile ((line = reader.readLine()) != null) writer.append(line + \"\\n\");\nwriter.flush();\nwriter.close();\nreader.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1967599#66#95.java",
                        "__cluster__": 164
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_18485743",
                        "content": "<gh_stars>10-100\nprivate void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {\nString absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\nlog.println(\"Concat files into: \" + outputFile);\nOutputStream out = new FileOutputStream(absPath + outputFile);\nbyte[] buffer = new byte[4096];\nint readBytes;\nfor (String file : inputFiles) {\nlog.println(\" Read: \" + file);\nInputStream in = new FileInputStream(absPath + file);\nwhile ((readBytes = in.read(buffer)) != -1) {\nout.write(buffer, 0, readBytes);\n}\nin.close();\n}\nout.close();\nif (compress) {\nlong normalSize = new File(absPath + outputFile).length();\nProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"WEB-INF/yuicompressor.jar\", outputFile, \"-o\", outputFile, \"--line-break\", \"4000\");\nbuilder.directory(new File(absPath));\nProcess process = builder.start();\nprocess.waitFor();\nlong minSize = new File(absPath + outputFile).length();\nlong diff = normalSize - minSize;\ndouble percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;\ndouble diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);\nlog.println(\"Result: \" + percentage + \" % (\" + diffSize + \" KB)\");\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#840994#76#103.java",
                        "__cluster__": 327
                },
                {
                        "id": "test_bigclonebench_data_4118412",
                        "content": "private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {\nString absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\nlog.println(\"Concat files into: \" + outputFile);\nOutputStream out = new FileOutputStream(absPath + outputFile);\nbyte[] buffer = new byte[4096];\nint readBytes;\nfor (String file : inputFiles) {\nlog.println(\" Read: \" + file);\nInputStream in = new FileInputStream(absPath + file);\nwhile ((readBytes = in.read(buffer)) != -1) {\nout.write(buffer, 0, readBytes);\n}\nin.close();\n}\nout.close();\nif (compress) {\nlong normalSize = new File(absPath + outputFile).length();\nProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"WEB-INF/yuicompressor.jar\", outputFile, \"-o\", outputFile, \"--line-break\", \"4000\");\nbuilder.directory(new File(absPath));\nProcess process = builder.start();\nprocess.waitFor();\nlong minSize = new File(absPath + outputFile).length();\nlong diff = normalSize - minSize;\ndouble percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;\ndouble diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);\nlog.println(\"Result: \" + percentage + \" % (\" + diffSize + \" KB)\");\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 327
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9846843",
                        "content": "public byte[] getResponse() {\nfinal ByteArrayInputStream bais = new ByteArrayInputStream(request);\nfinal ByteArrayOutputStream baos = new ByteArrayOutputStream();\nList<String> lines = Collections.emptyList();\ntry {\n@SuppressWarnings(\"unchecked\") List<String> dl = IOUtils.readLines(bais);\nlines = dl;\n} catch (IOException ioex) {\nthrow new AssertionError(ioex);\n}\nString resource = null;\nfor (String line : lines) {\nif (line.startsWith(\"GET \")) {\nint endIndex = line.lastIndexOf(' ');\nresource = line.substring(4, endIndex);\n}\n}\nfinal PrintStream printStream = new PrintStream(baos);\nif (resource == null) {\nprintStream.println(\"HTTP/1.1 400 Bad Request\");\n} else {\nfinal InputStream inputStream = getClass().getResourceAsStream(resource);\nif (inputStream == null) {\nprintStream.println(\"HTTP/1.1 404 Not Found\");\nprintStream.println();\n} else {\nprintStream.println(\"HTTP/1.1 200 OK\");\nprintStream.println();\ntry {\nIOUtils.copy(inputStream, printStream);\n} catch (IOException ioex) {\nthrow new AssertionError(ioex);\n}\n}\n}\nprintStream.flush();\nprintStream.close();\nreturn baos.toByteArray();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 449
                },
                {
                        "id": "pretrain_java_data_20046850",
                        "content": "<reponame>cragkhit/elasticsearch\npublic byte[] getResponse() {\nfinal ByteArrayInputStream bais = new ByteArrayInputStream(request);\nfinal ByteArrayOutputStream baos = new ByteArrayOutputStream();\nList<String> lines = Collections.emptyList();\ntry {\n@SuppressWarnings(\"unchecked\") List<String> dl = IOUtils.readLines(bais);\nlines = dl;\n} catch (IOException ioex) {\nthrow new AssertionError(ioex);\n}\nString resource = null;\nfor (String line : lines) {\nif (line.startsWith(\"GET \")) {\nint endIndex = line.lastIndexOf(' ');\nresource = line.substring(4, endIndex);\n}\n}\nfinal PrintStream printStream = new PrintStream(baos);\nif (resource == null) {\nprintStream.println(\"HTTP/1.1 400 Bad Request\");\n} else {\nfinal InputStream inputStream = getClass().getResourceAsStream(resource);\nif (inputStream == null) {\nprintStream.println(\"HTTP/1.1 404 Not Found\");\nprintStream.println();\n} else {\nprintStream.println(\"HTTP/1.1 200 OK\");\nprintStream.println();\ntry {\nIOUtils.copy(inputStream, printStream);\n} catch (IOException ioex) {\nthrow new AssertionError(ioex);\n}\n}\n}\nprintStream.flush();\nprintStream.close();\nreturn baos.toByteArray();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1124388#83#121.java",
                        "__cluster__": 449
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_20045288",
                        "content": "private static File getZipAsFile(DigitalObject digOb) {\nString folderName = randomizeFileName(getFolderNameFromDigObject(digOb));\nFile tmpFolder = new File(utils_tmp, folderName);\nFile zip = null;\ntry {\nFileUtils.forceMkdir(tmpFolder);\nzip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));\nFileOutputStream out = new FileOutputStream(zip);\nIOUtils.copyLarge(digOb.getContent().getInputStream(), out);\nout.close();\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn zip;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2169471#405#421.java",
                        "__cluster__": 846
                },
                {
                        "id": "test_bigclonebench_data_17999474",
                        "content": "private static File getZipAsFile(DigitalObject digOb) {\nString folderName = randomizeFileName(getFolderNameFromDigObject(digOb));\nFile tmpFolder = new File(utils_tmp, folderName);\nFile zip = null;\ntry {\nFileUtils.forceMkdir(tmpFolder);\nzip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));\nFileOutputStream out = new FileOutputStream(zip);\nIOUtils.copyLarge(digOb.getContent().getInputStream(), out);\nout.close();\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn zip;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 846
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8665321",
                        "content": "public Vector<String> getNetworkServersIPs(String netaddress) {\nVector<String> result = new Vector<String>();\nboolean serverline = false;\nString line;\nString[] splitline;\ntry {\nURL url = new URL(netaddress);\nURLConnection connection = url.openConnection();\nBufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\nwhile ((line = reader.readLine()) != null) {\nif ((serverline) && line.startsWith(\";\")) {\nserverline = false;\n}\nif (serverline) {\nsplitline = line.split(\":\");\nresult.add(splitline[1]);\n}\nif (line.startsWith(\"!SERVERS\")) {\nserverline = true;\n}\n}\n} catch (MalformedURLException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn result;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 171
                },
                {
                        "id": "pretrain_java_data_18553406",
                        "content": "<filename>references/bcb_chosen_clones/selected#2561166#98#122.java\npublic Vector<String> getVoiceServersNames() {\nVector<String> result = new Vector<String>();\nboolean serverline = false;\nString line;\nString[] splitline;\ntry {\nURL url = new URL(voiceaddress);\nURLConnection connection = url.openConnection();\nBufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\nwhile ((line = reader.readLine()) != null) {\nif (serverline) {\nsplitline = line.split(\":\");\nresult.add(splitline[0]);\n}\nif (line.startsWith(\"!VOICE SERVERS\")) {\nserverline = true;\n}\n}\n} catch (MalformedURLException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn result;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2561166#98#122.java",
                        "__cluster__": 171
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_4016687",
                        "content": "public static void main(String[] args) {\nFTPClient client = new FTPClient();\nString sFTP = \"ftp.miservidor.com\";\nString sUser = \"usuario\";\nString sPassword = \"password\";\ntry {\nSystem.out.println(\"Conectandose a \" + sFTP);\nclient.connect(sFTP);\nboolean login = client.login(sUser, sPassword);\nif (login) {\nSystem.out.println(\"Login correcto\");\nboolean logout = client.logout();\nif (logout) {\nSystem.out.println(\"Logout del servidor FTP\");\n}\n} else {\nSystem.out.println(\"Error en el login.\");\n}\nSystem.out.println(\"Desconectando.\");\nclient.disconnect();\n} catch (IOException ioe) {\nioe.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 731
                },
                {
                        "id": "pretrain_java_data_20063609",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void main(String[] args) {\nFTPClient client = new FTPClient();\nString sFTP = \"ftp.miservidor.com\";\nString sUser = \"usuario\";\nString sPassword = \"password\";\ntry {\nSystem.out.println(\"Conectandose a \" + sFTP);\nclient.connect(sFTP);\nboolean login = client.login(sUser, sPassword);\nif (login) {\nSystem.out.println(\"Login correcto\");\nboolean logout = client.logout();\nif (logout) {\nSystem.out.println(\"Logout del servidor FTP\");\n}\n} else {\nSystem.out.println(\"Error en el login.\");\n}\nSystem.out.println(\"Desconectando.\");\nclient.disconnect();\n} catch (IOException ioe) {\nioe.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#450182#16#39.java",
                        "__cluster__": 731
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6840241",
                        "content": "private static long copy(InputStream source, OutputStream sink) {\ntry {\nreturn IOUtils.copyLarge(source, sink);\n} catch (IOException e) {\nlogger.error(e.toString(), e);\nthrow new FaultException(\"System error copying stream\", e);\n} finally {\nIOUtils.closeQuietly(source);\nIOUtils.closeQuietly(sink);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 132
                },
                {
                        "id": "pretrain_java_data_20046712",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate static long copy(InputStream source, OutputStream sink) {\ntry {\nreturn IOUtils.copyLarge(source, sink);\n} catch (IOException e) {\nlogger.error(e.toString(), e);\nthrow new FaultException(\"System error copying stream\", e);\n} finally {\nIOUtils.closeQuietly(source);\nIOUtils.closeQuietly(sink);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#428027#394#404.java",
                        "__cluster__": 132
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_12428013",
                        "content": "public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {\nif (monitor != null && monitor.isCanceled()) {\nreturn;\n}\ntry {\nftpClient = new FTPClient();\nftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));\nftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));\nftpClient.connect();\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nif (from != null) {\nFTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);\nsynchedSet.add(ftpHolder);\n}\nJobHandler.aquireFTPLock();\nfor (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {\nif (monitor != null && monitor.isCanceled()) {\nJobHandler.releaseFTPLock();\nftpClient.quit();\nreturn;\n}\nThread.yield();\nFTPHolder element = (FTPHolder) iter.next();\nftpClient.setType(FTPTransferType.ASCII);\nftpClient.put(element.from, element.to);\nif (element.renameTo != null) {\ntry {\nftpClient.delete(element.renameTo);\n} catch (Exception e) {\n}\nftpClient.rename(element.to, element.renameTo);\nlog.info(\"RENAME: \" + element.to + \"To: \" + element.renameTo);\n}\n}\nJobHandler.releaseFTPLock();\nftpClient.quit();\n} catch (UnknownHostException e) {\ne.printStackTrace();\n} catch (FTPException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nsynchedSet.clear();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 232
                },
                {
                        "id": "pretrain_java_data_4016068",
                        "content": "<filename>references/bcb_chosen_clones/selected#714671#95#161.java\npublic static void putWithUserSettings(String from, String to, String renameTo, boolean binary, IProgressMonitor monitor) {\nif (monitor != null && monitor.isCanceled()) {\nreturn;\n}\nFTPHolder ftpHolder = new FTPHolder(from, to, renameTo, binary);\nsynchedSet.add(ftpHolder);\nint ftpqueuesize = PrefPageOne.getIntValue(CONSTANTS.PREF_FTPQUEUE);\nif (synchedSet.size() >= ftpqueuesize) {\nJobHandler.aquireFTPLock();\ntry {\nftpClient = new FTPClient();\nftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));\nftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));\nftpClient.connect();\ntry {\nThread.sleep(1500);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nif (monitor != null && monitor.isCanceled()) {\nJobHandler.releaseFTPLock();\nftpClient.quit();\nreturn;\n}\nsynchronized (synchedSet) {\nfor (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {\nif (monitor != null && monitor.isCanceled()) {\nJobHandler.releaseFTPLock();\nftpClient.quit();\nreturn;\n}\nThread.yield();\nFTPHolder element = (FTPHolder) iter.next();\nif (element.binary) {\nftpClient.setType(FTPTransferType.BINARY);\n} else {\nftpClient.setType(FTPTransferType.ASCII);\n}\nftpClient.put(element.from, element.to);\nif (element.renameTo != null) {\ntry {\nftpClient.delete(element.renameTo);\n} catch (Exception e) {\n}\nftpClient.rename(element.to, element.renameTo);\nlog.info(\"RENAME: \" + element.to + \"To: \" + element.renameTo);\n}\n}\nsynchedSet.clear();\n}\nJobHandler.releaseFTPLock();\nftpClient.quit();\n} catch (UnknownHostException e) {\ne.printStackTrace();\n} catch (FTPException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#714671#95#161.java",
                        "__cluster__": 232
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_20022673",
                        "content": "<filename>references/bcb_chosen_clones/selected#216915#372#406.java<gh_stars>10-100\nprivate void readVersion() {\nURL url = ClassLoader.getSystemResource(\"version\");\nif (url == null) {\nreturn;\n}\nBufferedReader reader = null;\nString line = null;\ntry {\nreader = new BufferedReader(new InputStreamReader(url.openStream()));\nwhile ((line = reader.readLine()) != null) {\nif (line.startsWith(\"Version=\")) {\nversion = (line.split(\"=\"))[1];\n}\nif (line.startsWith(\"Revision=\")) {\nrevision = (line.split(\"=\"))[1];\n}\nif (line.startsWith(\"Date=\")) {\nString sSec = (line.split(\"=\"))[1];\nLong lSec = Long.valueOf(sSec);\ncompileDate = new Date(lSec);\n}\n}\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nif (reader != null) {\ntry {\nreader.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\nreturn;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#216915#372#406.java",
                        "__cluster__": 806
                },
                {
                        "id": "test_bigclonebench_data_22875895",
                        "content": "private void readVersion() {\nURL url = ClassLoader.getSystemResource(\"version\");\nif (url == null) {\nreturn;\n}\nBufferedReader reader = null;\nString line = null;\ntry {\nreader = new BufferedReader(new InputStreamReader(url.openStream()));\nwhile ((line = reader.readLine()) != null) {\nif (line.startsWith(\"Version=\")) {\nversion = (line.split(\"=\"))[1];\n}\nif (line.startsWith(\"Revision=\")) {\nrevision = (line.split(\"=\"))[1];\n}\nif (line.startsWith(\"Date=\")) {\nString sSec = (line.split(\"=\"))[1];\nLong lSec = Long.valueOf(sSec);\ncompileDate = new Date(lSec);\n}\n}\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nif (reader != null) {\ntry {\nreader.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\nreturn;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 806
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_293167",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString version = null;\nString build = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n}\nbin.close();\nif (version != null && build != null) {\nif (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\nGUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n}\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 33
                },
                {
                        "id": "pretrain_java_data_4187597",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString version = null;\nString build = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n}\nbin.close();\nif (version != null && build != null) {\nif (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\nGUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n}\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#93582#14#37.java",
                        "__cluster__": 33
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_742465",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString version = null;\nString build = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n}\nbin.close();\nif (version != null && build != null) {\nif (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\nGUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n}\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 33
                },
                {
                        "id": "pretrain_java_data_4187597",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString version = null;\nString build = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n}\nbin.close();\nif (version != null && build != null) {\nif (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\nGUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n}\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#93582#14#37.java",
                        "__cluster__": 33
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_620855",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString version = null;\nString build = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n}\nbin.close();\nif (version != null && build != null) {\nif (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\nGUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n}\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 33
                },
                {
                        "id": "pretrain_java_data_4187597",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString version = null;\nString build = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n}\nbin.close();\nif (version != null && build != null) {\nif (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\nGUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n}\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#93582#14#37.java",
                        "__cluster__": 33
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_810342",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString version = null;\nString build = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n}\nbin.close();\nif (version != null && build != null) {\nif (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\nGUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n}\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 33
                },
                {
                        "id": "pretrain_java_data_4187597",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString version = null;\nString build = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n}\nbin.close();\nif (version != null && build != null) {\nif (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\nGUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n}\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#93582#14#37.java",
                        "__cluster__": 33
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_471804",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString version = null;\nString build = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n}\nbin.close();\nif (version != null && build != null) {\nif (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\nGUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n}\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 33
                },
                {
                        "id": "pretrain_java_data_4187597",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString version = null;\nString build = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n}\nbin.close();\nif (version != null && build != null) {\nif (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\nGUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n}\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#93582#14#37.java",
                        "__cluster__": 33
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4162684",
                        "content": "public void read(String skeletonFilename) throws Exception {\nClassLoader loader = UnicodePropertiesSkeleton.class.getClassLoader();\nURL url = loader.getResource(skeletonFilename);\nif (null == url) {\nthrow new Exception(\"Cannot locate '\" + skeletonFilename + \"' - aborting.\");\n}\nString line;\nStringBuilder section = new StringBuilder();\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), \"UTF-8\"));\nwhile (null != (line = reader.readLine())) {\nif (line.startsWith(\"---\")) {\nsections.add(section.toString());\nsection.setLength(0);\n} else {\nsection.append(line);\nsection.append(NL);\n}\n}\nif (section.length() > 0) {\nsections.add(section.toString());\n}\nif (sections.size() != size) {\nthrow new Exception(\"Skeleton file '\" + skeletonFilename + \"' has \" + sections.size() + \" static sections, but \" + size + \" were expected.\");\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1623361#61#85.java",
                        "__cluster__": 238
                },
                {
                        "id": "test_bigclonebench_data_11962480",
                        "content": "public void read(String skeletonFilename) throws Exception {\nClassLoader loader = UnicodePropertiesSkeleton.class.getClassLoader();\nURL url = loader.getResource(skeletonFilename);\nif (null == url) {\nthrow new Exception(\"Cannot locate '\" + skeletonFilename + \"' - aborting.\");\n}\nString line;\nStringBuilder section = new StringBuilder();\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), \"UTF-8\"));\nwhile (null != (line = reader.readLine())) {\nif (line.startsWith(\"---\")) {\nsections.add(section.toString());\nsection.setLength(0);\n} else {\nsection.append(line);\nsection.append(NL);\n}\n}\nif (section.length() > 0) {\nsections.add(section.toString());\n}\nif (sections.size() != size) {\nthrow new Exception(\"Skeleton file '\" + skeletonFilename + \"' has \" + sections.size() + \" static sections, but \" + size + \" were expected.\");\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 238
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13757855",
                        "content": "public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\nSystem.out.print(\"Processing with \" + tpl);\nString destinationPath;\nswitch(tpl.destination) {\ncase target:\nif (tpl.path == null) {\ndestinationPath = where.buildDir + separatorChar + \"generated-sources\" + separatorChar + GENERATION_TARGET;\n} else {\ndestinationPath = where.buildDir;\n}\nbreak;\ncase source:\nif (tpl.path == null) {\ndestinationPath = where.sourceDir;\n} else {\ndestinationPath = \"src\";\n}\nbreak;\ncase redora:\ndestinationPath = where.redoraDir;\nbreak;\ndefault:\nthrow new IllegalArgumentException(\"Unused destination \" + tpl.destination);\n}\nif (tpl.path == null) {\nif (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);\n} else {\ndestinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\\\', separatorChar);\n}\nSystem.out.println(\" to \" + destinationPath + \"...\" + outFileName);\nif (tpl.destination == Destination.source) {\nif (new File(destinationPath, outFileName).exists()) {\nSystem.out.println(\"Stub \" + outFileName + \" already exists.\");\nreturn;\n}\n}\nnew File(destinationPath).mkdirs();\nInputStream in = null;\nWriter out;\ntry {\nout = new FileWriter(new File(destinationPath, outFileName));\n} catch (IOException e) {\nthrow new ModelGenerationException(\"Can't find: \" + destinationPath + separatorChar + outFileName, e);\n}\nswitch(tpl.type) {\ncase freemarker:\nMap<String, NodeModel> root = new HashMap<String, NodeModel>();\nroot.put(\"doc\", NodeModel.wrap(model));\ntry {\nfreemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\ntemplate.process(root, out);\n} catch (ParseException e) {\nthrow new ModelGenerationException(\"There is an error in template: \" + tpl + \". I found it when generating \" + outFileName, e);\n} catch (IOException e) {\nthrow new ModelGenerationException(\"Can't find '\" + tpl + \"' when generating \" + outFileName, e);\n} catch (TemplateException e) {\nthrow new ModelGenerationException(\"There is an error in template: \" + tpl + \". I found it when generating \" + outFileName, e);\n} catch (RuntimeException e) {\nthrow new ModelGenerationException(\"There is another error while trying this template: \" + tpl + \". I found it when generating \" + outFileName, e);\n}\nbreak;\ncase xslt:\ntry {\nin = new FileInputStream(tpl.getAbsolutePath());\nxsltTransform(model.getFirstChild(), in, out, xsltParam);\n} catch (FileNotFoundException e) {\nthrow new ModelGenerationException(\"Can't find \" + tpl, e);\n} catch (TransformerException e) {\nthrow new ModelGenerationException(\"Sorry, i failed to use this template: \" + tpl + \". It broke when generating \" + outFileName, e);\n} finally {\nIOUtils.closeQuietly(in);\n}\nbreak;\ncase copy:\ntry {\nin = new FileInputStream(tpl.getAbsolutePath());\nIOUtils.copy(in, out);\n} catch (IOException e) {\nthrow new ModelGenerationException(\"File copy failed \" + tpl.getTemplateFileName(), e);\n} finally {\nIOUtils.closeQuietly(in);\n}\n}\nIOUtils.closeQuietly(out);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 336
                },
                {
                        "id": "pretrain_java_data_4109109",
                        "content": "public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\nSystem.out.print(\"Processing with \" + tpl);\nString destinationPath;\nswitch(tpl.destination) {\ncase target:\nif (tpl.path == null) {\ndestinationPath = where.buildDir + separatorChar + \"generated-sources\" + separatorChar + GENERATION_TARGET;\n} else {\ndestinationPath = where.buildDir;\n}\nbreak;\ncase source:\nif (tpl.path == null) {\ndestinationPath = where.sourceDir;\n} else {\ndestinationPath = \"src\";\n}\nbreak;\ncase redora:\ndestinationPath = where.redoraDir;\nbreak;\ndefault:\nthrow new IllegalArgumentException(\"Unused destination \" + tpl.destination);\n}\nif (tpl.path == null) {\nif (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);\n} else {\ndestinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\\\', separatorChar);\n}\nSystem.out.println(\" to \" + destinationPath + \"...\" + outFileName);\nif (tpl.destination == Destination.source) {\nif (new File(destinationPath, outFileName).exists()) {\nSystem.out.println(\"Stub \" + outFileName + \" already exists.\");\nreturn;\n}\n}\nnew File(destinationPath).mkdirs();\nInputStream in = null;\nWriter out;\ntry {\nout = new FileWriter(new File(destinationPath, outFileName));\n} catch (IOException e) {\nthrow new ModelGenerationException(\"Can't find: \" + destinationPath + separatorChar + outFileName, e);\n}\nswitch(tpl.type) {\ncase freemarker:\nMap<String, NodeModel> root = new HashMap<String, NodeModel>();\nroot.put(\"doc\", NodeModel.wrap(model));\ntry {\nfreemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\ntemplate.process(root, out);\n} catch (ParseException e) {\nthrow new ModelGenerationException(\"There is an error in template: \" + tpl + \". I found it when generating \" + outFileName, e);\n} catch (IOException e) {\nthrow new ModelGenerationException(\"Can't find '\" + tpl + \"' when generating \" + outFileName, e);\n} catch (TemplateException e) {\nthrow new ModelGenerationException(\"There is an error in template: \" + tpl + \". I found it when generating \" + outFileName, e);\n} catch (RuntimeException e) {\nthrow new ModelGenerationException(\"There is another error while trying this template: \" + tpl + \". I found it when generating \" + outFileName, e);\n}\nbreak;\ncase xslt:\ntry {\nin = new FileInputStream(tpl.getAbsolutePath());\nxsltTransform(model.getFirstChild(), in, out, xsltParam);\n} catch (FileNotFoundException e) {\nthrow new ModelGenerationException(\"Can't find \" + tpl, e);\n} catch (TransformerException e) {\nthrow new ModelGenerationException(\"Sorry, i failed to use this template: \" + tpl + \". It broke when generating \" + outFileName, e);\n} finally {\nIOUtils.closeQuietly(in);\n}\nbreak;\ncase copy:\ntry {\nin = new FileInputStream(tpl.getAbsolutePath());\nIOUtils.copy(in, out);\n} catch (IOException e) {\nthrow new ModelGenerationException(\"File copy failed \" + tpl.getTemplateFileName(), e);\n} finally {\nIOUtils.closeQuietly(in);\n}\n}\nIOUtils.closeQuietly(out);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1644280#56#140.java",
                        "__cluster__": 336
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3514286",
                        "content": "public static String getHashedPassword(String password) {\ntry {\nMessageDigest digest = MessageDigest.getInstance(\"MD5\");\ndigest.update(password.getBytes());\nBigInteger hashedInt = new BigInteger(1, digest.digest());\nreturn String.format(\"%1$032X\", hashedInt);\n} catch (NoSuchAlgorithmException nsae) {\nSystem.err.println(nsae.getMessage());\n}\nreturn \"\";\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 414
                },
                {
                        "id": "pretrain_java_data_4040651",
                        "content": "<gh_stars>10-100\npublic static String getHashedPassword(String password) {\ntry {\nMessageDigest digest = MessageDigest.getInstance(\"MD5\");\ndigest.update(password.getBytes());\nBigInteger hashedInt = new BigInteger(1, digest.digest());\nreturn String.format(\"%1$032X\", hashedInt);\n} catch (NoSuchAlgorithmException nsae) {\nSystem.err.println(nsae.getMessage());\n}\nreturn \"\";\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2739493#9#19.java",
                        "__cluster__": 414
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20310134",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "id": "pretrain_java_data_4168954",
                        "content": "static void copyFile(File in, File outDir, String outFileName) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\noutDir.mkdirs();\nFile outFile = new File(outDir, outFileName);\nFileChannel outChannel = new FileOutputStream(outFile).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#920983#188#205.java",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_1769771",
                        "content": "private void copyFile(File in, File out) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) inChannel.close();\nif (outChannel != null) outChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "id": "pretrain_java_data_4168954",
                        "content": "static void copyFile(File in, File outDir, String outFileName) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\noutDir.mkdirs();\nFile outFile = new File(outDir, outFileName);\nFileChannel outChannel = new FileOutputStream(outFile).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#920983#188#205.java",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8069594",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nif (in.getCanonicalPath().equals(out.getCanonicalPath())) {\nreturn;\n}\nFileChannel inChannel = new FileInputStream(in).getChannel();\nFileChannel outChannel = new FileOutputStream(out).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 444
                },
                {
                        "id": "pretrain_java_data_4168954",
                        "content": "static void copyFile(File in, File outDir, String outFileName) throws IOException {\nFileChannel inChannel = new FileInputStream(in).getChannel();\noutDir.mkdirs();\nFile outFile = new File(outDir, outFileName);\nFileChannel outChannel = new FileOutputStream(outFile).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} catch (IOException e) {\nthrow e;\n} finally {\nif (inChannel != null) {\ninChannel.close();\n}\nif (outChannel != null) {\noutChannel.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#920983#188#205.java",
                        "__cluster__": 444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_1235538",
                        "content": "public static String encrypt(final String pass) {\ntry {\nfinal MessageDigest md = MessageDigest.getInstance(\"SHA\");\nmd.update(pass.getBytes(\"UTF-8\"));\nreturn new String(Base64.encodeBase64(md.digest()));\n} catch (final Exception e) {\nthrow new RuntimeException(\"No se pudo encriptar el password.\", e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 360
                },
                {
                        "id": "pretrain_java_data_5750624",
                        "content": "public static String encrypt(final String pass) {\ntry {\nfinal MessageDigest md = MessageDigest.getInstance(\"SHA\");\nmd.update(pass.getBytes(\"UTF-8\"));\nreturn new String(Base64.encodeBase64(md.digest()));\n} catch (final Exception e) {\nthrow new RuntimeException(\"No se pudo encriptar el password.\", e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#795329#11#19.java",
                        "__cluster__": 360
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_7263389",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static boolean dump(File source, File target) {\nboolean done = false;\ntry {\nInputStream is = new BufferedInputStream(new FileInputStream(source));\nOutputStream os = new BufferedOutputStream(new FileOutputStream(target));\nwhile (is.available() > 0) {\nos.write(is.read());\n}\nos.flush();\nos.close();\nis.close();\nreturn true;\n} catch (IOException e) {\n}\nreturn done;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2026343#153#168.java",
                        "__cluster__": 382
                },
                {
                        "id": "test_bigclonebench_data_9805906",
                        "content": "public static boolean dump(File source, File target) {\nboolean done = false;\ntry {\nInputStream is = new BufferedInputStream(new FileInputStream(source));\nOutputStream os = new BufferedOutputStream(new FileOutputStream(target));\nwhile (is.available() > 0) {\nos.write(is.read());\n}\nos.flush();\nos.close();\nis.close();\nreturn true;\n} catch (IOException e) {\n}\nreturn done;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 382
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_5676020",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\nvoid run(PseudolocalizerArguments arguments) throws IOException {\nList<String> fileNames = arguments.getFileNames();\nPseudolocalizationPipeline pipeline = arguments.getPipeline();\nif (arguments.isInteractive()) {\nrunStdin(pipeline);\nreturn;\n}\nif (fileNames.size() == 0) {\nMessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());\nwriteMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);\nreturn;\n}\nString suffix = arguments.getVariant();\nif (suffix == null) {\nsuffix = \"_pseudo\";\n} else {\nsuffix = \"_\" + suffix;\n}\nfor (String fileName : fileNames) {\nFile file = new File(fileName);\nif (!file.exists()) {\nSystem.err.println(\"File \" + fileName + \" not found\");\ncontinue;\n}\nint lastDot = fileName.lastIndexOf('.');\nString extension;\nString outFileName;\nif (lastDot >= 0) {\nextension = fileName.substring(lastDot + 1);\noutFileName = fileName.substring(0, lastDot) + suffix + \".\" + extension;\n} else {\nextension = \"\";\noutFileName = fileName + suffix;\n}\nSystem.out.println(\"Processing \" + fileName + \" into \" + outFileName);\nString fileType = arguments.getType();\nif (fileType == null) {\nfileType = extension;\n}\nMessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);\nInputStream inputStream = new FileInputStream(file);\nList<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);\nOutputStream outputStream = new FileOutputStream(new File(outFileName));\nwriteMessages(msgCat, processedMessages, outputStream);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#718755#184#229.java",
                        "__cluster__": 403
                },
                {
                        "id": "test_bigclonebench_data_13516684",
                        "content": "void run(PseudolocalizerArguments arguments) throws IOException {\nList<String> fileNames = arguments.getFileNames();\nPseudolocalizationPipeline pipeline = arguments.getPipeline();\nif (arguments.isInteractive()) {\nrunStdin(pipeline);\nreturn;\n}\nif (fileNames.size() == 0) {\nMessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());\nwriteMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);\nreturn;\n}\nString suffix = arguments.getVariant();\nif (suffix == null) {\nsuffix = \"_pseudo\";\n} else {\nsuffix = \"_\" + suffix;\n}\nfor (String fileName : fileNames) {\nFile file = new File(fileName);\nif (!file.exists()) {\nSystem.err.println(\"File \" + fileName + \" not found\");\ncontinue;\n}\nint lastDot = fileName.lastIndexOf('.');\nString extension;\nString outFileName;\nif (lastDot >= 0) {\nextension = fileName.substring(lastDot + 1);\noutFileName = fileName.substring(0, lastDot) + suffix + \".\" + extension;\n} else {\nextension = \"\";\noutFileName = fileName + suffix;\n}\nSystem.out.println(\"Processing \" + fileName + \" into \" + outFileName);\nString fileType = arguments.getType();\nif (fileType == null) {\nfileType = extension;\n}\nMessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);\nInputStream inputStream = new FileInputStream(file);\nList<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);\nOutputStream outputStream = new FileOutputStream(new File(outFileName));\nwriteMessages(msgCat, processedMessages, outputStream);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 403
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_7287972",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#1440623#68#196.java\n@SuppressWarnings(\"unchecked\")\npublic void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {\n{\nAssert.notNull(configuration);\nAssert.notNull(monitor);\n}\nfinal String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, \"\");\nfinal IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();\nif (NexOpenProjectUtils.isNexOpenProject(prj)) {\nfinal IFile pom = prj.getFile(\"pom.xml\");\nif (!pom.exists()) {\nthrow new IllegalStateException(\"Not a NexOpen project. Not Maven2 root pom.xml available\");\n}\nContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {\npublic void processHandle(final Document doc) {\nhandleRootProfile(doc);\n}\n});\nfinal IFile bpom = prj.getFile(\"business/pom.xml\");\nif (!bpom.exists()) {\nthrow new IllegalStateException(\"Not a NexOpen project. Not Maven2 business pom.xml available\");\n}\nContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {\npublic void processHandle(final Document doc) {\ntry {\nhandleBusinessProfile(doc, configuration, prj);\n} catch (final CoreException e) {\nif (Logger.getLog().isInfoEnabled()) {\nLogger.getLog().info(\"CoreException\", e);\n}\nthrow new RuntimeException(e);\n}\n}\n});\nfinal ByteArrayOutputStream output = new ByteArrayOutputStream();\ntry {\nfinal Properties props = new Properties();\nfinal String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, \"MySQL5InnoDB\");\nprops.setProperty(\"hibernate.dialect\", support.getDialectClass(dialectName));\nprops.setProperty(\"hibernate.connection.driver_class\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, \"com.mysql.jdbc.Driver\"));\nprops.setProperty(\"hibernate.connection.url\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, \"jdbc:mysql://<host><:port>/<database>\"));\nprops.setProperty(\"hibernate.connection.username\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, \"sa\"));\nprops.setProperty(\"hibernate.connection.password\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, \"\"));\nprops.store(output, \"hibernate properties for code generation using NexOpen Tools 1.0.0\");\nfinal IFile props_file = prj.getFile(\"business/src/test/resources/hibernate.properties\");\nif (!props_file.exists()) {\nprops_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);\n} else {\nprops_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);\n}\n} catch (final IOException e) {\nLogger.getLog().error(\"I/O exception \", e);\nthrow new RuntimeException(e);\n} finally {\ntry {\noutput.flush();\noutput.close();\n} catch (IOException e) {\n}\n}\nif (NexOpenProjectUtils.is04xProject(prj)) {\nfinal IFile appContext = prj.getFile(\"web/src/main/webapp/WEB-INF/applicationContext.xml\");\nif (!appContext.exists()) {\nthrow new IllegalStateException(\"It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project\");\n}\nContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {\npublic void processHandle(final Document doc) {\nfinal Element root = doc.getDocumentElement();\nfinal List<Element> beans = XMLUtils.getChildElementsByTagName(root, \"bean\");\nfor (final Element bean : beans) {\nfinal String id = bean.getAttribute(\"id\");\nif (\"valueListAdapterResolver\".equals(id)) {\ntry {\nfinal String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, \"\");\nfinal String className = new StringBuilder(pkgName).append(\".vlh.support.AnnotationValueListAdapterResolver\").toString();\nbean.setAttribute(\"class\", className);\nbreak;\n} catch (final CoreException e) {\nif (Logger.getLog().isInfoEnabled()) {\nLogger.getLog().info(\"CoreException\", e);\n}\nthrow new RuntimeException(e);\n}\n}\n}\n}\n});\n}\n{\nfinal String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, \"MySQL5InnoDB\");\nif (support.isReverseEngineeringFileNeeded(dialectName)) {\ntry {\nfinal IFile revengFile = prj.getFile(\"business/src/test/resources/\" + support.getReversEngineeringFile(dialectName));\nif (!revengFile.exists()) {\nfinal Bundle bundle = HibernateActivator.getDefault().getBundle();\nfinal Path src = new Path(\"resources/\" + support.getReversEngineeringFile(dialectName));\nfinal InputStream in = FileLocator.openStream(bundle, src, false);\nfinal ByteArrayOutputStream baos = new ByteArrayOutputStream();\nIOUtils.copy(in, baos);\nString str = baos.toString();\nstr = str.replace(\"${schema}\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, \"sa\"));\nrevengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);\n}\n} catch (final IOException e) {\nif (Logger.getLog().isInfoEnabled()) {\nLogger.getLog().info(\"CoreException\", e);\n}\nthrow new RuntimeException(e);\n}\n}\n}\nfinal IResource resource = (IResource) prj.getAdapter(IResource.class);\nfinal QualifiedName qn = new QualifiedName(\"org.nexopenframework.ide.eclipse.ui\", \"default.profile\");\nfinal String profile = resource.getPersistentProperty(qn);\nresource.setPersistentProperty(qn, \"reverse-engineering\");\ntry {\nfinal InstallProjectAction action = new InstallProjectAction();\naction.scheduleJob(prj, monitor);\nprj.refreshLocal(2, monitor);\n} finally {\nprj.setPersistentProperty(qn, profile);\n}\n} else {\nLogger.getLog().info(\"Not a NexOpen project :: \" + prj);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1440623#68#196.java",
                        "__cluster__": 463
                },
                {
                        "id": "test_bigclonebench_data_8754809",
                        "content": "@SuppressWarnings(\"unchecked\")\npublic void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {\n{\nAssert.notNull(configuration);\nAssert.notNull(monitor);\n}\nfinal String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, \"\");\nfinal IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();\nif (NexOpenProjectUtils.isNexOpenProject(prj)) {\nfinal IFile pom = prj.getFile(\"pom.xml\");\nif (!pom.exists()) {\nthrow new IllegalStateException(\"Not a NexOpen project. Not Maven2 root pom.xml available\");\n}\nContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {\npublic void processHandle(final Document doc) {\nhandleRootProfile(doc);\n}\n});\nfinal IFile bpom = prj.getFile(\"business/pom.xml\");\nif (!bpom.exists()) {\nthrow new IllegalStateException(\"Not a NexOpen project. Not Maven2 business pom.xml available\");\n}\nContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {\npublic void processHandle(final Document doc) {\ntry {\nhandleBusinessProfile(doc, configuration, prj);\n} catch (final CoreException e) {\nif (Logger.getLog().isInfoEnabled()) {\nLogger.getLog().info(\"CoreException\", e);\n}\nthrow new RuntimeException(e);\n}\n}\n});\nfinal ByteArrayOutputStream output = new ByteArrayOutputStream();\ntry {\nfinal Properties props = new Properties();\nfinal String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, \"MySQL5InnoDB\");\nprops.setProperty(\"hibernate.dialect\", support.getDialectClass(dialectName));\nprops.setProperty(\"hibernate.connection.driver_class\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, \"com.mysql.jdbc.Driver\"));\nprops.setProperty(\"hibernate.connection.url\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, \"jdbc:mysql://<host><:port>/<database>\"));\nprops.setProperty(\"hibernate.connection.username\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, \"sa\"));\nprops.setProperty(\"hibernate.connection.password\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, \"\"));\nprops.store(output, \"hibernate properties for code generation using NexOpen Tools 1.0.0\");\nfinal IFile props_file = prj.getFile(\"business/src/test/resources/hibernate.properties\");\nif (!props_file.exists()) {\nprops_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);\n} else {\nprops_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);\n}\n} catch (final IOException e) {\nLogger.getLog().error(\"I/O exception \", e);\nthrow new RuntimeException(e);\n} finally {\ntry {\noutput.flush();\noutput.close();\n} catch (IOException e) {\n}\n}\nif (NexOpenProjectUtils.is04xProject(prj)) {\nfinal IFile appContext = prj.getFile(\"web/src/main/webapp/WEB-INF/applicationContext.xml\");\nif (!appContext.exists()) {\nthrow new IllegalStateException(\"It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project\");\n}\nContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {\npublic void processHandle(final Document doc) {\nfinal Element root = doc.getDocumentElement();\nfinal List<Element> beans = XMLUtils.getChildElementsByTagName(root, \"bean\");\nfor (final Element bean : beans) {\nfinal String id = bean.getAttribute(\"id\");\nif (\"valueListAdapterResolver\".equals(id)) {\ntry {\nfinal String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, \"\");\nfinal String className = new StringBuilder(pkgName).append(\".vlh.support.AnnotationValueListAdapterResolver\").toString();\nbean.setAttribute(\"class\", className);\nbreak;\n} catch (final CoreException e) {\nif (Logger.getLog().isInfoEnabled()) {\nLogger.getLog().info(\"CoreException\", e);\n}\nthrow new RuntimeException(e);\n}\n}\n}\n}\n});\n}\n{\nfinal String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, \"MySQL5InnoDB\");\nif (support.isReverseEngineeringFileNeeded(dialectName)) {\ntry {\nfinal IFile revengFile = prj.getFile(\"business/src/test/resources/\" + support.getReversEngineeringFile(dialectName));\nif (!revengFile.exists()) {\nfinal Bundle bundle = HibernateActivator.getDefault().getBundle();\nfinal Path src = new Path(\"resources/\" + support.getReversEngineeringFile(dialectName));\nfinal InputStream in = FileLocator.openStream(bundle, src, false);\nfinal ByteArrayOutputStream baos = new ByteArrayOutputStream();\nIOUtils.copy(in, baos);\nString str = baos.toString();\nstr = str.replace(\"${schema}\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, \"sa\"));\nrevengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);\n}\n} catch (final IOException e) {\nif (Logger.getLog().isInfoEnabled()) {\nLogger.getLog().info(\"CoreException\", e);\n}\nthrow new RuntimeException(e);\n}\n}\n}\nfinal IResource resource = (IResource) prj.getAdapter(IResource.class);\nfinal QualifiedName qn = new QualifiedName(\"org.nexopenframework.ide.eclipse.ui\", \"default.profile\");\nfinal String profile = resource.getPersistentProperty(qn);\nresource.setPersistentProperty(qn, \"reverse-engineering\");\ntry {\nfinal InstallProjectAction action = new InstallProjectAction();\naction.scheduleJob(prj, monitor);\nprj.refreshLocal(2, monitor);\n} finally {\nprj.setPersistentProperty(qn, profile);\n}\n} else {\nLogger.getLog().info(\"Not a NexOpen project :: \" + prj);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 463
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_7252498",
                        "content": "<reponame>cragkhit/elasticsearch\npublic void writeConfiguration(Writer out) throws IOException {\nif (myResource == null) {\nout.append(\"# Unable to print configuration resource\\n\");\n} else {\nURL url = myResource.getUrl();\nInputStream in = url.openStream();\nif (in != null) {\ntry {\nIOUtils.copy(in, out);\n} finally {\nIOUtils.closeQuietly(in);\n}\n} else {\nout.append(\"# Unable to print configuration resource\\n\");\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1586915#110#126.java",
                        "__cluster__": 490
                },
                {
                        "id": "test_bigclonebench_data_19944975",
                        "content": "public void writeConfiguration(Writer out) throws IOException {\nif (myResource == null) {\nout.append(\"# Unable to print configuration resource\\n\");\n} else {\nURL url = myResource.getUrl();\nInputStream in = url.openStream();\nif (in != null) {\ntry {\nIOUtils.copy(in, out);\n} finally {\nIOUtils.closeQuietly(in);\n}\n} else {\nout.append(\"# Unable to print configuration resource\\n\");\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 490
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_7249858",
                        "content": "private JButton getButtonSonido() {\nif (buttonSonido == null) {\nbuttonSonido = new JButton();\nbuttonSonido.setText(Messages.getString(\"gui.AdministracionResorces.15\"));\nbuttonSonido.setIcon(new ImageIcon(\"data/icons/view_sidetree.png\"));\nbuttonSonido.addActionListener(new java.awt.event.ActionListener() {\npublic void actionPerformed(java.awt.event.ActionEvent e) {\nJFileChooser fc = new JFileChooser();\nfc.addChoosableFileFilter(new SoundFilter());\nint returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(\"gui.AdministracionResorces.17\"));\nif (returnVal == JFileChooser.APPROVE_OPTION) {\nFile file = fc.getSelectedFile();\nString rutaGlobal = System.getProperty(\"user.dir\") + \"/\" + rutaDatos + \"sonidos/\" + file.getName();\nString rutaRelativa = rutaDatos + \"sonidos/\" + file.getName();\ntry {\nFileInputStream fis = new FileInputStream(file);\nFileOutputStream fos = new FileOutputStream(rutaGlobal, true);\nFileChannel canalFuente = fis.getChannel();\nFileChannel canalDestino = fos.getChannel();\ncanalFuente.transferTo(0, canalFuente.size(), canalDestino);\nfis.close();\nfos.close();\nimagen.setSonidoURL(rutaRelativa);\nSystem.out.println(rutaGlobal + \" \" + rutaRelativa);\nbuttonSonido.setIcon(new ImageIcon(\"data/icons/view_sidetreeOK.png\"));\ngui.getAudio().reproduceAudio(imagen);\n} catch (IOException ex) {\nex.printStackTrace();\n}\n} else {\n}\n}\n});\n}\nreturn buttonSonido;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2247836#342#378.java",
                        "__cluster__": 627
                },
                {
                        "id": "test_bigclonebench_data_21754659",
                        "content": "private JButton getButtonSonido() {\nif (buttonSonido == null) {\nbuttonSonido = new JButton();\nbuttonSonido.setText(Messages.getString(\"gui.AdministracionResorces.15\"));\nbuttonSonido.setIcon(new ImageIcon(getClass().getResource(\"/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png\")));\nbuttonSonido.addActionListener(new java.awt.event.ActionListener() {\npublic void actionPerformed(java.awt.event.ActionEvent e) {\nJFileChooser fc = new JFileChooser();\nfc.addChoosableFileFilter(new SoundFilter());\nint returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(\"gui.AdministracionResorces.17\"));\nif (returnVal == JFileChooser.APPROVE_OPTION) {\nFile file = fc.getSelectedFile();\nString rutaGlobal = System.getProperty(\"user.dir\") + \"/\" + rutaDatos + \"sonidos/\" + file.getName();\nString rutaRelativa = rutaDatos + \"sonidos/\" + file.getName();\ntry {\nFileInputStream fis = new FileInputStream(file);\nFileOutputStream fos = new FileOutputStream(rutaGlobal, true);\nFileChannel canalFuente = fis.getChannel();\nFileChannel canalDestino = fos.getChannel();\ncanalFuente.transferTo(0, canalFuente.size(), canalDestino);\nfis.close();\nfos.close();\nimagen.setSonidoURL(rutaRelativa);\nSystem.out.println(rutaGlobal + \" \" + rutaRelativa);\nbuttonSonido.setIcon(new ImageIcon(getClass().getResource(\"/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png\")));\ngui.getAudio().reproduceAudio(imagen);\n} catch (IOException ex) {\nex.printStackTrace();\n}\n} else {\n}\n}\n});\n}\nreturn buttonSonido;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 627
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_6906419",
                        "content": "public static String encryptPassword(String password) {\ntry {\nMessageDigest digest = java.security.MessageDigest.getInstance(\"SHA1\");\ndigest.update(password.getBytes(\"UTF-8\"));\nbyte[] hash = digest.digest();\nStringBuffer buf = new StringBuffer();\nfor (int i = 0; i < hash.length; i++) {\nint halfbyte = (hash[i] >>> 4) & 0x0F;\nint two_halfs = 0;\ndo {\nif ((0 <= halfbyte) && (halfbyte <= 9)) {\nbuf.append((char) ('0' + halfbyte));\n} else {\nbuf.append((char) ('a' + (halfbyte - 10)));\n}\nhalfbyte = hash[i] & 0x0F;\n} while (two_halfs++ < 1);\n}\nreturn buf.toString();\n} catch (Exception e) {\n}\nreturn null;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 851
                },
                {
                        "id": "pretrain_java_data_7291942",
                        "content": "<filename>references/bcb_chosen_clones/selected#940734#7#29.java\npublic static String encryptPassword(String password) {\ntry {\nMessageDigest digest = java.security.MessageDigest.getInstance(\"SHA1\");\ndigest.update(password.getBytes(\"UTF-8\"));\nbyte[] hash = digest.digest();\nStringBuffer buf = new StringBuffer();\nfor (int i = 0; i < hash.length; i++) {\nint halfbyte = (hash[i] >>> 4) & 0x0F;\nint two_halfs = 0;\ndo {\nif ((0 <= halfbyte) && (halfbyte <= 9)) {\nbuf.append((char) ('0' + halfbyte));\n} else {\nbuf.append((char) ('a' + (halfbyte - 10)));\n}\nhalfbyte = hash[i] & 0x0F;\n} while (two_halfs++ < 1);\n}\nreturn buf.toString();\n} catch (Exception e) {\n}\nreturn null;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#940734#7#29.java",
                        "__cluster__": 851
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_5746160",
                        "content": "<filename>references/bcb_chosen_clones/selected#1967105#53#94.java\nprivate void forBundle(BundleManipulator manip) {\nByteArrayOutputStream bout = null;\ntry {\nbout = new ByteArrayOutputStream();\nZipOutputStream zout = new ZipOutputStream(bout);\nBundle bundle = getBundle();\nEnumeration<URL> files = bundle.findEntries(\"/\", \"*.vm\", false);\nif (files != null) {\nwhile (files.hasMoreElements()) {\nURL url = files.nextElement();\nString name = url.getFile();\nif (name.startsWith(\"/\")) {\nname = name.substring(1);\n}\nif (manip.includeEntry(name)) {\nzout.putNextEntry(new ZipEntry(name));\nIOUtils.copy(url.openStream(), zout);\n}\n}\n}\nmanip.finish(bundle, zout);\nManifest mf = new Manifest(bundle.getEntry(\"META-INF/MANIFEST.MF\").openStream());\nzout.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\nmf.write(zout);\nzout.close();\nFile tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, \".jar\");\nFileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\nif (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\npluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n} else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\npluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n}\npluginController.installPlugin(new JarPluginArtifact(tmpFile));\nServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\ntmpFile.delete();\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nIOUtils.closeQuietly(bout);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1967105#53#94.java",
                        "__cluster__": 159
                },
                {
                        "id": "test_bigclonebench_data_13657103",
                        "content": "private void forBundle(BundleManipulator manip) {\nByteArrayOutputStream bout = null;\ntry {\nbout = new ByteArrayOutputStream();\nZipOutputStream zout = new ZipOutputStream(bout);\nBundle bundle = getBundle();\nEnumeration<URL> files = bundle.findEntries(\"/\", \"*.vm\", false);\nif (files != null) {\nwhile (files.hasMoreElements()) {\nURL url = files.nextElement();\nString name = url.getFile();\nif (name.startsWith(\"/\")) {\nname = name.substring(1);\n}\nif (manip.includeEntry(name)) {\nzout.putNextEntry(new ZipEntry(name));\nIOUtils.copy(url.openStream(), zout);\n}\n}\n}\nmanip.finish(bundle, zout);\nManifest mf = new Manifest(bundle.getEntry(\"META-INF/MANIFEST.MF\").openStream());\nzout.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\nmf.write(zout);\nzout.close();\nFile tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, \".jar\");\nFileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\nif (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\npluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n} else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\npluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n}\npluginController.installPlugin(new JarPluginArtifact(tmpFile));\nServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\ntmpFile.delete();\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nIOUtils.closeQuietly(bout);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 159
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11005804",
                        "content": "public String kodetu(String testusoila) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\n} catch (NoSuchAlgorithmException e) {\nnew MezuLeiho(\"Ez da zifraketa algoritmoa aurkitu\", \"Ados\", \"Zifraketa Arazoa\", JOptionPane.ERROR_MESSAGE);\ne.printStackTrace();\n}\ntry {\nmd.update(testusoila.getBytes(\"UTF-8\"));\n} catch (UnsupportedEncodingException e) {\nnew MezuLeiho(\"Errorea kodetzerakoan\", \"Ados\", \"Kodeketa Errorea\", JOptionPane.ERROR_MESSAGE);\ne.printStackTrace();\n}\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 460
                },
                {
                        "id": "pretrain_java_data_7294072",
                        "content": "<filename>references/bcb_chosen_clones/selected#2251899#290#305.java\npublic String kodetu(String testusoila) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(testusoila.getBytes(\"UTF-8\"));\n} catch (NoSuchAlgorithmException e) {\nnew MezuLeiho(\"Ez da zifraketa algoritmoa aurkitu\", \"Ados\", \"<NAME>\", JOptionPane.ERROR_MESSAGE);\ne.printStackTrace();\n} catch (UnsupportedEncodingException e) {\nnew MezuLeiho(\"Errorea kodetzerakoan\", \"Ados\", \"Kodeketa Errorea\", JOptionPane.ERROR_MESSAGE);\ne.printStackTrace();\n}\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2251899#290#305.java",
                        "__cluster__": 460
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_19739421",
                        "content": "public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {\ntry {\nCmdLineParser cmdLineParser = new CmdLineParser();\nOption formatOption = cmdLineParser.addStringOption('f', \"format\");\nOption outputEncodingOption = cmdLineParser.addStringOption('c', \"outcharset\");\nOption inputEncodingOption = cmdLineParser.addStringOption('i', \"incharset\");\ncmdLineParser.parse(args);\nString format = (String) cmdLineParser.getOptionValue(formatOption);\nString outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);\nif (outputEncoding == null || outputEncoding.trim().equals(\"\")) {\noutputEncoding = \"utf-8\";\nSystem.out.println(\"Defaulting to output charset utf-8 as argument -c is missing or not valid.\");\n}\nString inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);\nif (inputEncoding == null || outputEncoding.trim().equals(\"\")) {\ninputEncoding = \"utf-8\";\nSystem.out.println(\"Defaulting to input charset utf-8 as argument -i is missing or not valid.\");\n}\nString[] remainingArgs = cmdLineParser.getRemainingArgs();\nif (remainingArgs.length != 2) {\nprintUsage(\"Input and output file are not specified correctly. \");\n}\nFile inputFile = new File(remainingArgs[0]);\nif (!inputFile.exists()) {\nprintUsage(\"Input file \" + remainingArgs[0] + \" does not exist. \");\n}\nif (format == null || format.trim().equals(\"\")) {\nformat = (String) FileUtil.cutExtension(inputFile.getName()).getValue();\n}\nFile outputFile = new File(remainingArgs[1]);\nif (!outputFile.exists()) {\noutputFile.createNewFile();\n}\nSystem.out.println(\"format detected: \" + format);\nif (\"html\".equals(format)) {\nReader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));\nOutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);\nchar[] buffer = new char[1024];\nint read;\ndo {\nread = reader.read(buffer);\nif (read > 0) {\nout.write(buffer, 0, read);\n}\n} while (read != -1);\nout.flush();\nout.close();\n} else {\nprintUsage(\"Format not specified via argument -f. Also guessing for the extension of input file \" + inputFile.getName() + \" failed\");\n}\n} catch (Exception ex) {\nex.printStackTrace();\nprintUsage(ex.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 809
                },
                {
                        "id": "pretrain_java_data_5724052",
                        "content": "public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {\ntry {\nCmdLineParser cmdLineParser = new CmdLineParser();\nOption formatOption = cmdLineParser.addStringOption('f', \"format\");\nOption encodingOption = cmdLineParser.addStringOption('c', \"charset\");\ncmdLineParser.parse(args);\nString format = (String) cmdLineParser.getOptionValue(formatOption);\nString encoding = (String) cmdLineParser.getOptionValue(encodingOption);\nif (encoding == null || encoding.trim().equals(\"\")) {\nencoding = \"utf-8\";\nSystem.out.println(\"Defaulting to output charset utf-8 as argument -c is missing or not valid.\");\n}\nString[] remainingArgs = cmdLineParser.getRemainingArgs();\nif (remainingArgs.length != 2) {\nprintUsage(\"Input and output file are not specified correctly. \");\n}\nFile inputFile = new File(remainingArgs[0]);\nif (!inputFile.exists()) {\nprintUsage(\"Input file \" + remainingArgs[0] + \" does not exist. \");\n}\nFile outputFile = new File(remainingArgs[1]);\nif (!outputFile.exists()) {\noutputFile.createNewFile();\n}\nif (format == null || format.trim().equals(\"\")) {\nformat = (String) FileUtil.cutExtension(outputFile.getName()).getValue();\n}\nif (\"tex\".equals(format)) {\nReader reader = new LatexEncoderReader(new FileReader(inputFile));\nOutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), encoding);\nchar[] buffer = new char[1024];\nint read;\ndo {\nread = reader.read(buffer);\nif (read > 0) {\nout.write(buffer, 0, read);\n}\n} while (read != -1);\nout.flush();\nout.close();\n} else {\nprintUsage(\"Format not specified via argument -f. Also guessing for the extension of output file \" + outputFile.getName() + \" failed\");\n}\n} catch (Exception ex) {\nex.printStackTrace();\nprintUsage(ex.getMessage());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2547191#136#183.java",
                        "__cluster__": 809
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_4562786",
                        "content": "private String GetResponse(URL url) {\nString content = null;\ntry {\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setDoOutput(false);\nconn.setRequestMethod(\"GET\");\nif (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {\nBufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nString line;\nwhile ((line = br.readLine()) != null) content += line;\n} else {\n}\n} catch (MalformedURLException e) {\ne.getStackTrace();\n} catch (IOException e) {\ne.getStackTrace();\n}\nreturn content;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 432
                },
                {
                        "id": "pretrain_java_data_7321895",
                        "content": "<filename>references/bcb_chosen_clones/selected#2184855#143#161.java\nprivate String GetResponse(URL url) {\nString content = null;\ntry {\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setDoOutput(false);\nconn.setRequestMethod(\"GET\");\nif (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {\nBufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nString line;\nwhile ((line = br.readLine()) != null) content += line;\n} else {\n}\n} catch (MalformedURLException e) {\ne.getStackTrace();\n} catch (IOException e) {\ne.getStackTrace();\n}\nreturn content;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2184855#143#161.java",
                        "__cluster__": 432
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_4618237",
                        "content": "public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\nFileChannel inChannel = new FileInputStream(fin).getChannel();\nFileChannel outChannel = new FileOutputStream(fout, append).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} finally {\nif (inChannel != null) try {\ninChannel.close();\n} catch (IOException ex) {\n}\nif (outChannel != null) try {\noutChannel.close();\n} catch (IOException ex) {\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 218
                },
                {
                        "id": "pretrain_java_data_8804443",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\nFileChannel inChannel = new FileInputStream(fin).getChannel();\nFileChannel outChannel = new FileOutputStream(fout, append).getChannel();\ntry {\ninChannel.transferTo(0, inChannel.size(), outChannel);\n} finally {\nif (inChannel != null) try {\ninChannel.close();\n} catch (IOException ex) {\n}\nif (outChannel != null) try {\noutChannel.close();\n} catch (IOException ex) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2484135#233#248.java",
                        "__cluster__": 218
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_8842176",
                        "content": "public void saveDraft(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\ntry {\nif (charset == null) {\ncharset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n}\nif ((body == null) || body.trim().equals(\"\")) {\nbody = \" \";\n}\nEmail email = null;\nif (isHtml) {\nemail = new HtmlEmail();\n} else {\nemail = new MultiPartEmail();\n}\nemail.setCharset(charset);\nUsers user = getUser(hsession, repositoryName);\nIdentity identity = getIdentity(hsession, ideIdint, user);\nInternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\nInternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\nInternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\nInternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\nInternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\nInternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\nif (_from != null) {\nemail.setFrom(_from.getAddress(), _from.getPersonal());\n}\nif (_returnPath != null) {\nemail.addHeader(\"Return-Path\", _returnPath.getAddress());\nemail.addHeader(\"Errors-To\", _returnPath.getAddress());\nemail.addHeader(\"X-Errors-To\", _returnPath.getAddress());\n}\nif (_replyTo != null) {\nemail.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n}\nif ((_to != null) && (_to.length > 0)) {\nHashSet aux = new HashSet(_to.length);\nCollections.addAll(aux, _to);\nemail.setTo(aux);\n}\nif ((_cc != null) && (_cc.length > 0)) {\nHashSet aux = new HashSet(_cc.length);\nCollections.addAll(aux, _cc);\nemail.setCc(aux);\n}\nif ((_bcc != null) && (_bcc.length > 0)) {\nHashSet aux = new HashSet(_bcc.length);\nCollections.addAll(aux, _bcc);\nemail.setBcc(aux);\n}\nemail.setSubject(subject);\nDate now = new Date();\nemail.setSentDate(now);\nFile dir = new File(System.getProperty(\"user.home\") + File.separator + \"tmp\");\nif (!dir.exists()) {\ndir.mkdir();\n}\nif ((attachments != null) && (attachments.size() > 0)) {\nfor (int i = 0; i < attachments.size(); i++) {\nByteArrayInputStream bais = null;\nFileOutputStream fos = null;\ntry {\nMailPartObj obj = (MailPartObj) attachments.get(i);\nFile file = new File(dir, obj.getName());\nbais = new ByteArrayInputStream(obj.getAttachent());\nfos = new FileOutputStream(file);\nIOUtils.copy(bais, fos);\nEmailAttachment attachment = new EmailAttachment();\nattachment.setPath(file.getPath());\nattachment.setDisposition(EmailAttachment.ATTACHMENT);\nattachment.setDescription(\"File Attachment: \" + file.getName());\nattachment.setName(file.getName());\nif (email instanceof MultiPartEmail) {\n((MultiPartEmail) email).attach(attachment);\n}\n} catch (Exception ex) {\n} finally {\nIOUtils.closeQuietly(bais);\nIOUtils.closeQuietly(fos);\n}\n}\n}\nif (headers != null) {\nHeader xheader;\nEnumeration xe = headers.getAllHeaders();\nfor (; xe.hasMoreElements(); ) {\nxheader = (Header) xe.nextElement();\nif (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\nemail.addHeader(xheader.getName(), xheader.getValue());\n} else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\nemail.addHeader(xheader.getName(), xheader.getValue());\n}\n}\n}\nif (priority != null) {\nif (priority.equals(\"high\")) {\nemail.addHeader(\"Importance\", priority);\nemail.addHeader(\"X-priority\", \"1\");\n} else if (priority.equals(\"low\")) {\nemail.addHeader(\"Importance\", priority);\nemail.addHeader(\"X-priority\", \"5\");\n}\n}\nif (email instanceof HtmlEmail) {\n((HtmlEmail) email).setHtmlMsg(body);\n} else {\nemail.setMsg(body);\n}\nemail.setMailSession(session);\nemail.buildMimeMessage();\nMimeMessage mime = email.getMimeMessage();\nint size = MessageUtilities.getMessageSize(mime);\nif (!controlQuota(hsession, user, size)) {\nthrow new MailException(\"ErrorMessages.mail.quota.exceded\");\n}\nmessageable.storeDraftMessage(getId(), mime, user);\n} catch (MailException e) {\nthrow e;\n} catch (Exception e) {\nthrow new MailException(e);\n} catch (java.lang.OutOfMemoryError ex) {\nSystem.gc();\nthrow new MailException(ex);\n} catch (Throwable e) {\nthrow new MailException(e);\n} finally {\nGeneralOperations.closeHibernateSession(hsession);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2521000#240#367.java",
                        "__cluster__": 311
                },
                {
                        "id": "test_bigclonebench_data_22441244",
                        "content": "public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\ntry {\nif (charset == null) {\ncharset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n}\nif ((body == null) || body.trim().equals(\"\")) {\nbody = \" \";\n}\nEmail email = null;\nif (isHtml) {\nemail = new HtmlEmail();\n} else {\nemail = new MultiPartEmail();\n}\nemail.setCharset(charset);\nUsers user = getUser(hsession, repositoryName);\nIdentity identity = getIdentity(hsession, ideIdint, user);\nInternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\nInternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\nInternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\nInternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\nInternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\nInternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\nif (_from != null) {\nemail.setFrom(_from.getAddress(), _from.getPersonal());\n}\nif (_returnPath != null) {\nemail.addHeader(\"Return-Path\", _returnPath.getAddress());\nemail.addHeader(\"Errors-To\", _returnPath.getAddress());\nemail.addHeader(\"X-Errors-To\", _returnPath.getAddress());\n}\nif (_replyTo != null) {\nemail.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n}\nif ((_to != null) && (_to.length > 0)) {\nHashSet aux = new HashSet(_to.length);\nCollections.addAll(aux, _to);\nemail.setTo(aux);\n}\nif ((_cc != null) && (_cc.length > 0)) {\nHashSet aux = new HashSet(_cc.length);\nCollections.addAll(aux, _cc);\nemail.setCc(aux);\n}\nif ((_bcc != null) && (_bcc.length > 0)) {\nHashSet aux = new HashSet(_bcc.length);\nCollections.addAll(aux, _bcc);\nemail.setBcc(aux);\n}\nemail.setSubject(subject);\nDate now = new Date();\nemail.setSentDate(now);\nFile dir = new File(System.getProperty(\"user.home\") + File.separator + \"tmp\");\nif (!dir.exists()) {\ndir.mkdir();\n}\nif ((attachments != null) && (attachments.size() > 0)) {\nfor (int i = 0; i < attachments.size(); i++) {\nByteArrayInputStream bais = null;\nFileOutputStream fos = null;\ntry {\nMailPartObj obj = (MailPartObj) attachments.get(i);\nFile file = new File(dir, obj.getName());\nbais = new ByteArrayInputStream(obj.getAttachent());\nfos = new FileOutputStream(file);\nIOUtils.copy(bais, fos);\nEmailAttachment attachment = new EmailAttachment();\nattachment.setPath(file.getPath());\nattachment.setDisposition(EmailAttachment.ATTACHMENT);\nattachment.setDescription(\"File Attachment: \" + file.getName());\nattachment.setName(file.getName());\nif (email instanceof MultiPartEmail) {\n((MultiPartEmail) email).attach(attachment);\n}\n} catch (Exception ex) {\n} finally {\nIOUtils.closeQuietly(bais);\nIOUtils.closeQuietly(fos);\n}\n}\n}\nString mid = getId();\nif (headers != null) {\nHeader xheader;\nEnumeration xe = headers.getAllHeaders();\nfor (; xe.hasMoreElements(); ) {\nxheader = (Header) xe.nextElement();\nif (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\nemail.addHeader(xheader.getName(), xheader.getValue());\n} else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\nemail.addHeader(xheader.getName(), xheader.getValue());\n}\n}\n} else {\nemail.addHeader(RFC2822Headers.IN_REPLY_TO, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\nemail.addHeader(RFC2822Headers.REFERENCES, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n}\nif (priority != null) {\nif (priority.equals(\"high\")) {\nemail.addHeader(\"Importance\", priority);\nemail.addHeader(\"X-priority\", \"1\");\n} else if (priority.equals(\"low\")) {\nemail.addHeader(\"Importance\", priority);\nemail.addHeader(\"X-priority\", \"5\");\n}\n}\nif (email instanceof HtmlEmail) {\n((HtmlEmail) email).setHtmlMsg(body);\n} else {\nemail.setMsg(body);\n}\nemail.setMailSession(session);\nemail.buildMimeMessage();\nMimeMessage mime = email.getMimeMessage();\nint size = MessageUtilities.getMessageSize(mime);\nif (!controlQuota(hsession, user, size)) {\nthrow new MailException(\"ErrorMessages.mail.quota.exceded\");\n}\nmessageable.saveSentMessage(mid, mime, user);\nThread thread = new Thread(new SendMessageThread(email));\nthread.start();\n} catch (MailException e) {\nthrow e;\n} catch (Exception e) {\nthrow new MailException(e);\n} catch (java.lang.OutOfMemoryError ex) {\nSystem.gc();\nthrow new MailException(ex);\n} catch (Throwable e) {\nthrow new MailException(e);\n} finally {\nGeneralOperations.closeHibernateSession(hsession);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 311
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_15409512",
                        "content": "public static void main(String args[]) throws IOException {\nString inFileName = args[0];\nString outFileName = args[1];\nlong position = 0L;\ntry {\nposition = Long.parseLong(args[2]);\n} catch (NumberFormatException nfex1) {\ntry {\nposition = Long.parseLong(args[2], 16);\n} catch (NumberFormatException nfex2) {\nSystem.err.println(\"Wrong offset\");\nSystem.exit(0);\n}\n}\nif (position < 1L) {\nSystem.err.println(\"Wrong offset. Must be more than 0\");\nSystem.exit(0);\n}\nSystem.out.println(\"Copying  input: \" + inFileName);\nSystem.out.println(\"        output: \" + outFileName);\nSystem.out.println(\"          from: \" + position);\nBufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\nBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\nbis.skip(position);\nfor (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;\nbis.close();\nbos.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 641
                },
                {
                        "id": "pretrain_java_data_7375475",
                        "content": "<filename>references/bcb_chosen_clones/selected#2169705#10#37.java<gh_stars>10-100\npublic static void main(String args[]) throws IOException {\nString inFileName = args[0];\nString outFileName = args[1];\nlong position = 0L;\ntry {\nposition = Long.parseLong(args[2]);\n} catch (NumberFormatException nfex1) {\ntry {\nposition = Long.parseLong(args[2], 16);\n} catch (NumberFormatException nfex2) {\nSystem.err.println(\"Wrong offset\");\nSystem.exit(0);\n}\n}\nif (position < 1L) {\nSystem.err.println(\"Wrong offset. Must be more than 0\");\nSystem.exit(0);\n}\nSystem.out.println(\"Copying  input: \" + inFileName);\nSystem.out.println(\"        output: \" + outFileName);\nSystem.out.println(\"          from: \" + position);\nBufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\nBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\nbis.skip(position);\nfor (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;\nbis.close();\nbos.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2169705#10#37.java",
                        "__cluster__": 641
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_8870577",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#384059#592#609.java\npublic void executeUpdateTransaction(List queries) throws SQLException {\nassert connection != null;\nboolean autoCommit = connection.getAutoCommit();\nconnection.setAutoCommit(false);\ntry {\nIterator iterator = queries.iterator();\nwhile (iterator.hasNext()) {\nString query = (String) iterator.next();\nStatement statement = connection.createStatement();\nstatement.executeUpdate(query);\n}\nconnection.commit();\nconnection.setAutoCommit(autoCommit);\n} catch (SQLException e) {\nconnection.rollback();\nthrow new SQLException(e.getMessage());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#384059#592#609.java",
                        "__cluster__": 655
                },
                {
                        "id": "test_bigclonebench_data_13233761",
                        "content": "public void executeUpdateTransaction(List queries) throws SQLException {\nassert connection != null;\nboolean autoCommit = connection.getAutoCommit();\nconnection.setAutoCommit(false);\ntry {\nIterator iterator = queries.iterator();\nwhile (iterator.hasNext()) {\nString query = (String) iterator.next();\nStatement statement = connection.createStatement();\nstatement.executeUpdate(query);\n}\nconnection.commit();\nconnection.setAutoCommit(autoCommit);\n} catch (SQLException e) {\nconnection.rollback();\nthrow new SQLException(e.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 655
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10427321",
                        "content": "public String insertSmsInf(Sms sms) throws Exception {\nString smsId = null;\nConnection conn = null;\nPreparedStatement pstmt = null;\nStringBuffer buffer = new StringBuffer();\ntry {\nbuffer.append(\"INSERT INTO COMTNSMS\\n\");\nbuffer.append(\"  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\\n\");\nbuffer.append(\"   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\\n\");\nbuffer.append(\"VALUES\\n\");\nbuffer.append(\"(?, ?, ?, ?, SYSDATE())\");\nconn = SmsBasicDBUtil.getConnection();\nconn.setAutoCommit(false);\nsmsId = getNextId(conn);\npstmt = conn.prepareStatement(buffer.toString());\nint index = 0;\npstmt.setString(++index, smsId);\npstmt.setString(++index, sms.getTrnsmitTelno());\npstmt.setString(++index, sms.getTrnsmitCn());\npstmt.setString(++index, sms.getFrstRegisterId());\npstmt.executeUpdate();\nconn.commit();\nreturn smsId;\n} catch (Exception ex) {\nif (conn != null) {\nconn.rollback();\n}\nthrow ex;\n} finally {\nSmsBasicDBUtil.close(null, pstmt, conn);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#638180#137#168.java",
                        "__cluster__": 7
                },
                {
                        "id": "test_bigclonebench_data_4168534",
                        "content": "public String insertSmsInf(Sms sms) throws Exception {\nString smsId = null;\nConnection conn = null;\nPreparedStatement pstmt = null;\nStringBuffer buffer = new StringBuffer();\ntry {\nbuffer.append(\"INSERT INTO COMTNSMS\\n\");\nbuffer.append(\"  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\\n\");\nbuffer.append(\"   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\\n\");\nbuffer.append(\"VALUES\\n\");\nbuffer.append(\"(?, ?, ?, ?, SYSDATE())\");\nconn = SmsBasicDBUtil.getConnection();\nconn.setAutoCommit(false);\nsmsId = getNextId(conn);\npstmt = conn.prepareStatement(buffer.toString());\nint index = 0;\npstmt.setString(++index, smsId);\npstmt.setString(++index, sms.getTrnsmitTelno());\npstmt.setString(++index, sms.getTrnsmitCn());\npstmt.setString(++index, sms.getFrstRegisterId());\npstmt.executeUpdate();\nconn.commit();\nreturn smsId;\n} catch (Exception ex) {\nif (conn != null) {\nconn.rollback();\n}\nthrow ex;\n} finally {\nSmsBasicDBUtil.close(null, pstmt, conn);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 7
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12151664",
                        "content": "protected void doUpload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nHttpSession reqSession = request.getSession();\nArrayList<File> uploadFiles = new ArrayList<File>();\nLOG.info(\"UploadServlet Upload request received\");\nif (ServletFileUpload.isMultipartContent(request)) {\nLOG.debug(\"UploadServlet Received a multipart request.\");\n} else {\nLOG.debug(\"UploadServlet Received a non-multipart request.\");\n}\nString tempDirName = UUID.randomUUID().toString();\nFile tempUploadDir = new File(adapter.getRootPath() + File.separator + \"temp\" + File.separator + tempDirName);\ntempUploadDir.getParentFile().mkdir();\nwhile (tempUploadDir.exists()) {\ntempDirName = UUID.randomUUID().toString();\ntempUploadDir = new File(adapter.getRootPath() + File.separator + \"temp\" + File.separator + tempDirName);\n}\ntempUploadDir.mkdir();\nFile attachmentDir = (File) (reqSession.getAttribute(\"up2p:attachdir\"));\nif (attachmentDir != null) {\nLOG.info(\"UploadServlet: Copying provided attachment to upload dir from: \" + attachmentDir.getAbsolutePath());\ntempUploadDir.delete();\nattachmentDir.renameTo(tempUploadDir);\nreqSession.removeAttribute(\"up2p:attachdir\");\n}\nLOG.info(\"UploadServlet: Using temporary directory: \" + tempUploadDir.getPath());\nPairList paramMap = null;\nif (ServletFileUpload.isMultipartContent(request)) {\nparamMap = getMultipartParameters(request, uploadHandler, LOG, tempUploadDir.getPath());\nif (paramMap.size() == 0) {\nLOG.debug(\"UploadServlet Parsed multipart request and \" + \"found no parameters. Parsing as regular\" + \" request instead.\");\nparamMap = copyParameters(request);\nLOG.debug(\"UploadServlet Parsed as regular request and found \" + paramMap.size() + \" parameters.\");\n}\n} else {\nparamMap = copyParameters(request);\n}\nString communityId = getCurrentCommunityId(request.getSession());\nString newcommunity = paramMap.getValue(HttpParams.UP2P_COMMUNITY);\nLOG.debug(\"UploadServlet: Got active community: \" + newcommunity);\nif (newcommunity != null) {\ncommunityId = newcommunity;\nLOG.debug(\"switching to community\" + communityId);\n}\nif (communityId == null || communityId.length() == 0) {\nLOG.warn(\"UploadServlet Current community ID is missing from\" + \"the user session.\");\nwriteError(request, response, \"The current community is unknown.\" + \" Please select a community before performing \" + \"any actions.\", paramMap);\nfor (File f : tempUploadDir.listFiles()) {\nf.delete();\n}\ntempUploadDir.delete();\nreturn;\n}\nLOG.info(\"UploadServlet Uploading to community \" + communityId + \".\");\nuploadFiles.clear();\nIterator<String> uploadedFileIter = paramMap.getValues(HttpParams.UP2P_FILENAME);\nString filename = \"\";\ntry {\nif (uploadedFileIter.hasNext()) {\nfilename = uploadedFileIter.next();\n} else {\nthrow new IOException(\"UploadServlet: No up2p:filename parameters were found.\");\n}\nif (filename.startsWith(\"file:\")) filename = filename.substring(5);\nif (filename.length() == 0) {\nthrow new IOException(\"UploadServlet: An empty up2p:filename parameter was submitted.\");\n}\nFile resourceFile = null;\nresourceFile = new File(adapter.getStorageDirectory(communityId), filename);\nFile tempResFile = new File(tempUploadDir, filename);\nif (!tempResFile.exists() && !resourceFile.exists()) {\nthrow new IOException(\"UploadServlet: The uploaded resource could not be found.\");\n}\nif ((tempResFile.exists() && resourceFile.exists()) || (tempResFile.exists() && !resourceFile.exists())) {\nresourceFile = FileUtil.createUniqueFile(resourceFile);\nLOG.info(\"UploadServlet: Direct upload, copying resource file.\\n\\tOriginal: \" + tempResFile.getPath() + \"\\n\\tNew: \" + resourceFile.getPath());\nresourceFile.getParentFile().mkdir();\nFileOutputStream resourceCopyStream = new FileOutputStream(resourceFile);\nFileUtil.writeFileToStream(resourceCopyStream, tempResFile, true);\nfilename = resourceFile.getName();\n}\nLOG.info(\"UploadServlet: resource file name: \" + filename);\nuploadFiles.add(resourceFile);\n} catch (IOException e) {\nLOG.error(\"UploadServlet: \" + e.getMessage());\nwriteError(request, response, e.getMessage(), paramMap);\nreturn;\n}\nString editResourceId = paramMap.getValue(HttpParams.UP2P_EDIT_RESOURCE);\nif (editResourceId != null && editResourceId.length() > 0) {\nLOG.debug(\"UploadServlet: Got edit resource: \" + editResourceId);\nFile editAttach = new File(adapter.getAttachmentStorageDirectory(communityId, editResourceId));\nif (editAttach.exists() && editAttach.isDirectory()) {\nLOG.debug(\"UploadServlet: Copying additional attachments from: \" + editAttach.getAbsolutePath());\nfor (File oldFile : editAttach.listFiles()) {\nFile newFile = new File(tempUploadDir, oldFile.getName());\nif (!newFile.exists()) {\nLOG.debug(\"UploadServlet: Copying attachment: \" + oldFile.getAbsolutePath() + \" to \" + newFile.getAbsolutePath());\nFileOutputStream attachCopyStream = new FileOutputStream(newFile);\nFileUtil.writeFileToStream(attachCopyStream, oldFile, true);\n} else {\nLOG.debug(\"UploadServlet: Attachment \" + newFile.getName() + \" explicitly replaced in new upload.\");\n}\n}\n}\n}\nString batchUploadString = paramMap.getValue(HttpParams.UP2P_BATCH);\nboolean batchUpload = batchUploadString != null && batchUploadString.length() > 0;\nif (batchUpload) {\nLOG.info(\"UploadSerlvet Recieved batch upload request.\");\nFile batchFile = new File(adapter.getStorageDirectory(communityId), uploadFiles.get(0).getName());\nuploadFiles.clear();\nLOG.debug(\"UploadServlet resource file stored at: \" + batchFile.getPath());\nXMLReader reader = TransformerHelper.getXMLReader();\nreader.setContentHandler(new BatchCopyHandler(communityId, uploadFiles));\ntry {\nFileInputStream batchInput = new FileInputStream(batchFile);\nreader.parse(new InputSource(batchInput));\nbatchInput.close();\n} catch (Exception e) {\nLOG.error(\"UploadServlet: Error parsing batch upload file.\");\nLOG.error(\"UploadServlet: \" + e.getMessage());\nwriteError(request, response, \"Uploaded content was not a valid batch resource file.\", paramMap);\nreturn;\n}\nbatchFile.delete();\nadapter.addNotification(\"Batch file succesfully processed into \" + uploadFiles.size() + \" resources.\");\n}\nboolean pushUpload = paramMap.getValue(HttpParams.UP2P_PUSH) != null && paramMap.getValue(HttpParams.UP2P_PUSH).length() > 0;\nString id = \"\";\nboolean duplicateResource = false;\nint uploadCount = 0;\nfor (int i = 0; i < uploadFiles.size(); i++) {\nLOG.info(\"UploadServlet Publishing resource to WebAdapter: \" + uploadFiles.get(i).getName());\ntry {\nid = adapter.publish(communityId, new File(uploadFiles.get(i).getName()), tempUploadDir);\nuploadFiles.remove(i);\ni--;\nuploadCount++;\nLOG.info(\"UploadServlet Resource published with id: \" + id);\n} catch (IOException e) {\nLOG.warn(\"UploadServlet IO Error occured in reading the uploaded file: \" + e.getMessage(), e);\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nwriteError(request, response, \"An error occured in reading the uploaded file: \" + e.getMessage(), paramMap);\nreturn;\n} catch (SAXParseException e) {\nLOG.warn(\"UploadServlet SAX Parse Error occured in uploaded resource: \" + e.getMessage());\nString errMsg = \"Invalid XML in the uploaded resource.<br/>\" + e.getMessage() + \"<br/><br/>File location: \" + uploadFiles.get(i).getAbsolutePath() + \"<br/>Line: \" + e.getLineNumber() + \" Column: \" + e.getColumnNumber();\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nwriteError(request, response, errMsg, paramMap);\nreturn;\n} catch (SAXException e) {\nLOG.warn(\"UploadServlet Invalid XML in uploaded resource: \" + e.getMessage());\nString errMsg = \"Invalid XML in uploaded resource<br/><i>\" + e.getMessage() + \"</i><br/>\" + \"File location: \" + uploadFiles.get(i).getAbsolutePath();\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nwriteError(request, response, errMsg, paramMap);\nreturn;\n} catch (DuplicateResourceException e) {\nLOG.info(\"UploadServlet Duplicate Resource: \" + e.getResourceId() + \" Community: \" + e.getCommunityId());\nif (batchUpload) {\nif (!duplicateResource) {\nadapter.addNotification(\"Warning: Batch upload contained previously published \" + \" resources which have been discarded.\");\nduplicateResource = true;\n}\n} else {\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nString respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\nif (respondWithXml != null && respondWithXml.length() > 0) {\nwriteError(request, response, \"This resource is already shared with resource \" + \" id: \" + e.getResourceId(), paramMap);\nreturn;\n}\nString redirect = response.encodeURL(\"/overwrite.jsp?up2p:community=\" + e.getCommunityId() + \"&up2p:resource=\" + e.getResourceId());\nLOG.info(\"UploadServlet Redirecting to \" + redirect);\nRequestDispatcher rd = request.getRequestDispatcher(redirect);\nrd.forward(request, response);\nreturn;\n}\n} catch (NetworkAdapterException e) {\nLOG.info(\"UploadServlet Error in the Network Adapter for\" + \" community ID \" + communityId, e);\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nwriteError(request, response, \"Error in the Network Adapter for this community. <br/>\" + e.getMessage(), paramMap);\nreturn;\n} catch (ResourceNotFoundException e) {\nLOG.info(\"UploadServlet Error Resource not found \" + e);\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nwriteError(request, response, \"Error : <br/>\" + e.getMessage(), paramMap);\nreturn;\n}\n}\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nString ajaxRequest = paramMap.getValue(HttpParams.UP2P_XMLHTTP);\nString respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\nif (respondWithXml != null && respondWithXml.length() > 0) {\nresponse.setContentType(\"text/xml\");\nPrintWriter out = response.getWriter();\nout.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\nout.println(\"<upload success=\\\"true\\\" >\");\nout.println(\"<resid>\" + id + \"</resid>\");\nout.println(\"</upload>\");\n} else if (ajaxRequest != null && ajaxRequest.length() > 0) {\nLOG.debug(\"UploadServlet Recieved xmlHttp request, responding with XML\");\nresponse.setContentType(\"text/xml\");\nPrintWriter out = response.getWriter();\nout.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\nout.print(\"<resource id=\\\"\" + request.getParameter(HttpParams.UP2P_RESOURCE) + \"\\\" \");\nif (request.getParameter(HttpParams.UP2P_PEERID) != null) {\nout.print(\"peerid=\\\"\" + request.getParameter(HttpParams.UP2P_PEERID) + \"\\\" \");\n}\nout.println(\"/>\");\n} else if (batchUpload) {\nadapter.addNotification(uploadCount + \" resources were succesfully published.\");\nrequest.setAttribute(\"up2p.display.mode\", \"view\");\nString redirect = response.encodeURL(\"/view.jsp?up2p:community=\" + communityId);\nLOG.info(\"UploadServlet Redirecting to \" + redirect);\nRequestDispatcher rd = request.getRequestDispatcher(redirect);\nrd.forward(request, response);\n} else if (!pushUpload) {\nrequest.setAttribute(\"up2p.display.mode\", \"view\");\nString redirect = response.encodeURL(\"/view.jsp?up2p:resource=\" + id);\nLOG.info(\"UploadServlet Redirecting to \" + redirect);\nRequestDispatcher rd = request.getRequestDispatcher(redirect);\nrd.forward(request, response);\n}\nreturn;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1832697#109#332.java",
                        "__cluster__": 70
                },
                {
                        "id": "test_bigclonebench_data_18433984",
                        "content": "protected void doUpload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nHttpSession reqSession = request.getSession();\nArrayList<File> uploadFiles = new ArrayList<File>();\nLOG.info(\"UploadServlet Upload request received\");\nif (ServletFileUpload.isMultipartContent(request)) {\nLOG.debug(\"UploadServlet Received a multipart request.\");\n} else {\nLOG.debug(\"UploadServlet Received a non-multipart request.\");\n}\nString tempDirName = UUID.randomUUID().toString();\nFile tempUploadDir = new File(adapter.getRootPath() + File.separator + \"temp\" + File.separator + tempDirName);\ntempUploadDir.getParentFile().mkdir();\nwhile (tempUploadDir.exists()) {\ntempDirName = UUID.randomUUID().toString();\ntempUploadDir = new File(adapter.getRootPath() + File.separator + \"temp\" + File.separator + tempDirName);\n}\ntempUploadDir.mkdir();\nFile attachmentDir = (File) (reqSession.getAttribute(\"up2p:attachdir\"));\nif (attachmentDir != null) {\nLOG.info(\"UploadServlet: Copying provided attachment to upload dir from: \" + attachmentDir.getAbsolutePath());\ntempUploadDir.delete();\nattachmentDir.renameTo(tempUploadDir);\nreqSession.removeAttribute(\"up2p:attachdir\");\n}\nLOG.info(\"UploadServlet: Using temporary directory: \" + tempUploadDir.getPath());\nPairList paramMap = null;\nif (ServletFileUpload.isMultipartContent(request)) {\nparamMap = getMultipartParameters(request, uploadHandler, LOG, tempUploadDir.getPath());\nif (paramMap.size() == 0) {\nLOG.debug(\"UploadServlet Parsed multipart request and \" + \"found no parameters. Parsing as regular\" + \" request instead.\");\nparamMap = copyParameters(request);\nLOG.debug(\"UploadServlet Parsed as regular request and found \" + paramMap.size() + \" parameters.\");\n}\n} else {\nparamMap = copyParameters(request);\n}\nString communityId = getCurrentCommunityId(request.getSession());\nString newcommunity = paramMap.getValue(HttpParams.UP2P_COMMUNITY);\nLOG.debug(\"UploadServlet: Got active community: \" + newcommunity);\nif (newcommunity != null) {\ncommunityId = newcommunity;\nLOG.debug(\"switching to community\" + communityId);\n}\nif (communityId == null || communityId.length() == 0) {\nLOG.warn(\"UploadServlet Current community ID is missing from\" + \"the user session.\");\nwriteError(request, response, \"The current community is unknown.\" + \" Please select a community before performing \" + \"any actions.\", paramMap);\nfor (File f : tempUploadDir.listFiles()) {\nf.delete();\n}\ntempUploadDir.delete();\nreturn;\n}\nLOG.info(\"UploadServlet Uploading to community \" + communityId + \".\");\nuploadFiles.clear();\nIterator<String> uploadedFileIter = paramMap.getValues(HttpParams.UP2P_FILENAME);\nString filename = \"\";\ntry {\nif (uploadedFileIter.hasNext()) {\nfilename = uploadedFileIter.next();\n} else {\nthrow new IOException(\"UploadServlet: No up2p:filename parameters were found.\");\n}\nif (filename.startsWith(\"file:\")) filename = filename.substring(5);\nif (filename.length() == 0) {\nthrow new IOException(\"UploadServlet: An empty up2p:filename parameter was submitted.\");\n}\nFile resourceFile = null;\nresourceFile = new File(adapter.getStorageDirectory(communityId), filename);\nFile tempResFile = new File(tempUploadDir, filename);\nif (!tempResFile.exists() && !resourceFile.exists()) {\nthrow new IOException(\"UploadServlet: The uploaded resource could not be found.\");\n}\nif ((tempResFile.exists() && resourceFile.exists()) || (tempResFile.exists() && !resourceFile.exists())) {\nresourceFile = FileUtil.createUniqueFile(resourceFile);\nLOG.info(\"UploadServlet: Direct upload, copying resource file.\\n\\tOriginal: \" + tempResFile.getPath() + \"\\n\\tNew: \" + resourceFile.getPath());\nresourceFile.getParentFile().mkdir();\nFileOutputStream resourceCopyStream = new FileOutputStream(resourceFile);\nFileUtil.writeFileToStream(resourceCopyStream, tempResFile, true);\nfilename = resourceFile.getName();\n}\nLOG.info(\"UploadServlet: resource file name: \" + filename);\nuploadFiles.add(resourceFile);\n} catch (IOException e) {\nLOG.error(\"UploadServlet: \" + e.getMessage());\nwriteError(request, response, e.getMessage(), paramMap);\nreturn;\n}\nString editResourceId = paramMap.getValue(HttpParams.UP2P_EDIT_RESOURCE);\nif (editResourceId != null && editResourceId.length() > 0) {\nLOG.debug(\"UploadServlet: Got edit resource: \" + editResourceId);\nFile editAttach = new File(adapter.getAttachmentStorageDirectory(communityId, editResourceId));\nif (editAttach.exists() && editAttach.isDirectory()) {\nLOG.debug(\"UploadServlet: Copying additional attachments from: \" + editAttach.getAbsolutePath());\nfor (File oldFile : editAttach.listFiles()) {\nFile newFile = new File(tempUploadDir, oldFile.getName());\nif (!newFile.exists()) {\nLOG.debug(\"UploadServlet: Copying attachment: \" + oldFile.getAbsolutePath() + \" to \" + newFile.getAbsolutePath());\nFileOutputStream attachCopyStream = new FileOutputStream(newFile);\nFileUtil.writeFileToStream(attachCopyStream, oldFile, true);\n} else {\nLOG.debug(\"UploadServlet: Attachment \" + newFile.getName() + \" explicitly replaced in new upload.\");\n}\n}\n}\n}\nString batchUploadString = paramMap.getValue(HttpParams.UP2P_BATCH);\nboolean batchUpload = batchUploadString != null && batchUploadString.length() > 0;\nif (batchUpload) {\nLOG.info(\"UploadSerlvet Recieved batch upload request.\");\nFile batchFile = new File(adapter.getStorageDirectory(communityId), uploadFiles.get(0).getName());\nuploadFiles.clear();\nLOG.debug(\"UploadServlet resource file stored at: \" + batchFile.getPath());\nXMLReader reader = TransformerHelper.getXMLReader();\nreader.setContentHandler(new BatchCopyHandler(communityId, uploadFiles));\ntry {\nFileInputStream batchInput = new FileInputStream(batchFile);\nreader.parse(new InputSource(batchInput));\nbatchInput.close();\n} catch (Exception e) {\nLOG.error(\"UploadServlet: Error parsing batch upload file.\");\nLOG.error(\"UploadServlet: \" + e.getMessage());\nwriteError(request, response, \"Uploaded content was not a valid batch resource file.\", paramMap);\nreturn;\n}\nbatchFile.delete();\nadapter.addNotification(\"Batch file succesfully processed into \" + uploadFiles.size() + \" resources.\");\n}\nboolean pushUpload = paramMap.getValue(HttpParams.UP2P_PUSH) != null && paramMap.getValue(HttpParams.UP2P_PUSH).length() > 0;\nString id = \"\";\nboolean duplicateResource = false;\nint uploadCount = 0;\nfor (int i = 0; i < uploadFiles.size(); i++) {\nLOG.info(\"UploadServlet Publishing resource to WebAdapter: \" + uploadFiles.get(i).getName());\ntry {\nid = adapter.publish(communityId, new File(uploadFiles.get(i).getName()), tempUploadDir);\nuploadFiles.remove(i);\ni--;\nuploadCount++;\nLOG.info(\"UploadServlet Resource published with id: \" + id);\n} catch (IOException e) {\nLOG.warn(\"UploadServlet IO Error occured in reading the uploaded file: \" + e.getMessage(), e);\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nwriteError(request, response, \"An error occured in reading the uploaded file: \" + e.getMessage(), paramMap);\nreturn;\n} catch (SAXParseException e) {\nLOG.warn(\"UploadServlet SAX Parse Error occured in uploaded resource: \" + e.getMessage());\nString errMsg = \"Invalid XML in the uploaded resource.<br/>\" + e.getMessage() + \"<br/><br/>File location: \" + uploadFiles.get(i).getAbsolutePath() + \"<br/>Line: \" + e.getLineNumber() + \" Column: \" + e.getColumnNumber();\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nwriteError(request, response, errMsg, paramMap);\nreturn;\n} catch (SAXException e) {\nLOG.warn(\"UploadServlet Invalid XML in uploaded resource: \" + e.getMessage());\nString errMsg = \"Invalid XML in uploaded resource<br/><i>\" + e.getMessage() + \"</i><br/>\" + \"File location: \" + uploadFiles.get(i).getAbsolutePath();\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nwriteError(request, response, errMsg, paramMap);\nreturn;\n} catch (DuplicateResourceException e) {\nLOG.info(\"UploadServlet Duplicate Resource: \" + e.getResourceId() + \" Community: \" + e.getCommunityId());\nif (batchUpload) {\nif (!duplicateResource) {\nadapter.addNotification(\"Warning: Batch upload contained previously published \" + \" resources which have been discarded.\");\nduplicateResource = true;\n}\n} else {\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nString respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\nif (respondWithXml != null && respondWithXml.length() > 0) {\nwriteError(request, response, \"This resource is already shared with resource \" + \" id: \" + e.getResourceId(), paramMap);\nreturn;\n}\nString redirect = response.encodeURL(\"/overwrite.jsp?up2p:community=\" + e.getCommunityId() + \"&up2p:resource=\" + e.getResourceId());\nLOG.info(\"UploadServlet Redirecting to \" + redirect);\nRequestDispatcher rd = request.getRequestDispatcher(redirect);\nrd.forward(request, response);\nreturn;\n}\n} catch (NetworkAdapterException e) {\nLOG.info(\"UploadServlet Error in the Network Adapter for\" + \" community ID \" + communityId, e);\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nwriteError(request, response, \"Error in the Network Adapter for this community. <br/>\" + e.getMessage(), paramMap);\nreturn;\n} catch (ResourceNotFoundException e) {\nLOG.info(\"UploadServlet Error Resource not found \" + e);\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nwriteError(request, response, \"Error : <br/>\" + e.getMessage(), paramMap);\nreturn;\n}\n}\nuploadFilesCleanup(uploadFiles, tempUploadDir);\nString ajaxRequest = paramMap.getValue(HttpParams.UP2P_XMLHTTP);\nString respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\nif (respondWithXml != null && respondWithXml.length() > 0) {\nresponse.setContentType(\"text/xml\");\nPrintWriter out = response.getWriter();\nout.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\nout.println(\"<upload success=\\\"true\\\" >\");\nout.println(\"<resid>\" + id + \"</resid>\");\nout.println(\"</upload>\");\n} else if (ajaxRequest != null && ajaxRequest.length() > 0) {\nLOG.debug(\"UploadServlet Recieved xmlHttp request, responding with XML\");\nresponse.setContentType(\"text/xml\");\nPrintWriter out = response.getWriter();\nout.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\nout.print(\"<resource id=\\\"\" + request.getParameter(HttpParams.UP2P_RESOURCE) + \"\\\" \");\nif (request.getParameter(HttpParams.UP2P_PEERID) != null) {\nout.print(\"peerid=\\\"\" + request.getParameter(HttpParams.UP2P_PEERID) + \"\\\" \");\n}\nout.println(\"/>\");\n} else if (batchUpload) {\nadapter.addNotification(uploadCount + \" resources were succesfully published.\");\nrequest.setAttribute(\"up2p.display.mode\", \"view\");\nString redirect = response.encodeURL(\"/view.jsp?up2p:community=\" + communityId);\nLOG.info(\"UploadServlet Redirecting to \" + redirect);\nRequestDispatcher rd = request.getRequestDispatcher(redirect);\nrd.forward(request, response);\n} else if (!pushUpload) {\nrequest.setAttribute(\"up2p.display.mode\", \"view\");\nString redirect = response.encodeURL(\"/view.jsp?up2p:resource=\" + id);\nLOG.info(\"UploadServlet Redirecting to \" + redirect);\nRequestDispatcher rd = request.getRequestDispatcher(redirect);\nrd.forward(request, response);\n}\nreturn;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 70
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21438069",
                        "content": "public ProjectDeploymentConfiguration createNewProjectDeploymentConfig(int projectID, String name, String description) throws AdaptationException {\nProjectDeploymentConfiguration config = null;\nConnection connection = null;\nStatement statement = null;\nResultSet resultSet = null;\ntry {\nString query = \"INSERT INTO ProjectDeploymentConfigurations\" + \"(projectID, name, description) VALUES (\" + projectID + \", '\" + name + \"', '\" + description + \"')\";\nconnection = DriverManager.getConnection(CONN_STR);\nstatement = connection.createStatement();\nstatement.executeUpdate(query);\nquery = \"SELECT * FROM ProjectDeploymentConfigurations WHERE \" + \" projectID   = \" + projectID + \"  AND \" + \" name        = '\" + name + \"' AND \" + \" description = '\" + description + \"'\";\nresultSet = statement.executeQuery(query);\nif (!resultSet.next()) {\nconnection.rollback();\nString msg = \"Attempt to create \" + \"ProjectDeploymentConfiguration failed.\";\nlog.error(msg);\nthrow new AdaptationException(msg);\n}\nconfig = getProjectDeploymentConfiguration(resultSet);\nconnection.commit();\n} catch (SQLException ex) {\ntry {\nconnection.rollback();\n} catch (Exception e) {\n}\nString msg = \"SQLException in createNewProjectDeploymentConfig\";\nlog.error(msg, ex);\nthrow new AdaptationException(msg, ex);\n} finally {\ntry {\nresultSet.close();\n} catch (Exception ex) {\n}\ntry {\nstatement.close();\n} catch (Exception ex) {\n}\ntry {\nconnection.close();\n} catch (Exception ex) {\n}\n}\nreturn config;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 217
                },
                {
                        "id": "pretrain_java_data_12094960",
                        "content": "public ProjectDeploymentConfiguration createNewProjectDeploymentConfig(int projectID, String name, String description) throws AdaptationException {\nProjectDeploymentConfiguration config = null;\nConnection connection = null;\nStatement statement = null;\nResultSet resultSet = null;\ntry {\nString query = \"INSERT INTO ProjectDeploymentConfigurations\" + \"(projectID, name, description) VALUES (\" + projectID + \", '\" + name + \"', '\" + description + \"')\";\nconnection = DriverManager.getConnection(CONN_STR);\nstatement = connection.createStatement();\nstatement.executeUpdate(query);\nquery = \"SELECT * FROM ProjectDeploymentConfigurations WHERE \" + \" projectID   = \" + projectID + \"  AND \" + \" name        = '\" + name + \"' AND \" + \" description = '\" + description + \"'\";\nresultSet = statement.executeQuery(query);\nif (!resultSet.next()) {\nconnection.rollback();\nString msg = \"Attempt to create \" + \"ProjectDeploymentConfiguration failed.\";\nlog.error(msg);\nthrow new AdaptationException(msg);\n}\nconfig = getProjectDeploymentConfiguration(resultSet);\nconnection.commit();\n} catch (SQLException ex) {\ntry {\nconnection.rollback();\n} catch (Exception e) {\n}\nString msg = \"SQLException in createNewProjectDeploymentConfig\";\nlog.error(msg, ex);\nthrow new AdaptationException(msg, ex);\n} finally {\ntry {\nresultSet.close();\n} catch (Exception ex) {\n}\ntry {\nstatement.close();\n} catch (Exception ex) {\n}\ntry {\nconnection.close();\n} catch (Exception ex) {\n}\n}\nreturn config;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1062561#65#108.java",
                        "__cluster__": 217
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12020037",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void fileDownload(String fAddress, String destinationDir) {\nint slashIndex = fAddress.lastIndexOf('/');\nint periodIndex = fAddress.lastIndexOf('.');\nString fileName = fAddress.substring(slashIndex + 1);\nURL url;\ntry {\nurl = new URL(fAddress);\nURLConnection uc = url.openConnection();\nBufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));\nFile file = new File(destinationDir + \"/download.pdf\");\nFileOutputStream fos = new FileOutputStream(file);\nBufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));\nint inputLine;\nwhile ((inputLine = in.read()) != -1) out.write(inputLine);\nin.close();\n} catch (Exception ex) {\nLogger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2148009#43#61.java",
                        "__cluster__": 331
                },
                {
                        "id": "test_bigclonebench_data_7945594",
                        "content": "public static void fileDownload(String fAddress, String destinationDir) {\nint slashIndex = fAddress.lastIndexOf('/');\nint periodIndex = fAddress.lastIndexOf('.');\nString fileName = fAddress.substring(slashIndex + 1);\nURL url;\ntry {\nurl = new URL(fAddress);\nURLConnection uc = url.openConnection();\nBufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));\nFile file = new File(destinationDir + \"/download.pdf\");\nFileOutputStream fos = new FileOutputStream(file);\nBufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));\nint inputLine;\nwhile ((inputLine = in.read()) != -1) out.write(inputLine);\nin.close();\n} catch (Exception ex) {\nLogger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 331
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12010607",
                        "content": "private void createButtonCopyToClipboard() {\nbuttonCopyToClipboard = new Button(shell, SWT.PUSH);\nbuttonCopyToClipboard.setText(\"Co&py to Clipboard\");\nbuttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));\nbuttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n@Override\npublic void widgetSelected(final SelectionEvent event) {\nIOUtils.copyToClipboard(Version.getEnvironmentReport());\n}\n});\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2253896#338#349.java",
                        "__cluster__": 389
                },
                {
                        "id": "test_bigclonebench_data_17792212",
                        "content": "private void createButtonCopyToClipboard() {\nbuttonCopyToClipboard = new Button(shell, SWT.PUSH);\nbuttonCopyToClipboard.setText(\"Co&py to Clipboard\");\nbuttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));\nbuttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n@Override\npublic void widgetSelected(final SelectionEvent event) {\nIOUtils.copyToClipboard(Version.getEnvironmentReport());\n}\n});\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 389
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_10936821",
                        "content": "@Override\npublic void doIt() {\ntry {\nShared.createBackup(\"articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos\");\nif (mode.equals(\"FTP\")) {\nFTPClient client = new FTPClient();\nclient.connect(Constants.ftpHost);\nclient.login(Constants.ftpUser, Constants.ftpPass);\nclient.changeDirectory(Constants.ftpDir);\nFile ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);\nclient.download(\"GT99_A09.rar\", ff);\nclient.disconnect(false);\nShared.prepareMovements(ff);\n} else if (mode.equals(\"File\")) {\nJFileChooser jfc = new JFileChooser();\nFileFilter f = new ExtensionFileFilter(\"Traslados de Total Pos\", \"rar\");\njfc.setFileFilter(f);\nint selection = jfc.showOpenDialog(Shared.getMyMainWindows());\nif (selection == JFileChooser.APPROVE_OPTION) {\nShared.prepareMovements(jfc.getSelectedFile());\n} else {\nreturn;\n}\n}\nShared.updateMovements();\nif (Shared.isHadMovements()) {\nMessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, \"Fue cargado el nuevo inventario satisfactoriamente!\");\nmsg.show(Shared.getMyMainWindows());\n} else {\nMessageBox msg = new MessageBox(MessageBox.SGN_WARNING, \"La tienda no tuvo ningun movimiento asociado.\");\nmsg.show(Shared.getMyMainWindows());\n}\n} catch (Exception ex) {\nMessageBox msg = new MessageBox(MessageBox.SGN_DANGER, \"Ha ocurrido un error.\", ex);\nmsg.show(Shared.getMyMainWindows());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 456
                },
                {
                        "id": "pretrain_java_data_10577399",
                        "content": "@Override\npublic void doIt() {\ntry {\nShared.createBackup(\"articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos\");\nif (mode.equals(\"FTP\")) {\nFTPClient client = new FTPClient();\nclient.connect(Constants.ftpHost);\nclient.login(Constants.ftpUser, Constants.ftpPass);\nclient.changeDirectory(Constants.ftpDir);\nFile ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);\nclient.download(\"GT99_A09.rar\", ff);\nclient.disconnect(false);\nShared.prepareMovements(ff);\n} else if (mode.equals(\"File\")) {\nJFileChooser jfc = new JFileChooser();\nFileFilter f = new ExtensionFileFilter(\"Traslados de Total Pos\", \"rar\");\njfc.setFileFilter(f);\nint selection = jfc.showOpenDialog(Shared.getMyMainWindows());\nif (selection == JFileChooser.APPROVE_OPTION) {\nShared.prepareMovements(jfc.getSelectedFile());\n} else {\nreturn;\n}\n}\nShared.updateMovements();\nif (Shared.isHadMovements()) {\nMessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, \"Fue cargado el nuevo inventario satisfactoriamente!\");\nmsg.show(Shared.getMyMainWindows());\n} else {\nMessageBox msg = new MessageBox(MessageBox.SGN_WARNING, \"La tienda no tuvo ningun movimiento asociado.\");\nmsg.show(Shared.getMyMainWindows());\n}\n} catch (Exception ex) {\nMessageBox msg = new MessageBox(MessageBox.SGN_DANGER, \"Ha ocurrido un error.\", ex);\nmsg.show(Shared.getMyMainWindows());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1878461#34#70.java",
                        "__cluster__": 456
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5061606",
                        "content": "protected void createSettingsIfNecessary() throws IOException {\nOutputStream out = null;\ntry {\nfinal File fSettings = SettingsUtils.getSettingsFile();\nif (!fSettings.exists()) {\nfSettings.createNewFile();\nfinal Path src = new Path(\"mvn/settings.xml\");\nfinal InputStream in = FileLocator.openStream(getBundle(), src, false);\nout = new FileOutputStream(SettingsUtils.getSettings(), true);\nIOUtils.copy(in, out);\n} else {\nLogger.getLog().info(\"File settings.xml already exists at \" + fSettings);\n}\n} finally {\nif (out != null) {\nout.flush();\nout.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 608
                },
                {
                        "id": "pretrain_java_data_12008326",
                        "content": "protected void createSettingsIfNecessary() throws IOException {\nOutputStream out = null;\ntry {\nfinal File fSettings = SettingsUtils.getSettingsFile();\nif (!fSettings.exists()) {\nfSettings.createNewFile();\nfinal Path src = new Path(\"mvn/settings.xml\");\nfinal InputStream in = FileLocator.openStream(getBundle(), src, false);\nout = new FileOutputStream(SettingsUtils.getSettings(), true);\nIOUtils.copy(in, out);\n} else {\nLogger.getLog().info(\"File settings.xml already exists at \" + fSettings);\n}\n} finally {\nif (out != null) {\nout.flush();\nout.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1571276#314#333.java",
                        "__cluster__": 608
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10599710",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\nprotected String getFileContentAsString(String filePath, String encoding) throws IOException {\nURL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\nInputStream input = null;\nStringWriter sw = new StringWriter();\ntry {\nif (testURL != null) {\ninput = testURL.openStream();\n} else {\ninput = new FileInputStream(filePath);\n}\nIOUtils.copy(input, sw, encoding);\n} finally {\nif (input != null) {\ninput.close();\n}\n}\nreturn sw.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2709485#256#273.java",
                        "__cluster__": 43
                },
                {
                        "id": "test_bigclonebench_data_8216539",
                        "content": "protected String getFileContentAsString(String filePath, String encoding) throws IOException {\nURL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\nInputStream input = null;\nStringWriter sw = new StringWriter();\ntry {\nif (testURL != null) {\ninput = testURL.openStream();\n} else {\ninput = new FileInputStream(filePath);\n}\nIOUtils.copy(input, sw, encoding);\n} finally {\nif (input != null) {\ninput.close();\n}\n}\nreturn sw.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 43
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12119232",
                        "content": "<gh_stars>10-100\npublic static String encryptPassword(String plainPassword) {\nStringBuffer sb = new StringBuffer();\ntry {\nMessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.update(plainPassword.getBytes());\nbyte[] digestBytes = messageDigest.digest();\nString hex = null;\nfor (int i = 0; i < digestBytes.length; i++) {\nhex = Integer.toHexString(0xFF & digestBytes[i]);\nif (hex.length() < 2) sb.append(\"0\");\nsb.append(hex);\n}\n} catch (Exception ex) {\nSystem.out.println(ex.getMessage());\n}\nreturn new String(sb);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1217042#7#23.java",
                        "__cluster__": 230
                },
                {
                        "id": "test_bigclonebench_data_13565787",
                        "content": "public static String encryptPassword(String plainPassword) {\nStringBuffer sb = new StringBuffer();\ntry {\nMessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.update(plainPassword.getBytes());\nbyte[] digestBytes = messageDigest.digest();\nString hex = null;\nfor (int i = 0; i < digestBytes.length; i++) {\nhex = Integer.toHexString(0xFF & digestBytes[i]);\nif (hex.length() < 2) sb.append(\"0\");\nsb.append(hex);\n}\n} catch (Exception ex) {\nSystem.out.println(ex.getMessage());\n}\nreturn new String(sb);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 230
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10581167",
                        "content": "<filename>references/bcb_chosen_clones/selected#2094020#57#86.java\nsynchronized List<String> getDatasetsList(String surl) {\nif (datasetsList == null) {\ndatasetsList = new HashMap<String, List<String>>();\n}\nList<String> result = datasetsList.get(surl);\nif (result == null) {\nBufferedReader reader = null;\ntry {\nURL url = new URL(surl + \"?server=list\");\nreader = new BufferedReader(new InputStreamReader(url.openStream()));\nString s = reader.readLine();\nArrayList<String> list = new ArrayList<String>();\nwhile (s != null) {\nlist.add(s);\ns = reader.readLine();\n}\ndatasetsList.put(surl, list);\n} catch (IOException ex) {\nLogger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\nthrow new RuntimeException(ex);\n} finally {\ntry {\nreader.close();\n} catch (IOException ex) {\nLogger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\n}\n}\n}\nreturn datasetsList.get(surl);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2094020#57#86.java",
                        "__cluster__": 719
                },
                {
                        "id": "test_bigclonebench_data_13657527",
                        "content": "synchronized List<String> getDatasetsList(String surl) {\nif (datasetsList == null) {\ndatasetsList = new HashMap<String, List<String>>();\n}\nList<String> result = datasetsList.get(surl);\nif (result == null) {\nBufferedReader reader = null;\ntry {\nURL url = new URL(surl + \"?server=list\");\nreader = new BufferedReader(new InputStreamReader(url.openStream()));\nString s = reader.readLine();\nArrayList<String> list = new ArrayList<String>();\nwhile (s != null) {\nlist.add(s);\ns = reader.readLine();\n}\ndatasetsList.put(surl, list);\n} catch (IOException ex) {\nLogger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\nthrow new RuntimeException(ex);\n} finally {\ntry {\nreader.close();\n} catch (IOException ex) {\nLogger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\n}\n}\n}\nreturn datasetsList.get(surl);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 719
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14168494",
                        "content": "public static void copyFile(File dest, File src) throws IOException {\nFileChannel srcChannel = new FileInputStream(src).getChannel();\nFileChannel dstChannel = new FileOutputStream(dest).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 826
                },
                {
                        "id": "pretrain_java_data_10585138",
                        "content": "public static void copy(File src, File dst) throws IOException {\nFileChannel srcChannel = new FileInputStream(src).getChannel();\nFileChannel dstChannel = new FileOutputStream(dst).getChannel();\ntry {\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n} finally {\ntry {\nsrcChannel.close();\n} finally {\ndstChannel.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#130458#22#34.java",
                        "__cluster__": 826
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_13614180",
                        "content": "public static void main(String[] args) {\nSystem.out.println(\"Chapter 16: example SignedPdf\");\nSystem.out.println(\"-> Creates a signed PDF;\");\nSystem.out.println(\"-> jars needed: iText.jar\");\nSystem.out.println(\"-> files generated in /results subdirectory:\");\nSystem.out.println(\"   Resource needed: .keystore\");\nSystem.out.println(\"-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,\");\nSystem.out.println(\"   corrupted_message.pdf, signed_message_invisible.pdf,\");\nSystem.out.println(\"   double_signed_message.pdf, revision_1.pdf and revision_2.pdf\");\ncreatePdf();\nPdfReader reader;\ntry {\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\nks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\nPrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\nCertificate[] chain = ks.getCertificateChain(\"foobar\");\nreader = new PdfReader(\"results/in_action/chapter16/unsigned_message.pdf\");\nFileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/signed_message.pdf\");\nPdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0');\nPdfSignatureAppearance appearance = stamper.getSignatureAppearance();\nappearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\nappearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\nappearance.setReason(\"It's personal.\");\nappearance.setLocation(\"Foobar\");\nappearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\nstamper.close();\n} catch (KeyStoreException e) {\ne.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (CertificateException e) {\ne.printStackTrace();\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n} catch (UnrecoverableKeyException e) {\ne.printStackTrace();\n} catch (DocumentException e) {\ne.printStackTrace();\n}\ntry {\nreader = new PdfReader(\"results/in_action/chapter16/signed_message.pdf\");\nDocument document = new Document(reader.getPageSizeWithRotation(1));\nPdfCopy copy = new PdfCopy(document, new FileOutputStream(\"results/in_action/chapter16/corrupted_message.pdf\"));\ndocument.open();\ncopy.addPage(copy.getImportedPage(reader, 1));\ndocument.close();\n} catch (IOException ioe) {\nioe.printStackTrace();\n} catch (DocumentException de) {\nde.printStackTrace();\n}\ntry {\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\nks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\nPrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\nCertificate[] chain = ks.getCertificateChain(\"foobar\");\nreader = new PdfReader(\"results/in_action/chapter16/unsigned_message.pdf\");\nFileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/signed_message_invisible.pdf\");\nPdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0');\nPdfSignatureAppearance appearance = stamper.getSignatureAppearance();\nappearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\nappearance.setReason(\"It's personal.\");\nappearance.setLocation(\"Foobar\");\nstamper.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\ntry {\nreader = new PdfReader(\"results/in_action/chapter16/signed_message.pdf\");\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\nks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\nPrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\nCertificate[] chain = ks.getCertificateChain(\"foobar\");\nFileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/double_signed_message.pdf\");\nPdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0', null, true);\nPdfSignatureAppearance appearance = stamper.getSignatureAppearance();\nappearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\nappearance.setReason(\"Double signed.\");\nappearance.setLocation(\"Foobar\");\nappearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, \"secondsig\");\nstamper.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\ntry {\nCertificateFactory cf = CertificateFactory.getInstance(\"X509\");\nCollection col = cf.generateCertificates(new FileInputStream(\"resources/in_action/chapter16/foobar.cer\"));\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\nks.load(null, null);\nfor (Iterator it = col.iterator(); it.hasNext(); ) {\nX509Certificate cert = (X509Certificate) it.next();\nSystem.out.println(cert.getIssuerDN().getName());\nks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n}\nreader = new PdfReader(\"results/in_action/chapter16/double_signed_message.pdf\");\nAcroFields af = reader.getAcroFields();\nArrayList names = af.getSignatureNames();\nString name;\nfor (Iterator it = names.iterator(); it.hasNext(); ) {\nname = (String) it.next();\nSystem.out.println(\"Signature name: \" + name);\nSystem.out.println(\"Signature covers whole document: \" + af.signatureCoversWholeDocument(name));\nSystem.out.println(\"Document revision: \" + af.getRevision(name) + \" of \" + af.getTotalRevisions());\nFileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/revision_\" + af.getRevision(name) + \".pdf\");\nbyte bb[] = new byte[8192];\nInputStream ip = af.extractRevision(name);\nint n = 0;\nwhile ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\nos.close();\nip.close();\nPdfPKCS7 pk = af.verifySignature(name);\nCalendar cal = pk.getSignDate();\nCertificate pkc[] = pk.getCertificates();\nSystem.out.println(\"Subject: \" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\nSystem.out.println(\"Document modified: \" + !pk.verify());\nObject fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\nif (fails == null) System.out.println(\"Certificates verified against the KeyStore\"); else System.out.println(\"Certificate failed: \" + fails[1]);\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#165096#48#171.java",
                        "__cluster__": 99
                },
                {
                        "id": "test_bigclonebench_data_6966398",
                        "content": "public static void main(String[] args) {\nSystem.out.println(\"Chapter 16: example SignedPdf\");\nSystem.out.println(\"-> Creates a signed PDF;\");\nSystem.out.println(\"-> jars needed: iText.jar\");\nSystem.out.println(\"-> files generated in /results subdirectory:\");\nSystem.out.println(\"   Resource needed: .keystore\");\nSystem.out.println(\"-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,\");\nSystem.out.println(\"   corrupted_message.pdf, signed_message_invisible.pdf,\");\nSystem.out.println(\"   double_signed_message.pdf, revision_1.pdf and revision_2.pdf\");\ncreatePdf();\nPdfReader reader;\ntry {\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\nks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\nPrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\nCertificate[] chain = ks.getCertificateChain(\"foobar\");\nreader = new PdfReader(\"results/in_action/chapter16/unsigned_message.pdf\");\nFileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/signed_message.pdf\");\nPdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0');\nPdfSignatureAppearance appearance = stamper.getSignatureAppearance();\nappearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\nappearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\nappearance.setReason(\"It's personal.\");\nappearance.setLocation(\"Foobar\");\nappearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\nstamper.close();\n} catch (KeyStoreException e) {\ne.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n} catch (CertificateException e) {\ne.printStackTrace();\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n} catch (UnrecoverableKeyException e) {\ne.printStackTrace();\n} catch (DocumentException e) {\ne.printStackTrace();\n}\ntry {\nreader = new PdfReader(\"results/in_action/chapter16/signed_message.pdf\");\nDocument document = new Document(reader.getPageSizeWithRotation(1));\nPdfCopy copy = new PdfCopy(document, new FileOutputStream(\"results/in_action/chapter16/corrupted_message.pdf\"));\ndocument.open();\ncopy.addPage(copy.getImportedPage(reader, 1));\ndocument.close();\n} catch (IOException ioe) {\nioe.printStackTrace();\n} catch (DocumentException de) {\nde.printStackTrace();\n}\ntry {\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\nks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\nPrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\nCertificate[] chain = ks.getCertificateChain(\"foobar\");\nreader = new PdfReader(\"results/in_action/chapter16/unsigned_message.pdf\");\nFileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/signed_message_invisible.pdf\");\nPdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0');\nPdfSignatureAppearance appearance = stamper.getSignatureAppearance();\nappearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\nappearance.setReason(\"It's personal.\");\nappearance.setLocation(\"Foobar\");\nstamper.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\ntry {\nreader = new PdfReader(\"results/in_action/chapter16/signed_message.pdf\");\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\nks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\nPrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\nCertificate[] chain = ks.getCertificateChain(\"foobar\");\nFileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/double_signed_message.pdf\");\nPdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0', null, true);\nPdfSignatureAppearance appearance = stamper.getSignatureAppearance();\nappearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\nappearance.setReason(\"Double signed.\");\nappearance.setLocation(\"Foobar\");\nappearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, \"secondsig\");\nstamper.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\ntry {\nCertificateFactory cf = CertificateFactory.getInstance(\"X509\");\nCollection col = cf.generateCertificates(new FileInputStream(\"resources/in_action/chapter16/foobar.cer\"));\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\nks.load(null, null);\nfor (Iterator it = col.iterator(); it.hasNext(); ) {\nX509Certificate cert = (X509Certificate) it.next();\nSystem.out.println(cert.getIssuerDN().getName());\nks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n}\nreader = new PdfReader(\"results/in_action/chapter16/double_signed_message.pdf\");\nAcroFields af = reader.getAcroFields();\nArrayList names = af.getSignatureNames();\nString name;\nfor (Iterator it = names.iterator(); it.hasNext(); ) {\nname = (String) it.next();\nSystem.out.println(\"Signature name: \" + name);\nSystem.out.println(\"Signature covers whole document: \" + af.signatureCoversWholeDocument(name));\nSystem.out.println(\"Document revision: \" + af.getRevision(name) + \" of \" + af.getTotalRevisions());\nFileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/revision_\" + af.getRevision(name) + \".pdf\");\nbyte bb[] = new byte[8192];\nInputStream ip = af.extractRevision(name);\nint n = 0;\nwhile ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\nos.close();\nip.close();\nPdfPKCS7 pk = af.verifySignature(name);\nCalendar cal = pk.getSignDate();\nCertificate pkc[] = pk.getCertificates();\nSystem.out.println(\"Subject: \" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\nSystem.out.println(\"Document modified: \" + !pk.verify());\nObject fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\nif (fails == null) System.out.println(\"Certificates verified against the KeyStore\"); else System.out.println(\"Certificate failed: \" + fails[1]);\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 99
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_16308040",
                        "content": "public boolean update(String dbName, Query[] queries) throws ServiceException {\nConnection con = null;\nPreparedStatement pstmt = null;\nint rows = 0;\ntry {\ncon = getDbConnection().getConnection(dbName);\ncon.setAutoCommit(false);\nfor (int i = 0; i < queries.length; i++) {\nQuery query = queries[i];\nSystem.out.println(query.getSql());\npstmt = con.prepareStatement(query.getSql());\naddParametersToQuery(query, pstmt);\nrows += pstmt.executeUpdate();\n}\ncon.commit();\nreturn rows > 0;\n} catch (DbException e) {\nlog.error(\"[DAOService::update]  \" + e.getMessage(), e);\nlog.error(\"[DAOService::update] Execute rollback \" + e.getMessage(), e);\ntry {\ncon.rollback();\n} catch (SQLException e1) {\nlog.error(\"[DAOService::update] Errore durante il rollback \" + e.getMessage(), e);\nthrow new ServiceException(e.getMessage());\n}\nthrow new ServiceException(e.getMessage());\n} catch (SQLException e) {\nlog.error(\"[DAOService::update]  \" + e.getMessage(), e);\ntry {\ncon.rollback();\n} catch (SQLException e1) {\nlog.error(\"[DAOService::update] Errore durante il rollback \" + e.getMessage(), e);\nthrow new ServiceException(e.getMessage());\n}\nthrow new ServiceException(e.getMessage());\n} finally {\ncloseConnection(con, pstmt, null);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 121
                },
                {
                        "id": "pretrain_java_data_13618097",
                        "content": "public boolean update(String dbName, Query[] queries) throws ServiceException {\nConnection con = null;\nPreparedStatement pstmt = null;\nint rows = 0;\ntry {\ncon = getDbConnection().getConnection(dbName);\ncon.setAutoCommit(false);\nfor (int i = 0; i < queries.length; i++) {\nQuery query = queries[i];\nSystem.out.println(query.getSql());\npstmt = con.prepareStatement(query.getSql());\naddParametersToQuery(query, pstmt);\nrows += pstmt.executeUpdate();\n}\ncon.commit();\nreturn rows > 0;\n} catch (DbException e) {\nlog.error(\"[DAOService::update]  \" + e.getMessage(), e);\nlog.error(\"[DAOService::update] Execute rollback \" + e.getMessage(), e);\ntry {\ncon.rollback();\n} catch (SQLException e1) {\nlog.error(\"[DAOService::update] Errore durante il rollback \" + e.getMessage(), e);\nthrow new ServiceException(e.getMessage());\n}\nthrow new ServiceException(e.getMessage());\n} catch (SQLException e) {\nlog.error(\"[DAOService::update]  \" + e.getMessage(), e);\ntry {\ncon.rollback();\n} catch (SQLException e1) {\nlog.error(\"[DAOService::update] Errore durante il rollback \" + e.getMessage(), e);\nthrow new ServiceException(e.getMessage());\n}\nthrow new ServiceException(e.getMessage());\n} finally {\ncloseConnection(con, pstmt, null);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2694482#251#289.java",
                        "__cluster__": 121
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_23677142",
                        "content": "public static void BubbleSortShort2(short[] num) {\nint last_exchange;\nint right_border = num.length - 1;\ndo {\nlast_exchange = 0;\nfor (int j = 0; j < num.length - 1; j++) {\nif (num[j] > num[j + 1])\n{\nshort temp = num[j];\nnum[j] = num[j + 1];\nnum[j + 1] = temp;\nlast_exchange = j;\n}\n}\nright_border = last_exchange;\n} while (right_border > 0);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 24
                },
                {
                        "id": "pretrain_java_data_13661701",
                        "content": "public static void BubbleSortInt2(int[] num) {\nint last_exchange;\nint right_border = num.length - 1;\ndo {\nlast_exchange = 0;\nfor (int j = 0; j < num.length - 1; j++) {\nif (num[j] > num[j + 1])\n{\nint temp = num[j];\nnum[j] = num[j + 1];\nnum[j + 1] = temp;\nlast_exchange = j;\n}\n}\nright_border = last_exchange;\n} while (right_border > 0);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/sample#BubbleSort#21#37.java",
                        "__cluster__": 24
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_20247400",
                        "content": "public static void main(String[] args) throws Exception {\nif (args.length != 2) {\nSystem.out.println(\"arguments: sourcefile destfile\");\nSystem.exit(1);\n}\nFileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\nByteBuffer buffer = ByteBuffer.allocate(BSIZE);\nwhile (in.read(buffer) != -1) {\nbuffer.flip();\nout.write(buffer);\nbuffer.clear();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 523
                },
                {
                        "id": "pretrain_java_data_13613734",
                        "content": "public static void main(String[] args) throws Exception {\nif (args.length != 2) {\nPrintUtil.prt(\"arguments: sourcefile, destfile\");\nSystem.exit(1);\n}\nFileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\nByteBuffer buff = ByteBuffer.allocate(BSIZE);\nwhile (in.read(buff) != -1) {\nPrintUtil.prt(\"%%%\");\nbuff.flip();\nout.write(buff);\nbuff.clear();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#290999#13#26.java",
                        "__cluster__": 523
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_14733078",
                        "content": "private static String encrypt(String algorithm, String password, Long digestSeed) {\ntry {\nMessageDigest digest = MessageDigest.getInstance(algorithm);\ndigest.reset();\ndigest.update(password.getBytes(\"UTF-8\"));\ndigest.update(digestSeed.toString().getBytes(\"UTF-8\"));\nbyte[] messageDigest = digest.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < messageDigest.length; i++) {\nhexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4));\nhexString.append(Integer.toHexString(0x0f & messageDigest[i]));\n}\nreturn hexString.toString();\n} catch (NoSuchAlgorithmException e) {\nthrow new RuntimeException(e);\n} catch (UnsupportedEncodingException e) {\nthrow new RuntimeException(e);\n} catch (NullPointerException e) {\nreturn new StringBuffer().toString();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 611
                },
                {
                        "id": "pretrain_java_data_15237958",
                        "content": "<gh_stars>10-100\npublic static String encrypt(String algorithm, String[] input) {\ntry {\nMessageDigest md = MessageDigest.getInstance(algorithm);\nmd.reset();\nfor (int i = 0; i < input.length; i++) {\nif (input[i] != null) md.update(input[i].getBytes(\"UTF-8\"));\n}\nbyte[] messageDigest = md.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < messageDigest.length; i++) {\nhexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4));\nhexString.append(Integer.toHexString(0x0f & messageDigest[i]));\n}\nreturn hexString.toString();\n} catch (NoSuchAlgorithmException e) {\nthrow new RuntimeException(e);\n} catch (UnsupportedEncodingException e) {\nthrow new RuntimeException(e);\n} catch (NullPointerException e) {\nreturn new StringBuffer().toString();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#408392#29#50.java",
                        "__cluster__": 611
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_15239425",
                        "content": "private boolean doCSVImport(String tableName, final boolean hasHeader) {\nStringBuffer sql = new StringBuffer();\nsql.append(\"INSERT INTO \");\nsql.append(tableName + \"(\");\nfor (int i = 0; i < colNames.size(); i++) {\nsql.append(\"\" + colNames.get(i) + \",\");\n}\nsql.setLength(sql.length() - 1);\nsql.append(\") VALUES( \");\nfor (int i = 0; i < colNames.size(); i++) {\nsql.append(\"?,\");\n}\nsql.setLength(sql.length() - 1);\nsql.append(\")\");\nConnection conn = null;\nint lineNumber = 0;\nint colNumber = 0;\nString line[] = null;\ntry {\nconn = DBExplorer.getConnection(false);\nconn.setAutoCommit(false);\nPreparedStatement pstmt = conn.prepareStatement(sql.toString());\nfor (; lineNumber < csvData.size(); lineNumber++) {\nif (hasHeader && lineNumber == 0) continue;\ndlg.UpdateProgressBar(lineNumber);\nif (cancel) {\nbreak;\n}\nline = (String[]) csvData.get(lineNumber);\npstmt.clearParameters();\nfor (colNumber = 0; colNumber < colTypes.size(); colNumber++) {\nif (line[colNumber].equals(\"\") && colNullAllowed.get(colNumber).toString().equals(\"true\")) {\npstmt.setNull(colNumber + 1, Integer.parseInt(colTypeInt.get(colNumber).toString()));\n} else {\npstmt.setObject(colNumber + 1, line[colNumber], Integer.parseInt(colTypeInt.get(colNumber).toString()));\n}\n}\npstmt.executeUpdate();\n}\nif (cancel) conn.rollback(); else conn.commit();\nconn.setAutoCommit(true);\nconn.close();\nconn = null;\ndialog.getDisplay().asyncExec(new Runnable() {\npublic void run() {\nif (!cancel) {\ndlg.showMessage(title, \"Imported \" + maxsize + \" rows successfully.\");\nstatusLabel.setText(\"Import complete.\");\n} else {\ndlg.UpdateProgressBar(0);\nstatusLabel.setText(\"Import aborted.\");\n}\n}\n});\nreturn true;\n} catch (final Exception e) {\nif (conn != null) try {\nconn.rollback();\n} catch (SQLException e1) {\ne1.printStackTrace();\n}\ndialog.getDisplay().asyncExec(new Runnable() {\npublic void run() {\nstatusLabel.setText(\"Import failed\");\ndlg.showError(title, e.getMessage());\ndlg.UpdateProgressBar(0);\n}\n});\nreturn false;\n} finally {\nif (conn != null) try {\nconn.close();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#717006#322#400.java",
                        "__cluster__": 642
                },
                {
                        "id": "test_bigclonebench_data_4461350",
                        "content": "private boolean doCSVImport(String tableName, final boolean hasHeader) {\nStringBuffer sql = new StringBuffer();\nsql.append(\"INSERT INTO \");\nsql.append(tableName + \"(\");\nfor (int i = 0; i < colNames.size(); i++) {\nsql.append(\"\" + colNames.get(i) + \",\");\n}\nsql.setLength(sql.length() - 1);\nsql.append(\") VALUES( \");\nfor (int i = 0; i < colNames.size(); i++) {\nsql.append(\"?,\");\n}\nsql.setLength(sql.length() - 1);\nsql.append(\")\");\nConnection conn = null;\nint lineNumber = 0;\nint colNumber = 0;\nString line[] = null;\ntry {\nconn = DBExplorer.getConnection(false);\nconn.setAutoCommit(false);\nPreparedStatement pstmt = conn.prepareStatement(sql.toString());\nfor (; lineNumber < csvData.size(); lineNumber++) {\nif (hasHeader && lineNumber == 0) continue;\ndlg.UpdateProgressBar(lineNumber);\nif (cancel) {\nbreak;\n}\nline = (String[]) csvData.get(lineNumber);\npstmt.clearParameters();\nfor (colNumber = 0; colNumber < colTypes.size(); colNumber++) {\nif (line[colNumber].equals(\"\") && colNullAllowed.get(colNumber).toString().equals(\"true\")) {\npstmt.setNull(colNumber + 1, Integer.parseInt(colTypeInt.get(colNumber).toString()));\n} else {\npstmt.setObject(colNumber + 1, line[colNumber], Integer.parseInt(colTypeInt.get(colNumber).toString()));\n}\n}\npstmt.executeUpdate();\n}\nif (cancel) conn.rollback(); else conn.commit();\nconn.setAutoCommit(true);\nconn.close();\nconn = null;\ndialog.getDisplay().asyncExec(new Runnable() {\npublic void run() {\nif (!cancel) {\ndlg.showMessage(title, \"Imported \" + maxsize + \" rows successfully.\");\nstatusLabel.setText(\"Import complete.\");\n} else {\ndlg.UpdateProgressBar(0);\nstatusLabel.setText(\"Import aborted.\");\n}\n}\n});\nreturn true;\n} catch (final Exception e) {\nif (conn != null) try {\nconn.rollback();\n} catch (SQLException e1) {\ne1.printStackTrace();\n}\ndialog.getDisplay().asyncExec(new Runnable() {\npublic void run() {\nstatusLabel.setText(\"Import failed\");\ndlg.showError(title, e.getMessage());\ndlg.UpdateProgressBar(0);\n}\n});\nreturn false;\n} finally {\nif (conn != null) try {\nconn.close();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 642
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3375722",
                        "content": "public void importarSetor(File pArquivoXLS, String pCabecalhoSetor, Andamento pAndamento) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {\nint iLinha = -1;\nStatement stmtLimpezaInicialDestino = null;\nOraclePreparedStatement stmtDestino = null;\ntry {\nWorkbook arquivo = WorkbookFactory.create(new FileInputStream(pArquivoXLS));\nSheet plan1 = arquivo.getSheetAt(0);\nint QUANTIDADE_DE_REGISTROS_DE_CABECALHO = 7;\nint QUANTIDADE_DE_REGISTROS_DE_RODAPE = 14;\nint QUANTIDADE_DE_REGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTROS_DE_CABECALHO + QUANTIDADE_DE_REGISTROS_DE_RODAPE;\nint quantidadeDeRegistrosEstimada = plan1.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTROS_DE_METADADOS;\nString vSetor = \"\", vSubsetor = \"\", vSegmento = \"\";\nLinhaDaPlanilhaDosSetores registroAtual;\nint vPapeisPorSegmento = 0;\nstmtLimpezaInicialDestino = conDestino.createStatement();\nString sql = \"TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO\";\nstmtLimpezaInicialDestino.executeUpdate(sql);\nsql = \"INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)\";\nstmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\nstmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\nint quantidadeDeRegistrosImportados = 0;\niLinha = 8;\nwhile (true) {\nregistroAtual = new LinhaDaPlanilhaDosSetores(plan1.getRow(iLinha));\nif (registroAtual.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {\nif (registroAtual.nomeDoSubsetor.equalsIgnoreCase(\"\")) {\nbreak;\n} else {\nvSetor = registroAtual.nomeDoSetor;\nvSubsetor = null;\nvSegmento = null;\n}\n}\nif (registroAtual.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {\nvSubsetor = registroAtual.nomeDoSubsetor;\nvSegmento = null;\n}\nString nomeDoSegmento = registroAtual.nomeDoSegmentoOuDaEmpresa;\nif (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && registroAtual.siglaDaEmpresa.equals(\"\")) {\nif (vSegmento != null && vPapeisPorSegmento == 0) {\nvSegmento = vSegmento + \" \" + nomeDoSegmento;\n} else {\nvSegmento = nomeDoSegmento;\n}\nvPapeisPorSegmento = 0;\n}\nString nomeDaEmpresa = registroAtual.nomeDoSegmentoOuDaEmpresa;\nif (registroAtual.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && !nomeDaEmpresa.equals(\"\")) {\nString vCodneg = registroAtual.siglaDaEmpresa;\nstmtDestino.clearParameters();\nstmtDestino.setStringAtName(\"SIGLA_EMPRESA\", vCodneg);\nstmtDestino.setStringAtName(\"NOME_SETOR\", vSetor);\nstmtDestino.setStringAtName(\"NOME_SUBSETOR\", vSubsetor);\nstmtDestino.setStringAtName(\"NOME_SEGMENTO\", vSegmento);\nint contagemDasInsercoes = stmtDestino.executeUpdate();\nquantidadeDeRegistrosImportados++;\nvPapeisPorSegmento++;\n}\niLinha++;\ndouble percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstimada * 100;\npAndamento.setPercentualCompleto((int) percentualCompleto);\n}\nconDestino.commit();\n} catch (Exception ex) {\nconDestino.rollback();\nProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();\nproblemaDetalhado.nomeDoArquivo = pArquivoXLS.getName();\nproblemaDetalhado.linhaProblematicaDoArquivo = iLinha;\nproblemaDetalhado.detalhesSobreOProblema = ex;\nthrow problemaDetalhado;\n} finally {\npAndamento.setPercentualCompleto(100);\nif (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {\nstmtLimpezaInicialDestino.close();\n}\nif (stmtDestino != null && (!stmtDestino.isClosed())) {\nstmtDestino.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 762
                },
                {
                        "id": "pretrain_java_data_15272332",
                        "content": "<filename>references/bcb_chosen_clones/selected#1834968#740#819.java\npublic void importarSetor(File pArquivoXLS, String pCabecalhoSetor, Andamento pAndamento) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {\nint iLinha = -1;\nStatement stmtLimpezaInicialDestino = null;\nOraclePreparedStatement stmtDestino = null;\ntry {\nWorkbook arquivo = WorkbookFactory.create(new FileInputStream(pArquivoXLS));\nSheet plan1 = arquivo.getSheetAt(0);\nint QUANTIDADE_DE_REGISTROS_DE_CABECALHO = 7;\nint QUANTIDADE_DE_REGISTROS_DE_RODAPE = 14;\nint QUANTIDADE_DE_REGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTROS_DE_CABECALHO + QUANTIDADE_DE_REGISTROS_DE_RODAPE;\nint quantidadeDeRegistrosEstimada = plan1.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTROS_DE_METADADOS;\nString vSetor = \"\", vSubsetor = \"\", vSegmento = \"\";\nLinhaDaPlanilhaDosSetores registroAtual;\nint vPapeisPorSegmento = 0;\nstmtLimpezaInicialDestino = conDestino.createStatement();\nString sql = \"TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO\";\nstmtLimpezaInicialDestino.executeUpdate(sql);\nsql = \"INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)\";\nstmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\nstmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\nint quantidadeDeRegistrosImportados = 0;\niLinha = 8;\nwhile (true) {\nregistroAtual = new LinhaDaPlanilhaDosSetores(plan1.getRow(iLinha));\nif (registroAtual.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {\nif (registroAtual.nomeDoSubsetor.equalsIgnoreCase(\"\")) {\nbreak;\n} else {\nvSetor = registroAtual.nomeDoSetor;\nvSubsetor = null;\nvSegmento = null;\n}\n}\nif (registroAtual.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {\nvSubsetor = registroAtual.nomeDoSubsetor;\nvSegmento = null;\n}\nString nomeDoSegmento = registroAtual.nomeDoSegmentoOuDaEmpresa;\nif (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && registroAtual.siglaDaEmpresa.equals(\"\")) {\nif (vSegmento != null && vPapeisPorSegmento == 0) {\nvSegmento = vSegmento + \" \" + nomeDoSegmento;\n} else {\nvSegmento = nomeDoSegmento;\n}\nvPapeisPorSegmento = 0;\n}\nString nomeDaEmpresa = registroAtual.nomeDoSegmentoOuDaEmpresa;\nif (registroAtual.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && !nomeDaEmpresa.equals(\"\")) {\nString vCodneg = registroAtual.siglaDaEmpresa;\nstmtDestino.clearParameters();\nstmtDestino.setStringAtName(\"SIGLA_EMPRESA\", vCodneg);\nstmtDestino.setStringAtName(\"NOME_SETOR\", vSetor);\nstmtDestino.setStringAtName(\"NOME_SUBSETOR\", vSubsetor);\nstmtDestino.setStringAtName(\"NOME_SEGMENTO\", vSegmento);\nint contagemDasInsercoes = stmtDestino.executeUpdate();\nquantidadeDeRegistrosImportados++;\nvPapeisPorSegmento++;\n}\niLinha++;\ndouble percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstimada * 100;\npAndamento.setPercentualCompleto((int) percentualCompleto);\n}\nconDestino.commit();\n} catch (Exception ex) {\nconDestino.rollback();\nProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();\nproblemaDetalhado.nomeDoArquivo = pArquivoXLS.getName();\nproblemaDetalhado.linhaProblematicaDoArquivo = iLinha;\nproblemaDetalhado.detalhesSobreOProblema = ex;\nthrow problemaDetalhado;\n} finally {\npAndamento.setPercentualCompleto(100);\nif (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {\nstmtLimpezaInicialDestino.close();\n}\nif (stmtDestino != null && (!stmtDestino.isClosed())) {\nstmtDestino.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1834968#740#819.java",
                        "__cluster__": 762
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6963063",
                        "content": "public static void main(String args[]) {\nint[] mas = { 3, 5, 6, 9, 1, -3, -4, -88 };\nint sort = 0;\nfor (int j = 0; j < (mas.length); j++) {\nfor (int i = 0; i < mas.length - 1; i++) {\nif (mas[i] > mas[i + 1]) {\nsort = mas[i];\nmas[i] = mas[i + 1];\nmas[i + 1] = sort;\n}\n}\n}\nfor (int i = 0; i < mas.length; i++) {\nSystem.out.print(\" \" + mas[i]);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 554
                },
                {
                        "id": "pretrain_java_data_15309946",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic static void main(String args[]) {\nint[] mas = { 3, 5, 6, 9, 1, -3, -4, -88 };\nint sort = 0;\nfor (int j = 0; j < (mas.length); j++) {\nfor (int i = 0; i < mas.length - 1; i++) {\nif (mas[i] > mas[i + 1]) {\nsort = mas[i];\nmas[i] = mas[i + 1];\nmas[i + 1] = sort;\n}\n}\n}\nfor (int i = 0; i < mas.length; i++) {\nSystem.out.print(\" \" + mas[i]);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1004029#5#20.java",
                        "__cluster__": 554
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_1117047",
                        "content": "@Override\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nString rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), \"UTF-8\").replaceFirst(\"^.*?\\\\/(id:.*)\\\\/.*?$\", \"$1\");\nlogger.debug(\"rewrittenQueryString: \" + rewrittenQueryString);\nURL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\nlogger.debug(\"rewrittenUrl: \" + rewrittenUrl.getProtocol() + \"://\" + rewrittenUrl.getHost() + \":\" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\nHttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\nHttpURLConnection.setFollowRedirects(false);\nhttpURLConnection.connect();\nresponse.setStatus(httpURLConnection.getResponseCode());\nlogger.debug(\"[status=\" + httpURLConnection.getResponseCode() + \"]\");\nlogger.debug(\"[headers]\");\nfor (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\nif (header.getKey() != null) {\nfor (String value : header.getValue()) {\nif (value != null) {\nlogger.debug(header.getKey() + \": \" + value);\nif (!header.getKey().equals(\"Server\") && !header.getKey().equals(\"Transfer-Encoding\")) {\nresponse.addHeader(header.getKey(), value);\n}\n}\n}\n}\n}\nlogger.debug(\"[/headers]\");\nInputStream inputStream = httpURLConnection.getInputStream();\nOutputStream outputStream = response.getOutputStream();\nIOUtils.copy(inputStream, outputStream);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1138521#34#62.java",
                        "__cluster__": 81
                },
                {
                        "id": "test_bigclonebench_data_15241397",
                        "content": "@Override\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nString rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), \"UTF-8\").replaceFirst(\"^.*?\\\\/(id:.*)\\\\/.*?$\", \"$1\");\nlogger.debug(\"rewrittenQueryString: \" + rewrittenQueryString);\nURL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\nlogger.debug(\"rewrittenUrl: \" + rewrittenUrl.getProtocol() + \"://\" + rewrittenUrl.getHost() + \":\" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\nHttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\nHttpURLConnection.setFollowRedirects(false);\nhttpURLConnection.connect();\nresponse.setStatus(httpURLConnection.getResponseCode());\nlogger.debug(\"[status=\" + httpURLConnection.getResponseCode() + \"]\");\nlogger.debug(\"[headers]\");\nfor (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\nif (header.getKey() != null) {\nfor (String value : header.getValue()) {\nif (value != null) {\nlogger.debug(header.getKey() + \": \" + value);\nif (!header.getKey().equals(\"Server\") && !header.getKey().equals(\"Transfer-Encoding\")) {\nresponse.addHeader(header.getKey(), value);\n}\n}\n}\n}\n}\nlogger.debug(\"[/headers]\");\nInputStream inputStream = httpURLConnection.getInputStream();\nOutputStream outputStream = response.getOutputStream();\nIOUtils.copy(inputStream, outputStream);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 81
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_1197590",
                        "content": "<filename>references/bcb_chosen_clones/selected#1278546#80#97.java\npublic static String getURLContent(String urlToSearchString) throws IOException {\nURL url = new URL(urlToSearchString);\nURLConnection conn = url.openConnection();\nString encoding = conn.getContentEncoding();\nif (encoding == null) encoding = \"ISO-8859-1\";\nBufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));\nStringBuilder sb = new StringBuilder(16384);\ntry {\nString line;\nwhile ((line = br.readLine()) != null) {\nsb.append(line);\nsb.append('\\n');\n}\n} finally {\nbr.close();\n}\nreturn sb.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1278546#80#97.java",
                        "__cluster__": 314
                },
                {
                        "id": "test_bigclonebench_data_2221297",
                        "content": "public static String getURLContent(String urlToSearchString) throws IOException {\nURL url = new URL(urlToSearchString);\nURLConnection conn = url.openConnection();\nString encoding = conn.getContentEncoding();\nif (encoding == null) encoding = \"ISO-8859-1\";\nBufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));\nStringBuilder sb = new StringBuilder(16384);\ntry {\nString line;\nwhile ((line = br.readLine()) != null) {\nsb.append(line);\nsb.append('\\n');\n}\n} finally {\nbr.close();\n}\nreturn sb.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 314
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_1141816",
                        "content": "protected void readURL(URL url) {\nInputStream istream = null;\nInputStreamReader isr = null;\nBufferedReader in = null;\ntry {\nistream = url.openStream();\nisr = new InputStreamReader(istream);\nin = new BufferedReader(isr);\nString line = in.readLine();\nwhile (null != line) {\nSystem.out.println(line);\nline = in.readLine();\n}\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\nIOUtilities.close(in);\nIOUtilities.close(isr);\nIOUtilities.close(istream);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2271887#42#62.java",
                        "__cluster__": 519
                },
                {
                        "id": "test_bigclonebench_data_20602651",
                        "content": "protected void readURL(URL url) {\nInputStream istream = null;\nInputStreamReader isr = null;\nBufferedReader in = null;\ntry {\nistream = url.openStream();\nisr = new InputStreamReader(istream);\nin = new BufferedReader(isr);\nString line = in.readLine();\nwhile (null != line) {\nSystem.out.println(line);\nline = in.readLine();\n}\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\nIOUtilities.close(in);\nIOUtilities.close(isr);\nIOUtilities.close(istream);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 519
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_1143591",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {\nint index = file.getName().lastIndexOf(\".\");\nString name = file.getName().substring(0, index);\nDecimalFormat format = new DecimalFormat(\"####\");\nformat.setMinimumIntegerDigits(4);\nint count = 0;\nFile main = new File(name);\nif (main.exists()) {\nthrow new IOException(main.getAbsolutePath());\n}\nmain.mkdir();\nFile version = new File(main, \"version\");\nversion.createNewFile();\nPrintWriter writer = new PrintWriter(version);\nwriter.write(Videso3D.VERSION);\nwriter.flush();\nwriter.close();\nFile xmlDir = new File(main.getAbsolutePath() + \"/xml\");\nxmlDir.mkdir();\nif (types != null && !types.isEmpty()) {\nFile databases = new File(main.getAbsolutePath() + \"/databases\");\ndatabases.mkdir();\nfor (String t : types) {\nType type = DatabaseManager.stringToType(t);\nif (type != null) {\nif (onlyLinks) {\nif (databasesIncluded) {\nString currentName = DatabaseManager.getCurrentName(type);\nFile baseCopy = new File(databases, currentName + \".\" + type);\nbaseCopy.createNewFile();\nFileChannel source = new FileInputStream(new File(currentName)).getChannel();\nFileChannel destination = new FileOutputStream(baseCopy).getChannel();\ndestination.transferFrom(source, 0, source.size());\nsource.close();\ndestination.close();\nList<String[]> clefs = new ArrayList<String[]>();\nStatement st = DatabaseManager.getCurrent(Type.Databases);\nResultSet rs = st.executeQuery(\"select * from clefs where type='\" + currentName + \"'\");\nwhile (rs.next()) {\nclefs.add(new String[] { rs.getString(\"name\"), rs.getString(\"value\") });\n}\nst.close();\nif (!clefs.isEmpty()) {\nFile clefsFile = new File(databases, currentName + \"_clefs\");\nclefsFile.createNewFile();\nObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));\noos.writeObject(clefs);\noos.close();\n}\nFile filesDir = new File(currentName + \"_files\");\nif (filesDir.exists() && filesDir.isDirectory()) {\nFile baseFiles = new File(databases, currentName + \"_files\");\nbaseFiles.mkdirs();\nfor (File f : filesDir.listFiles()) {\nFile copy = new File(baseFiles, f.getName());\ncopy.createNewFile();\nsource = new FileInputStream(f).getChannel();\ndestination = new FileOutputStream(copy).getChannel();\ndestination.transferFrom(source, 0, source.size());\nsource.close();\ndestination.close();\n}\n}\n}\nFile selectedObjects = new File(databases, type.toString());\nselectedObjects.createNewFile();\nObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));\noos.writeObject(objects.get(type));\noos.close();\n} else {\nfor (Restorable r : DatasManager.getController(type).getSelectedObjects()) {\nthis.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + \"-\" + type + \"-\" + format.format(count++) + \".xml\"));\n}\n}\n}\n}\n}\nFile imagesDir = new File(main.getAbsolutePath() + \"/images\");\nimagesDir.mkdir();\nfor (EditableSurfaceImage si : this.getImages()) {\nif (images.contains(si.getName())) {\nint idx = si.getName().lastIndexOf(\".\");\nString newName = si.getName();\nif (idx != -1) {\nnewName = si.getName().substring(0, idx);\n}\nFile img = new File(imagesDir, newName + \".gtif\");\nImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);\n}\n}\nFile trajectoDir = new File(main, \"trajectory\");\ntrajectoDir.mkdirs();\nfor (Layer l : wwd.getModel().getLayers()) {\nif (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {\nGEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + \"/\" + l.getName(), true);\nfor (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {\ngeoWriter.writeTrack((GEOTrack) track);\n}\ngeoWriter.close();\n}\n}\nif (types != null && types.contains(\"Autres objets affich\u00e9s.\")) {\nfor (Layer l : wwd.getModel().getLayers()) {\nif (l.getName().equals(AIRSPACE_LAYER_NAME)) {\nfor (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\nthis.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n}\n} else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {\nfor (Renderable r : ((RenderableLayer) l).getRenderables()) {\nif (r instanceof Restorable) {\nthis.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n}\n}\n} else if (l.getName().equals(BALISES2D_LAYER_NAME)) {\nfor (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {\nthis.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n}\n} else if (l.getName().equals(BALISES3D_LAYER_NAME)) {\nfor (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {\nthis.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n}\n}\n}\n}\nfor (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {\nif (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n}\nthis.saveObjectInXml(this.wwd.getView(), new File(main, \"globe.xml\"));\nFileManager.createZipFile(file, main);\nFileManager.deleteFile(main);\nreturn true;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2470934#166#297.java",
                        "__cluster__": 812
                },
                {
                        "id": "test_bigclonebench_data_23510383",
                        "content": "public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {\nint index = file.getName().lastIndexOf(\".\");\nString name = file.getName().substring(0, index);\nDecimalFormat format = new DecimalFormat(\"####\");\nformat.setMinimumIntegerDigits(4);\nint count = 0;\nFile main = new File(name);\nif (main.exists()) {\nthrow new IOException(main.getAbsolutePath());\n}\nmain.mkdir();\nFile version = new File(main, \"version\");\nversion.createNewFile();\nPrintWriter writer = new PrintWriter(version);\nwriter.write(Videso3D.VERSION);\nwriter.flush();\nwriter.close();\nFile xmlDir = new File(main.getAbsolutePath() + \"/xml\");\nxmlDir.mkdir();\nif (types != null && !types.isEmpty()) {\nFile databases = new File(main.getAbsolutePath() + \"/databases\");\ndatabases.mkdir();\nfor (String t : types) {\nType type = DatabaseManager.stringToType(t);\nif (type != null) {\nif (onlyLinks) {\nif (databasesIncluded) {\nString currentName = DatabaseManager.getCurrentName(type);\nFile baseCopy = new File(databases, currentName + \".\" + type);\nbaseCopy.createNewFile();\nFileChannel source = new FileInputStream(new File(currentName)).getChannel();\nFileChannel destination = new FileOutputStream(baseCopy).getChannel();\ndestination.transferFrom(source, 0, source.size());\nsource.close();\ndestination.close();\nList<String[]> clefs = new ArrayList<String[]>();\nStatement st = DatabaseManager.getCurrent(Type.Databases);\nResultSet rs = st.executeQuery(\"select * from clefs where type='\" + currentName + \"'\");\nwhile (rs.next()) {\nclefs.add(new String[] { rs.getString(\"name\"), rs.getString(\"value\") });\n}\nst.close();\nif (!clefs.isEmpty()) {\nFile clefsFile = new File(databases, currentName + \"_clefs\");\nclefsFile.createNewFile();\nObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));\noos.writeObject(clefs);\noos.close();\n}\nFile filesDir = new File(currentName + \"_files\");\nif (filesDir.exists() && filesDir.isDirectory()) {\nFile baseFiles = new File(databases, currentName + \"_files\");\nbaseFiles.mkdirs();\nfor (File f : filesDir.listFiles()) {\nFile copy = new File(baseFiles, f.getName());\ncopy.createNewFile();\nsource = new FileInputStream(f).getChannel();\ndestination = new FileOutputStream(copy).getChannel();\ndestination.transferFrom(source, 0, source.size());\nsource.close();\ndestination.close();\n}\n}\n}\nFile selectedObjects = new File(databases, type.toString());\nselectedObjects.createNewFile();\nObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));\noos.writeObject(objects.get(type));\noos.close();\n} else {\nfor (Restorable r : DatasManager.getController(type).getSelectedObjects()) {\nthis.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + \"-\" + type + \"-\" + format.format(count++) + \".xml\"));\n}\n}\n}\n}\n}\nFile imagesDir = new File(main.getAbsolutePath() + \"/images\");\nimagesDir.mkdir();\nfor (EditableSurfaceImage si : this.getImages()) {\nif (images.contains(si.getName())) {\nint idx = si.getName().lastIndexOf(\".\");\nString newName = si.getName();\nif (idx != -1) {\nnewName = si.getName().substring(0, idx);\n}\nFile img = new File(imagesDir, newName + \".gtif\");\nImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);\n}\n}\nFile trajectoDir = new File(main, \"trajectory\");\ntrajectoDir.mkdirs();\nfor (Layer l : wwd.getModel().getLayers()) {\nif (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {\nGEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + \"/\" + l.getName(), true);\nfor (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {\ngeoWriter.writeTrack((GEOTrack) track);\n}\ngeoWriter.close();\n}\n}\nif (types != null && types.contains(\"Autres objets affich\u00e9s.\")) {\nfor (Layer l : wwd.getModel().getLayers()) {\nif (l.getName().equals(AIRSPACE_LAYER_NAME)) {\nfor (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\nthis.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n}\n} else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {\nfor (Renderable r : ((RenderableLayer) l).getRenderables()) {\nif (r instanceof Restorable) {\nthis.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n}\n}\n} else if (l.getName().equals(BALISES2D_LAYER_NAME)) {\nfor (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {\nthis.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n}\n} else if (l.getName().equals(BALISES3D_LAYER_NAME)) {\nfor (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {\nthis.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n}\n}\n}\n}\nfor (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {\nif (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n}\nthis.saveObjectInXml(this.wwd.getView(), new File(main, \"globe.xml\"));\nFileManager.createZipFile(file, main);\nFileManager.deleteFile(main);\nreturn true;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 812
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_7006052",
                        "content": "public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\nFile destFile = new File(dest);\nInputStream in = new FileInputStream(new File(src));\nOutputStream out = new FileOutputStream(destFile);\nbyte buf[] = new byte[1024];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nin.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 144
                },
                {
                        "id": "pretrain_java_data_1071279",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\nFile destFile = new File(dest);\nInputStream in = new FileInputStream(new File(src));\nOutputStream out = new FileOutputStream(destFile);\nbyte buf[] = new byte[1024];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nin.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2300570#308#317.java",
                        "__cluster__": 144
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17086488",
                        "content": "public static void copy(File sourceFile, File destinationFile) throws IOException {\nFileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\nFileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\nsourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\nsourceFileChannel.close();\ndestinationFileChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1013593#26#32.java",
                        "__cluster__": 214
                },
                {
                        "id": "test_bigclonebench_data_19549489",
                        "content": "public static void copy(File sourceFile, File destinationFile) throws IOException {\nFileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\nFileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\nsourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\nsourceFileChannel.close();\ndestinationFileChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 214
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_937612",
                        "content": "public String new2Password(String passwd) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nString clearPassword = passwd;\nmd.update(clearPassword.getBytes());\nbyte[] digestedPassword = md.digest();\nreturn new String(digestedPassword);\n} catch (java.security.NoSuchAlgorithmException e) {\nSystem.out.println(\"MD5 doesn't exist\");\nSystem.out.println(e.toString());\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 468
                },
                {
                        "id": "pretrain_java_data_2703258",
                        "content": "public String new2Password(String passwd) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nString clearPassword = <PASSWORD>;\nmd.update(clearPassword.getBytes());\nbyte[] digestedPassword = md.digest();\nreturn new String(digestedPassword);\n} catch (java.security.NoSuchAlgorithmException e) {\nSystem.out.println(\"MD5 doesn't exist\");\nSystem.out.println(e.toString());\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#62105#11#23.java",
                        "__cluster__": 468
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_6159896",
                        "content": "public static String md5(String str) {\nif (logger.isDebugEnabled()) {\nlogger.debug(\"md5(String) - start\");\n}\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(str.getBytes());\nbyte[] b = md.digest();\nStringBuffer sb = new StringBuffer();\nfor (int i = 0; i < b.length; i++) {\nint v = (int) b[i];\nv = v < 0 ? 0x100 + v : v;\nString cc = Integer.toHexString(v);\nif (cc.length() == 1) sb.append('0');\nsb.append(cc);\n}\nString returnString = sb.toString();\nif (logger.isDebugEnabled()) {\nlogger.debug(\"md5(String) - end\");\n}\nreturn returnString;\n} catch (Exception e) {\nlogger.warn(\"md5(String) - exception ignored\", e);\n}\nif (logger.isDebugEnabled()) {\nlogger.debug(\"md5(String) - end\");\n}\nreturn \"\";\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 472
                },
                {
                        "id": "pretrain_java_data_17019170",
                        "content": "public static String md5(String str) {\nif (logger.isDebugEnabled()) {\nlogger.debug(\"md5(String) - start\");\n}\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(str.getBytes());\nbyte[] b = md.digest();\nStringBuffer sb = new StringBuffer();\nfor (int i = 0; i < b.length; i++) {\nint v = (int) b[i];\nv = v < 0 ? 0x100 + v : v;\nString cc = Integer.toHexString(v);\nif (cc.length() == 1) sb.append('0');\nsb.append(cc);\n}\nString returnString = sb.toString();\nif (logger.isDebugEnabled()) {\nlogger.debug(\"md5(String) - end\");\n}\nreturn returnString;\n} catch (Exception e) {\nlogger.warn(\"md5(String) - exception ignored\", e);\n}\nif (logger.isDebugEnabled()) {\nlogger.debug(\"md5(String) - end\");\n}\nreturn \"\";\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2280956#48#76.java",
                        "__cluster__": 472
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13063241",
                        "content": "public static void copyFile(File src, File dest) throws IOException {\nFileInputStream fis = new FileInputStream(src);\nFileOutputStream fos = new FileOutputStream(dest);\njava.nio.channels.FileChannel channelSrc = fis.getChannel();\njava.nio.channels.FileChannel channelDest = fos.getChannel();\nchannelSrc.transferTo(0, channelSrc.size(), channelDest);\nfis.close();\nfos.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 498
                },
                {
                        "id": "pretrain_java_data_2691873",
                        "content": "public static void copyFile(File src, File dest) throws IOException {\nFileInputStream fis = new FileInputStream(src);\nFileOutputStream fos = new FileOutputStream(dest);\njava.nio.channels.FileChannel channelSrc = fis.getChannel();\njava.nio.channels.FileChannel channelDest = fos.getChannel();\nchannelSrc.transferTo(0, channelSrc.size(), channelDest);\nfis.close();\nfos.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#896716#10#18.java",
                        "__cluster__": 498
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2689348",
                        "content": "private void copy(File source, File destinationDirectory) throws IOException {\nif (source.isDirectory()) {\nFile newDir = new File(destinationDirectory, source.getName());\nnewDir.mkdir();\nFile[] children = source.listFiles();\nfor (int i = 0; i < children.length; i++) {\nif (children[i].getName().equals(\".svn\")) {\ncontinue;\n}\ncopy(children[i], newDir);\n}\n} else {\nFile newFile = new File(destinationDirectory, source.getName());\nif (newFile.exists() && source.lastModified() == newFile.lastModified()) {\nreturn;\n}\nFileOutputStream output = new FileOutputStream(newFile);\nFileInputStream input = new FileInputStream(source);\nbyte[] buff = new byte[2048];\nint read = 0;\nwhile ((read = input.read(buff)) > 0) {\noutput.write(buff, 0, read);\n}\noutput.flush();\noutput.close();\ninput.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1486569#89#116.java",
                        "__cluster__": 699
                },
                {
                        "id": "test_bigclonebench_data_10451698",
                        "content": "private void copy(File source, File destinationDirectory) throws IOException {\nif (source.isDirectory()) {\nFile newDir = new File(destinationDirectory, source.getName());\nnewDir.mkdir();\nFile[] children = source.listFiles();\nfor (int i = 0; i < children.length; i++) {\nif (children[i].getName().equals(\".svn\")) {\ncontinue;\n}\ncopy(children[i], newDir);\n}\n} else {\nFile newFile = new File(destinationDirectory, source.getName());\nif (newFile.exists() && source.lastModified() == newFile.lastModified()) {\nreturn;\n}\nFileOutputStream output = new FileOutputStream(newFile);\nFileInputStream input = new FileInputStream(source);\nbyte[] buff = new byte[2048];\nint read = 0;\nwhile ((read = input.read(buff)) > 0) {\noutput.write(buff, 0, read);\n}\noutput.flush();\noutput.close();\ninput.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 699
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18962382",
                        "content": "protected void connect() throws SocketException, IOException, LoginFailException {\nlogger.info(\"Connect to FTP Server \" + account.getServer());\nclient = new FTPClient();\nclient.connect(account.getServer());\nif (client.login(account.getId(), account.getPassword()) == false) {\nlogger.info(\"Fail to login with id=\" + account.getId());\nthrow new LoginFailException(account.getId(), account.getPassword());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 739
                },
                {
                        "id": "pretrain_java_data_2789272",
                        "content": "protected void connect() throws SocketException, IOException, LoginFailException {\nlogger.info(\"Connect to FTP Server \" + account.getServer());\nclient = new FTPClient();\nclient.connect(account.getServer());\nif (client.login(account.getId(), account.getPassword()) == false) {\nlogger.info(\"Fail to login with id=\" + account.getId());\nthrow new LoginFailException(account.getId(), account.getPassword());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2608730#32#40.java",
                        "__cluster__": 739
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_12490144",
                        "content": "private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException {\nmonitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName));\nfinal Map<String, byte[]> files = readArchiveFile(sourceFileName);\nmonitor.worked(10);\nIProject project = workspaceRoot.getProject(pluginName);\nif (project.exists()) {\nproject.delete(true, true, new SubProgressMonitor(monitor, 5));\n} else {\nmonitor.worked(5);\n}\nproject.create(new SubProgressMonitor(monitor, 5));\nproject.open(new SubProgressMonitor(monitor, 5));\nIProjectDescription description = project.getDescription();\ndescription.setNatureIds(new String[] { JavaCore.NATURE_ID, PLUGIN_NATURE_ID });\nproject.setDescription(description, new SubProgressMonitor(monitor, 5));\nIJavaProject javaProject = JavaCore.create(project);\nIFolder binDir = project.getFolder(\"bin\");\nIPath binPath = binDir.getFullPath();\njavaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5));\nproject.getFolder(\"jni\").create(true, true, new SubProgressMonitor(monitor, 5));\nproject.getFile(\"sapjco3.jar\").create(new ByteArrayInputStream(files.get(\"sapjco3.jar\")), true, new SubProgressMonitor(monitor, 10));\nIFolder metaInfFolder = project.getFolder(\"META-INF\");\nmetaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5));\nStringBuilder manifest = new StringBuilder();\nmanifest.append(\"Manifest-Version: 1.0\\n\");\nmanifest.append(\"Bundle-ManifestVersion: 2\\n\");\nmanifest.append(\"Bundle-Name: SAP Java Connector v3\\n\");\nmanifest.append(MessageFormat.format(\"Bundle-SymbolicName: {0}\\n\", pluginName));\nmanifest.append(\"Bundle-Version: 7.11.0\\n\");\nmanifest.append(\"Bundle-ClassPath: bin/,\\n\");\nmanifest.append(\" sapjco3.jar,\\n\");\nmanifest.append(\" jni/\\n\");\nmanifest.append(\"Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\\n\");\nmanifest.append(\"Bundle-RequiredExecutionEnvironment: J2SE-1.5\\n\");\nmanifest.append(\"Export-Package: com.sap.conn.jco,\\n\");\nmanifest.append(\" com.sap.conn.jco.ext,\\n\");\nmanifest.append(\" com.sap.conn.jco.monitor,\\n\");\nmanifest.append(\" com.sap.conn.jco.rt,\\n\");\nmanifest.append(\" com.sap.conn.jco.server\\n\");\nmanifest.append(\"Bundle-ActivationPolicy: lazy\\n\");\nwriteTextFile(monitor, manifest, metaInfFolder.getFile(\"MANIFEST.MF\"));\nfinal IPath jcoPath = new Path(MessageFormat.format(\"/{0}/sapjco3.jar\", pluginName));\nIClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true);\nfinal IPath jniPath = new Path(MessageFormat.format(\"/{0}/jni\", pluginName));\nIClasspathEntry jniEntry = JavaCore.newLibraryEntry(jniPath, Path.EMPTY, Path.EMPTY, true);\njavaProject.setRawClasspath(new IClasspathEntry[] { jcoEntry, jniEntry }, new SubProgressMonitor(monitor, 5));\nStringBuilder buildProperties = new StringBuilder();\nbuildProperties.append(\"bin.includes = META-INF/,\\\\\\n\");\nbuildProperties.append(\"               sapjco3.jar,\\\\\\n\");\nbuildProperties.append(\"               jni/,\\\\\\n\");\nbuildProperties.append(\"               .\\n\");\nwriteTextFile(monitor, buildProperties, project.getFile(\"build.properties\"));\nexportableBundles.add(modelManager.findModel(project));\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 905
                },
                {
                        "id": "pretrain_java_data_2743885",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#1359154#171#224.java<gh_stars>10-100\nprivate void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException {\nmonitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName));\nfinal Map<String, byte[]> files = readArchiveFile(sourceFileName);\nmonitor.worked(10);\nIProject project = workspaceRoot.getProject(pluginName);\nif (project.exists()) {\nproject.delete(true, true, new SubProgressMonitor(monitor, 5));\n} else {\nmonitor.worked(5);\n}\nproject.create(new SubProgressMonitor(monitor, 5));\nproject.open(new SubProgressMonitor(monitor, 5));\nIProjectDescription description = project.getDescription();\ndescription.setNatureIds(new String[] { JavaCore.NATURE_ID, PLUGIN_NATURE_ID });\nproject.setDescription(description, new SubProgressMonitor(monitor, 5));\nIJavaProject javaProject = JavaCore.create(project);\nIFolder binDir = project.getFolder(\"bin\");\nIPath binPath = binDir.getFullPath();\njavaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5));\nproject.getFolder(\"jni\").create(true, true, new SubProgressMonitor(monitor, 5));\nproject.getFile(\"sapjco3.jar\").create(new ByteArrayInputStream(files.get(\"sapjco3.jar\")), true, new SubProgressMonitor(monitor, 10));\nIFolder metaInfFolder = project.getFolder(\"META-INF\");\nmetaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5));\nStringBuilder manifest = new StringBuilder();\nmanifest.append(\"Manifest-Version: 1.0\\n\");\nmanifest.append(\"Bundle-ManifestVersion: 2\\n\");\nmanifest.append(\"Bundle-Name: SAP Java Connector v3\\n\");\nmanifest.append(MessageFormat.format(\"Bundle-SymbolicName: {0}\\n\", pluginName));\nmanifest.append(\"Bundle-Version: 7.11.0\\n\");\nmanifest.append(\"Bundle-ClassPath: bin/,\\n\");\nmanifest.append(\" sapjco3.jar,\\n\");\nmanifest.append(\" jni/\\n\");\nmanifest.append(\"Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\\n\");\nmanifest.append(\"Bundle-RequiredExecutionEnvironment: J2SE-1.5\\n\");\nmanifest.append(\"Export-Package: com.sap.conn.jco,\\n\");\nmanifest.append(\" com.sap.conn.jco.ext,\\n\");\nmanifest.append(\" com.sap.conn.jco.monitor,\\n\");\nmanifest.append(\" com.sap.conn.jco.rt,\\n\");\nmanifest.append(\" com.sap.conn.jco.server\\n\");\nmanifest.append(\"Bundle-ActivationPolicy: lazy\\n\");\nwriteTextFile(monitor, manifest, metaInfFolder.getFile(\"MANIFEST.MF\"));\nfinal IPath jcoPath = new Path(MessageFormat.format(\"/{0}/sapjco3.jar\", pluginName));\nIClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true);\nfinal IPath jniPath = new Path(MessageFormat.format(\"/{0}/jni\", pluginName));\nIClasspathEntry jniEntry = JavaCore.newLibraryEntry(jniPath, Path.EMPTY, Path.EMPTY, true);\njavaProject.setRawClasspath(new IClasspathEntry[] { jcoEntry, jniEntry }, new SubProgressMonitor(monitor, 5));\nStringBuilder buildProperties = new StringBuilder();\nbuildProperties.append(\"bin.includes = META-INF/,\\\\\\n\");\nbuildProperties.append(\"               sapjco3.jar,\\\\\\n\");\nbuildProperties.append(\"               jni/,\\\\\\n\");\nbuildProperties.append(\"               .\\n\");\nwriteTextFile(monitor, buildProperties, project.getFile(\"build.properties\"));\nexportableBundles.add(modelManager.findModel(project));\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1359154#171#224.java",
                        "__cluster__": 905
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18748516",
                        "content": "public static void copy(String fromFile, String toFile) throws IOException {\nFile inputFile = new File(fromFile);\nFile outputFile = new File(toFile);\nFileReader in = new FileReader(inputFile);\nFileWriter out = new FileWriter(outputFile);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 387
                },
                {
                        "id": "pretrain_java_data_17008870",
                        "content": "void copyFile(String sInput, String sOutput) throws IOException {\nFile inputFile = new File(sInput);\nFile outputFile = new File(sOutput);\nFileReader in = new FileReader(inputFile);\nFileWriter out = new FileWriter(outputFile);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#664690#712#721.java",
                        "__cluster__": 387
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_20028790",
                        "content": "private static boolean setBundleInfoName(String location, List<BundleInfo> list) {\ntry {\nURL url = new URL(location);\nBufferedReader br = new BufferedReader(new InputStreamReader(url.openStream(), \"UTF-8\"));\nwhile (true) {\nString line = br.readLine();\nif (line == null) {\nbreak;\n}\nint pos1 = line.indexOf('=');\nif (pos1 < 0) {\ncontinue;\n}\nString bundleSymbolicName = line.substring(0, pos1);\nString bundleName = line.substring(pos1 + 1);\nfor (BundleInfo info : list) {\nif (info.bundleSymbolicName.equals(bundleSymbolicName)) {\ninfo.bundleName = bundleName;\nbreak;\n}\n}\n}\nreturn true;\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn false;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 115
                },
                {
                        "id": "pretrain_java_data_17119544",
                        "content": "<filename>references/bcb_chosen_clones/selected#1129461#121#148.java\nprivate static boolean setBundleInfoName(String location, List<BundleInfo> list) {\ntry {\nURL url = new URL(location);\nBufferedReader br = new BufferedReader(new InputStreamReader(url.openStream(), \"UTF-8\"));\nwhile (true) {\nString line = br.readLine();\nif (line == null) {\nbreak;\n}\nint pos1 = line.indexOf('=');\nif (pos1 < 0) {\ncontinue;\n}\nString bundleSymbolicName = line.substring(0, pos1);\nString bundleName = line.substring(pos1 + 1);\nfor (BundleInfo info : list) {\nif (info.bundleSymbolicName.equals(bundleSymbolicName)) {\ninfo.bundleName = bundleName;\nbreak;\n}\n}\n}\nreturn true;\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn false;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1129461#121#148.java",
                        "__cluster__": 115
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_18621847",
                        "content": "private static void copyFiles(String strPath, String dstPath) throws Exception {\nFile src = new File(strPath);\nFile dest = new File(dstPath);\nif (src.isDirectory()) {\ndest.mkdirs();\nString list[] = src.list();\nfor (int i = 0; i < list.length; i++) {\nString dest1 = dest.getAbsolutePath() + \"\\\\\" + list[i];\nString src1 = src.getAbsolutePath() + \"\\\\\" + list[i];\ncopyFiles(src1, dest1);\n}\n} else {\nFileChannel sourceChannel = new FileInputStream(src).getChannel();\nFileChannel targetChannel = new FileOutputStream(dest).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\nsourceChannel.close();\ntargetChannel.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#588998#47#65.java",
                        "__cluster__": 375
                },
                {
                        "id": "test_bigclonebench_data_22264586",
                        "content": "private static void copyFiles(String strPath, String dstPath) throws Exception {\nFile src = new File(strPath);\nFile dest = new File(dstPath);\nif (src.isDirectory()) {\ndest.mkdirs();\nString list[] = src.list();\nfor (int i = 0; i < list.length; i++) {\nString dest1 = dest.getAbsolutePath() + \"\\\\\" + list[i];\nString src1 = src.getAbsolutePath() + \"\\\\\" + list[i];\ncopyFiles(src1, dest1);\n}\n} else {\nFileChannel sourceChannel = new FileInputStream(src).getChannel();\nFileChannel targetChannel = new FileOutputStream(dest).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\nsourceChannel.close();\ntargetChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 375
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_18675886",
                        "content": "public String sendRequest(java.lang.String servletName, java.lang.String request) {\nString reqxml = \"\";\norg.jdom.Document retdoc = null;\nString myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\nString myport = \"\";\nmyport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\nif (myport == null || myport.trim().equals(\"\")) {\nmyport = \"80\";\n}\nif (this.serverURL == null) {\ntry {\njava.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\nif (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n} catch (Exception exp) {\nexp.printStackTrace();\nserverURL = \"localhost\";\n}\nnewgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\nipdig.show();\nserverURL = myurl = ipdig.getIPAddress();\nmyport = ipdig.getPortNo();\njava.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\njava.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\nSystem.out.println(serverURL);\n}\ntry {\nSystem.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\njava.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\njava.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\nurlconn.setDoOutput(true);\nurlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\njava.io.OutputStream os = urlconn.getOutputStream();\nString req1xml = request;\njava.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\njava.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\njava.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\nSystem.out.println(\"#########***********$$$$$$$$##########\" + req1xml);\ndos.write(req1xml);\ndos.flush();\ndos.close();\nSystem.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\njava.io.InputStream ios = urlconn.getInputStream();\njava.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\njava.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\njava.io.InputStreamReader br = new java.io.InputStreamReader(gip, \"UTF-8\");\nretdoc = (new org.jdom.input.SAXBuilder()).build(br);\n} catch (java.net.ConnectException conexp) {\njavax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(\"ConnectExceptionMessage\"), \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n} catch (Exception exp) {\nexp.printStackTrace(System.out);\nTroubleShootConnectivity troubleShoot = new TroubleShootConnectivity();\n}\nSystem.out.println(reqxml);\nreturn (new org.jdom.output.XMLOutputter()).outputString(retdoc);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#18267#20#74.java",
                        "__cluster__": 510
                },
                {
                        "id": "test_bigclonebench_data_22401746",
                        "content": "public String sendRequest(java.lang.String servletName, java.lang.String request) {\nString reqxml = \"\";\norg.jdom.Document retdoc = null;\nString myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\nString myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\nif (this.serverURL == null) {\ntry {\njava.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\nif (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n} catch (Exception exp) {\nexp.printStackTrace();\nserverURL = \"localhost\";\n}\nnewgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\nipdig.show();\nserverURL = myurl = ipdig.getIPAddress();\nmyport = ipdig.getPortNo();\njava.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\njava.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\nSystem.out.println(serverURL);\n}\ntry {\nSystem.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\njava.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\njava.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\nurlconn.setDoOutput(true);\nurlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\njava.io.OutputStream os = urlconn.getOutputStream();\nString req1xml = request;\njava.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\njava.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\njava.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\nSystem.out.println(req1xml);\ndos.write(req1xml);\ndos.flush();\ndos.close();\nSystem.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\njava.io.InputStream ios = urlconn.getInputStream();\njava.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\njava.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\njava.io.InputStreamReader br = new java.io.InputStreamReader(gip, \"UTF-8\");\nretdoc = (new org.jdom.input.SAXBuilder()).build(br);\n} catch (java.net.ConnectException conexp) {\njavax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(\"ConnectExceptionMessage\"), \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n} catch (Exception exp) {\nexp.printStackTrace(System.out);\n}\nSystem.out.println(reqxml);\nreturn \"\";\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 510
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_18663554",
                        "content": "private boolean checkHashBack(Facade facade, HttpServletRequest req) {\nString txtTransactionID = req.getParameter(\"txtTransactionID\");\nString txtOrderTotal = req.getParameter(\"txtOrderTotal\");\nString txtShopId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);\nString txtArtCurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);\nString txtHashBack = req.getParameter(\"txtHashBack\");\nString hashSeed = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);\nString securityValue = txtShopId + txtArtCurrency + txtOrderTotal + hashSeed + txtTransactionID;\nMessageDigest digest;\ntry {\ndigest = java.security.MessageDigest.getInstance(\"MD5\");\ndigest.update(securityValue.getBytes());\nbyte[] array = digest.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nString hash = sb.toString();\nSystem.out.println(\"com.eshop.http.servlets.PaymentController.checkHashBack: \" + hash + \" \" + txtHashBack);\nif (txtHashBack.equals(hash)) {\nreturn true;\n}\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nreturn false;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1936990#152#180.java",
                        "__cluster__": 860
                },
                {
                        "id": "test_bigclonebench_data_9826240",
                        "content": "private boolean checkHashBack(Facade facade, HttpServletRequest req) {\nString txtTransactionID = req.getParameter(\"txtTransactionID\");\nString txtOrderTotal = req.getParameter(\"txtOrderTotal\");\nString txtShopId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);\nString txtArtCurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);\nString txtHashBack = req.getParameter(\"txtHashBack\");\nString hashSeed = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);\nString securityValue = txtShopId + txtArtCurrency + txtOrderTotal + hashSeed + txtTransactionID;\nMessageDigest digest;\ntry {\ndigest = java.security.MessageDigest.getInstance(\"MD5\");\ndigest.update(securityValue.getBytes());\nbyte[] array = digest.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nString hash = sb.toString();\nSystem.out.println(\"com.eshop.http.servlets.PaymentController.checkHashBack: \" + hash + \" \" + txtHashBack);\nif (txtHashBack.equals(hash)) {\nreturn true;\n}\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nreturn false;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 860
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13499897",
                        "content": "public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {\nint last = destfile.lastIndexOf('/');\nif (last < 0) {\nDrxWriteError(\"CopyFile\", \"Destination filepath \" + destfile + \" doesn't contain /\");\nthrow new java.io.FileNotFoundException(destfile);\n}\nString parent = destfile.substring(0, last);\nif (parent.length() > 0) {\nFile f = new File(parent);\nif (!f.isDirectory()) {\nif (!f.mkdirs()) {\nDrxWriteError(\"CopyFile\", \"Folder \" + parent + \" doesn't exist, cannot create\");\n}\n}\n}\nFileChannel srcChannel = new FileInputStream(sourcefile).getChannel();\nFileChannel dstChannel = new FileOutputStream(destfile).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\nreturn destfile;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 757
                },
                {
                        "id": "pretrain_java_data_17168089",
                        "content": "<filename>references/bcb_chosen_clones/selected#1921946#889#910.java\npublic static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {\nint last = destfile.lastIndexOf('/');\nif (last < 0) {\nDrxWriteError(\"CopyFile\", \"Destination filepath \" + destfile + \" doesn't contain /\");\nthrow new java.io.FileNotFoundException(destfile);\n}\nString parent = destfile.substring(0, last);\nif (parent.length() > 0) {\nFile f = new File(parent);\nif (!f.isDirectory()) {\nif (!f.mkdirs()) {\nDrxWriteError(\"CopyFile\", \"Folder \" + parent + \" doesn't exist, cannot create\");\n}\n}\n}\nFileChannel srcChannel = new FileInputStream(sourcefile).getChannel();\nFileChannel dstChannel = new FileOutputStream(destfile).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\nreturn destfile;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1921946#889#910.java",
                        "__cluster__": 757
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4362939",
                        "content": "public void runInternal() {\nconnection = null;\nboolean itemsLoadedPartially = false;\nboolean loadNext = false;\nHashSet<String> visited = new HashSet<String>();\ndo {\ntry {\nsetProgressMessage(url.toString(), -1);\nvisited.add(url.toString());\nlong startTimeStamp = System.currentTimeMillis();\ndelayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\nURLConnection conn = url.openConnection();\nif (conn instanceof HttpsURLConnection) {\nonError(\"HTTPs is not supported yet\");\nreturn;\n}\nif (!(conn instanceof HttpURLConnection)) {\nonError(\"Only HTTP supported\");\nreturn;\n}\nconnection = (HttpURLConnection) conn;\nconnection.setRequestProperty(\"User-Agent\", \"CoolReader/3(Android)\");\nif (referer != null) connection.setRequestProperty(\"Referer\", referer);\nconnection.setInstanceFollowRedirects(true);\nconnection.setAllowUserInteraction(false);\nconnection.setConnectTimeout(CONNECT_TIMEOUT);\nconnection.setReadTimeout(READ_TIMEOUT);\nconnection.setDoInput(true);\nString fileName = null;\nString disp = connection.getHeaderField(\"Content-Disposition\");\nif (disp != null) {\nint p = disp.indexOf(\"filename=\");\nif (p > 0) {\nfileName = disp.substring(p + 9);\n}\n}\nint response = -1;\nresponse = connection.getResponseCode();\nL.d(\"Response: \" + response);\nif (response != 200) {\nonError(\"Error \" + response);\nreturn;\n}\nString contentType = connection.getContentType();\nString contentEncoding = connection.getContentEncoding();\nint contentLen = connection.getContentLength();\nL.d(\"Entity content length: \" + contentLen);\nL.d(\"Entity content type: \" + contentType);\nL.d(\"Entity content encoding: \" + contentEncoding);\nsetProgressMessage(url.toString(), contentLen);\nInputStream is = connection.getInputStream();\ndelayedProgress.cancel();\nis = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\nfinal int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\nboolean isZip = contentType != null && contentType.equals(\"application/zip\");\nif (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\nbyte[] buf = new byte[contentLen];\nif (is.read(buf) != contentLen) {\nonError(\"Wrong content length\");\nreturn;\n}\nis.close();\nis = null;\nis = new ByteArrayInputStream(buf);\nif (findSubstring(buf, \"<?xml version=\") >= 0 && findSubstring(buf, \"<feed\") >= 0) contentType = \"application/atom+xml\";\n}\nif (contentType.startsWith(\"application/atom+xml\")) {\nL.d(\"Parsing feed\");\nparseFeed(is);\nitemsLoadedPartially = true;\nif (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(\"application/atom+xml;profile=opds-catalog\")) {\nif (handler.entries.size() < MAX_OPDS_ITEMS) {\nurl = new URL(handler.docInfo.nextLink.href);\nloadNext = !visited.contains(url.toString());\nL.d(\"continue with next part: \" + url);\n} else {\nL.d(\"max item count reached: \" + handler.entries.size());\nloadNext = false;\n}\n} else {\nloadNext = false;\n}\n} else {\nif (fileName == null) fileName = defaultFileName;\nL.d(\"Downloading book: \" + contentEncoding);\ndownloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\nif (progressShown) coolReader.getEngine().hideProgress();\nloadNext = false;\nitemsLoadedPartially = false;\n}\n} catch (Exception e) {\nL.e(\"Exception while trying to open URI \" + url.toString(), e);\nif (progressShown) coolReader.getEngine().hideProgress();\nonError(\"Error occured while reading OPDS catalog\");\nbreak;\n} finally {\nif (connection != null) try {\nconnection.disconnect();\n} catch (Exception e) {\n}\n}\n} while (loadNext);\nif (progressShown) coolReader.getEngine().hideProgress();\nif (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n@Override\npublic void run() {\nL.d(\"Parsing is finished successfully. \" + handler.entries.size() + \" entries found\");\ncallback.onFinish(handler.docInfo, handler.entries);\n}\n});\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#228510#539#650.java",
                        "__cluster__": 36
                },
                {
                        "id": "test_bigclonebench_data_17580775",
                        "content": "public void runInternal() {\nconnection = null;\nboolean itemsLoadedPartially = false;\nboolean loadNext = false;\nHashSet<String> visited = new HashSet<String>();\ndo {\ntry {\nsetProgressMessage(url.toString(), -1);\nvisited.add(url.toString());\nlong startTimeStamp = System.currentTimeMillis();\ndelayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\nURLConnection conn = url.openConnection();\nif (conn instanceof HttpsURLConnection) {\nonError(\"HTTPs is not supported yet\");\nreturn;\n}\nif (!(conn instanceof HttpURLConnection)) {\nonError(\"Only HTTP supported\");\nreturn;\n}\nconnection = (HttpURLConnection) conn;\nconnection.setRequestProperty(\"User-Agent\", \"CoolReader/3(Android)\");\nif (referer != null) connection.setRequestProperty(\"Referer\", referer);\nconnection.setInstanceFollowRedirects(true);\nconnection.setAllowUserInteraction(false);\nconnection.setConnectTimeout(CONNECT_TIMEOUT);\nconnection.setReadTimeout(READ_TIMEOUT);\nconnection.setDoInput(true);\nString fileName = null;\nString disp = connection.getHeaderField(\"Content-Disposition\");\nif (disp != null) {\nint p = disp.indexOf(\"filename=\");\nif (p > 0) {\nfileName = disp.substring(p + 9);\n}\n}\nint response = -1;\nresponse = connection.getResponseCode();\nL.d(\"Response: \" + response);\nif (response != 200) {\nonError(\"Error \" + response);\nreturn;\n}\nString contentType = connection.getContentType();\nString contentEncoding = connection.getContentEncoding();\nint contentLen = connection.getContentLength();\nL.d(\"Entity content length: \" + contentLen);\nL.d(\"Entity content type: \" + contentType);\nL.d(\"Entity content encoding: \" + contentEncoding);\nsetProgressMessage(url.toString(), contentLen);\nInputStream is = connection.getInputStream();\ndelayedProgress.cancel();\nis = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\nfinal int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\nboolean isZip = contentType != null && contentType.equals(\"application/zip\");\nif (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\nbyte[] buf = new byte[contentLen];\nif (is.read(buf) != contentLen) {\nonError(\"Wrong content length\");\nreturn;\n}\nis.close();\nis = null;\nis = new ByteArrayInputStream(buf);\nif (findSubstring(buf, \"<?xml version=\") >= 0 && findSubstring(buf, \"<feed\") >= 0) contentType = \"application/atom+xml\";\n}\nif (contentType.startsWith(\"application/atom+xml\")) {\nL.d(\"Parsing feed\");\nparseFeed(is);\nitemsLoadedPartially = true;\nif (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(\"application/atom+xml;profile=opds-catalog\")) {\nif (handler.entries.size() < MAX_OPDS_ITEMS) {\nurl = new URL(handler.docInfo.nextLink.href);\nloadNext = !visited.contains(url.toString());\nL.d(\"continue with next part: \" + url);\n} else {\nL.d(\"max item count reached: \" + handler.entries.size());\nloadNext = false;\n}\n} else {\nloadNext = false;\n}\n} else {\nif (fileName == null) fileName = defaultFileName;\nL.d(\"Downloading book: \" + contentEncoding);\ndownloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\nif (progressShown) coolReader.getEngine().hideProgress();\nloadNext = false;\nitemsLoadedPartially = false;\n}\n} catch (Exception e) {\nL.e(\"Exception while trying to open URI \" + url.toString(), e);\nif (progressShown) coolReader.getEngine().hideProgress();\nonError(\"Error occured while reading OPDS catalog\");\nbreak;\n} finally {\nif (connection != null) try {\nconnection.disconnect();\n} catch (Exception e) {\n}\n}\n} while (loadNext);\nif (progressShown) coolReader.getEngine().hideProgress();\nif (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n@Override\npublic void run() {\nL.d(\"Parsing is finished successfully. \" + handler.entries.size() + \" entries found\");\ncallback.onFinish(handler.docInfo, handler.entries);\n}\n});\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 36
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4250700",
                        "content": "<filename>references/bcb_chosen_clones/selected#593274#297#323.java\nprivate void readIntoList(URL url, Map<String, JMenuItem> list) {\ntry {\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\nint commandNameBegin = inputLine.indexOf(\">\") + 1;\nint commandNameEnd = inputLine.indexOf(\"</a>\");\nJMenuItem item = new JMenuItem(\"<html>\" + inputLine + \"</html>\");\nif (list == allRooms) {\nitem.setActionCommand(\"/room \" + inputLine.substring(commandNameBegin, commandNameEnd));\n} else {\nitem.setActionCommand(\"/\" + inputLine.substring(commandNameBegin, commandNameEnd) + \" \");\n}\nitem.addActionListener(new ActionListener() {\npublic void actionPerformed(ActionEvent e) {\njTextField1.setText(e.getActionCommand());\npopup.setVisible(false);\n}\n});\nlist.put(inputLine.substring(commandNameBegin, commandNameEnd), item);\n}\nin.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#593274#297#323.java",
                        "__cluster__": 71
                },
                {
                        "id": "test_bigclonebench_data_16079868",
                        "content": "private void readIntoList(URL url, Map<String, JMenuItem> list) {\ntry {\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\nint commandNameBegin = inputLine.indexOf(\">\") + 1;\nint commandNameEnd = inputLine.indexOf(\"</a>\");\nJMenuItem item = new JMenuItem(\"<html>\" + inputLine + \"</html>\");\nif (list == allRooms) {\nitem.setActionCommand(\"/room \" + inputLine.substring(commandNameBegin, commandNameEnd));\n} else {\nitem.setActionCommand(\"/\" + inputLine.substring(commandNameBegin, commandNameEnd) + \" \");\n}\nitem.addActionListener(new ActionListener() {\npublic void actionPerformed(ActionEvent e) {\njTextField1.setText(e.getActionCommand());\npopup.setVisible(false);\n}\n});\nlist.put(inputLine.substring(commandNameBegin, commandNameEnd), item);\n}\nin.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 71
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_411595",
                        "content": "private void displayDiffResults() throws IOException {\nFile outFile = File.createTempFile(\"diff\", \".htm\");\noutFile.deleteOnExit();\nFileOutputStream outStream = new FileOutputStream(outFile);\nBufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\nout.write(\"<html><head><title>LOC Differences</title>\\n\" + SCRIPT + \"</head>\\n\" + \"<body bgcolor='#ffffff'>\\n\" + \"<div onMouseOver=\\\"window.defaultStatus='Metrics'\\\">\\n\");\nif (addedTable.length() > 0) {\nout.write(\"<table border><tr><th>Files Added:</th>\" + \"<th>Add</th><th>Type</th></tr>\");\nout.write(addedTable.toString());\nout.write(\"</table><br><br>\");\n}\nif (modifiedTable.length() > 0) {\nout.write(\"<table border><tr><th>Files Modified:</th>\" + \"<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>\" + \"<th>Total</th><th>Type</th></tr>\");\nout.write(modifiedTable.toString());\nout.write(\"</table><br><br>\");\n}\nif (deletedTable.length() > 0) {\nout.write(\"<table border><tr><th>Files Deleted:</th>\" + \"<th>Del</th><th>Type</th></tr>\");\nout.write(deletedTable.toString());\nout.write(\"</table><br><br>\");\n}\nout.write(\"<table name=METRICS BORDER>\\n\");\nif (modifiedTable.length() > 0 || deletedTable.length() > 0) {\nout.write(\"<tr><td>Base:&nbsp;</td><td>\");\nout.write(Long.toString(base));\nout.write(\"</td></tr>\\n<tr><td>Deleted:&nbsp;</td><td>\");\nout.write(Long.toString(deleted));\nout.write(\"</td></tr>\\n<tr><td>Modified:&nbsp;</td><td>\");\nout.write(Long.toString(modified));\nout.write(\"</td></tr>\\n<tr><td>Added:&nbsp;</td><td>\");\nout.write(Long.toString(added));\nout.write(\"</td></tr>\\n<tr><td>New & Changed:&nbsp;</td><td>\");\nout.write(Long.toString(added + modified));\nout.write(\"</td></tr>\\n\");\n}\nout.write(\"<tr><td>Total:&nbsp;</td><td>\");\nout.write(Long.toString(total));\nout.write(\"</td></tr>\\n</table></div>\");\nredlinesOut.close();\nout.flush();\nInputStream redlines = new FileInputStream(redlinesTempFile);\nbyte[] buffer = new byte[4096];\nint bytesRead;\nwhile ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\noutStream.write(\"</BODY></HTML>\".getBytes());\noutStream.close();\nBrowser.launch(outFile.toURL().toString());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 312
                },
                {
                        "id": "pretrain_java_data_4231769",
                        "content": "private void displayDiffResults() throws IOException {\nFile outFile = File.createTempFile(\"diff\", \".htm\");\noutFile.deleteOnExit();\nFileOutputStream outStream = new FileOutputStream(outFile);\nBufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\nout.write(\"<html><head><title>LOC Differences</title>\\n\" + SCRIPT + \"</head>\\n\" + \"<body bgcolor='#ffffff'>\\n\" + \"<div onMouseOver=\\\"window.defaultStatus='Metrics'\\\">\\n\");\nif (addedTable.length() > 0) {\nout.write(\"<table border><tr><th>Files Added:</th>\" + \"<th>Add</th><th>Type</th></tr>\");\nout.write(addedTable.toString());\nout.write(\"</table><br><br>\");\n}\nif (modifiedTable.length() > 0) {\nout.write(\"<table border><tr><th>Files Modified:</th>\" + \"<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>\" + \"<th>Total</th><th>Type</th></tr>\");\nout.write(modifiedTable.toString());\nout.write(\"</table><br><br>\");\n}\nif (deletedTable.length() > 0) {\nout.write(\"<table border><tr><th>Files Deleted:</th>\" + \"<th>Del</th><th>Type</th></tr>\");\nout.write(deletedTable.toString());\nout.write(\"</table><br><br>\");\n}\nout.write(\"<table name=METRICS BORDER>\\n\");\nif (modifiedTable.length() > 0 || deletedTable.length() > 0) {\nout.write(\"<tr><td>Base:&nbsp;</td><td>\");\nout.write(Long.toString(base));\nout.write(\"</td></tr>\\n<tr><td>Deleted:&nbsp;</td><td>\");\nout.write(Long.toString(deleted));\nout.write(\"</td></tr>\\n<tr><td>Modified:&nbsp;</td><td>\");\nout.write(Long.toString(modified));\nout.write(\"</td></tr>\\n<tr><td>Added:&nbsp;</td><td>\");\nout.write(Long.toString(added));\nout.write(\"</td></tr>\\n<tr><td>New & Changed:&nbsp;</td><td>\");\nout.write(Long.toString(added + modified));\nout.write(\"</td></tr>\\n\");\n}\nout.write(\"<tr><td>Total:&nbsp;</td><td>\");\nout.write(Long.toString(total));\nout.write(\"</td></tr>\\n</table></div>\");\nredlinesOut.close();\nout.flush();\nInputStream redlines = new FileInputStream(redlinesTempFile);\nbyte[] buffer = new byte[4096];\nint bytesRead;\nwhile ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\noutStream.write(\"</BODY></HTML>\".getBytes());\noutStream.close();\nBrowser.launch(outFile.toURL().toString());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#97193#367#414.java",
                        "__cluster__": 312
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4270692",
                        "content": "public void setImg() {\nJFileChooser jFileChooser1 = new JFileChooser();\nString separator = \"\";\nif (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\nsetPath(jFileChooser1.getSelectedFile().getPath());\nseparator = jFileChooser1.getSelectedFile().separator;\nFile dirImg = new File(\".\" + separator + \"images\");\nif (!dirImg.exists()) {\ndirImg.mkdir();\n}\nint index = getPath().lastIndexOf(separator);\nString imgName = getPath().substring(index);\nString newPath = dirImg + imgName;\ntry {\nFile inputFile = new File(getPath());\nFile outputFile = new File(newPath);\nif (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\nFileInputStream in = new FileInputStream(inputFile);\nFileOutputStream out = new FileOutputStream(outputFile);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}\n} catch (Exception ex) {\nex.printStackTrace();\nLogHandler.log(ex.getMessage(), Level.INFO, \"LOG_MSG\", isLoggingEnabled());\nJOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + \"-\" + getClass(), \"Set image\", JOptionPane.ERROR_MESSAGE);\n}\nsetPath(newPath);\nbckImg = new ImageIcon(getPath());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2144903#465#497.java",
                        "__cluster__": 894
                },
                {
                        "id": "test_bigclonebench_data_8135072",
                        "content": "public void setImg() {\nJFileChooser jFileChooser1 = new JFileChooser();\nString separator = \"\";\nif (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\nsetPath(jFileChooser1.getSelectedFile().getPath());\nseparator = jFileChooser1.getSelectedFile().separator;\nFile dirImg = new File(\".\" + separator + \"images\");\nif (!dirImg.exists()) {\ndirImg.mkdir();\n}\nint index = getPath().lastIndexOf(separator);\nString imgName = getPath().substring(index);\nString newPath = dirImg + imgName;\ntry {\nFile inputFile = new File(getPath());\nFile outputFile = new File(newPath);\nif (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\nFileInputStream in = new FileInputStream(inputFile);\nFileOutputStream out = new FileOutputStream(outputFile);\nint c;\nwhile ((c = in.read()) != -1) out.write(c);\nin.close();\nout.close();\n}\n} catch (Exception ex) {\nex.printStackTrace();\nLogHandler.log(ex.getMessage(), Level.INFO, \"LOG_MSG\", isLoggingEnabled());\nJOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + \"-\" + getClass(), \"Set image\", JOptionPane.ERROR_MESSAGE);\n}\nsetPath(newPath);\nbckImg = new ImageIcon(getPath());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 894
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4291554",
                        "content": "<filename>references/bcb_chosen_clones/selected#598418#91#118.java<gh_stars>10-100\npublic void postData(String protocol, String host, String form, String data) throws Exception {\nif ((protocol == null) || (protocol.equals(\"\"))) {\nprotocol = DEFAULT_PROTOCOL;\n}\nif ((host == null) || (host.equals(\"\"))) {\nhost = DEFAULT_HOST;\n}\nif (form == null) {\nform = DEFAULT_FORM;\n}\nif (data == null) {\nthrow new IllegalArgumentException(\"Invalid data\");\n}\nURL url = new URL(protocol, host, form);\nURLConnection con = url.openConnection();\ncon.setDoOutput(true);\ncon.setDoInput(true);\ncon.setUseCaches(false);\ncon.setRequestProperty(\"Content-type\", \"application/x-www-form-urlencoded\");\ncon.setRequestProperty(\"Content-length\", String.valueOf(data.length()));\nPrintStream out = new PrintStream(con.getOutputStream(), true);\nout.print(data);\nout.close();\nBufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\nwhile (in.readLine() != null) {\n}\nin.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#598418#91#118.java",
                        "__cluster__": 45
                },
                {
                        "id": "test_bigclonebench_data_7846688",
                        "content": "public void postData(String protocol, String host, String form, String data) throws Exception {\nif ((protocol == null) || (protocol.equals(\"\"))) {\nprotocol = DEFAULT_PROTOCOL;\n}\nif ((host == null) || (host.equals(\"\"))) {\nhost = DEFAULT_HOST;\n}\nif (form == null) {\nform = DEFAULT_FORM;\n}\nif (data == null) {\nthrow new IllegalArgumentException(\"Invalid data\");\n}\nURL url = new URL(protocol, host, form);\nURLConnection con = url.openConnection();\ncon.setDoOutput(true);\ncon.setDoInput(true);\ncon.setUseCaches(false);\ncon.setRequestProperty(\"Content-type\", \"application/x-www-form-urlencoded\");\ncon.setRequestProperty(\"Content-length\", String.valueOf(data.length()));\nPrintStream out = new PrintStream(con.getOutputStream(), true);\nout.print(data);\nout.close();\nBufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\nwhile (in.readLine() != null) {\n}\nin.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 45
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14053882",
                        "content": "public synchronized String encrypt(String plaintext) throws Exception {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\n} catch (NoSuchAlgorithmException e) {\nthrow new Exception(e.getMessage());\n}\ntry {\nmd.update(plaintext.getBytes(\"UTF-8\"));\n} catch (UnsupportedEncodingException e) {\nthrow new Exception(e.getMessage());\n}\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 114
                },
                {
                        "id": "pretrain_java_data_4268100",
                        "content": "public synchronized String encrypt(String plaintext) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(plaintext.getBytes(\"UTF-8\"));\n} catch (NoSuchAlgorithmException e) {\nlog().error(\"failed to encrypt the password.\", e);\nthrow new RuntimeException(\"failed to encrypt the password.\", e);\n} catch (UnsupportedEncodingException e) {\nlog().error(\"failed to encrypt the password.\", e);\nthrow new RuntimeException(\"failed to encrypt the password.\", e);\n}\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#413935#25#40.java",
                        "__cluster__": 114
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_10214218",
                        "content": "public synchronized String encrypt(String plaintext) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\ntry {\nmd.update(plaintext.getBytes(\"UTF-8\"));\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 114
                },
                {
                        "id": "pretrain_java_data_4268100",
                        "content": "public synchronized String encrypt(String plaintext) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(plaintext.getBytes(\"UTF-8\"));\n} catch (NoSuchAlgorithmException e) {\nlog().error(\"failed to encrypt the password.\", e);\nthrow new RuntimeException(\"failed to encrypt the password.\", e);\n} catch (UnsupportedEncodingException e) {\nlog().error(\"failed to encrypt the password.\", e);\nthrow new RuntimeException(\"failed to encrypt the password.\", e);\n}\nbyte raw[] = md.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#413935#25#40.java",
                        "__cluster__": 114
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_18795578",
                        "content": "public static String getWebPage(URL urlObj) {\ntry {\nString content = \"\";\nInputStreamReader is = new InputStreamReader(urlObj.openStream());\nBufferedReader reader = new BufferedReader(is);\nString line;\nwhile ((line = reader.readLine()) != null) {\ncontent += line;\n}\nreturn content;\n} catch (IOException e) {\nthrow new Error(\"The page \" + quote(urlObj.toString()) + \"could not be retrieved.\" + \"\\nThis is could be caused by a number of things:\" + \"\\n\" + \"\\n  - the computer hosting the web page you want is down, or has returned an error\" + \"\\n  - your computer does not have Internet access\" + \"\\n  - the heat death of the universe has occurred, taking down all web servers with it\");\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2635690#254#267.java",
                        "__cluster__": 597
                },
                {
                        "id": "test_bigclonebench_data_21821404",
                        "content": "public static String getWebPage(URL urlObj) {\ntry {\nString content = \"\";\nInputStreamReader is = new InputStreamReader(urlObj.openStream());\nBufferedReader reader = new BufferedReader(is);\nString line;\nwhile ((line = reader.readLine()) != null) {\ncontent += line;\n}\nreturn content;\n} catch (IOException e) {\nthrow new Error(\"The page \" + dbg.quote(urlObj.toString()) + \"could not be retrieved.\" + \"\\nThis is could be caused by a number of things:\" + \"\\n\" + \"\\n  - the computer hosting the web page you want is down, or has returned an error\" + \"\\n  - your computer does not have Internet access\" + \"\\n  - the heat death of the universe has occurred, taking down all web servers with it\");\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 597
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "pretrain_java_data_4346904",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#1947552#148#163.java\nprotected String getPasswordHash(String password) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nlog.error(\"MD5 algorithm not found\", e);\nthrow new ServiceException(e);\n}\nmd.update(password.getBytes());\nbyte[] hash = md.digest();\nStringBuffer buf = new StringBuffer();\nfor (int i = 0; i < hash.length; i++) {\nbuf.append(Integer.toHexString(hash[i] & 0xff));\n}\nreturn buf.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1947552#148#163.java",
                        "__cluster__": 253
                },
                {
                        "id": "test_bigclonebench_data_13012591",
                        "content": "protected String getPasswordHash(String password) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nlog.error(\"MD5 algorithm not found\", e);\nthrow new ServiceException(e);\n}\nmd.update(password.getBytes());\nbyte[] hash = md.digest();\nStringBuffer buf = new StringBuffer();\nfor (int i = 0; i < hash.length; i++) {\nbuf.append(Integer.toHexString(hash[i] & 0xff));\n}\nreturn buf.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 253
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_5801574",
                        "content": "public void createVendorSignature() {\nbyte b;\ntry {\n_vendorMessageDigest = MessageDigest.getInstance(\"MD5\");\n_vendorSig = Signature.getInstance(\"MD5/RSA/PKCS#1\");\n_vendorSig.initSign((PrivateKey) _vendorPrivateKey);\n_vendorMessageDigest.update(getBankString().getBytes());\n_vendorMessageDigestBytes = _vendorMessageDigest.digest();\n_vendorSig.update(_vendorMessageDigestBytes);\n_vendorSignatureBytes = _vendorSig.sign();\n} catch (Exception e) {\n}\n;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#55330#179#192.java",
                        "__cluster__": 505
                },
                {
                        "id": "test_bigclonebench_data_932225",
                        "content": "public void createVendorSignature() {\nbyte b;\ntry {\n_vendorMessageDigest = MessageDigest.getInstance(\"MD5\");\n_vendorSig = Signature.getInstance(\"MD5/RSA/PKCS#1\");\n_vendorSig.initSign((PrivateKey) _vendorPrivateKey);\n_vendorMessageDigest.update(getBankString().getBytes());\n_vendorMessageDigestBytes = _vendorMessageDigest.digest();\n_vendorSig.update(_vendorMessageDigestBytes);\n_vendorSignatureBytes = _vendorSig.sign();\n} catch (Exception e) {\n}\n;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 505
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6304373",
                        "content": "public static String uploadOrDeleteMediaOrTemplates(String action, String object, String numElements, HttpServletRequest req, HttpSession session) {\nFTPClient ftp = new FTPClient();\nCofaxToolsUser user = (CofaxToolsUser) session.getAttribute(\"user\");\nStringBuffer links = new StringBuffer();\nStringBuffer folders = new StringBuffer();\nString folder = \"\";\nString server = \"\";\nString login = \"\";\nString password = \"\";\nString fileTransferFolder = CofaxToolsServlet.fileTransferFolder;\nString liveFolder = \"\";\nArrayList servers = new ArrayList();\nStringBuffer message = new StringBuffer();\nmessage.append(\"Status:<BR>\");\nif (action.equals(\"Upload\")) {\nserver = (String) user.workingPubConfigElementsHash.get(\"TESTFTPSERVER\");\nlogin = (String) user.workingPubConfigElementsHash.get(\"TESTFTPLOGIN\");\npassword = (String) user.workingPubConfigElementsHash.get(\"TESTFTPPASSWORD\");\nif (object.equals(\"Media\")) {\nfolder = (String) user.workingPubConfigElementsHash.get(\"TESTIMAGESFOLDER\");\n}\nif (object.equals(\"Templates\")) {\nfolder = (String) user.workingPubConfigElementsHash.get(\"TESTTEMPLATEFOLDER\");\n}\n}\nif (action.equals(\"Delete\")) {\nlogin = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPLOGIN\");\npassword = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPPASSWORD\");\nif (object.equals(\"Media\")) {\nserver = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESSERVER\");\nfolder = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESFOLDER\");\n}\nif (object.equals(\"Templates\")) {\nserver = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPSERVER\");\nfolder = (String) user.workingPubConfigElementsHash.get(\"LIVETEMPLATEFOLDER\");\n}\n}\nArrayList al = new ArrayList();\nint numElement = Integer.parseInt(numElements);\nfor (int i = 0; i < numElement; i++) {\nString key = String.valueOf(i);\nString file = req.getParameter(key);\nif (file != null) {\nal.add(file);\n}\n}\nif (action.equals(\"Upload\")) {\ntry {\nint reply;\nftp.connect(server);\nCofaxToolsUtil.log(ftp.getReplyString());\nreply = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftp.disconnect();\nreturn (\"FTP server refused connection.\");\n} else {\nftp.login(login, password);\n}\nfor (int ii = 0; ii < al.size(); ii++) {\nString fileName = (String) al.get(ii);\nString folderName = stripName(fileName);\nfileName = stripPath(fileName);\ntry {\nftp.changeWorkingDirectory(folderName);\nOutputStream output;\noutput = new FileOutputStream(fileTransferFolder + fileName);\nftp.retrieveFile(fileName, output);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: \" + ftp.getReplyString());\nmessage.append(\"Retrieving file \" + fileName + \" to local disk.<BR>\");\noutput.close();\n} catch (java.io.IOException e) {\nreturn (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file\" + e);\n}\n}\nftp.logout();\nftp.disconnect();\n} catch (IOException e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: \" + e);\nreturn (\"Could not connect to server: \" + e);\n}\nlogin = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPLOGIN\");\npassword = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPPASSWORD\");\nif (object.equals(\"Media\")) {\nserver = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESSERVER\");\nliveFolder = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESFOLDER\");\n}\nif (object.equals(\"Templates\")) {\nserver = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPSERVER\");\nliveFolder = (String) user.workingPubConfigElementsHash.get(\"LIVETEMPLATEFOLDER\");\n}\nservers = splitServers(server);\nfor (int iii = 0; iii < servers.size(); iii++) {\ntry {\nint reply;\nString connectServer = (String) servers.get(iii);\nftp.connect(connectServer);\nCofaxToolsUtil.log(ftp.getReplyString());\nreply = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftp.disconnect();\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: \" + connectServer);\nreturn (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection.\");\n} else {\nftp.login(login, password);\n}\nfor (int ii = 0; ii < al.size(); ii++) {\nString fileName = (String) al.get(ii);\nCofaxToolsUtil.log(\"Original String \" + fileName);\nCofaxToolsUtil.log(\"Search for \" + folder);\nCofaxToolsUtil.log(\"Replace \" + liveFolder);\nString folderName = CofaxToolsUtil.replace(fileName, folder, liveFolder);\nCofaxToolsUtil.log(\"Results: \" + folderName);\nfolderName = stripName(folderName);\nfileName = stripPath(fileName);\ntry {\nInputStream io;\nio = new FileInputStream(fileTransferFolder + fileName);\nCofaxToolsUtil.log(\"Reading file : \" + fileTransferFolder + fileName);\nboolean directoryExists = ftp.changeWorkingDirectory(folderName);\nif (directoryExists == false) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: \" + folderName + \" does not exist. Attempting to create.\");\nmessage.append(\"Directory: \" + folderName + \" does not exist. Attempting to create.<BR>\");\nboolean canCreatDir = ftp.makeDirectory(folderName);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + canCreatDir);\nmessage.append(\"Results: \" + canCreatDir + \"<BR>\");\n}\nboolean isStored = ftp.storeFile(fileName, io);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: \" + fileName + \" in directory: \" + folderName);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : \" + connectServer);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + isStored + \" : \" + ftp.getReplyString());\nmessage.append(\"Storing file \" + fileName + \"<BR> to location \" + folderName + \"<BR> on server \" + connectServer + \".<BR>\");\n} catch (java.io.IOException e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file\" + fileName + \"<BR>To path: \" + folderName + \"<BR>On server \" + connectServer);\nreturn (\"Cannot upload file\" + fileName + \"<BR>To path: \" + folderName + \"<BR>On server \" + connectServer);\n}\n}\nftp.logout();\nftp.disconnect();\nmessage.append(\"Success<BR><BR>\");\n} catch (IOException e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: \" + e);\nreturn (\"Could not connect to server: \" + e);\n}\n}\nif (object.equals(\"Templates\")) {\nString cSServers = (String) user.workingPubConfigElementsHash.get(\"CACHESERVERS\");\nSystem.out.println(\"getting cache servers: \" + cSServers);\nArrayList cServers = splitServers(cSServers);\nfor (int iiii = 0; iiii < cServers.size(); iiii++) {\nString thisClearCacheServer = (String) cServers.get(iiii);\ntry {\nString connectServer = (String) cServers.get(iiii);\nfor (int iiiii = 0; iiiii < al.size(); iiiii++) {\nString thisFilePath = (String) al.get(iiiii);\nString folderNameFileName = CofaxToolsUtil.replace(thisFilePath, folder, liveFolder);\nString URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;\nCofaxToolsClearCache clear = new CofaxToolsClearCache(\"HTTP://\" + thisClearCacheServer + URLToClear);\nclear.start();\nmessage.append(\"Clearing Cache for \" + folderNameFileName + \"<BR>\");\nmessage.append(\"on server \" + thisClearCacheServer + \"<BR>Success<BR><BR>\");\n}\n} catch (Exception e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache \" + e);\n}\n}\n}\nfor (int i = 0; i < al.size(); i++) {\nString fileName = (String) al.get(i);\nString folderName = stripName(fileName);\nfileName = stripPath(fileName);\nFile file = new File(fileTransferFolder + fileName);\nboolean delete = file.delete();\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: \" + fileTransferFolder + fileName);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + delete);\n}\n}\nservers = splitServers(server);\nif (action.equals(\"Delete\")) {\nfor (int iii = 0; iii < servers.size(); iii++) {\ntry {\nint reply;\nString connectServer = (String) servers.get(iii);\nftp.connect(connectServer);\nCofaxToolsUtil.log(ftp.getReplyString());\nreply = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftp.disconnect();\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: \" + connectServer);\nreturn (\"FTP server refused connection.\");\n} else {\nftp.login(login, password);\n}\nfor (int ii = 0; ii < al.size(); ii++) {\nString fileName = (String) al.get(ii);\nString folderName = stripName(fileName);\nfileName = stripPath(fileName);\ntry {\nftp.changeWorkingDirectory(folderName);\nftp.deleteFile(fileName);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: \" + fileName + \" from directory: \" + folderName);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : \" + connectServer);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + ftp.getReplyString());\nmessage.append(\"Deleting file \" + fileName + \"<BR>\");\nmessage.append(\"from folder \" + folderName + \"<BR>\");\nmessage.append(\"on server \" + connectServer + \"<BR>\");\n} catch (java.io.IOException e) {\nreturn (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file\" + fileName);\n}\n}\nmessage.append(\"Success<BR><BR>\");\nftp.logout();\nftp.disconnect();\n} catch (IOException e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: \" + e);\nreturn (\"Could not connect to server: \" + e);\n}\n}\nif (object.equals(\"Templates\")) {\nString cISServers = (String) user.workingPubConfigElementsHash.get(\"CACHESERVERS\");\nArrayList cIServers = splitServers(cISServers);\nfor (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {\nString thisClearCacheIServer = (String) cIServers.get(iiiiii);\ntry {\nString connectServer = (String) cIServers.get(iiiiii);\nfor (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {\nString thisFilePathI = (String) al.get(iiiiiii);\nString URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;\nCofaxToolsClearCache clearI = new CofaxToolsClearCache(\"HTTP://\" + thisClearCacheIServer + URLToClearI);\nclearI.start();\nmessage.append(\"Clearing Cache for \" + thisFilePathI + \"<BR>\");\nmessage.append(\"on server \" + thisClearCacheIServer + \"<BR>Success<BR><BR>\");\n}\n} catch (Exception e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache \" + e);\n}\n}\n}\n}\nreturn (message.toString());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 836
                },
                {
                        "id": "pretrain_java_data_5917484",
                        "content": "public static String uploadOrDeleteMediaOrTemplates(String action, String object, String numElements, HttpServletRequest req, HttpSession session) {\nFTPClient ftp = new FTPClient();\nCofaxToolsUser user = (CofaxToolsUser) session.getAttribute(\"user\");\nStringBuffer links = new StringBuffer();\nStringBuffer folders = new StringBuffer();\nString folder = \"\";\nString server = \"\";\nString login = \"\";\nString password = \"\";\nString fileTransferFolder = CofaxToolsServlet.fileTransferFolder;\nString liveFolder = \"\";\nArrayList servers = new ArrayList();\nStringBuffer message = new StringBuffer();\nmessage.append(\"Status:<BR>\");\nif (action.equals(\"Upload\")) {\nserver = (String) user.workingPubConfigElementsHash.get(\"TESTFTPSERVER\");\nlogin = (String) user.workingPubConfigElementsHash.get(\"TESTFTPLOGIN\");\npassword = (String) user.workingPubConfigElementsHash.get(\"TESTFTPPASSWORD\");\nif (object.equals(\"Media\")) {\nfolder = (String) user.workingPubConfigElementsHash.get(\"TESTIMAGESFOLDER\");\n}\nif (object.equals(\"Templates\")) {\nfolder = (String) user.workingPubConfigElementsHash.get(\"TESTTEMPLATEFOLDER\");\n}\n}\nif (action.equals(\"Delete\")) {\nlogin = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPLOGIN\");\npassword = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPPASSWORD\");\nif (object.equals(\"Media\")) {\nserver = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESSERVER\");\nfolder = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESFOLDER\");\n}\nif (object.equals(\"Templates\")) {\nserver = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPSERVER\");\nfolder = (String) user.workingPubConfigElementsHash.get(\"LIVETEMPLATEFOLDER\");\n}\n}\nArrayList al = new ArrayList();\nint numElement = Integer.parseInt(numElements);\nfor (int i = 0; i < numElement; i++) {\nString key = String.valueOf(i);\nString file = req.getParameter(key);\nif (file != null) {\nal.add(file);\n}\n}\nif (action.equals(\"Upload\")) {\ntry {\nint reply;\nftp.connect(server);\nCofaxToolsUtil.log(ftp.getReplyString());\nreply = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftp.disconnect();\nreturn (\"FTP server refused connection.\");\n} else {\nftp.login(login, password);\n}\nfor (int ii = 0; ii < al.size(); ii++) {\nString fileName = (String) al.get(ii);\nString folderName = stripName(fileName);\nfileName = stripPath(fileName);\ntry {\nftp.changeWorkingDirectory(folderName);\nOutputStream output;\noutput = new FileOutputStream(fileTransferFolder + fileName);\nftp.retrieveFile(fileName, output);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: \" + ftp.getReplyString());\nmessage.append(\"Retrieving file \" + fileName + \" to local disk.<BR>\");\noutput.close();\n} catch (java.io.IOException e) {\nreturn (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file\" + e);\n}\n}\nftp.logout();\nftp.disconnect();\n} catch (IOException e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: \" + e);\nreturn (\"Could not connect to server: \" + e);\n}\nlogin = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPLOGIN\");\npassword = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPPASSWORD\");\nif (object.equals(\"Media\")) {\nserver = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESSERVER\");\nliveFolder = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESFOLDER\");\n}\nif (object.equals(\"Templates\")) {\nserver = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPSERVER\");\nliveFolder = (String) user.workingPubConfigElementsHash.get(\"LIVETEMPLATEFOLDER\");\n}\nservers = splitServers(server);\nfor (int iii = 0; iii < servers.size(); iii++) {\ntry {\nint reply;\nString connectServer = (String) servers.get(iii);\nftp.connect(connectServer);\nCofaxToolsUtil.log(ftp.getReplyString());\nreply = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftp.disconnect();\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: \" + connectServer);\nreturn (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection.\");\n} else {\nftp.login(login, password);\n}\nfor (int ii = 0; ii < al.size(); ii++) {\nString fileName = (String) al.get(ii);\nCofaxToolsUtil.log(\"Original String \" + fileName);\nCofaxToolsUtil.log(\"Search for \" + folder);\nCofaxToolsUtil.log(\"Replace \" + liveFolder);\nString folderName = CofaxToolsUtil.replace(fileName, folder, liveFolder);\nCofaxToolsUtil.log(\"Results: \" + folderName);\nfolderName = stripName(folderName);\nfileName = stripPath(fileName);\ntry {\nInputStream io;\nio = new FileInputStream(fileTransferFolder + fileName);\nCofaxToolsUtil.log(\"Reading file : \" + fileTransferFolder + fileName);\nboolean directoryExists = ftp.changeWorkingDirectory(folderName);\nif (directoryExists == false) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: \" + folderName + \" does not exist. Attempting to create.\");\nmessage.append(\"Directory: \" + folderName + \" does not exist. Attempting to create.<BR>\");\nboolean canCreatDir = ftp.makeDirectory(folderName);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + canCreatDir);\nmessage.append(\"Results: \" + canCreatDir + \"<BR>\");\n}\nboolean isStored = ftp.storeFile(fileName, io);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: \" + fileName + \" in directory: \" + folderName);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : \" + connectServer);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + isStored + \" : \" + ftp.getReplyString());\nmessage.append(\"Storing file \" + fileName + \"<BR> to location \" + folderName + \"<BR> on server \" + connectServer + \".<BR>\");\n} catch (java.io.IOException e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file\" + fileName + \"<BR>To path: \" + folderName + \"<BR>On server \" + connectServer);\nreturn (\"Cannot upload file\" + fileName + \"<BR>To path: \" + folderName + \"<BR>On server \" + connectServer);\n}\n}\nftp.logout();\nftp.disconnect();\nmessage.append(\"Success<BR><BR>\");\n} catch (IOException e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: \" + e);\nreturn (\"Could not connect to server: \" + e);\n}\n}\nif (object.equals(\"Templates\")) {\nString cSServers = (String) user.workingPubConfigElementsHash.get(\"CACHESERVERS\");\nSystem.out.println(\"getting cache servers: \" + cSServers);\nArrayList cServers = splitServers(cSServers);\nfor (int iiii = 0; iiii < cServers.size(); iiii++) {\nString thisClearCacheServer = (String) cServers.get(iiii);\ntry {\nString connectServer = (String) cServers.get(iiii);\nfor (int iiiii = 0; iiiii < al.size(); iiiii++) {\nString thisFilePath = (String) al.get(iiiii);\nString folderNameFileName = CofaxToolsUtil.replace(thisFilePath, folder, liveFolder);\nString URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;\nCofaxToolsClearCache clear = new CofaxToolsClearCache(\"HTTP://\" + thisClearCacheServer + URLToClear);\nclear.start();\nmessage.append(\"Clearing Cache for \" + folderNameFileName + \"<BR>\");\nmessage.append(\"on server \" + thisClearCacheServer + \"<BR>Success<BR><BR>\");\n}\n} catch (Exception e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache \" + e);\n}\n}\n}\nfor (int i = 0; i < al.size(); i++) {\nString fileName = (String) al.get(i);\nString folderName = stripName(fileName);\nfileName = stripPath(fileName);\nFile file = new File(fileTransferFolder + fileName);\nboolean delete = file.delete();\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: \" + fileTransferFolder + fileName);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + delete);\n}\n}\nservers = splitServers(server);\nif (action.equals(\"Delete\")) {\nfor (int iii = 0; iii < servers.size(); iii++) {\ntry {\nint reply;\nString connectServer = (String) servers.get(iii);\nftp.connect(connectServer);\nCofaxToolsUtil.log(ftp.getReplyString());\nreply = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftp.disconnect();\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: \" + connectServer);\nreturn (\"FTP server refused connection.\");\n} else {\nftp.login(login, password);\n}\nfor (int ii = 0; ii < al.size(); ii++) {\nString fileName = (String) al.get(ii);\nString folderName = stripName(fileName);\nfileName = stripPath(fileName);\ntry {\nftp.changeWorkingDirectory(folderName);\nftp.deleteFile(fileName);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: \" + fileName + \" from directory: \" + folderName);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : \" + connectServer);\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + ftp.getReplyString());\nmessage.append(\"Deleting file \" + fileName + \"<BR>\");\nmessage.append(\"from folder \" + folderName + \"<BR>\");\nmessage.append(\"on server \" + connectServer + \"<BR>\");\n} catch (java.io.IOException e) {\nreturn (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file\" + fileName);\n}\n}\nmessage.append(\"Success<BR><BR>\");\nftp.logout();\nftp.disconnect();\n} catch (IOException e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: \" + e);\nreturn (\"Could not connect to server: \" + e);\n}\n}\nif (object.equals(\"Templates\")) {\nString cISServers = (String) user.workingPubConfigElementsHash.get(\"CACHESERVERS\");\nArrayList cIServers = splitServers(cISServers);\nfor (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {\nString thisClearCacheIServer = (String) cIServers.get(iiiiii);\ntry {\nString connectServer = (String) cIServers.get(iiiiii);\nfor (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {\nString thisFilePathI = (String) al.get(iiiiiii);\nString URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;\nCofaxToolsClearCache clearI = new CofaxToolsClearCache(\"HTTP://\" + thisClearCacheIServer + URLToClearI);\nclearI.start();\nmessage.append(\"Clearing Cache for \" + thisFilePathI + \"<BR>\");\nmessage.append(\"on server \" + thisClearCacheIServer + \"<BR>Success<BR><BR>\");\n}\n} catch (Exception e) {\nCofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache \" + e);\n}\n}\n}\n}\nreturn (message.toString());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1202998#434#673.java",
                        "__cluster__": 836
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4393695",
                        "content": "public static String getMD5Hash(String original) {\nStringBuffer sb = new StringBuffer();\ntry {\nStringReader sr = null;\nint crypt_byte = 0;\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(original.getBytes());\nbyte[] digest = md.digest();\nsr = new StringReader(new String(digest, \"ISO8859_1\"));\nwhile ((crypt_byte = sr.read()) != -1) {\nString hexString = Integer.toHexString(crypt_byte);\nif (crypt_byte < 16) {\nhexString = \"0\" + hexString;\n}\nsb.append(hexString);\n}\n} catch (NoSuchAlgorithmException nsae) {\n} catch (IOException ioe) {\n}\nreturn sb.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2487743#26#47.java",
                        "__cluster__": 861
                },
                {
                        "id": "test_bigclonebench_data_19784131",
                        "content": "public static String getMD5Hash(String original) {\nStringBuffer sb = new StringBuffer();\ntry {\nStringReader sr = null;\nint crypt_byte = 0;\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.reset();\nmd.update(original.getBytes());\nbyte[] digest = md.digest();\nsr = new StringReader(new String(digest, \"ISO8859_1\"));\nwhile ((crypt_byte = sr.read()) != -1) {\nString hexString = Integer.toHexString(crypt_byte);\nif (crypt_byte < 16) {\nhexString = \"0\" + hexString;\n}\nsb.append(hexString);\n}\n} catch (NoSuchAlgorithmException nsae) {\n} catch (IOException ioe) {\n}\nreturn sb.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 861
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14324112",
                        "content": "protected void innerProcess(CrawlURI curi) throws InterruptedException {\nif (!curi.isHttpTransaction()) {\nreturn;\n}\nif (!TextUtils.matches(\"^text.*$\", curi.getContentType())) {\nreturn;\n}\nlong maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();\ntry {\nmaxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();\n} catch (AttributeNotFoundException e) {\nlogger.severe(\"Missing max-size-bytes attribute when processing \" + curi.getURIString());\n}\nif (maxsize < curi.getContentSize() && maxsize > -1) {\nreturn;\n}\nString regexpr = \"\";\ntry {\nregexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);\n} catch (AttributeNotFoundException e2) {\nlogger.severe(\"Missing strip-reg-exp when processing \" + curi.getURIString());\nreturn;\n}\nReplayCharSequence cs = null;\ntry {\ncs = curi.getHttpRecorder().getReplayCharSequence();\n} catch (Exception e) {\ncuri.addLocalizedError(this.getName(), e, \"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage());\nlogger.warning(\"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage() + \" \" + Thread.currentThread().getName());\nreturn;\n}\nMessageDigest digest = null;\ntry {\ndigest = MessageDigest.getInstance(\"SHA1\");\n} catch (NoSuchAlgorithmException e1) {\ne1.printStackTrace();\nreturn;\n}\ndigest.reset();\nString s = null;\nif (regexpr.length() == 0) {\ns = cs.toString();\n} else {\nMatcher m = TextUtils.getMatcher(regexpr, cs);\ns = m.replaceAll(\" \");\n}\ndigest.update(s.getBytes());\nbyte[] newDigestValue = digest.digest();\nif (logger.isLoggable(Level.FINEST)) {\nlogger.finest(\"Recalculated content digest for \" + curi.getURIString() + \" old: \" + Base32.encode((byte[]) curi.getContentDigest()) + \", new: \" + Base32.encode(newDigestValue));\n}\ncuri.setContentDigest(newDigestValue);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 89
                },
                {
                        "id": "pretrain_java_data_5871977",
                        "content": "<filename>references/bcb_chosen_clones/selected#1638451#66#118.java\nprotected void innerProcess(CrawlURI curi) throws InterruptedException {\nif (!curi.isHttpTransaction()) {\nreturn;\n}\nif (!TextUtils.matches(\"^text.*$\", curi.getContentType())) {\nreturn;\n}\nlong maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();\ntry {\nmaxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();\n} catch (AttributeNotFoundException e) {\nlogger.severe(\"Missing max-size-bytes attribute when processing \" + curi.getURIString());\n}\nif (maxsize < curi.getContentSize() && maxsize > -1) {\nreturn;\n}\nString regexpr = \"\";\ntry {\nregexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);\n} catch (AttributeNotFoundException e2) {\nlogger.severe(\"Missing strip-reg-exp when processing \" + curi.getURIString());\nreturn;\n}\nReplayCharSequence cs = null;\ntry {\ncs = curi.getHttpRecorder().getReplayCharSequence();\n} catch (Exception e) {\ncuri.addLocalizedError(this.getName(), e, \"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage());\nlogger.warning(\"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage() + \" \" + Thread.currentThread().getName());\nreturn;\n}\nMessageDigest digest = null;\ntry {\ndigest = MessageDigest.getInstance(\"SHA1\");\n} catch (NoSuchAlgorithmException e1) {\ne1.printStackTrace();\nreturn;\n}\ndigest.reset();\nString s = null;\nif (regexpr.length() == 0) {\ns = cs.toString();\n} else {\nMatcher m = TextUtils.getMatcher(regexpr, cs);\ns = m.replaceAll(\" \");\n}\ndigest.update(s.getBytes());\nbyte[] newDigestValue = digest.digest();\nif (logger.isLoggable(Level.FINEST)) {\nlogger.finest(\"Recalculated content digest for \" + curi.getURIString() + \" old: \" + Base32.encode((byte[]) curi.getContentDigest()) + \", new: \" + Base32.encode(newDigestValue));\n}\ncuri.setContentDigest(newDigestValue);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1638451#66#118.java",
                        "__cluster__": 89
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21491791",
                        "content": "public void run(String[] args) throws Throwable {\nFileInputStream input = new FileInputStream(args[0]);\nFileOutputStream output = new FileOutputStream(args[0] + \".out\");\nReader reader = $(Reader.class, $declass(input));\nWriter writer = $(Writer.class, $declass(output));\nPump pump;\nif (args.length > 1 && \"diag\".equals(args[1])) {\npump = $(new Reader() {\nint counter;\n@ToContext(mode = InvocationMode.sideEffect)\npublic int read(byte[] buffer, int off, int len) throws Exception {\nInteger rd = (Integer) $next();\nif (rd > 0) {\ncounter += rd;\n}\nreturn 0;\n}\n@ToContext(mode = InvocationMode.sideEffect)\npublic void close() throws Exception {\nSystem.out.println(\"Read from input \" + counter + \" bytes.\");\n}\n}, reader, writer, new Writer() {\nint counter;\n@ToContext(mode = InvocationMode.sideEffect)\npublic void write(byte[] buffer, int off, int len) throws Exception {\ncounter += len;\n}\n@ToContext(mode = InvocationMode.sideEffect)\npublic void close() throws Exception {\nSystem.out.println(\"Written to output \" + counter + \" bytes.\");\n}\n});\n} else {\npump = $(reader, writer);\n}\npump.pump();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 904
                },
                {
                        "id": "pretrain_java_data_5948449",
                        "content": "<filename>references/bcb_chosen_clones/selected#698181#19#61.java\npublic void run(String[] args) throws Throwable {\nFileInputStream input = new FileInputStream(args[0]);\nFileOutputStream output = new FileOutputStream(args[0] + \".out\");\nReader reader = $(Reader.class, $declass(input));\nWriter writer = $(Writer.class, $declass(output));\nPump pump;\nif (args.length > 1 && \"diag\".equals(args[1])) {\npump = $(new Reader() {\nint counter;\n@ToContext(mode = InvocationMode.sideEffect)\npublic int read(byte[] buffer, int off, int len) throws Exception {\nInteger rd = (Integer) $next();\nif (rd > 0) {\ncounter += rd;\n}\nreturn 0;\n}\n@ToContext(mode = InvocationMode.sideEffect)\npublic void close() throws Exception {\nSystem.out.println(\"Read from input \" + counter + \" bytes.\");\n}\n}, reader, writer, new Writer() {\nint counter;\n@ToContext(mode = InvocationMode.sideEffect)\npublic void write(byte[] buffer, int off, int len) throws Exception {\ncounter += len;\n}\n@ToContext(mode = InvocationMode.sideEffect)\npublic void close() throws Exception {\nSystem.out.println(\"Written to output \" + counter + \" bytes.\");\n}\n});\n} else {\npump = $(reader, writer);\n}\npump.pump();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#698181#19#61.java",
                        "__cluster__": 904
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21921000",
                        "content": "@Override\npublic void parse() throws IOException {\nURL url = new URL((new DataUrlResolver()).getDataUrl(DomainName.CROATIA));\nURLConnection con = url.openConnection();\nBufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()));\nString str;\nbStream.readLine();\nwhile ((str = bStream.readLine()) != null) {\nString[] tokens = str.split(\"(\\\\s+)\");\nString charCode = tokens[0].replaceAll(\"([0-9+])\", \"\");\nFloat value = Float.parseFloat(tokens[2].trim().replace(\",\", \".\"));\nCurrencyUnit unit = new CurrencyUnit(charCode, value, DEFAULT_MULTIPLIER);\nthis.set.add(unit);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 392
                },
                {
                        "id": "pretrain_java_data_5974050",
                        "content": "@Override\npublic void parse() throws DocumentException, IOException {\nURL url = new URL(this.XMLAddress);\nURLConnection con = url.openConnection();\nBufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()));\nString str;\nbStream.readLine();\nwhile ((str = bStream.readLine()) != null) {\nString[] tokens = str.split(\"(\\\\s+)\");\nString charCode = tokens[0].replaceAll(\"([0-9+])\", \"\");\nFloat value = Float.parseFloat(tokens[2].trim().replace(\",\", \".\"));\nResultUnit unit = new ResultUnit(charCode, value, DEFAULT_MULTIPLIER);\nthis.set.add(unit);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1036591#15#29.java",
                        "__cluster__": 392
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_19849797",
                        "content": "public static void copyFile(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "id": "pretrain_java_data_7424067",
                        "content": "@Override\npublic void createCopy(File sourceFile, File destinnationFile) throws IOException {\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destinnationFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1761827#86#102.java",
                        "__cluster__": 277
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_14450108",
                        "content": "public FTPFile[] connect() {\nif (ftpe == null) {\nftpe = new FTPEvent(this);\n}\nif (ftp == null) {\nftp = new FTPClient();\n} else if (ftp.isConnected()) {\npath = \"\";\ntry {\nftp.disconnect();\n} catch (IOException e1) {\nlog.error(\"could not disconnect -\" + e1.getMessage());\n}\n}\ncurrentDir = new FTPFile[0];\nlog.debug(\"try to connect\");\ntry {\nint reply;\nftp.connect(ftpsite);\nreply = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftp.disconnect();\nlog.error(\"FTP server refused connection.\");\n}\n} catch (IOException e) {\nlog.error(\"FTPConnection error: \" + e.getMessage());\nif (ftp.isConnected()) {\ntry {\nftp.disconnect();\n} catch (IOException f) {\n}\n}\n}\ntry {\nif (!ftp.login(user, password)) {\nlog.error(\"could not login with: \" + user);\nftp.logout();\n}\nlog.debug(\"Remote system is \" + ftp.getSystemName());\nftp.enterLocalPassiveMode();\ncurrentDir = ftp.listFiles();\n} catch (FTPConnectionClosedException e) {\nlog.error(\"FTPConnectionClosedException: \" + e.getMessage());\n} catch (IOException e) {\nlog.error(\"IOException: \" + e.getMessage());\n}\nftpe.setType(FTPEvent.CONNECT);\nfireFTPEvent(ftpe);\nreturn currentDir;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 377
                },
                {
                        "id": "pretrain_java_data_7539943",
                        "content": "<gh_stars>10-100\npublic FTPFile[] connect() {\nif (ftpe == null) {\nftpe = new FTPEvent(this);\n}\nif (ftp == null) {\nftp = new FTPClient();\n} else if (ftp.isConnected()) {\npath = \"\";\ntry {\nftp.disconnect();\n} catch (IOException e1) {\nlog.error(\"could not disconnect -\" + e1.getMessage());\n}\n}\ncurrentDir = new FTPFile[0];\nlog.debug(\"try to connect\");\ntry {\nint reply;\nftp.connect(ftpsite);\nreply = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftp.disconnect();\nlog.error(\"FTP server refused connection.\");\n}\n} catch (IOException e) {\nlog.error(\"FTPConnection error: \" + e.getMessage());\nif (ftp.isConnected()) {\ntry {\nftp.disconnect();\n} catch (IOException f) {\n}\n}\n}\ntry {\nif (!ftp.login(user, password)) {\nlog.error(\"could not login with: \" + user);\nftp.logout();\n}\nlog.debug(\"Remote system is \" + ftp.getSystemName());\nftp.enterLocalPassiveMode();\ncurrentDir = ftp.listFiles();\n} catch (FTPConnectionClosedException e) {\nlog.error(\"FTPConnectionClosedException: \" + e.getMessage());\n} catch (IOException e) {\nlog.error(\"IOException: \" + e.getMessage());\n}\nftpe.setType(FTPEvent.CONNECT);\nfireFTPEvent(ftpe);\nreturn currentDir;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1320953#119#168.java",
                        "__cluster__": 377
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18489832",
                        "content": "private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\nURLConnection urlConnection = url.openConnection();\nFile tmpFile = null;\ntry {\ntmpFile = File.createTempFile(\"remoteLib_\", null);\nInputStream in = null;\nFileOutputStream out = null;\ntry {\nin = urlConnection.getInputStream();\nout = new FileOutputStream(tmpFile);\nIOUtils.copy(in, out);\n} finally {\nif (out != null) {\nout.close();\n}\nif (in != null) {\nin.close();\n}\n}\nunzip(tmpFile, destDir);\n} finally {\nif (tmpFile != null) {\ntmpFile.delete();\n}\n}\nURL localURL = destDir.toURI().toURL();\nreturn localURL;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 576
                },
                {
                        "id": "pretrain_java_data_7520460",
                        "content": "private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\nURLConnection urlConnection = url.openConnection();\nFile tmpFile = null;\ntry {\ntmpFile = File.createTempFile(\"remoteLib_\", null);\nInputStream in = null;\nFileOutputStream out = null;\ntry {\nin = urlConnection.getInputStream();\nout = new FileOutputStream(tmpFile);\nIOUtils.copy(in, out);\n} finally {\nif (out != null) {\nout.close();\n}\nif (in != null) {\nin.close();\n}\n}\nunzip(tmpFile, destDir);\n} finally {\nif (tmpFile != null) {\ntmpFile.delete();\n}\n}\nURL localURL = destDir.toURI().toURL();\nreturn localURL;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2526528#238#265.java",
                        "__cluster__": 576
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_7558672",
                        "content": "private static void setup() throws Exception {\nString path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();\nFile jarFile = new File(URLDecoder.decode(path, \"UTF-8\") + \"/Hanasu.jar\");\nif (!jarFile.exists()) jarFile = new File(\"/home/marc/Virtual Machine/Hanasu.jar\");\nFile f = File.createTempFile(\"tempabca\", \"bdfafad\");\nf.delete();\nf.mkdir();\nString parent = f.getAbsolutePath() + \"/\";\nbyte[] buf = new byte[1024];\nZipInputStream zipinputstream = null;\nZipEntry zipentry;\nzipinputstream = new ZipInputStream(new FileInputStream(jarFile));\nzipentry = zipinputstream.getNextEntry();\nwhile (zipentry != null) {\nString entryName = zipentry.getName();\nif (entryName.startsWith(\"native\")) {\nint n;\nFileOutputStream fileoutputstream;\nFile newFile = new File(parent + entryName);\nif (zipentry.isDirectory()) {\nnewFile.mkdirs();\nzipentry = zipinputstream.getNextEntry();\ncontinue;\n}\nfileoutputstream = new FileOutputStream(newFile);\nwhile ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\nfileoutputstream.close();\nzipinputstream.closeEntry();\n}\nzipentry = zipinputstream.getNextEntry();\n}\nzipinputstream.close();\nString arch = \"\";\nboolean x64 = false;\nfor (String key : keys) {\nString property = System.getProperty(key);\nif (property != null) {\nx64 = (property.indexOf(\"64\") >= 0);\n}\n}\nif (JPTrayIcon.isUnix()) {\nif (x64) arch = \"linux-amd64\"; else arch = \"linux-x86\";\n}\nif (JPTrayIcon.isWindows()) {\nSystem.out.println(\"Arch: \" + System.getProperty(\"sun.arch.data.model\"));\nif (x64 && !System.getProperty(\"sun.arch.data.model\").equals(\"32\")) arch = \"win64-amd64\"; else arch = \"win32-x86\";\n}\nif (JPTrayIcon.isMac()) arch = \"macosx-universal\";\nSystem.out.println(\"Using native/\" + arch + \"/\");\naddLibraryPath(parent + \"native/\" + arch + \"/\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1976964#39#89.java",
                        "__cluster__": 662
                },
                {
                        "id": "test_bigclonebench_data_22801734",
                        "content": "private static void setup() throws Exception {\nString path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();\nFile jarFile = new File(URLDecoder.decode(path, \"UTF-8\") + \"/Hanasu.jar\");\nif (!jarFile.exists()) jarFile = new File(\"/home/marc/Virtual Machine/Hanasu.jar\");\nFile f = File.createTempFile(\"tempabca\", \"bdfafad\");\nf.delete();\nf.mkdir();\nString parent = f.getAbsolutePath() + \"/\";\nbyte[] buf = new byte[1024];\nZipInputStream zipinputstream = null;\nZipEntry zipentry;\nzipinputstream = new ZipInputStream(new FileInputStream(jarFile));\nzipentry = zipinputstream.getNextEntry();\nwhile (zipentry != null) {\nString entryName = zipentry.getName();\nif (entryName.startsWith(\"native\")) {\nint n;\nFileOutputStream fileoutputstream;\nFile newFile = new File(parent + entryName);\nif (zipentry.isDirectory()) {\nnewFile.mkdirs();\nzipentry = zipinputstream.getNextEntry();\ncontinue;\n}\nfileoutputstream = new FileOutputStream(newFile);\nwhile ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\nfileoutputstream.close();\nzipinputstream.closeEntry();\n}\nzipentry = zipinputstream.getNextEntry();\n}\nzipinputstream.close();\nString arch = \"\";\nboolean x64 = false;\nfor (String key : keys) {\nString property = System.getProperty(key);\nif (property != null) {\nx64 = (property.indexOf(\"64\") >= 0);\n}\n}\nif (JPTrayIcon.isUnix()) {\nif (x64) arch = \"linux-amd64\"; else arch = \"linux-x86\";\n}\nif (JPTrayIcon.isWindows()) {\nSystem.out.println(\"Arch: \" + System.getProperty(\"sun.arch.data.model\"));\nif (x64 && !System.getProperty(\"sun.arch.data.model\").equals(\"32\")) arch = \"win64-amd64\"; else arch = \"win32-x86\";\n}\nif (JPTrayIcon.isMac()) arch = \"macosx-universal\";\nSystem.out.println(\"Using native/\" + arch + \"/\");\naddLibraryPath(parent + \"native/\" + arch + \"/\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 662
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9236363",
                        "content": "private void unJarStart(String jarPath, String jarEntryStart) {\nString path;\nif (jarPath.lastIndexOf(\"lib/\") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(\"lib/\")); else path = jarPath.substring(0, jarPath.lastIndexOf(\"/\"));\nString relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(\"/\"));\ntry {\nnew File(path + \"/\" + relPath).mkdirs();\nJarFile jar = new JarFile(jarPath);\nEnumeration<JarEntry> entries = jar.entries();\nwhile (entries.hasMoreElements()) {\nJarEntry entry = entries.nextElement();\nString jarEntry = entry.getName();\nif (jarEntry.startsWith(jarEntryStart)) {\nZipEntry ze = jar.getEntry(jarEntry);\nFile bin = new File(path + \"/\" + jarEntry);\nIOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 768
                },
                {
                        "id": "pretrain_java_data_7417033",
                        "content": "private void unJarStart(String jarPath, String jarEntryStart) {\nString path;\nif (jarPath.lastIndexOf(\"lib/\") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(\"lib/\")); else path = jarPath.substring(0, jarPath.lastIndexOf(\"/\"));\nString relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(\"/\"));\ntry {\nnew File(path + \"/\" + relPath).mkdirs();\nJarFile jar = new JarFile(jarPath);\nEnumeration<JarEntry> entries = jar.entries();\nwhile (entries.hasMoreElements()) {\nJarEntry entry = entries.nextElement();\nString jarEntry = entry.getName();\nif (jarEntry.startsWith(jarEntryStart)) {\nZipEntry ze = jar.getEntry(jarEntry);\nFile bin = new File(path + \"/\" + jarEntry);\nIOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1553544#424#444.java",
                        "__cluster__": 768
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_539195",
                        "content": "static void copy(String src, String dest) throws IOException {\nFile ifp = new File(src);\nFile ofp = new File(dest);\nif (ifp.exists() == false) {\nthrow new IOException(\"file '\" + src + \"' does not exist\");\n}\nFileInputStream fis = new FileInputStream(ifp);\nFileOutputStream fos = new FileOutputStream(ofp);\nbyte[] b = new byte[1024];\nwhile (fis.read(b) > 0) fos.write(b);\nfis.close();\nfos.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 29
                },
                {
                        "id": "pretrain_java_data_7566282",
                        "content": "<gh_stars>10-100\nstatic void copy(String src, String dest) throws IOException {\nFile ifp = new File(src);\nFile ofp = new File(dest);\nif (ifp.exists() == false) {\nthrow new IOException(\"file '\" + src + \"' does not exist\");\n}\nFileInputStream fis = new FileInputStream(ifp);\nFileOutputStream fos = new FileOutputStream(ofp);\nbyte[] b = new byte[1024];\nint readBytes;\nwhile ((readBytes = fis.read(b)) > 0) fos.write(b, 0, readBytes);\nfis.close();\nfos.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#5908#7#20.java",
                        "__cluster__": 29
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_7404615",
                        "content": "<gh_stars>10-100\nprivate void unzip(File filename) throws ZipException, IOException {\nZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\nZipEntry entry = null;\nboolean first_entry = true;\nwhile ((entry = in.getNextEntry()) != null) {\nif (first_entry) {\nif (!entry.isDirectory()) {\nFile subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\nif (!subdir.exists()) {\nsubdir.mkdir();\ndir = subdir;\n}\n}\nfirst_entry = false;\n}\nif (entry.isDirectory()) {\nFileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n} else {\nFile outfile = new File(dir + File.separator + entry.getName());\nFile outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\nif (!outdir.exists()) FileUtils.forceMkdir(outdir);\nFileOutputStream fo = new FileOutputStream(outfile);\nBufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\nint read;\nbyte data[] = new byte[BUFFER];\nwhile ((read = in.read(data, 0, BUFFER)) != -1) {\nread_position++;\nbos.write(data, 0, read);\n}\nbos.flush();\nbos.close();\n}\n}\nin.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2629150#57#91.java",
                        "__cluster__": 487
                },
                {
                        "id": "test_bigclonebench_data_15645004",
                        "content": "private void unzip(File filename) throws ZipException, IOException {\nZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\nZipEntry entry = null;\nboolean first_entry = true;\nwhile ((entry = in.getNextEntry()) != null) {\nif (first_entry) {\nif (!entry.isDirectory()) {\nFile subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\nif (!subdir.exists()) {\nsubdir.mkdir();\ndir = subdir;\n}\n}\nfirst_entry = false;\n}\nif (entry.isDirectory()) {\nFileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n} else {\nFile outfile = new File(dir + File.separator + entry.getName());\nFile outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\nif (!outdir.exists()) FileUtils.forceMkdir(outdir);\nFileOutputStream fo = new FileOutputStream(outfile);\nBufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\nint read;\nbyte data[] = new byte[BUFFER];\nwhile ((read = in.read(data, 0, BUFFER)) != -1) {\nread_position++;\nbos.write(data, 0, read);\n}\nbos.flush();\nbos.close();\n}\n}\nin.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 487
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_7404477",
                        "content": "<gh_stars>10-100\npublic static void copy(File src, File dest) throws FileNotFoundException, IOException {\nFileInputStream in = new FileInputStream(src);\nFileOutputStream out = new FileOutputStream(dest);\ntry {\nbyte[] buf = new byte[1024];\nint c = -1;\nwhile ((c = in.read(buf)) > 0) out.write(buf, 0, c);\n} finally {\nin.close();\nout.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#475527#13#24.java",
                        "__cluster__": 578
                },
                {
                        "id": "test_bigclonebench_data_8747840",
                        "content": "public static void copy(File src, File dest) throws FileNotFoundException, IOException {\nFileInputStream in = new FileInputStream(src);\nFileOutputStream out = new FileOutputStream(dest);\ntry {\nbyte[] buf = new byte[1024];\nint c = -1;\nwhile ((c = in.read(buf)) > 0) out.write(buf, 0, c);\n} finally {\nin.close();\nout.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 578
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3024970",
                        "content": "@Test\npublic void testCopy_inputStreamToOutputStream() throws Exception {\nInputStream in = new ByteArrayInputStream(inData);\nin = new YellOnCloseInputStreamTest(in);\nByteArrayOutputStream baout = new ByteArrayOutputStream();\nOutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\nint count = IOUtils.copy(in, out);\nassertTrue(\"Not all bytes were read\", in.available() == 0);\nassertEquals(\"Sizes differ\", inData.length, baout.size());\nassertTrue(\"Content differs\", Arrays.equals(inData, baout.toByteArray()));\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 122
                },
                {
                        "id": "pretrain_java_data_10605725",
                        "content": "@Test\npublic void testCopy_inputStreamToOutputStream() throws Exception {\nInputStream in = new ByteArrayInputStream(inData);\nin = new YellOnCloseInputStreamTest(in);\nByteArrayOutputStream baout = new ByteArrayOutputStream();\nOutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\nint count = IOUtils.copy(in, out);\nassertTrue(\"Not all bytes were read\", in.available() == 0);\nassertEquals(\"Sizes differ\", inData.length, baout.size());\nassertTrue(\"Content differs\", Arrays.equals(inData, baout.toByteArray()));\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2078997#37#47.java",
                        "__cluster__": 122
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5142039",
                        "content": "public static String uncompress(String readPath, boolean mkdir) throws Exception {\nZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath));\nBufferedInputStream bis = new BufferedInputStream(arcInputStream);\nFile baseDir = new File(readPath).getParentFile();\nString basePath = baseDir.getPath() + \"/\";\nif (mkdir) {\nString[] schema = readPath.split(\"/\");\nString baseName = schema[schema.length - 1].replaceAll(\".zip\", \"\");\nFileUtils.forceMkdir(new File(basePath + baseName));\nbasePath = basePath + baseName + \"/\";\n}\nArchiveEntry entry;\nwhile ((entry = arcInputStream.getNextEntry()) != null) {\nif (entry.isDirectory()) {\nFileUtils.forceMkdir(new File(basePath + entry.getName()));\n} else {\nString writePath = basePath + entry.getName();\nString dirName = FilenameUtils.getPath(writePath);\nFileUtils.forceMkdir(new File(dirName));\nBufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath)));\nint i = 0;\nwhile ((i = bis.read()) != -1) {\nbos.write(i);\n}\nIOUtils.closeQuietly(bos);\n}\n}\nIOUtils.closeQuietly(bis);\nreturn basePath;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 170
                },
                {
                        "id": "pretrain_java_data_10613457",
                        "content": "public static String uncompress(String readPath, boolean mkdir) throws Exception {\nZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath));\nBufferedInputStream bis = new BufferedInputStream(arcInputStream);\nFile baseDir = new File(readPath).getParentFile();\nString basePath = baseDir.getPath() + \"/\";\nif (mkdir) {\nString[] schema = readPath.split(\"/\");\nString baseName = schema[schema.length - 1].replaceAll(\".zip\", \"\");\nFileUtils.forceMkdir(new File(basePath + baseName));\nbasePath = basePath + baseName + \"/\";\n}\nArchiveEntry entry;\nwhile ((entry = arcInputStream.getNextEntry()) != null) {\nif (entry.isDirectory()) {\nFileUtils.forceMkdir(new File(basePath + entry.getName()));\n} else {\nString writePath = basePath + entry.getName();\nString dirName = FilenameUtils.getPath(writePath);\nFileUtils.forceMkdir(new File(dirName));\nBufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath)));\nint i = 0;\nwhile ((i = bis.read()) != -1) {\nbos.write(i);\n}\nIOUtils.closeQuietly(bos);\n}\n}\nIOUtils.closeQuietly(bis);\nreturn basePath;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#540286#18#47.java",
                        "__cluster__": 170
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_4468255",
                        "content": "public static void copy(File from, File to) {\nboolean result;\nif (from.isDirectory()) {\nFile[] subFiles = from.listFiles();\nfor (int i = 0; i < subFiles.length; i++) {\nFile newDir = new File(to, subFiles[i].getName());\nresult = false;\nif (subFiles[i].isDirectory()) {\nif (newDir.exists()) result = true; else result = newDir.mkdirs();\n} else if (subFiles[i].isFile()) {\ntry {\nresult = newDir.createNewFile();\n} catch (IOException e) {\nlog.error(\"unable to create new file: \" + newDir, e);\nresult = false;\n}\n}\nif (result) copy(subFiles[i], newDir);\n}\n} else if (from.isFile()) {\nFileInputStream in = null;\nFileOutputStream out = null;\ntry {\nin = new FileInputStream(from);\nout = new FileOutputStream(to);\nint fileLength = (int) from.length();\nchar charBuff[] = new char[fileLength];\nint len;\nint oneChar;\nwhile ((oneChar = in.read()) != -1) {\nout.write(oneChar);\n}\n} catch (FileNotFoundException e) {\nlog.error(\"File not found!\", e);\n} catch (IOException e) {\nlog.error(\"Unable to read from file!\", e);\n} finally {\ntry {\nif (in != null) in.close();\nif (out != null) out.close();\n} catch (IOException e1) {\nlog.error(\"Error closing file reader/writer\", e1);\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 290
                },
                {
                        "id": "pretrain_java_data_9164480",
                        "content": "public static void copy(File from, File to) {\nboolean result;\nif (from.isDirectory()) {\nFile[] subFiles = from.listFiles();\nfor (int i = 0; i < subFiles.length; i++) {\nFile newDir = new File(to, subFiles[i].getName());\nresult = false;\nif (subFiles[i].isDirectory()) {\nif (newDir.exists()) result = true; else result = newDir.mkdirs();\n} else if (subFiles[i].isFile()) {\ntry {\nresult = newDir.createNewFile();\n} catch (IOException e) {\nlog.error(\"unable to create new file: \" + newDir, e);\nresult = false;\n}\n}\nif (result) copy(subFiles[i], newDir);\n}\n} else if (from.isFile()) {\nFileInputStream in = null;\nFileOutputStream out = null;\ntry {\nin = new FileInputStream(from);\nout = new FileOutputStream(to);\nint fileLength = (int) from.length();\nchar charBuff[] = new char[fileLength];\nint len;\nint oneChar;\nwhile ((oneChar = in.read()) != -1) {\nout.write(oneChar);\n}\n} catch (FileNotFoundException e) {\nlog.error(\"File not found!\", e);\n} catch (IOException e) {\nlog.error(\"Unable to read from file!\", e);\n} finally {\ntry {\nif (in != null) in.close();\nif (out != null) out.close();\n} catch (IOException e1) {\nlog.error(\"Error closing file reader/writer\", e1);\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1587587#810#855.java",
                        "__cluster__": 290
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10627707",
                        "content": "public static String getContent(HttpUriRequest request) throws Exception {\nStringBuffer sb = new StringBuffer();\nHttpClient client = new DefaultHttpClient();\nHttpParams httpParams = client.getParams();\nHttpConnectionParams.setConnectionTimeout(httpParams, 30000);\nHttpConnectionParams.setSoTimeout(httpParams, 50000);\nHttpResponse response = client.execute(request);\nHttpEntity entity = response.getEntity();\nif (entity != null) {\nBufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), \"UTF-8\"), 8192);\nString line = null;\nwhile ((line = reader.readLine()) != null) {\nsb.append(line + \"\\n\");\n}\nreader.close();\n}\nreturn sb.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2581691#15#32.java",
                        "__cluster__": 397
                },
                {
                        "id": "test_bigclonebench_data_7809093",
                        "content": "public static String getContent(HttpUriRequest request) throws Exception {\nStringBuffer sb = new StringBuffer();\nHttpClient client = new DefaultHttpClient();\nHttpParams httpParams = client.getParams();\nHttpConnectionParams.setConnectionTimeout(httpParams, 30000);\nHttpConnectionParams.setSoTimeout(httpParams, 50000);\nHttpResponse response = client.execute(request);\nHttpEntity entity = response.getEntity();\nif (entity != null) {\nBufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), \"UTF-8\"), 8192);\nString line = null;\nwhile ((line = reader.readLine()) != null) {\nsb.append(line + \"\\n\");\n}\nreader.close();\n}\nreturn sb.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 397
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9210168",
                        "content": "@Override\npublic void run() {\ntry {\nURL url = Thread.currentThread().getContextClassLoader().getResource(path);\nInputStream fis = url.openStream();\nInputStreamReader r = new InputStreamReader(fis, \"UTF-8\");\nBufferedReader br = new BufferedReader(r);\nString line;\nStringBuilder sb = new StringBuilder();\nwhile (null != (line = br.readLine())) {\nsb.append(line);\nsb.append(\"\\r\\n\");\n}\nbr.close();\nr.close();\nfis.close();\nfinal String text = sb.toString();\nSwingUtilities.invokeLater(new Runnable() {\n@Override\npublic void run() {\nMainPanel.this.source.setText(text);\nMainPanel.this.source.setCaretPosition(0);\n}\n});\n} catch (Exception ex) {\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 393
                },
                {
                        "id": "pretrain_java_data_9152988",
                        "content": "void updateSource(Class<?> type) throws Exception {\nfinal String path = type.getName().replaceAll(\"\\\\.\", \"/\") + \".java\";\nnew Thread(new Runnable() {\n@Override\npublic void run() {\ntry {\nURL url = Thread.currentThread().getContextClassLoader().getResource(path);\nInputStream fis = url.openStream();\nInputStreamReader r = new InputStreamReader(fis, \"UTF-8\");\nBufferedReader br = new BufferedReader(r);\nString line;\nStringBuilder sb = new StringBuilder();\nwhile (null != (line = br.readLine())) {\nsb.append(line);\nsb.append(\"\\r\\n\");\n}\nbr.close();\nr.close();\nfis.close();\nfinal String text = sb.toString();\nSwingUtilities.invokeLater(new Runnable() {\n@Override\npublic void run() {\nMainPanel.this.source.setText(text);\nMainPanel.this.source.setCaretPosition(0);\n}\n});\n} catch (Exception ex) {\n}\n}\n}).start();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1084910#159#192.java",
                        "__cluster__": 393
                },
                [
                        {
                                "real_dup": 1
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10657123",
                        "content": "<filename>references/bcb_chosen_clones/selected#2298666#154#195.java\nprivate String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\nString filePath = null;\ntry {\nURL endpoint = new URL(wsdlURL);\nHttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\nconn.setDoOutput(false);\nconn.setDoInput(true);\nconn.setUseCaches(false);\nconn.setRequestMethod(\"GET\");\nconn.setRequestProperty(\"Accept\", \"text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\");\nconn.setRequestProperty(\"Connection\", \"close\");\nif (userPassword != null) {\nconn.setRequestProperty(\"Authorization\", \"Basic \" + (new BASE64Encoder()).encode(userPassword.getBytes()));\n}\nInputStream is = null;\nif (conn.getResponseCode() == 200) {\nis = conn.getInputStream();\n} else {\nis = conn.getErrorStream();\nInputStreamReader isr = new InputStreamReader(is);\nStringWriter sw = new StringWriter();\nchar[] buf = new char[200];\nint read = 0;\nwhile (read != -1) {\nread = isr.read(buf);\nsw.write(buf);\n}\nthrow new WiseConnectionException(\"Remote server's response is an error: \" + sw.toString());\n}\nFile file = new File(tmpDeployDir, new StringBuffer(\"Wise\").append(IDGenerator.nextVal()).append(\".xml\").toString());\nOutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\nIOUtils.copyStream(fos, is);\nfos.close();\nis.close();\nfilePath = file.getPath();\n} catch (WiseConnectionException wce) {\nthrow wce;\n} catch (Exception e) {\nthrow new WiseConnectionException(\"Wsdl download failed!\", e);\n}\nreturn filePath;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2298666#154#195.java",
                        "__cluster__": 606
                },
                {
                        "id": "test_bigclonebench_data_7425022",
                        "content": "private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\nString filePath = null;\ntry {\nURL endpoint = new URL(wsdlURL);\nHttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\nconn.setDoOutput(false);\nconn.setDoInput(true);\nconn.setUseCaches(false);\nconn.setRequestMethod(\"GET\");\nconn.setRequestProperty(\"Accept\", \"text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\");\nconn.setRequestProperty(\"Connection\", \"close\");\nif (userPassword != null) {\nconn.setRequestProperty(\"Authorization\", \"Basic \" + (new BASE64Encoder()).encode(userPassword.getBytes()));\n}\nInputStream is = null;\nif (conn.getResponseCode() == 200) {\nis = conn.getInputStream();\n} else {\nis = conn.getErrorStream();\nInputStreamReader isr = new InputStreamReader(is);\nStringWriter sw = new StringWriter();\nchar[] buf = new char[200];\nint read = 0;\nwhile (read != -1) {\nread = isr.read(buf);\nsw.write(buf);\n}\nthrow new WiseConnectionException(\"Remote server's response is an error: \" + sw.toString());\n}\nFile outputDir = new File(wiseProperties.getProperty(\"wise.tmpDir\"));\nif (!outputDir.exists()) {\noutputDir.mkdir();\nwiseProperties.setProperty(\"wise.forceImportObject\", \"true\");\n}\nFile file = new File(wiseProperties.getProperty(\"wise.tmpDir\"), new StringBuffer(\"Wise\").append(IDGenerator.nextVal()).append(\".xml\").toString());\nOutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\nIOUtils.copyStream(fos, is);\nfos.close();\nis.close();\nfilePath = file.getPath();\n} catch (WiseConnectionException wce) {\nthrow wce;\n} catch (Exception e) {\nthrow new WiseConnectionException(\"Wsdl download failed!\", e);\n}\nreturn filePath;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 606
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_1188100",
                        "content": "public void test() throws Exception {\nStorageStringWriter s = new StorageStringWriter(2048, \"UTF-8\");\ns.addText(\"Test\");\ntry {\ns.getOutputStream();\nfail(\"Should throw IOException as method not supported.\");\n} catch (IOException e) {\n}\ns.getWriter().write(\"ing is important\");\ns.close(ResponseStateOk.getInstance());\nassertEquals(\"Testing is important\", s.getText());\nInputStream input = s.getInputStream();\nStringWriter writer = new StringWriter();\nIOUtils.copy(input, writer, \"UTF-8\");\nassertEquals(\"Testing is important\", writer.toString());\ntry {\ns.getWriter();\nfail(\"Should throw IOException as storage is closed.\");\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 243
                },
                {
                        "id": "pretrain_java_data_10783468",
                        "content": "public void test() throws Exception {\nStorageStringWriter s = new StorageStringWriter(2048, \"UTF-8\");\ns.addText(\"Test\");\ntry {\ns.getOutputStream();\nfail(\"Should throw IOException as method not supported.\");\n} catch (IOException e) {\n}\ns.getWriter().write(\"ing is important\");\ns.close(ResponseStateOk.getInstance());\nassertEquals(\"Testing is important\", s.getText());\nInputStream input = s.getInputStream();\nStringWriter writer = new StringWriter();\nIOUtils.copy(input, writer, \"UTF-8\");\nassertEquals(\"Testing is important\", writer.toString());\ntry {\ns.getWriter();\nfail(\"Should throw IOException as storage is closed.\");\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#82006#12#32.java",
                        "__cluster__": 243
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10778736",
                        "content": "<reponame>cragkhit/elasticsearch\nprotected void processAddByURLSubmit(URL url, String invalidUrlMsg) {\nif (!this.hasError()) {\ntry {\nStringWriter xmlSourceWriter = new StringWriter();\nIOUtils.copy(url.openStream(), xmlSourceWriter);\nprocessSubmittedDoap(xmlSourceWriter.toString());\n} catch (FileNotFoundException e) {\nSession.get().error(invalidUrlMsg);\nlogger.warn(\"Error processing URL: \" + invalidUrlMsg);\n} catch (IOException e) {\nsetResponsePage(new ErrorReportPage(new UserReportableException(\"Unable to add doap using RDF supplied\", DoapFormPage.class, e)));\nlogger.warn(\"Error processing URL: \" + url + \"; \" + e.getMessage(), e);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#542898#147#161.java",
                        "__cluster__": 521
                },
                {
                        "id": "test_bigclonebench_data_21348951",
                        "content": "protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {\nif (!this.hasError()) {\ntry {\nStringWriter xmlSourceWriter = new StringWriter();\nIOUtils.copy(url.openStream(), xmlSourceWriter);\nprocessSubmittedDoap(xmlSourceWriter.toString());\n} catch (FileNotFoundException e) {\nSession.get().error(invalidUrlMsg);\nlogger.warn(\"Error processing URL: \" + invalidUrlMsg);\n} catch (IOException e) {\nsetResponsePage(new ErrorReportPage(new UserReportableException(\"Unable to add doap using RDF supplied\", DoapFormPage.class, e)));\nlogger.warn(\"Error processing URL: \" + url + \"; \" + e.getMessage(), e);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 521
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_22022715",
                        "content": "protected static final byte[] digest(String s) {\nbyte[] ret = null;\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(s.getBytes());\nret = md.digest();\n} catch (NoSuchAlgorithmException e) {\nSystem.err.println(\"no message digest algorithm available!\");\nSystem.exit(1);\n}\nreturn ret;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 590
                },
                {
                        "id": "pretrain_java_data_12242855",
                        "content": "protected static final byte[] digest(String s) {\nbyte[] ret = null;\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(s.getBytes());\nret = md.digest();\n} catch (NoSuchAlgorithmException e) {\nSystem.err.println(\"no message digest algorithm available!\");\nSystem.exit(1);\n}\nreturn ret;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#910607#50#61.java",
                        "__cluster__": 590
                },
                [
                        {
                                "real_dup": 3
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_22338097",
                        "content": "private final String createMD5(String pwd) throws Exception {\nMessageDigest md = (MessageDigest) MessageDigest.getInstance(\"MD5\").clone();\nmd.update(pwd.getBytes(\"UTF-8\"));\nbyte[] pd = md.digest();\nStringBuffer app = new StringBuffer();\nfor (int i = 0; i < pd.length; i++) {\nString s2 = Integer.toHexString(pd[i] & 0xFF);\napp.append((s2.length() == 1) ? \"0\" + s2 : s2);\n}\nreturn app.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 612
                },
                {
                        "id": "pretrain_java_data_12283247",
                        "content": "private final String createMD5(String pwd) throws Exception {\nMessageDigest md = (MessageDigest) MessageDigest.getInstance(\"MD5\").clone();\nmd.update(pwd.getBytes(\"UTF-8\"));\nbyte[] pd = md.digest();\nStringBuffer app = new StringBuffer();\nfor (int i = 0; i < pd.length; i++) {\nString s2 = Integer.toHexString(pd[i] & 0xFF);\napp.append((s2.length() == 1) ? \"0\" + s2 : s2);\n}\nreturn app.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#719110#162#172.java",
                        "__cluster__": 612
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_4501356",
                        "content": "static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {\nif (normaliseWhitespace) {\nprofileDiff = removeWhitespaces(profileDiff);\n}\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(profileDiff.getBytes());\nreturn new BASE64Encoder().encode(md.digest());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 241
                },
                {
                        "id": "pretrain_java_data_10792495",
                        "content": "<gh_stars>10-100\nstatic String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {\nif (normaliseWhitespace) {\nprofileDiff = removeWhitespaces(profileDiff);\n}\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(profileDiff.getBytes());\nreturn new BASE64Encoder().encode(md.digest());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2074957#277#284.java",
                        "__cluster__": 241
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6501291",
                        "content": "public static void extractFile(String input, String output) throws ZipException, IOException {\nFileReader reader = new FileReader(input);\nInputStream in = reader.getInputStream();\nOutputStream out = new FileOutputStream(new File(output));\nbyte[] buf = new byte[512];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nreader.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 675
                },
                {
                        "id": "pretrain_java_data_12201846",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#853320#48#57.java\npublic static void extractFile(String input, String output) throws ZipException, IOException {\nFileReader reader = new FileReader(input);\nInputStream in = reader.getInputStream();\nOutputStream out = new FileOutputStream(new File(output));\nbyte[] buf = new byte[512];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nreader.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#853320#48#57.java",
                        "__cluster__": 675
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10753480",
                        "content": "@Test\npublic void testCopy_readerToOutputStream_Encoding_nullIn() throws Exception {\nByteArrayOutputStream baout = new ByteArrayOutputStream();\nOutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\ntry {\nIOUtils.copy((Reader) null, out, \"UTF16\");\nfail();\n} catch (NullPointerException ex) {\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2078997#233#242.java",
                        "__cluster__": 599
                },
                {
                        "id": "test_bigclonebench_data_3024992",
                        "content": "@Test\npublic void testCopy_readerToWriter_nullIn() throws Exception {\nByteArrayOutputStream baout = new ByteArrayOutputStream();\nOutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\nWriter writer = new OutputStreamWriter(baout, \"US-ASCII\");\ntry {\nIOUtils.copy((Reader) null, writer);\nfail();\n} catch (NullPointerException ex) {\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 599
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_838844",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 44
                },
                {
                        "id": "pretrain_java_data_12325037",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99223#90#172.java",
                        "__cluster__": 44
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_823074",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 44
                },
                {
                        "id": "pretrain_java_data_12325037",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99223#90#172.java",
                        "__cluster__": 44
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_812803",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 44
                },
                {
                        "id": "pretrain_java_data_12325037",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99223#90#172.java",
                        "__cluster__": 44
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_62362",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 44
                },
                {
                        "id": "pretrain_java_data_12325037",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99223#90#172.java",
                        "__cluster__": 44
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_149935",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 44
                },
                {
                        "id": "pretrain_java_data_12325037",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99223#90#172.java",
                        "__cluster__": 44
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12325037",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99223#90#172.java",
                        "__cluster__": 44
                },
                {
                        "id": "test_bigclonebench_data_310182",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 44
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12325037",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99223#90#172.java",
                        "__cluster__": 44
                },
                {
                        "id": "test_bigclonebench_data_942693",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 44
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12325037",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#99223#90#172.java",
                        "__cluster__": 44
                },
                {
                        "id": "test_bigclonebench_data_364438",
                        "content": "public void convert(File src, File dest) throws IOException {\nInputStream in = new BufferedInputStream(new FileInputStream(src));\nDcmParser p = pfact.newDcmParser(in);\nDataset ds = fact.newDataset();\np.setDcmHandler(ds.getDcmHandler());\ntry {\nFileFormat format = p.detectFileFormat();\nif (format != FileFormat.ACRNEMA_STREAM) {\nSystem.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\nreturn;\n}\np.parseDcmFile(format, Tags.PixelData);\nif (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\nSystem.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\nreturn;\n}\nboolean hasPixelData = p.getReadTag() == Tags.PixelData;\nboolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\nint pxlen = p.getReadLength();\nif (hasPixelData) {\nif (inflate) {\nds.putUS(Tags.BitsAllocated, 16);\npxlen = pxlen * 4 / 3;\n}\nif (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\nSystem.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\nreturn;\n}\n}\nds.putUI(Tags.StudyInstanceUID, uid(studyUID));\nds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\nds.putUI(Tags.SOPInstanceUID, uid(instUID));\nds.putUI(Tags.SOPClassUID, classUID);\nif (!ds.contains(Tags.NumberOfSamples)) {\nds.putUS(Tags.NumberOfSamples, 1);\n}\nif (!ds.contains(Tags.PhotometricInterpretation)) {\nds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n}\nif (fmi) {\nds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n}\nOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\ntry {\n} finally {\nds.writeFile(out, encodeParam());\nif (hasPixelData) {\nif (!skipGroupLen) {\nout.write(PXDATA_GROUPLEN);\nint grlen = pxlen + 8;\nout.write((byte) grlen);\nout.write((byte) (grlen >> 8));\nout.write((byte) (grlen >> 16));\nout.write((byte) (grlen >> 24));\n}\nout.write(PXDATA_TAG);\nout.write((byte) pxlen);\nout.write((byte) (pxlen >> 8));\nout.write((byte) (pxlen >> 16));\nout.write((byte) (pxlen >> 24));\n}\nif (inflate) {\nint b2, b3;\nfor (; pxlen > 0; pxlen -= 3) {\nout.write(in.read());\nb2 = in.read();\nb3 = in.read();\nout.write(b2 & 0x0f);\nout.write(b2 >> 4 | ((b3 & 0x0f) << 4));\nout.write(b3 >> 4);\n}\n} else {\nfor (; pxlen > 0; --pxlen) {\nout.write(in.read());\n}\n}\nout.close();\n}\nSystem.out.print('.');\n} finally {\nin.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 44
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12378664",
                        "content": "public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nString selectedPage = request.getParameter(\"SelectedPage\");\nPage page = null;\nPortalRequest portalRequest = PortalRequest.getCurrentRequest();\nif (selectedPage == null) {\ntry {\nProperty pageProp = Property.getProperty(\"HomePage\");\nselectedPage = pageProp.getValue();\n} catch (PersistentModelException e) {\nmyLogger.info(\"Page could not be found due to an exception\");\nresponse.sendError(response.SC_NOT_FOUND);\nreturn;\n}\n}\nmyLogger.info(\"Handling Page Request for Page \" + selectedPage);\ntry {\nif (page == null) {\ntry {\npage = Page.getPage(Long.parseLong(selectedPage));\n} catch (NumberFormatException e) {\nList<Page> possiblePage = Page.findByName(selectedPage);\nif (possiblePage.size() > 0) {\npage = possiblePage.get(0);\n} else {\nresponse.sendError(response.SC_NOT_FOUND);\nreturn;\n}\n}\n}\nif (!page.isVisibleTo(portalRequest.getCurrentUser())) {\nProperty pageProp = Property.getProperty(\"HomePage\");\nselectedPage = pageProp.getValue();\npage = Page.getPage(Long.parseLong(selectedPage));\n}\ntry {\nProperty property = Property.getProperty(\"LogPageRequests\");\nif (property.getValue().toLowerCase().equals(\"true\")) {\nString referer = request.getHeader(\"Referer\");\nif (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\nreferer = \" \";\n} else {\nif (referer.length() >= 200) {\nreferer = referer.substring(0, 198);\n}\n}\nPageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n}\n} catch (PersistentModelException e) {\nmyLogger.log(Level.WARNING, \"Log Page Requests property was not found.\", e);\n}\nif (page.isVisibleTo(portalRequest.getCurrentUser())) {\nHttpSession session = request.getSession();\nif (session != null) {\nRecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(\"ipoint.RecentlyViewedManager\");\nif (rvm == null) {\nrvm = new RecentlyViewedManager();\n}\nrvm.add(page);\nsession.setAttribute(\"ipoint.RecentlyViewedManager\", rvm);\n}\nPageCacheEntry entry = null;\nif (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\ntry {\nint pageCacheTime = 60000;\ntry {\nProperty pageCacheTimeProperty = Property.getProperty(\"PageCacheTime\");\npageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\npageCacheTime *= 1000;\n} catch (PersistentModelException pme) {\nmyLogger.warning(\"Ignoring Exception when retrieving PageCacheTime property\");\n} catch (NumberFormatException nfe) {\n}\nentry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n} catch (PersistentModelException e) {\nmyLogger.log(Level.WARNING, \"An error occurred finding a page cache entry\", e);\n}\n}\nresponse.setContentType(\"text/html\");\nresponse.setHeader(\"Cache-Control\", \"no-cache\");\nboolean processed = false;\nif (entry != null) {\nString tempFile = entry.getTempFile();\nFile file = new File(tempFile);\nif (file.exists() && file.isFile() && file.canRead()) {\nFileReader reader = new FileReader(file);\nBufferedReader br = new BufferedReader(reader);\nPrintWriter out = response.getWriter();\nout.write(\"<!-- Starting to output cached page in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\nwhile (br.ready()) {\nout.write(br.readLine() + \"\\n\");\n}\nout.write(\"<!-- Cached output produced in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\nreader.close();\nprocessed = true;\nportalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), portalRequest.elapsedTime(), true);\n} else {\nentry.delete();\n}\n}\nif (!processed) {\nPrintWriter out = response.getWriter();\nout.write(\"<!-- Output produced by iPoint Portal -->\\n\");\nPageRenderer renderer = new PageRenderer(page);\nlong startTime = System.currentTimeMillis();\nrequest.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\nrequest.setAttribute(ELConstants.IPOINT_PAGE, page);\nrequest.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\nrequest.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\nrequest.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\nrenderer.preProcess();\nportalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\nlong renderStart = System.currentTimeMillis();\nrenderer.render();\nportalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - renderStart, false);\nportalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\nout.write(\"<!-- output produced in \" + PortalRequest.getCurrentRequest().elapsedTime() + \" ms -->\\n\");\nif (!page.isEditableBy(portalRequest.getCurrentUser())) {\nif (response instanceof CachingResponseWrapper) {\nCachingResponseWrapper crw = (CachingResponseWrapper) response;\ncrw.flushBuffer();\nProperty tempProperty = Property.getProperty(\"UploadLocation\");\nFile tempDirectory = new File(tempProperty.getValue());\nif (tempDirectory.exists() && tempDirectory.canWrite()) {\nFile file = File.createTempFile(\"iPointPage\", \".html\", tempDirectory);\ntry {\nFileWriter fw = new FileWriter(file);\nfw.write(crw.getOutput());\nfw.flush();\nfw.close();\nPageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n} catch (IOException e) {\n}\n} else {\nmyLogger.warning(\"Can not write to directory \" + tempProperty.getValue());\n}\n}\n}\n}\n} else {\nmyLogger.info(\"Current User is Forbidden from seeing this Page\");\nresponse.sendError(response.SC_FORBIDDEN);\n}\n} catch (PersistentModelException e) {\nmyLogger.log(Level.INFO, \"Unable to find page \" + selectedPage, e);\nresponse.sendError(response.SC_NOT_FOUND);\n} catch (PresentationException pe) {\npe.printStackTrace();\nthrow new ServletException(\"Error processing the page\", pe);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#625451#44#193.java",
                        "__cluster__": 399
                },
                {
                        "id": "test_bigclonebench_data_13563706",
                        "content": "public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nString selectedPage = request.getParameter(\"SelectedPage\");\nPage page = null;\nPortalRequest portalRequest = PortalRequest.getCurrentRequest();\nif (selectedPage == null) {\ntry {\nProperty pageProp = Property.getProperty(\"HomePage\");\nselectedPage = pageProp.getValue();\n} catch (PersistentModelException e) {\nmyLogger.info(\"Page could not be found due to an exception\");\nresponse.sendError(response.SC_NOT_FOUND);\nreturn;\n}\n}\nmyLogger.info(\"Handling Page Request for Page \" + selectedPage);\ntry {\nif (page == null) {\ntry {\npage = Page.getPage(Long.parseLong(selectedPage));\n} catch (NumberFormatException e) {\nList<Page> possiblePage = Page.findByName(selectedPage);\nif (possiblePage.size() > 0) {\npage = possiblePage.get(0);\n} else {\nresponse.sendError(response.SC_NOT_FOUND);\nreturn;\n}\n}\n}\nif (!page.isVisibleTo(portalRequest.getCurrentUser())) {\nProperty pageProp = Property.getProperty(\"HomePage\");\nselectedPage = pageProp.getValue();\npage = Page.getPage(Long.parseLong(selectedPage));\n}\ntry {\nProperty property = Property.getProperty(\"LogPageRequests\");\nif (property.getValue().toLowerCase().equals(\"true\")) {\nString referer = request.getHeader(\"Referer\");\nif (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\nreferer = \" \";\n} else {\nif (referer.length() >= 200) {\nreferer = referer.substring(0, 198);\n}\n}\nPageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n}\n} catch (PersistentModelException e) {\nmyLogger.log(Level.WARNING, \"Log Page Requests property was not found.\", e);\n}\nif (page.isVisibleTo(portalRequest.getCurrentUser())) {\nHttpSession session = request.getSession();\nif (session != null) {\nRecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(\"ipoint.RecentlyViewedManager\");\nif (rvm == null) {\nrvm = new RecentlyViewedManager();\n}\nrvm.add(page);\nsession.setAttribute(\"ipoint.RecentlyViewedManager\", rvm);\n}\nPageCacheEntry entry = null;\nif (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\ntry {\nint pageCacheTime = 60000;\ntry {\nProperty pageCacheTimeProperty = Property.getProperty(\"PageCacheTime\");\npageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\npageCacheTime *= 1000;\n} catch (PersistentModelException pme) {\nmyLogger.warning(\"Ignoring Exception when retrieving PageCacheTime property\");\n} catch (NumberFormatException nfe) {\n}\nentry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n} catch (PersistentModelException e) {\nmyLogger.log(Level.WARNING, \"An error occurred finding a page cache entry\", e);\n}\n}\nresponse.setContentType(\"text/html\");\nresponse.setHeader(\"Cache-Control\", \"no-cache\");\nboolean processed = false;\nif (entry != null) {\nString tempFile = entry.getTempFile();\nFile file = new File(tempFile);\nif (file.exists() && file.isFile() && file.canRead()) {\nFileReader reader = new FileReader(file);\nBufferedReader br = new BufferedReader(reader);\nPrintWriter out = response.getWriter();\nout.write(\"<!-- Starting to output cached page in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\nwhile (br.ready()) {\nout.write(br.readLine() + \"\\n\");\n}\nout.write(\"<!-- Cached output produced in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\nreader.close();\nprocessed = true;\nportalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), portalRequest.elapsedTime(), true);\n} else {\nentry.delete();\n}\n}\nif (!processed) {\nPrintWriter out = response.getWriter();\nout.write(\"<!-- Output produced by iPoint Portal -->\\n\");\nPageRenderer renderer = new PageRenderer(page);\nlong startTime = System.currentTimeMillis();\nrequest.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\nrequest.setAttribute(ELConstants.IPOINT_PAGE, page);\nrequest.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\nrequest.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\nrequest.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\nrenderer.preProcess();\nportalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\nlong renderStart = System.currentTimeMillis();\nrenderer.render();\nportalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - renderStart, false);\nportalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\nout.write(\"<!-- output produced in \" + PortalRequest.getCurrentRequest().elapsedTime() + \" ms -->\\n\");\nif (!page.isEditableBy(portalRequest.getCurrentUser())) {\nif (response instanceof CachingResponseWrapper) {\nCachingResponseWrapper crw = (CachingResponseWrapper) response;\ncrw.flushBuffer();\nProperty tempProperty = Property.getProperty(\"UploadLocation\");\nFile tempDirectory = new File(tempProperty.getValue());\nif (tempDirectory.exists() && tempDirectory.canWrite()) {\nFile file = File.createTempFile(\"iPointPage\", \".html\", tempDirectory);\ntry {\nFileWriter fw = new FileWriter(file);\nfw.write(crw.getOutput());\nfw.flush();\nfw.close();\nPageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n} catch (IOException e) {\n}\n} else {\nmyLogger.warning(\"Can not write to directory \" + tempProperty.getValue());\n}\n}\n}\n}\n} else {\nmyLogger.info(\"Current User is Forbidden from seeing this Page\");\nresponse.sendError(response.SC_FORBIDDEN);\n}\n} catch (PersistentModelException e) {\nmyLogger.log(Level.INFO, \"Unable to find page \" + selectedPage, e);\nresponse.sendError(response.SC_NOT_FOUND);\n} catch (PresentationException pe) {\npe.printStackTrace();\nthrow new ServletException(\"Error processing the page\", pe);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 399
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18696387",
                        "content": "public Converter(String input, String output) {\ntry {\nFileInputStream fis = new FileInputStream(new File(input));\nBufferedReader in = new BufferedReader(new InputStreamReader(fis, \"SJIS\"));\nFileOutputStream fos = new FileOutputStream(new File(output));\nBufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, \"UTF8\"));\nint len = 80;\nchar buf[] = new char[len];\nint numRead;\nwhile ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);\nout.close();\nin.close();\n} catch (IOException e) {\nSystem.out.println(\"An I/O Exception Occurred: \" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 474
                },
                {
                        "id": "pretrain_java_data_13840385",
                        "content": "public Converter(String input, String output) {\ntry {\nFileInputStream fis = new FileInputStream(new File(input));\nBufferedReader in = new BufferedReader(new InputStreamReader(fis, \"SJIS\"));\nFileOutputStream fos = new FileOutputStream(new File(output));\nBufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, \"UTF8\"));\nint len = 80;\nchar buf[] = new char[len];\nint numRead;\nwhile ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);\nout.close();\nin.close();\n} catch (IOException e) {\nSystem.out.println(\"An I/O Exception Occurred: \" + e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2476359#14#29.java",
                        "__cluster__": 474
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_22442270",
                        "content": "@Override\npublic void handledRun() throws Throwable {\ntry {\nURL url = new URL(ONLINE_CLIENT_DATA + \"gamedata.xml\");\nBufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\nint lastversion = 0;\nString readHeader1 = br.readLine();\nString readHeader2 = br.readLine();\nString[] parts = readHeader2.split(\" \");\nlastversion = new Integer(parts[1]);\nGameDatabase.loadVersion();\nif (GameDatabase.version < lastversion) {\nLogger.log(LogTypes.LOG, \"Downloading new gamedata\");\nBufferedOutputStream bo = null;\nFile destfile = new File(GameDatabase.dataFilePath);\nif (!destfile.createNewFile()) {\ndestfile.delete();\ndestfile.createNewFile();\n}\nbo = new BufferedOutputStream(new FileOutputStream(destfile));\nbo.write((readHeader1 + \"\\n\").getBytes());\nbo.write((readHeader2 + \"\\n\").getBytes());\nint readedbyte;\nwhile ((readedbyte = br.read()) != -1) {\nbo.write(readedbyte);\n}\nbo.flush();\ntry {\nbr.close();\nbo.close();\n} catch (Exception ex) {\nLogger.log(ex);\n}\n}\n} catch (java.net.UnknownHostException unknownHost) {\nLogger.log(\"Sourceforge is down, cannot update gamedata\");\n} catch (Exception e) {\nJOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), \"The gamedata is outdated, but Coopnet couldn't update it!\", \"Gamedata outdated\", JOptionPane.INFORMATION_MESSAGE);\nthrow e;\n} finally {\nGameDatabase.loadVersion();\nGameDatabase.load(\"\", GameDatabase.dataFilePath);\nGameDatabase.detectGames();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 533
                },
                {
                        "id": "pretrain_java_data_13827196",
                        "content": "<filename>references/bcb_chosen_clones/selected#2547468#104#153.java\npublic static void checkAndUpdateGameData() {\nnew ErrThread() {\n@Override\npublic void handledRun() throws Throwable {\ntry {\nURL url = new URL(ONLINE_CLIENT_DATA + \"gamedata.xml\");\nBufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\nint lastversion = 0;\nString readHeader1 = br.readLine();\nString readHeader2 = br.readLine();\nString[] parts = readHeader2.split(\" \");\nlastversion = new Integer(parts[1]);\nGameDatabase.loadVersion();\nif (GameDatabase.version < lastversion) {\nLogger.log(LogTypes.LOG, \"Downloading new gamedata\");\nBufferedOutputStream bo = null;\nFile destfile = new File(GameDatabase.dataFilePath);\nif (!destfile.createNewFile()) {\ndestfile.delete();\ndestfile.createNewFile();\n}\nbo = new BufferedOutputStream(new FileOutputStream(destfile));\nbo.write((readHeader1 + \"\\n\").getBytes());\nbo.write((readHeader2 + \"\\n\").getBytes());\nint readedbyte;\nwhile ((readedbyte = br.read()) != -1) {\nbo.write(readedbyte);\n}\nbo.flush();\ntry {\nbr.close();\nbo.close();\n} catch (Exception ex) {\nLogger.log(ex);\n}\n}\n} catch (java.net.UnknownHostException unknownHost) {\nLogger.log(\"Sourceforge is down, cannot update gamedata\");\n} catch (Exception e) {\nJOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), \"The gamedata is outdated, but Coopnet couldn't update it!\", \"Gamedata outdated\", JOptionPane.INFORMATION_MESSAGE);\nthrow e;\n} finally {\nGameDatabase.loadVersion();\nGameDatabase.load(\"\", GameDatabase.dataFilePath);\nGameDatabase.detectGames();\n}\n}\n}.start();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2547468#104#153.java",
                        "__cluster__": 533
                },
                [
                        {
                                "real_dup": 2
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6301863",
                        "content": "protected String doRawRequest(String postData) throws IOException {\nURL url = new URL(SERVICE_URL);\nURLConnection conn = url.openConnection();\nconn.setDoOutput(true);\nOutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\nwr.write(postData);\nwr.flush();\nBufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nStringBuffer sb = new StringBuffer();\nString line;\nwhile ((line = rd.readLine()) != null) {\nsb.append(line);\n}\nwr.close();\nrd.close();\nreturn sb.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 555
                },
                {
                        "id": "pretrain_java_data_12352250",
                        "content": "protected String doRawRequest(String postData) throws IOException {\nURL url = new URL(SERVICE_URL);\nURLConnection conn = url.openConnection();\nconn.setDoOutput(true);\nOutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\nwr.write(postData);\nwr.flush();\nBufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nStringBuffer sb = new StringBuffer();\nString line;\nwhile ((line = rd.readLine()) != null) {\nsb.append(line);\n}\nwr.close();\nrd.close();\nreturn sb.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#156485#255#271.java",
                        "__cluster__": 555
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_13829267",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static ArrayList<RoleName> importRoles(String urlString) {\nArrayList<RoleName> results = new ArrayList<RoleName>();\ntry {\nURL url = new URL(urlString);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nStringBuffer buff = new StringBuffer();\nString line;\nwhile ((line = in.readLine()) != null) {\nbuff.append(line);\nif (line.equals(\"</RoleName>\")) {\nRoleName name = ProfileParser.parseRoleName(buff.toString());\nresults.add(name);\nbuff = new StringBuffer();\n} else {\nbuff.append(NL);\n}\n}\n} catch (MalformedURLException e) {\n} catch (IOException e) {\n} catch (ParsingException e) {\n}\nreturn results;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#194044#13#35.java",
                        "__cluster__": 845
                },
                {
                        "id": "test_bigclonebench_data_12039034",
                        "content": "public static ArrayList<RoleName> importRoles(String urlString) {\nArrayList<RoleName> results = new ArrayList<RoleName>();\ntry {\nURL url = new URL(urlString);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nStringBuffer buff = new StringBuffer();\nString line;\nwhile ((line = in.readLine()) != null) {\nbuff.append(line);\nif (line.equals(\"</RoleName>\")) {\nRoleName name = ProfileParser.parseRoleName(buff.toString());\nresults.add(name);\nbuff = new StringBuffer();\n} else {\nbuff.append(NL);\n}\n}\n} catch (MalformedURLException e) {\n} catch (IOException e) {\n} catch (ParsingException e) {\n}\nreturn results;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 845
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_12454178",
                        "content": "@Override\npublic void alterar(Disciplina t) throws Exception {\nPreparedStatement stmt = null;\nString sql = \"UPDATE disciplina SET nm_disciplina = ?, cod_disciplina = ? WHERE id_disciplina = ?\";\ntry {\nstmt = conexao.prepareStatement(sql);\nstmt.setString(1, t.getNomeDisciplina());\nstmt.setString(2, t.getCodDisciplina());\nstmt.setInt(3, t.getIdDisciplina());\nstmt.executeUpdate();\nconexao.commit();\nint id_disciplina = t.getIdDisciplina();\nexcluirTopico(t.getIdDisciplina());\nfor (Topico item : t.getTopicos()) {\ncriarTopico(item, id_disciplina);\n}\n} catch (SQLException e) {\nconexao.rollback();\nthrow e;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 818
                },
                {
                        "id": "pretrain_java_data_13875592",
                        "content": "<reponame>cragkhit/elasticsearch\n@Override\npublic void alterar(Disciplina t) throws Exception {\nPreparedStatement stmt = null;\nString sql = \"UPDATE disciplina SET nm_disciplina = ?, cod_disciplina = ? WHERE id_disciplina = ?\";\ntry {\nstmt = conexao.prepareStatement(sql);\nstmt.setString(1, t.getNomeDisciplina());\nstmt.setString(2, t.getCodDisciplina());\nstmt.setInt(3, t.getIdDisciplina());\nstmt.executeUpdate();\nconexao.commit();\nint id_disciplina = t.getIdDisciplina();\nexcluirTopico(t.getIdDisciplina());\nfor (Topico item : t.getTopicos()) {\ncriarTopico(item, id_disciplina);\n}\n} catch (SQLException e) {\nconexao.rollback();\nthrow e;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2517737#59#79.java",
                        "__cluster__": 818
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14783950",
                        "content": "public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\nif (fileList == null || fileList.size() == 0) return;\nFileOutputStream fos = new FileOutputStream(zipFileName);\nZipOutputStream zos = new ZipOutputStream(fos);\nIterator iter = fileList.iterator();\nwhile (iter.hasNext()) {\nString fileName = (String) iter.next();\nint ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\\\'));\nString shortName = \"unknown\";\nif (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\nzos.putNextEntry(new ZipEntry(shortName));\nFileInputStream fis = new FileInputStream(fileName);\nbyte[] buf = new byte[10000];\nint bytesRead;\nwhile ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\nfis.close();\nzos.closeEntry();\n}\nzos.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 882
                },
                {
                        "id": "pretrain_java_data_12354889",
                        "content": "<filename>references/bcb_chosen_clones/selected#842549#103#122.java\npublic static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\nif (fileList == null || fileList.size() == 0) return;\nFileOutputStream fos = new FileOutputStream(zipFileName);\nZipOutputStream zos = new ZipOutputStream(fos);\nIterator iter = fileList.iterator();\nwhile (iter.hasNext()) {\nString fileName = (String) iter.next();\nint ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\\\'));\nString shortName = \"unknown\";\nif (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\nzos.putNextEntry(new ZipEntry(shortName));\nFileInputStream fis = new FileInputStream(fileName);\nbyte[] buf = new byte[10000];\nint bytesRead;\nwhile ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\nfis.close();\nzos.closeEntry();\n}\nzos.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#842549#103#122.java",
                        "__cluster__": 882
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_15491397",
                        "content": "static void populateResources() throws BasicException {\ntry {\nList<URL> templates = DatabaseValidator.listResources(\"/net/adrianromero/templates/\" + Locale.getDefault().getLanguage());\nif (templates.size() == 0) {\ntemplates = DatabaseValidator.listResources(\"/net/adrianromero/templates/en\");\n}\nfor (URL url : templates) {\nString fileName = url.getFile();\nfileName = fileName.substring(fileName.lastIndexOf('/') + 1);\nif (fileName.endsWith(\".xml\") || fileName.endsWith(\".txt\")) {\nResource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));\nInputStream is = url.openStream();\nStringBuffer strBuff = new StringBuffer();\nBufferedReader br = new BufferedReader(new InputStreamReader(is));\nString str;\nwhile ((str = br.readLine()) != null) {\nstrBuff.append(str + \"\\n\");\n}\ntemplateResource.setText(strBuff.toString());\ntemplateResource.save();\n}\n}\n} catch (MalformedURLException e1) {\nlogger.error(\"Unable to load templates\", e1);\n} catch (IOException e1) {\nlogger.error(\"Unable to load templates\", e1);\n}\nString[][] images = new String[][] { { \"default.user\", \"yast_sysadmin.png\" }, { \"default.product\", \"colorize.png\" }, { \"Window.Logo\", \"windowlogo.png\" }, { \"Image.Backarrow\", \"3backarrow.png\" } };\nfor (int i = 0; i < images.length; i++) {\nImage img = new Image();\nimg.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(\"/net/adrianromero/images/\" + images[i][1])));\nimg.save();\nProperty imgProperty = new Property(images[i][0]);\nimgProperty.setValue(\"\" + img.getId());\nimgProperty.save();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#956088#232#268.java",
                        "__cluster__": 530
                },
                {
                        "id": "test_bigclonebench_data_14688886",
                        "content": "static void populateResources() throws BasicException {\ntry {\nList<URL> templates = DatabaseValidator.listResources(\"/net/adrianromero/templates/\" + Locale.getDefault().getLanguage());\nif (templates.size() == 0) {\ntemplates = DatabaseValidator.listResources(\"/net/adrianromero/templates/en\");\n}\nfor (URL url : templates) {\nString fileName = url.getFile();\nfileName = fileName.substring(fileName.lastIndexOf('/') + 1);\nif (fileName.endsWith(\".xml\") || fileName.endsWith(\".txt\")) {\nResource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));\nInputStream is = url.openStream();\nStringBuffer strBuff = new StringBuffer();\nBufferedReader br = new BufferedReader(new InputStreamReader(is));\nString str;\nwhile ((str = br.readLine()) != null) {\nstrBuff.append(str + \"\\n\");\n}\ntemplateResource.setText(strBuff.toString());\ntemplateResource.save();\n}\n}\n} catch (MalformedURLException e1) {\nlogger.error(\"Unable to load templates\", e1);\n} catch (IOException e1) {\nlogger.error(\"Unable to load templates\", e1);\n}\nString[][] images = new String[][] { { \"default.user\", \"yast_sysadmin.png\" }, { \"default.product\", \"colorize.png\" }, { \"Window.Logo\", \"windowlogo.png\" }, { \"Image.Backarrow\", \"3backarrow.png\" } };\nfor (int i = 0; i < images.length; i++) {\nImage img = new Image();\nimg.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(\"/net/adrianromero/images/\" + images[i][1])));\nimg.save();\nProperty imgProperty = new Property(images[i][0]);\nimgProperty.setValue(\"\" + img.getId());\nimgProperty.save();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 530
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_13932398",
                        "content": "public int scrapeForIsbns(URL url) {\nint matches = 0;\nPattern p = Pattern.compile(\"ISBN-10:</strong>\\\\s*(\\\\w{10})\");\nMatcher m;\nfor (int i = 0; i < RETRIES; i++) {\ntry {\nInputStream in = url.openStream();\nBufferedReader br = new BufferedReader(new InputStreamReader(in));\nString str;\nwhile ((str = br.readLine()) != null) {\nm = p.matcher(str);\nwhile (m.find()) {\nmatches++;\noutputIsbns.put(m.group(1));\nlogger.debug(\"Got ISBN: \" + m.group(1));\n}\n}\nbreak;\n} catch (ConnectException e) {\nlogger.warn(\"Connection attempt \" + i + \" failed, trying again. Max retries: \" + RETRIES);\ntry {\nThread.sleep(5000);\n} catch (InterruptedException e1) {\n}\n} catch (IOException e) {\nlogger.error(\"Error reading URL stream\", e);\n} catch (InterruptedException e) {\nlogger.error(\"Interrupted while calling put(Object E)\", e);\n}\n}\nreturn matches;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#71438#64#95.java",
                        "__cluster__": 613
                },
                {
                        "id": "test_bigclonebench_data_22844377",
                        "content": "public int scrapeForIsbns(URL url) {\nint matches = 0;\nPattern p = Pattern.compile(\"ISBN-10:</strong>\\\\s*(\\\\w{10})\");\nMatcher m;\nfor (int i = 0; i < RETRIES; i++) {\ntry {\nInputStream in = url.openStream();\nBufferedReader br = new BufferedReader(new InputStreamReader(in));\nString str;\nwhile ((str = br.readLine()) != null) {\nm = p.matcher(str);\nwhile (m.find()) {\nmatches++;\noutputIsbns.put(m.group(1));\nlogger.debug(\"Got ISBN: \" + m.group(1));\n}\n}\nbreak;\n} catch (ConnectException e) {\nlogger.warn(\"Connection attempt \" + i + \" failed, trying again. Max retries: \" + RETRIES);\ntry {\nThread.sleep(5000);\n} catch (InterruptedException e1) {\n}\n} catch (IOException e) {\nlogger.error(\"Error reading URL stream\", e);\n} catch (InterruptedException e) {\nlogger.error(\"Interrupted while calling put(Object E)\", e);\n}\n}\nreturn matches;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 613
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_16549995",
                        "content": "public static String mysqlPasswordHash(String string) {\ntry {\nMessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);\ntry {\ndigest.update(string.getBytes(\"UTF-8\"));\n} catch (UnsupportedEncodingException e) {\nthrow new RuntimeException(e);\n}\nbyte[] encodedPassword = digest.digest();\ndigest.update(encodedPassword);\nencodedPassword = digest.digest();\nString hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();\nwhile (hash.length() < 40) {\nhash = \"0\" + hash;\n}\nreturn \"*\" + hash;\n} catch (NoSuchAlgorithmException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 661
                },
                {
                        "id": "pretrain_java_data_15532818",
                        "content": "public static String mysqlPasswordHash(String string) {\ntry {\nMessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);\ntry {\ndigest.update(string.getBytes(\"UTF-8\"));\n} catch (UnsupportedEncodingException e) {\nthrow new RuntimeException(e);\n}\nbyte[] encodedPassword = digest.digest();\ndigest.update(encodedPassword);\nencodedPassword = digest.digest();\nString hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();\nwhile (hash.length() < 40) {\nhash = \"0\" + hash;\n}\nreturn \"*\" + hash;\n} catch (NoSuchAlgorithmException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#137234#68#87.java",
                        "__cluster__": 661
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_15497543",
                        "content": "public static byte[] getHashedID(String ID) {\ntry {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.reset();\nmd5.update(ID.getBytes());\nbyte[] digest = md5.digest();\nbyte[] bytes = new byte[WLDB_ID_SIZE];\nfor (int i = 0; i < bytes.length; i++) {\nbytes[i] = digest[i];\n}\nreturn bytes;\n} catch (NoSuchAlgorithmException exception) {\nSystem.err.println(\"Java VM is not compatible\");\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1559565#54#69.java",
                        "__cluster__": 773
                },
                {
                        "id": "test_bigclonebench_data_8047989",
                        "content": "protected byte[] getHashedID(String ID) {\ntry {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.reset();\nmd5.update(ID.getBytes());\nbyte[] digest = md5.digest();\nbyte[] bytes = new byte[WLDB_ID_SIZE];\nfor (int i = 0; i < bytes.length; i++) {\nbytes[i] = digest[i];\n}\nreturn bytes;\n} catch (NoSuchAlgorithmException exception) {\nSystem.err.println(\"Java VM is not compatible\");\nexit();\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 773
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_1310962",
                        "content": "public static String encodePassword(String password) {\nMessageDigest md;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(password.getBytes());\nString encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(\"x-base64\"));\nreturn encodedPassword;\n} catch (NoSuchAlgorithmException e) {\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#254049#9#19.java",
                        "__cluster__": 4
                },
                {
                        "id": "test_bigclonebench_data_6987642",
                        "content": "public static String encodePassword(String password) {\nMessageDigest md;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\nmd.update(password.getBytes());\nString encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(\"x-base64\"));\nreturn encodedPassword;\n} catch (NoSuchAlgorithmException e) {\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 4
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_665420",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString develBuild = null;\nString stableBuild = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim();\n}\nbin.close();\nif (develBuild != null && stableBuild != null) {\ndoVersionCheck(view, stableBuild, develBuild);\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 27
                },
                {
                        "id": "pretrain_java_data_1314284",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString develBuild = null;\nString stableBuild = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim();\n}\nbin.close();\nif (develBuild != null && stableBuild != null) {\ndoVersionCheck(view, stableBuild, develBuild);\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#96757#8#29.java",
                        "__cluster__": 27
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_614099",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString develBuild = null;\nString stableBuild = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim();\n}\nbin.close();\nif (develBuild != null && stableBuild != null) {\ndoVersionCheck(view, stableBuild, develBuild);\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 27
                },
                {
                        "id": "pretrain_java_data_1314284",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString develBuild = null;\nString stableBuild = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim();\n}\nbin.close();\nif (develBuild != null && stableBuild != null) {\ndoVersionCheck(view, stableBuild, develBuild);\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#96757#8#29.java",
                        "__cluster__": 27
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_442381",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString develBuild = null;\nString stableBuild = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim();\n}\nbin.close();\nif (develBuild != null && stableBuild != null) {\ndoVersionCheck(view, stableBuild, develBuild);\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 27
                },
                {
                        "id": "pretrain_java_data_1314284",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString develBuild = null;\nString stableBuild = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim();\n}\nbin.close();\nif (develBuild != null && stableBuild != null) {\ndoVersionCheck(view, stableBuild, develBuild);\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#96757#8#29.java",
                        "__cluster__": 27
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_1314284",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString develBuild = null;\nString stableBuild = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim();\n}\nbin.close();\nif (develBuild != null && stableBuild != null) {\ndoVersionCheck(view, stableBuild, develBuild);\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#96757#8#29.java",
                        "__cluster__": 27
                },
                {
                        "id": "test_bigclonebench_data_350482",
                        "content": "public static void doVersionCheck(View view) {\nview.showWaitCursor();\ntry {\nURL url = new URL(jEdit.getProperty(\"version-check.url\"));\nInputStream in = url.openStream();\nBufferedReader bin = new BufferedReader(new InputStreamReader(in));\nString line;\nString develBuild = null;\nString stableBuild = null;\nwhile ((line = bin.readLine()) != null) {\nif (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim();\n}\nbin.close();\nif (develBuild != null && stableBuild != null) {\ndoVersionCheck(view, stableBuild, develBuild);\n}\n} catch (IOException e) {\nString[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\nGUIUtilities.error(view, \"read-error\", args);\n}\nview.hideWaitCursor();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 27
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_255765",
                        "content": "private static void main(String[] args) {\ntry {\nFile f = new File(\"test.txt\");\nif (f.exists()) {\nthrow new IOException(f + \" already exists.  I don't want to overwrite it.\");\n}\nStraightStreamReader in;\nchar[] cbuf = new char[0x1000];\nint read;\nint totRead;\nFileOutputStream out = new FileOutputStream(f);\nfor (int i = 0x00; i < 0x100; i++) {\nout.write(i);\n}\nout.close();\nin = new StraightStreamReader(new FileInputStream(f));\nfor (int i = 0x00; i < 0x100; i++) {\nread = in.read();\nif (read != i) {\nSystem.err.println(\"Error: \" + i + \" read as \" + read);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = in.read(cbuf);\nif (totRead != 0x100) {\nSystem.err.println(\"Simple buffered read did not read the full amount: 0x\" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i + 0x123] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i + 0x123]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i + 0x123] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i + 0x123]);\n}\n}\nin.close();\nf.delete();\n} catch (IOException x) {\nSystem.err.println(x.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 324
                },
                {
                        "id": "pretrain_java_data_1278777",
                        "content": "<reponame>HuadingLing/astnn<filename>clone/data/java/demo/code_example_694747.java<gh_stars>0\nprivate static void main(String[] args) {\ntry {\nFile f = new File(\"test.txt\");\nif (f.exists()) {\nthrow new IOException(f + \" already exists.  I don't want to overwrite it.\");\n}\nStraightStreamReader in;\nchar[] cbuf = new char[0x1000];\nint read;\nint totRead;\nFileOutputStream out = new FileOutputStream(f);\nfor (int i = 0x00; i < 0x100; i++) {\nout.write(i);\n}\nout.close();\nin = new StraightStreamReader(new FileInputStream(f));\nfor (int i = 0x00; i < 0x100; i++) {\nread = in.read();\nif (read != i) {\nSystem.err.println(\"Error: \" + i + \" read as \" + read);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = in.read(cbuf);\nif (totRead != 0x100) {\nSystem.err.println(\"Simple buffered read did not read the full amount: 0x\" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i + 0x123] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i + 0x123]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i + 0x123] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i + 0x123]);\n}\n}\nin.close();\nf.delete();\n} catch (IOException x) {\nSystem.err.println(x.getMessage());\n}\n}\n",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "HuadingLing/astnn",
                        "max_stars_repo_path": "clone/data/java/demo/code_example_694747.java",
                        "__cluster__": 324
                },
                [
                        {
                                "real_dup": 3
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_949327",
                        "content": "private static void main(String[] args) {\ntry {\nFile f = new File(\"test.txt\");\nif (f.exists()) {\nthrow new IOException(f + \" already exists.  I don't want to overwrite it.\");\n}\nStraightStreamReader in;\nchar[] cbuf = new char[0x1000];\nint read;\nint totRead;\nFileOutputStream out = new FileOutputStream(f);\nfor (int i = 0x00; i < 0x100; i++) {\nout.write(i);\n}\nout.close();\nin = new StraightStreamReader(new FileInputStream(f));\nfor (int i = 0x00; i < 0x100; i++) {\nread = in.read();\nif (read != i) {\nSystem.err.println(\"Error: \" + i + \" read as \" + read);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = in.read(cbuf);\nif (totRead != 0x100) {\nSystem.err.println(\"Simple buffered read did not read the full amount: 0x\" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i + 0x123] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i + 0x123]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i + 0x123] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i + 0x123]);\n}\n}\nin.close();\nf.delete();\n} catch (IOException x) {\nSystem.err.println(x.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 324
                },
                {
                        "id": "pretrain_java_data_1278777",
                        "content": "<reponame>HuadingLing/astnn<filename>clone/data/java/demo/code_example_694747.java<gh_stars>0\nprivate static void main(String[] args) {\ntry {\nFile f = new File(\"test.txt\");\nif (f.exists()) {\nthrow new IOException(f + \" already exists.  I don't want to overwrite it.\");\n}\nStraightStreamReader in;\nchar[] cbuf = new char[0x1000];\nint read;\nint totRead;\nFileOutputStream out = new FileOutputStream(f);\nfor (int i = 0x00; i < 0x100; i++) {\nout.write(i);\n}\nout.close();\nin = new StraightStreamReader(new FileInputStream(f));\nfor (int i = 0x00; i < 0x100; i++) {\nread = in.read();\nif (read != i) {\nSystem.err.println(\"Error: \" + i + \" read as \" + read);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = in.read(cbuf);\nif (totRead != 0x100) {\nSystem.err.println(\"Simple buffered read did not read the full amount: 0x\" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i + 0x123] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i + 0x123]);\n}\n}\nin.close();\nin = new StraightStreamReader(new FileInputStream(f));\ntotRead = 0;\nwhile (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\ntotRead += read;\n}\nif (totRead != 0x100) {\nSystem.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n}\nfor (int i = 0x00; i < totRead; i++) {\nif (cbuf[i + 0x123] != i) {\nSystem.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i + 0x123]);\n}\n}\nin.close();\nf.delete();\n} catch (IOException x) {\nSystem.err.println(x.getMessage());\n}\n}\n",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "HuadingLing/astnn",
                        "max_stars_repo_path": "clone/data/java/demo/code_example_694747.java",
                        "__cluster__": 324
                },
                [
                        {
                                "real_dup": 3
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2851465",
                        "content": "public static String digest(String algorithm, String text) {\nMessageDigest mDigest = null;\ntry {\nmDigest = MessageDigest.getInstance(algorithm);\nmDigest.update(text.getBytes(ENCODING));\n} catch (NoSuchAlgorithmException nsae) {\n_log.error(nsae, nsae);\n} catch (UnsupportedEncodingException uee) {\n_log.error(uee, uee);\n}\nbyte[] raw = mDigest.digest();\nBASE64Encoder encoder = new BASE64Encoder();\nreturn encoder.encode(raw);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#631078#25#38.java",
                        "__cluster__": 77
                },
                {
                        "id": "test_bigclonebench_data_4398382",
                        "content": "public static String digest(String algorithm, String text) {\nMessageDigest mDigest = null;\ntry {\nmDigest = MessageDigest.getInstance(algorithm);\nmDigest.update(text.getBytes(ENCODING));\n} catch (NoSuchAlgorithmException nsae) {\n_log.error(nsae, nsae);\n} catch (UnsupportedEncodingException uee) {\n_log.error(uee, uee);\n}\nbyte[] raw = mDigest.digest();\nBASE64Encoder encoder = new BASE64Encoder();\nreturn encoder.encode(raw);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 77
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_2822776",
                        "content": "<filename>references/bcb_chosen_clones/selected#882365#94#149.java\npublic static void createTar(File directoryToPack, File targetTarFile) throws IOException {\nif (directoryToPack == null) {\nthrow new NullPointerException(\"The parameter 'directoryToPack' must not be null\");\n}\nif (targetTarFile == null) {\nthrow new NullPointerException(\"The parameter 'targetTarFile' must not be null\");\n}\nif (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\nthrow new IllegalArgumentException(\"The target file '\" + directoryToPack + \"' does not exist or is not a directory.\");\n}\nif (targetTarFile.exists()) {\nlog.warn(\"The target file '\" + targetTarFile + \"' already exists. Will overwrite\");\n}\nlog.debug(\"Creating tar from all files in directory '\" + directoryToPack + \"'\");\nbyte buffer[] = new byte[BUFFER_SIZE];\nFileOutputStream targetOutput = new FileOutputStream(targetTarFile);\nTarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\ntry {\nList<File> fileList = collectFiles(directoryToPack);\nfor (Iterator<File> iter = fileList.iterator(); iter.hasNext(); ) {\nFile file = iter.next();\nif (file == null || !file.exists() || file.isDirectory()) {\nlog.info(\"The file '\" + file + \"' is ignored - is a directory or non-existent\");\ncontinue;\n}\nif (file.equals(targetTarFile)) {\nlog.debug(\"Skipping file: '\" + file + \"' - is the tar file itself\");\ncontinue;\n}\nlog.debug(\"Adding to archive: file='\" + file + \"', archive='\" + targetTarFile + \"'\");\nString filePathInTar = getFilePathInTar(file, directoryToPack);\nlog.debug(\"File path in tar: '\" + filePathInTar + \"' (file=\" + file + \")\");\nTarEntry tarAdd = new TarEntry(file);\ntarAdd.setModTime(file.lastModified());\ntarAdd.setName(filePathInTar);\ntargetOutputTar.putNextEntry(tarAdd);\nif (file.isFile()) {\nFileInputStream in = new FileInputStream(file);\ntry {\nwhile (true) {\nint nRead = in.read(buffer, 0, buffer.length);\nif (nRead <= 0) break;\ntargetOutputTar.write(buffer, 0, nRead);\n}\n} finally {\nStreamUtil.tryCloseStream(in);\n}\n}\ntargetOutputTar.closeEntry();\n}\n} finally {\nStreamUtil.tryCloseStream(targetOutputTar);\nStreamUtil.tryCloseStream(targetOutput);\n}\nlog.info(\"Tar Archive created successfully '\" + targetTarFile + \"'\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#882365#94#149.java",
                        "__cluster__": 300
                },
                {
                        "id": "test_bigclonebench_data_6171406",
                        "content": "public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\nif (directoryToPack == null) {\nthrow new NullPointerException(\"The parameter 'directoryToPack' must not be null\");\n}\nif (targetTarFile == null) {\nthrow new NullPointerException(\"The parameter 'targetTarFile' must not be null\");\n}\nif (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\nthrow new IllegalArgumentException(\"The target file '\" + directoryToPack + \"' does not exist or is not a directory.\");\n}\nif (targetTarFile.exists()) {\nlog.warn(\"The target file '\" + targetTarFile + \"' already exists. Will overwrite\");\n}\nlog.debug(\"Creating tar from all files in directory '\" + directoryToPack + \"'\");\nbyte buffer[] = new byte[BUFFER_SIZE];\nFileOutputStream targetOutput = new FileOutputStream(targetTarFile);\nTarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\ntry {\nList<File> fileList = collectFiles(directoryToPack);\nfor (Iterator<File> iter = fileList.iterator(); iter.hasNext(); ) {\nFile file = iter.next();\nif (file == null || !file.exists() || file.isDirectory()) {\nlog.info(\"The file '\" + file + \"' is ignored - is a directory or non-existent\");\ncontinue;\n}\nif (file.equals(targetTarFile)) {\nlog.debug(\"Skipping file: '\" + file + \"' - is the tar file itself\");\ncontinue;\n}\nlog.debug(\"Adding to archive: file='\" + file + \"', archive='\" + targetTarFile + \"'\");\nString filePathInTar = getFilePathInTar(file, directoryToPack);\nlog.debug(\"File path in tar: '\" + filePathInTar + \"' (file=\" + file + \")\");\nTarEntry tarAdd = new TarEntry(file);\ntarAdd.setModTime(file.lastModified());\ntarAdd.setName(filePathInTar);\ntargetOutputTar.putNextEntry(tarAdd);\nif (file.isFile()) {\nFileInputStream in = new FileInputStream(file);\ntry {\nwhile (true) {\nint nRead = in.read(buffer, 0, buffer.length);\nif (nRead <= 0) break;\ntargetOutputTar.write(buffer, 0, nRead);\n}\n} finally {\nStreamUtil.tryCloseStream(in);\n}\n}\ntargetOutputTar.closeEntry();\n}\n} finally {\nStreamUtil.tryCloseStream(targetOutputTar);\nStreamUtil.tryCloseStream(targetOutput);\n}\nlog.info(\"Tar Archive created successfully '\" + targetTarFile + \"'\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 300
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8921716",
                        "content": "public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[32];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nmd5hash = md.digest();\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 325
                },
                {
                        "id": "pretrain_java_data_2923229",
                        "content": "public static String MD5(String text) {\nbyte[] md5hash = new byte[32];\ntry {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nmd5hash = md.digest();\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n} catch (UnsupportedEncodingException ex) {\nex.printStackTrace();\n}\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#595552#197#210.java",
                        "__cluster__": 325
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_6756635",
                        "content": "public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[32];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nmd5hash = md.digest();\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 325
                },
                {
                        "id": "pretrain_java_data_2923229",
                        "content": "public static String MD5(String text) {\nbyte[] md5hash = new byte[32];\ntry {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nmd5hash = md.digest();\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n} catch (UnsupportedEncodingException ex) {\nex.printStackTrace();\n}\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#595552#197#210.java",
                        "__cluster__": 325
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8385785",
                        "content": "public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[32];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nmd5hash = md.digest();\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 325
                },
                {
                        "id": "pretrain_java_data_2923229",
                        "content": "public static String MD5(String text) {\nbyte[] md5hash = new byte[32];\ntry {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nmd5hash = md.digest();\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n} catch (UnsupportedEncodingException ex) {\nex.printStackTrace();\n}\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#595552#197#210.java",
                        "__cluster__": 325
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_2923229",
                        "content": "public static String MD5(String text) {\nbyte[] md5hash = new byte[32];\ntry {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nmd5hash = md.digest();\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n} catch (UnsupportedEncodingException ex) {\nex.printStackTrace();\n}\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#595552#197#210.java",
                        "__cluster__": 325
                },
                {
                        "id": "test_bigclonebench_data_15018553",
                        "content": "public static String encrypt(String text) throws NoSuchAlgorithmException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[32];\ntry {\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nmd5hash = md.digest();\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 325
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_4272289",
                        "content": "public static int[] sortstring(int[] a1) {\nint temp;\nfor (int j = 0; j < (a1.length * a1.length); j++) {\nfor (int i = 0; i < a1.length - 1; i++) {\nif (a1[i] > a1[i + 1]) {\ntemp = a1[i];\na1[i] = a1[i + 1];\na1[i + 1] = temp;\n}\n}\n}\nreturn a1;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 660
                },
                {
                        "id": "pretrain_java_data_17205285",
                        "content": "public static int[] sortstring(int[] a1) {\nint temp;\nfor (int j = 0; j < (a1.length * a1.length); j++) {\nfor (int i = 0; i < a1.length - 1; i++) {\nif (a1[i] > a1[i + 1]) {\ntemp = a1[i];\na1[i] = a1[i + 1];\na1[i + 1] = temp;\n}\n}\n}\nreturn a1;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2064320#5#17.java",
                        "__cluster__": 660
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2525897",
                        "content": "public static byte[] decode(String cryptPassword, byte[] encoded, byte[] salt) {\ntry {\nMessageDigest digester = MessageDigest.getInstance(DIGEST);\nSecureRandom random = SecureRandom.getInstance(RANDOM);\ndigester.reset();\nfor (int i = 0; i < ITERATIONS; i++) {\ndigester.update(salt);\ndigester.update(cryptPassword.getBytes(\"UTF-8\"));\n}\nbyte[] hash = digester.digest();\nrandom.setSeed(hash);\nint maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\nKeyGenerator generator = KeyGenerator.getInstance(CIPHER);\ngenerator.init(maxKeySize, random);\nSecretKey key = generator.generateKey();\nCipher cipher = Cipher.getInstance(CIPHER);\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] decoded = cipher.doFinal(encoded);\nreturn decoded;\n} catch (Exception e) {\nStorePlugin.getDefault().log(e);\n}\nreturn new byte[0];\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 534
                },
                {
                        "id": "pretrain_java_data_17209031",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic static byte[] decode(String cryptPassword, byte[] encoded, byte[] salt) {\ntry {\nMessageDigest digester = MessageDigest.getInstance(DIGEST);\nSecureRandom random = SecureRandom.getInstance(RANDOM);\ndigester.reset();\nfor (int i = 0; i < ITERATIONS; i++) {\ndigester.update(salt);\ndigester.update(cryptPassword.getBytes(\"UTF-8\"));\n}\nbyte[] hash = digester.digest();\nrandom.setSeed(hash);\nint maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\nKeyGenerator generator = KeyGenerator.getInstance(CIPHER);\ngenerator.init(maxKeySize, random);\nSecretKey key = generator.generateKey();\nCipher cipher = Cipher.getInstance(CIPHER);\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] decoded = cipher.doFinal(encoded);\nreturn decoded;\n} catch (Exception e) {\nStorePlugin.getDefault().log(e);\n}\nreturn new byte[0];\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1658518#74#97.java",
                        "__cluster__": 534
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_12744653",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) {\nsb.append('0');\n}\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "id": "pretrain_java_data_17351260",
                        "content": "private static String genRandomGUID(boolean secure) {\nString valueBeforeMD5 = \"\";\nString valueAfterMD5 = \"\";\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\nreturn valueBeforeMD5;\n}\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nString strTemp = \"\";\nfor (int i = 0; i < array.length; i++) {\nstrTemp = (Integer.toHexString(array[i] & 0XFF));\nif (strTemp.length() == 1) {\nvalueAfterMD5 = valueAfterMD5 + \"0\" + strTemp;\n} else {\nvalueAfterMD5 = valueAfterMD5 + strTemp;\n}\n}\nreturn valueAfterMD5.toUpperCase();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2685005#54#90.java",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_15166511",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "id": "pretrain_java_data_17351260",
                        "content": "private static String genRandomGUID(boolean secure) {\nString valueBeforeMD5 = \"\";\nString valueAfterMD5 = \"\";\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\nreturn valueBeforeMD5;\n}\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nString strTemp = \"\";\nfor (int i = 0; i < array.length; i++) {\nstrTemp = (Integer.toHexString(array[i] & 0XFF));\nif (strTemp.length() == 1) {\nvalueAfterMD5 = valueAfterMD5 + \"0\" + strTemp;\n} else {\nvalueAfterMD5 = valueAfterMD5 + strTemp;\n}\n}\nreturn valueAfterMD5.toUpperCase();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2685005#54#90.java",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_15500892",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "id": "pretrain_java_data_17351260",
                        "content": "private static String genRandomGUID(boolean secure) {\nString valueBeforeMD5 = \"\";\nString valueAfterMD5 = \"\";\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\nreturn valueBeforeMD5;\n}\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nString strTemp = \"\";\nfor (int i = 0; i < array.length; i++) {\nstrTemp = (Integer.toHexString(array[i] & 0XFF));\nif (strTemp.length() == 1) {\nvalueAfterMD5 = valueAfterMD5 + \"0\" + strTemp;\n} else {\nvalueAfterMD5 = valueAfterMD5 + strTemp;\n}\n}\nreturn valueAfterMD5.toUpperCase();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2685005#54#90.java",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_23161545",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "id": "pretrain_java_data_17351260",
                        "content": "private static String genRandomGUID(boolean secure) {\nString valueBeforeMD5 = \"\";\nString valueAfterMD5 = \"\";\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\nreturn valueBeforeMD5;\n}\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nString strTemp = \"\";\nfor (int i = 0; i < array.length; i++) {\nstrTemp = (Integer.toHexString(array[i] & 0XFF));\nif (strTemp.length() == 1) {\nvalueAfterMD5 = valueAfterMD5 + \"0\" + strTemp;\n} else {\nvalueAfterMD5 = valueAfterMD5 + strTemp;\n}\n}\nreturn valueAfterMD5.toUpperCase();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2685005#54#90.java",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8024375",
                        "content": "private void getRandomGUID(boolean secure) {\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\n}\ntry {\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nStringBuffer sb = new StringBuffer();\nfor (int j = 0; j < array.length; ++j) {\nint b = array[j] & 0xFF;\nif (b < 0x10) sb.append('0');\nsb.append(Integer.toHexString(b));\n}\nvalueAfterMD5 = sb.toString();\n} catch (Exception e) {\nSystem.out.println(\"Error:\" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "id": "pretrain_java_data_17351260",
                        "content": "private static String genRandomGUID(boolean secure) {\nString valueBeforeMD5 = \"\";\nString valueAfterMD5 = \"\";\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\nreturn valueBeforeMD5;\n}\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nString strTemp = \"\";\nfor (int i = 0; i < array.length; i++) {\nstrTemp = (Integer.toHexString(array[i] & 0XFF));\nif (strTemp.length() == 1) {\nvalueAfterMD5 = valueAfterMD5 + \"0\" + strTemp;\n} else {\nvalueAfterMD5 = valueAfterMD5 + strTemp;\n}\n}\nreturn valueAfterMD5.toUpperCase();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2685005#54#90.java",
                        "__cluster__": 96
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_3683344",
                        "content": "private static String genRandomGUID(boolean secure) {\nString valueBeforeMD5 = \"\";\nString valueAfterMD5 = \"\";\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\nreturn valueBeforeMD5;\n}\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nString strTemp = \"\";\nfor (int i = 0; i < array.length; i++) {\nstrTemp = (Integer.toHexString(array[i] & 0XFF));\nif (strTemp.length() == 1) {\nvalueAfterMD5 = valueAfterMD5 + \"0\" + strTemp;\n} else {\nvalueAfterMD5 = valueAfterMD5 + strTemp;\n}\n}\nreturn valueAfterMD5.toUpperCase();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 96
                },
                {
                        "id": "pretrain_java_data_17351260",
                        "content": "private static String genRandomGUID(boolean secure) {\nString valueBeforeMD5 = \"\";\nString valueAfterMD5 = \"\";\nMessageDigest md5 = null;\nStringBuffer sbValueBeforeMD5 = new StringBuffer();\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"Error: \" + e);\nreturn valueBeforeMD5;\n}\nlong time = System.currentTimeMillis();\nlong rand = 0;\nif (secure) {\nrand = mySecureRand.nextLong();\n} else {\nrand = myRand.nextLong();\n}\nsbValueBeforeMD5.append(s_id);\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(time));\nsbValueBeforeMD5.append(\":\");\nsbValueBeforeMD5.append(Long.toString(rand));\nvalueBeforeMD5 = sbValueBeforeMD5.toString();\nmd5.update(valueBeforeMD5.getBytes());\nbyte[] array = md5.digest();\nString strTemp = \"\";\nfor (int i = 0; i < array.length; i++) {\nstrTemp = (Integer.toHexString(array[i] & 0XFF));\nif (strTemp.length() == 1) {\nvalueAfterMD5 = valueAfterMD5 + \"0\" + strTemp;\n} else {\nvalueAfterMD5 = valueAfterMD5 + strTemp;\n}\n}\nreturn valueAfterMD5.toUpperCase();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2685005#54#90.java",
                        "__cluster__": 96
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11546108",
                        "content": "@Override\npublic void run() {\ntry {\nBufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\nString ligneEnCours;\nint i = 0;\ninformations = \"\";\nwhile ((ligneEnCours = in.readLine()) != null) {\nswitch(i) {\ncase 0:\nversion = ligneEnCours;\nbreak;\ncase 1:\nurl = ligneEnCours;\nbreak;\ndefault:\ninformations += ligneEnCours + '\\n';\nbreak;\n}\ni++;\n}\nin.close();\nerreur = false;\n} catch (IOException e) {\nerreur = true;\ntexteErreur = e.getMessage();\nif (texteErreur.equals(\"Network is unreachable\")) {\ntexteErreur = \"Pas de r\u00e9seau\";\nnumErreur = 1;\n}\nif (e instanceof FileNotFoundException) {\ntexteErreur = \"Probl\u00e8me param\u00e9trage\";\nnumErreur = 2;\n}\ne.printStackTrace();\n} finally {\nfor (ActionListener al : listeners) {\nal.actionPerformed(null);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 147
                },
                {
                        "id": "pretrain_java_data_17344371",
                        "content": "<reponame>cragkhit/elasticsearch\n@Override\npublic void run() {\ntry {\nBufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\nString ligneEnCours;\nint i = 0;\ninformations = \"\";\nwhile ((ligneEnCours = in.readLine()) != null) {\nswitch(i) {\ncase 0:\nversion = ligneEnCours;\nbreak;\ncase 1:\nurl = ligneEnCours;\nbreak;\ndefault:\ninformations += ligneEnCours + '\\n';\nbreak;\n}\ni++;\n}\nin.close();\nerreur = false;\n} catch (IOException e) {\nerreur = true;\ntexteErreur = e.getMessage();\nif (texteErreur.equals(\"Network is unreachable\")) {\ntexteErreur = \"Pas de r\u00e9seau\";\nnumErreur = 1;\n}\nif (e instanceof FileNotFoundException) {\ntexteErreur = \"Probl\u00e8me param\u00e9trage\";\nnumErreur = 2;\n}\ne.printStackTrace();\n} finally {\nfor (ActionListener al : listeners) {\nal.actionPerformed(null);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2110838#66#106.java",
                        "__cluster__": 147
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17384782",
                        "content": "<filename>references/bcb_chosen_clones/selected#1263074#11#23.java\npublic static void main(String[] args) throws Exception {\nif (args.length != 2) {\nSystem.out.println(\"arguments: sourcefile destfile\");\nSystem.exit(1);\n}\nFileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\nByteBuffer buffer = ByteBuffer.allocate(BSIZE);\nwhile (in.read(buffer) != -1) {\nbuffer.flip();\nout.write(buffer);\nbuffer.clear();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1263074#11#23.java",
                        "__cluster__": 523
                },
                {
                        "id": "test_bigclonebench_data_20247400",
                        "content": "public static void main(String[] args) throws Exception {\nif (args.length != 2) {\nSystem.out.println(\"arguments: sourcefile destfile\");\nSystem.exit(1);\n}\nFileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\nByteBuffer buffer = ByteBuffer.allocate(BSIZE);\nwhile (in.read(buffer) != -1) {\nbuffer.flip();\nout.write(buffer);\nbuffer.clear();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 523
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_7633336",
                        "content": "private JSONObject executeHttpGet(String uri) throws Exception {\nHttpGet req = new HttpGet(uri);\nHttpClient client = new DefaultHttpClient();\nHttpResponse resLogin = client.execute(req);\nBufferedReader r = new BufferedReader(new InputStreamReader(resLogin.getEntity().getContent()));\nStringBuilder sb = new StringBuilder();\nString s = null;\nwhile ((s = r.readLine()) != null) {\nsb.append(s);\n}\nreturn new JSONObject(sb.toString());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 600
                },
                {
                        "id": "pretrain_java_data_18836695",
                        "content": "<gh_stars>10-100\nprivate JSONObject executeHttpGet(String uri) throws Exception {\nHttpGet req = new HttpGet(uri);\nHttpClient client = new DefaultHttpClient();\nHttpResponse resLogin = client.execute(req);\nBufferedReader r = new BufferedReader(new InputStreamReader(resLogin.getEntity().getContent()));\nStringBuilder sb = new StringBuilder();\nString s = null;\nwhile ((s = r.readLine()) != null) {\nsb.append(s);\n}\nreturn new JSONObject(sb.toString());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1937566#191#202.java",
                        "__cluster__": 600
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17375855",
                        "content": "public static void main(String[] args) {\nif (args.length != 1) {\nSystem.out.println(\"Usage: GZip source\");\nreturn;\n}\nString zipname = args[0] + \".gz\";\nGZIPOutputStream zipout;\ntry {\nFileOutputStream out = new FileOutputStream(zipname);\nzipout = new GZIPOutputStream(out);\n} catch (IOException e) {\nSystem.out.println(\"Couldn't create \" + zipname + \".\");\nreturn;\n}\nbyte[] buffer = new byte[sChunk];\ntry {\nFileInputStream in = new FileInputStream(args[0]);\nint length;\nwhile ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);\nin.close();\n} catch (IOException e) {\nSystem.out.println(\"Couldn't compress \" + args[0] + \".\");\n}\ntry {\nzipout.close();\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#18878#8#35.java",
                        "__cluster__": 646
                },
                {
                        "id": "test_bigclonebench_data_884867",
                        "content": "public static void main(String[] args) {\nif (args.length != 1) {\nSystem.out.println(\"Usage: GZip source\");\nreturn;\n}\nString zipname = args[0] + \".gz\";\nGZIPOutputStream zipout;\ntry {\nFileOutputStream out = new FileOutputStream(zipname);\nzipout = new GZIPOutputStream(out);\n} catch (IOException e) {\nSystem.out.println(\"Couldn't create \" + zipname + \".\");\nreturn;\n}\nbyte[] buffer = new byte[sChunk];\ntry {\nFileInputStream in = new FileInputStream(args[0]);\nint length;\nwhile ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);\nin.close();\n} catch (IOException e) {\nSystem.out.println(\"Couldn't compress \" + args[0] + \".\");\n}\ntry {\nzipout.close();\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 646
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_18831502",
                        "content": "<filename>references/bcb_chosen_clones/selected#565987#48#90.java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nif (request.getParameter(\"edit\") != null) {\ntry {\nUser cu = (User) request.getSession().getAttribute(\"currentuser\");\nUserDetails ud = cu.getUserDetails();\nString returnTo = \"editprofile.jsp\";\nif (!request.getParameter(\"password\").equals(\"\")) {\nString password = request.getParameter(\"password\");\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(new String(password).getBytes());\nbyte[] hash = md.digest();\nString pass = new BigInteger(1, hash).toString(16);\ncu.setClientPassword(pass);\n}\nud.setFirstName(request.getParameter(\"fname\"));\nud.setLastName(request.getParameter(\"lname\"));\nud.setEmailAddress(request.getParameter(\"email\"));\nud.setAddress(request.getParameter(\"address\"));\nud.setZipcode(request.getParameter(\"zipcode\"));\nud.setTown(request.getParameter(\"town\"));\nud.setCountry(request.getParameter(\"country\"));\nud.setTrackingColor(request.getParameter(\"input1\"));\nString vis = request.getParameter(\"visibility\");\nif (vis.equals(\"self\")) {\ncu.setVisibility(0);\n} else if (vis.equals(\"friends\")) {\ncu.setVisibility(1);\n} else if (vis.equals(\"all\")) {\ncu.setVisibility(2);\n} else {\nresponse.sendRedirect(\"error.jsp?id=8\");\n}\nem.getTransaction().begin();\nem.persist(cu);\nem.getTransaction().commit();\nresponse.sendRedirect(returnTo);\n} catch (Throwable e) {\ne.printStackTrace();\nresponse.sendRedirect(\"error.jsp?id=5\");\n}\nreturn;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#565987#48#90.java",
                        "__cluster__": 732
                },
                {
                        "id": "test_bigclonebench_data_16232202",
                        "content": "protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nif (request.getParameter(\"edit\") != null) {\ntry {\nUser cu = (User) request.getSession().getAttribute(\"currentuser\");\nUserDetails ud = cu.getUserDetails();\nString returnTo = \"editprofile.jsp\";\nif (!request.getParameter(\"password\").equals(\"\")) {\nString password = request.getParameter(\"password\");\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(new String(password).getBytes());\nbyte[] hash = md.digest();\nString pass = new BigInteger(1, hash).toString(16);\ncu.setClientPassword(pass);\n}\nud.setFirstName(request.getParameter(\"fname\"));\nud.setLastName(request.getParameter(\"lname\"));\nud.setEmailAddress(request.getParameter(\"email\"));\nud.setAddress(request.getParameter(\"address\"));\nud.setZipcode(request.getParameter(\"zipcode\"));\nud.setTown(request.getParameter(\"town\"));\nud.setCountry(request.getParameter(\"country\"));\nud.setTrackingColor(request.getParameter(\"input1\"));\nString vis = request.getParameter(\"visibility\");\nif (vis.equals(\"self\")) {\ncu.setVisibility(0);\n} else if (vis.equals(\"friends\")) {\ncu.setVisibility(1);\n} else if (vis.equals(\"all\")) {\ncu.setVisibility(2);\n} else {\nresponse.sendRedirect(\"error.jsp?id=8\");\n}\nem.getTransaction().begin();\nem.persist(cu);\nem.getTransaction().commit();\nresponse.sendRedirect(returnTo);\n} catch (Throwable e) {\ne.printStackTrace();\nresponse.sendRedirect(\"error.jsp?id=5\");\n}\nreturn;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 732
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17340607",
                        "content": "<reponame>cragkhit/elasticsearch\npublic String httpRequestByPOST(String url, int timeout, List<NameValuePair> params) {\nString response = \"\";\ntry {\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost(url);\nhttpPost.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));\nHttpResponse serverResponse = httpClient.execute(httpPost);\nStatusLine statusLine = serverResponse.getStatusLine();\nif (statusLine.getStatusCode() < 400) {\nInputStream inputStream = serverResponse.getEntity().getContent();\nInputStreamReader inputReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputReader);\nStringBuffer buffer = new StringBuffer();\nString line;\nwhile ((line = bufferedReader.readLine()) != null) {\nbuffer.append(line);\n}\nresponse = buffer.toString();\ninputStream.close();\n} else {\nthis.lastErrorCode = String.valueOf(statusLine.getStatusCode());\nthis.lastErrorMessage = statusLine.getReasonPhrase();\nreturn null;\n}\n} catch (IOException e) {\nthis.lastErrorCode = \"-1\";\nthis.lastErrorMessage = e.getLocalizedMessage();\nreturn null;\n}\nreturn response;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1158095#256#286.java",
                        "__cluster__": 785
                },
                {
                        "id": "test_bigclonebench_data_1508930",
                        "content": "public String httpRequestByPOST(String url, int timeout, List<NameValuePair> params) {\nString response = \"\";\ntry {\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost(url);\nhttpPost.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));\nHttpResponse serverResponse = httpClient.execute(httpPost);\nStatusLine statusLine = serverResponse.getStatusLine();\nif (statusLine.getStatusCode() < 400) {\nInputStream inputStream = serverResponse.getEntity().getContent();\nInputStreamReader inputReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputReader);\nStringBuffer buffer = new StringBuffer();\nString line;\nwhile ((line = bufferedReader.readLine()) != null) {\nbuffer.append(line);\n}\nresponse = buffer.toString();\ninputStream.close();\n} else {\nthis.lastErrorCode = String.valueOf(statusLine.getStatusCode());\nthis.lastErrorMessage = statusLine.getReasonPhrase();\nreturn null;\n}\n} catch (IOException e) {\nthis.lastErrorCode = \"-1\";\nthis.lastErrorMessage = e.getLocalizedMessage();\nreturn null;\n}\nreturn response;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 785
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11377441",
                        "content": "public void resolvePlugins() {\ntry {\nFile cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;\nFile pluginsFile = new File(cacheDir, \"plugins.xml\");\nif (!pluginsFile.exists()) {\nURL pluginURL = new URL(\"http://xpontus.sourceforge.net/snapshot/plugins.xml\");\nInputStream is = pluginURL.openStream();\nOutputStream os = FileUtils.openOutputStream(pluginsFile);\nIOUtils.copy(is, os);\nIOUtils.closeQuietly(os);\nIOUtils.closeQuietly(is);\n}\nresolvePlugins(pluginsFile.getAbsolutePath());\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 48
                },
                {
                        "id": "pretrain_java_data_17291195",
                        "content": "<reponame>cragkhit/elasticsearch\npublic void resolvePlugins() {\ntry {\nFile cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;\nFile pluginsFile = new File(cacheDir, \"plugins.xml\");\nif (!pluginsFile.exists()) {\nURL pluginURL = new URL(\"http://xpontus.sourceforge.net/snapshot/plugins.xml\");\nInputStream is = pluginURL.openStream();\nOutputStream os = FileUtils.openOutputStream(pluginsFile);\nIOUtils.copy(is, os);\nIOUtils.closeQuietly(os);\nIOUtils.closeQuietly(is);\n}\nresolvePlugins(pluginsFile.getAbsolutePath());\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1809768#127#143.java",
                        "__cluster__": 48
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4440505",
                        "content": "public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\nString fileName = file.getFileName();\nString assetsPath = FileFactory.getRealAssetsRootPath();\nnew java.io.File(assetsPath).mkdir();\njava.io.File workingFile = getAssetIOFile(file);\nDotResourceCache vc = CacheLocator.getVeloctyResourceCache();\nvc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\nif (destination != null && destination.getInode() > 0) {\nFileInputStream is = new FileInputStream(workingFile);\nFileChannel channelFrom = is.getChannel();\njava.io.File newVersionFile = getAssetIOFile(destination);\nFileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\nchannelFrom.transferTo(0, channelFrom.size(), channelTo);\nchannelTo.force(false);\nchannelTo.close();\nchannelFrom.close();\n}\nif (newDataFile != null) {\nFileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\nwriteCurrentChannel.truncate(0);\nFileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\nfromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\nwriteCurrentChannel.force(false);\nwriteCurrentChannel.close();\nfromChannel.close();\nif (UtilMethods.isImage(fileName)) {\nBufferedImage img = javax.imageio.ImageIO.read(workingFile);\nint height = img.getHeight();\nfile.setHeight(height);\nint width = img.getWidth();\nfile.setWidth(width);\n}\nString folderPath = workingFile.getParentFile().getAbsolutePath();\nIdentifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\njava.io.File directory = new java.io.File(folderPath);\njava.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\nfor (java.io.File iofile : files) {\ntry {\niofile.delete();\n} catch (SecurityException e) {\nLogger.error(FileFactory.class, \"EditFileAction._saveWorkingFileData(): \" + iofile.getName() + \" cannot be erased. Please check the file permissions.\");\n} catch (Exception e) {\nLogger.error(FileFactory.class, \"EditFileAction._saveWorkingFileData(): \" + e.getMessage());\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#503860#413#459.java",
                        "__cluster__": 310
                },
                {
                        "id": "test_bigclonebench_data_5414088",
                        "content": "public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\nString fileName = file.getFileName();\nString assetsPath = FileFactory.getRealAssetsRootPath();\nnew java.io.File(assetsPath).mkdir();\njava.io.File workingFile = getAssetIOFile(file);\nDotResourceCache vc = CacheLocator.getVeloctyResourceCache();\nvc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\nif (destination != null && destination.getInode() > 0) {\nFileInputStream is = new FileInputStream(workingFile);\nFileChannel channelFrom = is.getChannel();\njava.io.File newVersionFile = getAssetIOFile(destination);\nFileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\nchannelFrom.transferTo(0, channelFrom.size(), channelTo);\nchannelTo.force(false);\nchannelTo.close();\nchannelFrom.close();\n}\nif (newDataFile != null) {\nFileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\nwriteCurrentChannel.truncate(0);\nFileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\nfromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\nwriteCurrentChannel.force(false);\nwriteCurrentChannel.close();\nfromChannel.close();\nif (UtilMethods.isImage(fileName)) {\nBufferedImage img = javax.imageio.ImageIO.read(workingFile);\nint height = img.getHeight();\nfile.setHeight(height);\nint width = img.getWidth();\nfile.setWidth(width);\n}\nString folderPath = workingFile.getParentFile().getAbsolutePath();\nIdentifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\njava.io.File directory = new java.io.File(folderPath);\njava.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\nfor (java.io.File iofile : files) {\ntry {\niofile.delete();\n} catch (SecurityException e) {\nLogger.error(FileFactory.class, \"EditFileAction._saveWorkingFileData(): \" + iofile.getName() + \" cannot be erased. Please check the file permissions.\");\n} catch (Exception e) {\nLogger.error(FileFactory.class, \"EditFileAction._saveWorkingFileData(): \" + e.getMessage());\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 310
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_18936109",
                        "content": "public static void writeFileType(String uriFile, String outputfile, int num) {\nBufferedWriter writer = null;\nString uri = null;\ntry {\nint counter = 1;\nwriter = new BufferedWriter(new FileWriter(outputfile));\nBufferedReader reader = new BufferedReader(new FileReader(uriFile));\nuri = null;\nwhile (counter < num) {\nuri = reader.readLine();\ncounter++;\n}\nwhile ((uri = reader.readLine()) != null) {\ntry {\nSystem.err.println(\"working on the [\" + counter + \"]th document.\");\ncounter++;\nURL url = new URL(uri);\nURLConnection myConnection = url.openConnection();\nBufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));\nString line = null;\nboolean hasOWL = false;\nboolean hasRDFS = false;\nboolean hasRDF = false;\nint linecount = 0;\nwhile ((line = myReader.readLine()) != null) {\nif (line.indexOf(\"http://www.w3.org/2002/07/owl\") != -1) hasOWL = true; else if (line.indexOf(\"http://www.w3.org/2000/01/rdf-schema\") != -1) hasRDFS = true; else if (line.indexOf(\"http://www.w3.org/1999/02/22-rdf-syntax-ns\") != -1) hasRDF = true;\nlinecount++;\nif (linecount > 100) break;\n}\nif (hasOWL) writer.write(uri + \"\\t\" + OWL); else if (hasRDFS) writer.write(uri + \"\\t\" + RDFS); else if (hasRDF) writer.write(uri + \"\\t\" + RDF); else writer.write(uri + \"\\t\" + UNKNOWN);\nwriter.newLine();\nwriter.flush();\n} catch (Exception e) {\ne.printStackTrace();\ntry {\nwriter.write(uri + \"\\t\" + BROKEN);\nwriter.newLine();\nwriter.flush();\n} catch (Exception ex) {\nex.printStackTrace();\n}\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1814405#29#75.java",
                        "__cluster__": 877
                },
                {
                        "id": "test_bigclonebench_data_8973505",
                        "content": "public static void writeFileType(String uriFile, String outputfile, int num) {\nBufferedWriter writer = null;\nString uri = null;\ntry {\nint counter = 1;\nwriter = new BufferedWriter(new FileWriter(outputfile));\nBufferedReader reader = new BufferedReader(new FileReader(uriFile));\nuri = null;\nwhile (counter < num) {\nuri = reader.readLine();\ncounter++;\n}\nwhile ((uri = reader.readLine()) != null) {\ntry {\nSystem.err.println(\"working on the [\" + counter + \"]th document.\");\ncounter++;\nURL url = new URL(uri);\nURLConnection myConnection = url.openConnection();\nBufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));\nString line = null;\nboolean hasOWL = false;\nboolean hasRDFS = false;\nboolean hasRDF = false;\nint linecount = 0;\nwhile ((line = myReader.readLine()) != null) {\nif (line.indexOf(\"http://www.w3.org/2002/07/owl\") != -1) hasOWL = true; else if (line.indexOf(\"http://www.w3.org/2000/01/rdf-schema\") != -1) hasRDFS = true; else if (line.indexOf(\"http://www.w3.org/1999/02/22-rdf-syntax-ns\") != -1) hasRDF = true;\nlinecount++;\nif (linecount > 100) break;\n}\nif (hasOWL) writer.write(uri + \"\\t\" + OWL); else if (hasRDFS) writer.write(uri + \"\\t\" + RDFS); else if (hasRDF) writer.write(uri + \"\\t\" + RDF); else writer.write(uri + \"\\t\" + UNKNOWN);\nwriter.newLine();\nwriter.flush();\n} catch (Exception e) {\ne.printStackTrace();\ntry {\nwriter.write(uri + \"\\t\" + BROKEN);\nwriter.newLine();\nwriter.flush();\n} catch (Exception ex) {\nex.printStackTrace();\n}\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 877
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6048935",
                        "content": "public String readReferenceText(final String ident) throws NoContentException {\ntry {\nString name = getFilename(ident);\nURL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry(\"/\"), name);\nInputStream in = url.openStream();\nInputStreamReader isr = new InputStreamReader(in, \"UTF-8\");\nBufferedReader br = new BufferedReader(isr);\nStringBuffer buffer = new StringBuffer();\nString line = br.readLine();\nwhile (null != line) {\nbuffer.append(line + \"\\n\");\nline = br.readLine();\n}\nreturn buffer.toString();\n} catch (MalformedURLException muEx) {\nlogError(muEx);\n} catch (UnsupportedEncodingException ueEx) {\nlogError(ueEx);\n} catch (IOException ioEx) {\nlogError(ioEx);\n}\nthrow new NoContentException(\"Unable to find or read reference text.\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1776101#457#479.java",
                        "__cluster__": 191
                },
                {
                        "id": "test_bigclonebench_data_20519261",
                        "content": "public String readReferenceText(final String ident) throws NoContentException {\ntry {\nString name = getFilename(ident);\nURL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry(\"/\"), name);\nInputStream in = url.openStream();\nInputStreamReader isr = new InputStreamReader(in, \"UTF-8\");\nBufferedReader br = new BufferedReader(isr);\nStringBuffer buffer = new StringBuffer();\nString line = br.readLine();\nwhile (null != line) {\nbuffer.append(line + \"\\n\");\nline = br.readLine();\n}\nreturn buffer.toString();\n} catch (MalformedURLException muEx) {\nlogError(muEx);\n} catch (UnsupportedEncodingException ueEx) {\nlogError(ueEx);\n} catch (IOException ioEx) {\nlogError(ioEx);\n}\nthrow new NoContentException(\"Unable to find or read reference text.\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 191
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6009498",
                        "content": "public void googleImageSearch(String start) {\ntry {\nString u = \"http://images.google.com/images?q=\" + custom + start;\nif (u.contains(\" \")) {\nu = u.replace(\" \", \"+\");\n}\nURL url = new URL(u);\nHttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\nhttpcon.addRequestProperty(\"User-Agent\", \"Mozilla/4.76\");\nBufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\ngoogleImages.clear();\nString text = \"\";\nString lin = \"\";\nwhile ((lin = readIn.readLine()) != null) {\ntext += lin;\n}\nreadIn.close();\nif (text.contains(\"\\n\")) {\ntext = text.replace(\"\\n\", \"\");\n}\nString[] array = text.split(\"\\\\Qhref=\\\"/imgres?imgurl=\\\\E\");\nfor (String s : array) {\nif (s.startsWith(\"http://\") || s.startsWith(\"https://\") && s.contains(\"&amp;\")) {\nString s1 = s.substring(0, s.indexOf(\"&amp;\"));\ngoogleImages.add(s1);\n}\n}\n} catch (Exception ex4) {\nMusicBoxView.showErrorDialog(ex4);\n}\njButton4.setEnabled(true);\njButton2.setEnabled(true);\ngetContentPane().remove(jLabel1);\nImageIcon icon;\ntry {\nicon = new ImageIcon(new URL(googleImages.elementAt(googleImageLocation)));\nint h = icon.getIconHeight();\nint w = icon.getIconWidth();\njLabel1.setSize(w, h);\njLabel1.setIcon(icon);\nadd(jLabel1, BorderLayout.CENTER);\n} catch (MalformedURLException ex) {\nMusicBoxView.showErrorDialog(ex);\njLabel1.setIcon(MusicBoxView.noImage);\n}\nadd(jPanel1, BorderLayout.PAGE_END);\npack();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1568689#182#229.java",
                        "__cluster__": 441
                },
                {
                        "id": "test_bigclonebench_data_1005108",
                        "content": "public void googleImageSearch(String search, String start) {\ntry {\nString u = \"http://images.google.com/images?q=\" + search + start;\nif (u.contains(\" \")) {\nu = u.replace(\" \", \"+\");\n}\nURL url = new URL(u);\nHttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\nhttpcon.addRequestProperty(\"User-Agent\", \"Mozilla/4.76\");\nBufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\ngoogleImages.clear();\nString text = \"\";\nString lin = \"\";\nwhile ((lin = readIn.readLine()) != null) {\ntext += lin;\n}\nreadIn.close();\nif (text.contains(\"\\n\")) {\ntext = text.replace(\"\\n\", \"\");\n}\nString[] array = text.split(\"\\\\Qhref=\\\"/imgres?imgurl=\\\\E\");\nfor (String s : array) {\nif (s.startsWith(\"http://\") || s.startsWith(\"https://\") && s.contains(\"&amp;\")) {\nString s1 = s.substring(0, s.indexOf(\"&amp;\"));\ngoogleImages.add(s1);\n}\n}\n} catch (Exception ex4) {\nMusicBoxView.showErrorDialog(ex4);\n}\nMusicBoxView.jButton7.setEnabled(true);\nImageIcon icon;\ntry {\nicon = new ImageIcon(new URL(googleImages.elementAt(MusicBoxView.googleImageLocation)));\nImageIcon ico = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));\nMusicBoxView.albumArtLabel.setIcon(ico);\n} catch (MalformedURLException ex1) {\nMusicBoxView.showErrorDialog(ex1);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 441
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_4547259",
                        "content": "public static String getMD5(String _pwd) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(_pwd.getBytes());\nreturn toHexadecimal(new String(md.digest()).getBytes());\n} catch (NoSuchAlgorithmException x) {\nx.printStackTrace();\nreturn \"\";\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#294534#42#51.java",
                        "__cluster__": 618
                },
                {
                        "id": "test_bigclonebench_data_11968328",
                        "content": "public static String getMD5(String _pwd) {\ntry {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(_pwd.getBytes());\nreturn toHexadecimal(new String(md.digest()).getBytes());\n} catch (NoSuchAlgorithmException x) {\nx.printStackTrace();\nreturn \"\";\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 618
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4532685",
                        "content": "<filename>references/bcb_chosen_clones/selected#1152284#10#35.java\npublic static void main(String[] args) {\nFTPClient client = new FTPClient();\ntry {\nclient.connect(\"192.168.1.10\");\nclient.login(\"a\", \"123456\");\nString[] names = client.listNames();\nfor (String name : names) {\nSystem.out.println(\"Name = \" + name);\n}\nFTPFile[] ftpFiles = client.listFiles();\nfor (FTPFile ftpFile : ftpFiles) {\nif (ftpFile.getType() == FTPFile.FILE_TYPE) {\nSystem.out.println(\"FTPFile: \" + ftpFile.getName() + \"; \" + FileUtils.byteCountToDisplaySize(ftpFile.getSize()));\n}\n}\nclient.logout();\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\ntry {\nclient.disconnect();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1152284#10#35.java",
                        "__cluster__": 260
                },
                {
                        "id": "test_bigclonebench_data_6418781",
                        "content": "public static void main(String[] args) {\nFTPClient client = new FTPClient();\ntry {\nclient.connect(\"192.168.1.10\");\nclient.login(\"a\", \"123456\");\nString[] names = client.listNames();\nfor (String name : names) {\nSystem.out.println(\"Name = \" + name);\n}\nFTPFile[] ftpFiles = client.listFiles();\nfor (FTPFile ftpFile : ftpFiles) {\nif (ftpFile.getType() == FTPFile.FILE_TYPE) {\nSystem.out.println(\"FTPFile: \" + ftpFile.getName() + \"; \" + FileUtils.byteCountToDisplaySize(ftpFile.getSize()));\n}\n}\nclient.logout();\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\ntry {\nclient.disconnect();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 260
                },
                [
                        {
                                "real_dup": 3
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8062076",
                        "content": "public void updateUser(User portalUserBean, AuthSession authSession) {\nDatabaseAdapter dbDyn = null;\nPreparedStatement ps = null;\ntry {\ndbDyn = DatabaseAdapter.getInstance();\nString sql = \"update WM_LIST_USER \" + \"set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, \" + \"       ADDRESS=?,TELEPHONE=?,EMAIL=? \" + \"where  ID_USER=? and is_deleted=0 and  ID_FIRM in \";\nswitch(dbDyn.getFamaly()) {\ncase DatabaseManager.MYSQL_FAMALY:\nString idList = authSession.getGrantedCompanyId();\nsql += \" (\" + idList + \") \";\nbreak;\ndefault:\nsql += \"(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)\";\nbreak;\n}\nps = dbDyn.prepareStatement(sql);\nint num = 1;\nps.setString(num++, portalUserBean.getFirstName());\nps.setString(num++, portalUserBean.getMiddleName());\nps.setString(num++, portalUserBean.getLastName());\nps.setString(num++, portalUserBean.getAddress());\nps.setString(num++, portalUserBean.getPhone());\nps.setString(num++, portalUserBean.getEmail());\nps.setLong(num++, portalUserBean.getUserId());\nswitch(dbDyn.getFamaly()) {\ncase DatabaseManager.MYSQL_FAMALY:\nbreak;\ndefault:\nps.setString(num++, authSession.getUserLogin());\nbreak;\n}\nint i1 = ps.executeUpdate();\nif (log.isDebugEnabled()) log.debug(\"Count of updated record - \" + i1);\ndbDyn.commit();\n} catch (Exception e) {\ntry {\nif (dbDyn != null) {\ndbDyn.rollback();\n}\n} catch (Exception e001) {\n}\nString es = \"Error update of portal user\";\nlog.error(es, e);\nthrow new IllegalStateException(es, e);\n} finally {\nDatabaseManager.close(dbDyn, ps);\ndbDyn = null;\nps = null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 28
                },
                {
                        "id": "pretrain_java_data_7737116",
                        "content": "<reponame>cragkhit/elasticsearch<filename>references/bcb_chosen_clones/selected#357659#232#281.java\npublic void updateUser(User portalUserBean, AuthSession authSession) {\nDatabaseAdapter dbDyn = null;\nPreparedStatement ps = null;\ntry {\ndbDyn = DatabaseAdapter.getInstance();\nString sql = \"update WM_LIST_USER \" + \"set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, \" + \"       ADDRESS=?,TELEPHONE=?,EMAIL=? \" + \"where  ID_USER=? and is_deleted=0 and  ID_FIRM in \";\nswitch(dbDyn.getFamaly()) {\ncase DatabaseManager.MYSQL_FAMALY:\nString idList = authSession.getGrantedCompanyId();\nsql += \" (\" + idList + \") \";\nbreak;\ndefault:\nsql += \"(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)\";\nbreak;\n}\nps = dbDyn.prepareStatement(sql);\nint num = 1;\nps.setString(num++, portalUserBean.getFirstName());\nps.setString(num++, portalUserBean.getMiddleName());\nps.setString(num++, portalUserBean.getLastName());\nps.setString(num++, portalUserBean.getAddress());\nps.setString(num++, portalUserBean.getPhone());\nps.setString(num++, portalUserBean.getEmail());\nps.setLong(num++, portalUserBean.getUserId());\nswitch(dbDyn.getFamaly()) {\ncase DatabaseManager.MYSQL_FAMALY:\nbreak;\ndefault:\nps.setString(num++, authSession.getUserLogin());\nbreak;\n}\nint i1 = ps.executeUpdate();\nif (log.isDebugEnabled()) log.debug(\"Count of updated record - \" + i1);\ndbDyn.commit();\n} catch (Exception e) {\ntry {\nif (dbDyn != null) {\ndbDyn.rollback();\n}\n} catch (Exception e001) {\n}\nString es = \"Error update of portal user\";\nlog.error(es, e);\nthrow new IllegalStateException(es, e);\n} finally {\nDatabaseManager.close(dbDyn, ps);\ndbDyn = null;\nps = null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#357659#232#281.java",
                        "__cluster__": 28
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_8788371",
                        "content": "private void tail(String[] cmd, int pos) throws IOException {\nCommandFormat c = new CommandFormat(\"tail\", 1, 1, \"f\");\nString src = null;\nPath path = null;\ntry {\nList<String> parameters = c.parse(cmd, pos);\nsrc = parameters.get(0);\n} catch (IllegalArgumentException iae) {\nSystem.err.println(\"Usage: java FsShell \" + TAIL_USAGE);\nthrow iae;\n}\nboolean foption = c.getOpt(\"f\") ? true : false;\npath = new Path(src);\nFileSystem srcFs = path.getFileSystem(getConf());\nif (srcFs.isDirectory(path)) {\nthrow new IOException(\"Source must be a file.\");\n}\nlong fileSize = srcFs.getFileStatus(path).getLen();\nlong offset = (fileSize > 1024) ? fileSize - 1024 : 0;\nwhile (true) {\nFSDataInputStream in = srcFs.open(path);\nin.seek(offset);\nIOUtils.copyBytes(in, System.out, 1024, false);\noffset = in.getPos();\nin.close();\nif (!foption) {\nbreak;\n}\nfileSize = srcFs.getFileStatus(path).getLen();\noffset = (fileSize > offset) ? offset : fileSize;\ntry {\nThread.sleep(5000);\n} catch (InterruptedException e) {\nbreak;\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 88
                },
                {
                        "id": "pretrain_java_data_7723566",
                        "content": "<filename>references/bcb_chosen_clones/selected#559023#931#967.java<gh_stars>10-100\nprivate void tail(String[] cmd, int pos) throws IOException {\nCommandFormat c = new CommandFormat(\"tail\", 1, 1, \"f\");\nString src = null;\nPath path = null;\ntry {\nList<String> parameters = c.parse(cmd, pos);\nsrc = parameters.get(0);\n} catch (IllegalArgumentException iae) {\nSystem.err.println(\"Usage: java FsShell \" + TAIL_USAGE);\nthrow iae;\n}\nboolean foption = c.getOpt(\"f\") ? true : false;\npath = new Path(src);\nFileSystem srcFs = path.getFileSystem(getConf());\nif (srcFs.isDirectory(path)) {\nthrow new IOException(\"Source must be a file.\");\n}\nlong fileSize = srcFs.getFileStatus(path).getLen();\nlong offset = (fileSize > 1024) ? fileSize - 1024 : 0;\nwhile (true) {\nFSDataInputStream in = srcFs.open(path);\nin.seek(offset);\nIOUtils.copyBytes(in, System.out, 1024, false);\noffset = in.getPos();\nin.close();\nif (!foption) {\nbreak;\n}\nfileSize = srcFs.getFileStatus(path).getLen();\noffset = (fileSize > offset) ? offset : fileSize;\ntry {\nThread.sleep(5000);\n} catch (InterruptedException e) {\nbreak;\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#559023#931#967.java",
                        "__cluster__": 88
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_7675388",
                        "content": "<filename>references/bcb_chosen_clones/selected#565287#63#168.java\npublic void init() throws GateException {\nif (reportFile == null) throw new GateException(\"No report file set!\");\nboolean restarting = false;\nif (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {\nthrow new GateException(\"Could not create directories for \" + reportFile.getAbsolutePath());\n}\nFile backupFile = new File(reportFile.getAbsolutePath() + \".bak\");\nif (reportFile.exists()) {\nrestarting = true;\nlogger.info(\"Existing report file found at \\\"\" + reportFile.getAbsolutePath() + \"\\\", attempting to restart\");\nif (!reportFile.renameTo(backupFile)) {\ntry {\nbyte[] buff = new byte[32 * 1024];\nInputStream in = new BufferedInputStream(new FileInputStream(reportFile));\ntry {\nOutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));\ntry {\nint read = in.read(buff);\nwhile (read != -1) {\nout.write(buff, 0, read);\nread = in.read(buff);\n}\n} finally {\nout.close();\n}\n} finally {\nin.close();\n}\n} catch (IOException e) {\nthrow new GateException(\"Could not restart batch\", e);\n}\n}\n}\ntry {\nreportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));\nreportWriter.writeStartDocument();\nreportWriter.writeCharacters(\"\\n\");\nreportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);\nreportWriter.writeStartElement(Tools.REPORT_NAMESPACE, \"cloudReport\");\nreportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);\nreportWriter.writeCharacters(\"\\n\");\nreportWriter.writeStartElement(Tools.REPORT_NAMESPACE, \"documents\");\n} catch (XMLStreamException e) {\nthrow new GateException(\"Cannot write to the report file!\", e);\n} catch (IOException e) {\nthrow new GateException(\"Cannot write to the report file!\", e);\n}\nif (restarting) {\ntry {\nSet<String> completedDocuments = new HashSet<String>();\nlogger.debug(\"Processing existing report file\");\nInputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));\nXMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);\ntry {\nXMLEvent event;\nwhile (xer.hasNext()) {\nevent = xer.nextEvent();\nif (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(\"documents\")) {\nbreak;\n}\n}\nList<XMLEvent> events = new LinkedList<XMLEvent>();\nString currentReturnCode = null;\nString currentDocid = null;\nwhile (xer.hasNext()) {\nevent = xer.nextEvent();\nevents.add(event);\nif (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(\"processResult\")) {\ncurrentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, \"returnCode\")).getValue();\ncurrentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, \"id\")).getValue();\n}\nif (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(\"processResult\")) {\nif (currentReturnCode.equals(\"SUCCESS\") && currentDocid != null) {\ncompletedDocuments.add(currentDocid);\nfor (XMLEvent evt : events) {\nTools.writeStaxEvent(evt, reportWriter);\n}\n}\nevents.clear();\ncurrentReturnCode = null;\ncurrentDocid = null;\n}\nif (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(\"documents\")) {\nbreak;\n}\n}\n} catch (Exception e) {\nlogger.debug(\"Exception while parsing old report file - probably \" + \"reached the end of old report\", e);\n} finally {\nxer.close();\nbakIn.close();\nbackupFile.delete();\n}\nList<String> unprocessedDocs = new ArrayList<String>();\nunprocessedDocs.addAll(Arrays.asList(documentIDs));\nunprocessedDocs.removeAll(completedDocuments);\nunprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);\n} catch (XMLStreamException e) {\nthrow new GateException(\"Cannot write to the report file!\", e);\n} catch (IOException e) {\nthrow new GateException(\"Cannot write to the report file!\", e);\n}\n} else {\nunprocessedDocumentIDs = documentIDs;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#565287#63#168.java",
                        "__cluster__": 484
                },
                {
                        "id": "test_bigclonebench_data_13886238",
                        "content": "public void init() throws GateException {\nif (reportFile == null) throw new GateException(\"No report file set!\");\nboolean restarting = false;\nif (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {\nthrow new GateException(\"Could not create directories for \" + reportFile.getAbsolutePath());\n}\nFile backupFile = new File(reportFile.getAbsolutePath() + \".bak\");\nif (reportFile.exists()) {\nrestarting = true;\nlogger.info(\"Existing report file found at \\\"\" + reportFile.getAbsolutePath() + \"\\\", attempting to restart\");\nif (!reportFile.renameTo(backupFile)) {\ntry {\nbyte[] buff = new byte[32 * 1024];\nInputStream in = new BufferedInputStream(new FileInputStream(reportFile));\ntry {\nOutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));\ntry {\nint read = in.read(buff);\nwhile (read != -1) {\nout.write(buff, 0, read);\nread = in.read(buff);\n}\n} finally {\nout.close();\n}\n} finally {\nin.close();\n}\n} catch (IOException e) {\nthrow new GateException(\"Could not restart batch\", e);\n}\n}\n}\ntry {\nreportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));\nreportWriter.writeStartDocument();\nreportWriter.writeCharacters(\"\\n\");\nreportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);\nreportWriter.writeStartElement(Tools.REPORT_NAMESPACE, \"cloudReport\");\nreportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);\nreportWriter.writeCharacters(\"\\n\");\nreportWriter.writeStartElement(Tools.REPORT_NAMESPACE, \"documents\");\n} catch (XMLStreamException e) {\nthrow new GateException(\"Cannot write to the report file!\", e);\n} catch (IOException e) {\nthrow new GateException(\"Cannot write to the report file!\", e);\n}\nif (restarting) {\ntry {\nSet<String> completedDocuments = new HashSet<String>();\nlogger.debug(\"Processing existing report file\");\nInputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));\nXMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);\ntry {\nXMLEvent event;\nwhile (xer.hasNext()) {\nevent = xer.nextEvent();\nif (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(\"documents\")) {\nbreak;\n}\n}\nList<XMLEvent> events = new LinkedList<XMLEvent>();\nString currentReturnCode = null;\nString currentDocid = null;\nwhile (xer.hasNext()) {\nevent = xer.nextEvent();\nevents.add(event);\nif (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(\"processResult\")) {\ncurrentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, \"returnCode\")).getValue();\ncurrentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, \"id\")).getValue();\n}\nif (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(\"processResult\")) {\nif (currentReturnCode.equals(\"SUCCESS\") && currentDocid != null) {\ncompletedDocuments.add(currentDocid);\nfor (XMLEvent evt : events) {\nTools.writeStaxEvent(evt, reportWriter);\n}\n}\nevents.clear();\ncurrentReturnCode = null;\ncurrentDocid = null;\n}\nif (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(\"documents\")) {\nbreak;\n}\n}\n} catch (Exception e) {\nlogger.debug(\"Exception while parsing old report file - probably \" + \"reached the end of old report\", e);\n} finally {\nxer.close();\nbakIn.close();\nbackupFile.delete();\n}\nList<String> unprocessedDocs = new ArrayList<String>();\nunprocessedDocs.addAll(Arrays.asList(documentIDs));\nunprocessedDocs.removeAll(completedDocuments);\nunprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);\n} catch (XMLStreamException e) {\nthrow new GateException(\"Cannot write to the report file!\", e);\n} catch (IOException e) {\nthrow new GateException(\"Cannot write to the report file!\", e);\n}\n} else {\nunprocessedDocumentIDs = documentIDs;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 484
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_7468819",
                        "content": "public void run() {\ntry {\nHttpURLConnection con = (HttpURLConnection) url.openConnection();\ncon.setRequestMethod(\"GET\");\ncon.setDoInput(true);\nbyte[] encodedPassword = (username + \":\" + password).getBytes();\nBASE64Encoder encoder = new BASE64Encoder();\ncon.setRequestProperty(\"Authorization\", \"Basic \" + encoder.encode(encodedPassword));\nInputStream is = con.getInputStream();\nBufferedReader rd = new BufferedReader(new InputStreamReader(is));\nString line;\nStringBuffer response = new StringBuffer();\nwhile ((line = rd.readLine()) != null) {\nresponse.append(line);\nresponse.append('\\n');\nlastIteraction = System.currentTimeMillis();\n}\nrd.close();\nis.close();\ncon.disconnect();\nresult = response.toString();\nfinish = true;\n} catch (Throwable e) {\nthis.e = e;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 488
                },
                {
                        "id": "pretrain_java_data_6118120",
                        "content": "public void run() {\ntry {\nHttpURLConnection con = (HttpURLConnection) url.openConnection();\ncon.setRequestMethod(\"GET\");\ncon.setDoInput(true);\nbyte[] encodedPassword = (username + \":\" + password).getBytes();\nBASE64Encoder encoder = new BASE64Encoder();\ncon.setRequestProperty(\"Authorization\", \"Basic \" + encoder.encode(encodedPassword));\nInputStream is = con.getInputStream();\nBufferedReader rd = new BufferedReader(new InputStreamReader(is));\nString line;\nStringBuffer response = new StringBuffer();\nwhile ((line = rd.readLine()) != null) {\nresponse.append(line);\nresponse.append('\\n');\nlastIteraction = System.currentTimeMillis();\n}\nrd.close();\nis.close();\ncon.disconnect();\nresult = response.toString();\nfinish = true;\n} catch (Throwable e) {\nthis.e = e;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1989955#315#340.java",
                        "__cluster__": 488
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_21824901",
                        "content": "public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\ncloseQuietly(source);\ncloseQuietly(destination);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "id": "pretrain_java_data_6184763",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copyExternalResource(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\ncloseQuietly(source);\ncloseQuietly(destination);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2377910#12#26.java",
                        "__cluster__": 277
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6184763",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copyExternalResource(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\ncloseQuietly(source);\ncloseQuietly(destination);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2377910#12#26.java",
                        "__cluster__": 277
                },
                {
                        "id": "test_bigclonebench_data_19849797",
                        "content": "public static void copyFile(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_6185208",
                        "content": "<filename>references/bcb_chosen_clones/selected#1280243#82#95.java\npublic static void copyFile(File srcFile, File destFile) throws IOException {\nInputStream src = new FileInputStream(srcFile);\nOutputStream dest = new FileOutputStream(destFile);\nbyte buffer[] = new byte[1024];\nint read = 1;\nwhile (read > 0) {\nread = src.read(buffer);\nif (read > 0) {\ndest.write(buffer, 0, read);\n}\n}\nsrc.close();\ndest.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1280243#82#95.java",
                        "__cluster__": 161
                },
                {
                        "id": "test_bigclonebench_data_20375440",
                        "content": "public static void copyFile(File srcFile, File destFile) throws IOException {\nInputStream src = new FileInputStream(srcFile);\nOutputStream dest = new FileOutputStream(destFile);\nbyte buffer[] = new byte[1024];\nint read = 1;\nwhile (read > 0) {\nread = src.read(buffer);\nif (read > 0) {\ndest.write(buffer, 0, read);\n}\n}\nsrc.close();\ndest.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 161
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9275622",
                        "content": "private boolean copyFile(File _file1, File _file2) {\nFileInputStream fis;\nFileOutputStream fos;\ntry {\nfis = new FileInputStream(_file1);\nfos = new FileOutputStream(_file2);\nFileChannel canalFuente = fis.getChannel();\ncanalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\nfis.close();\nfos.close();\nreturn true;\n} catch (FileNotFoundException e) {\n} catch (IOException e) {\n}\nreturn false;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 697
                },
                {
                        "id": "pretrain_java_data_6183838",
                        "content": "<filename>references/bcb_chosen_clones/selected#2045254#77#92.java<gh_stars>10-100\nprivate boolean copyFile(File _file1, File _file2) {\nFileInputStream fis;\nFileOutputStream fos;\ntry {\nfis = new FileInputStream(_file1);\nfos = new FileOutputStream(_file2);\nFileChannel canalFuente = fis.getChannel();\ncanalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\nfis.close();\nfos.close();\nreturn true;\n} catch (FileNotFoundException e) {\n} catch (IOException e) {\n}\nreturn false;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2045254#77#92.java",
                        "__cluster__": 697
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_10715601",
                        "content": "public static synchronized String toSHA1(String str) {\nNulls.failIfNull(str, \"Cannot create an SHA1 encryption form a NULL string\");\ntry {\nMessageDigest md;\nmd = MessageDigest.getInstance(SHA1);\nbyte[] sha1hash = new byte[40];\nmd.update(str.getBytes(ISO_CHARSET), 0, str.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n} catch (UnsupportedEncodingException ex) {\nex.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 131
                },
                {
                        "id": "pretrain_java_data_9235210",
                        "content": "public static synchronized String toSHA1(String str) {\nNulls.failIfNull(str, \"Cannot create an SHA1 encryption form a NULL string\");\ntry {\nMessageDigest md;\nmd = MessageDigest.getInstance(SHA1);\nbyte[] sha1hash = new byte[40];\nmd.update(str.getBytes(ISO_CHARSET), 0, str.length());\nsha1hash = md.digest();\nreturn convertToHex(sha1hash);\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n} catch (UnsupportedEncodingException ex) {\nex.printStackTrace();\n}\nreturn null;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#15758#53#68.java",
                        "__cluster__": 131
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6371607",
                        "content": "public void removeRealm(final List<Integer> realmIds) {\ntry {\nconnection.setAutoCommit(false);\nnew ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n@Override\npublic void executeProcessReturnNull() throws SQLException {\npsImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"realm.remove\"));\nIterator<Integer> iter = realmIds.iterator();\nint realmId;\nwhile (iter.hasNext()) {\nrealmId = iter.next();\npsImpl.setInt(1, realmId);\npsImpl.executeUpdate();\ncmDB.removeRealm(realmId);\n}\n}\n});\nconnection.commit();\n} catch (SQLException sqle) {\nlog.error(sqle);\nif (connection != null) {\ntry {\nconnection.rollback();\n} catch (SQLException ex) {\n}\n}\n} finally {\nif (connection != null) {\ntry {\nconnection.setAutoCommit(true);\n} catch (SQLException ex) {\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 340
                },
                {
                        "id": "pretrain_java_data_9225139",
                        "content": "public void removeRealm(final List<Integer> realmIds) {\ntry {\nconnection.setAutoCommit(false);\nnew ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n@Override\npublic void executeProcessReturnNull() throws SQLException {\npsImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"realm.remove\"));\nIterator<Integer> iter = realmIds.iterator();\nint realmId;\nwhile (iter.hasNext()) {\nrealmId = iter.next();\npsImpl.setInt(1, realmId);\npsImpl.executeUpdate();\ncmDB.removeRealm(realmId);\n}\n}\n});\nconnection.commit();\n} catch (SQLException sqle) {\nlog.error(sqle);\nif (connection != null) {\ntry {\nconnection.rollback();\n} catch (SQLException ex) {\n}\n}\n} finally {\nif (connection != null) {\ntry {\nconnection.setAutoCommit(true);\n} catch (SQLException ex) {\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2462101#625#660.java",
                        "__cluster__": 340
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9303873",
                        "content": "protected ExternalDecoder(InputStream source, Process process) {\nsuper(source);\nthis.process = process;\nthis.processStdOut = process.getInputStream();\nthis.processStdIn = process.getOutputStream();\nnew Thread() {\n@Override\npublic void run() {\ntry {\nIOUtils.copy(getSource(), processStdIn);\nSystem.err.println(\"Copy done.\");\nclose();\n} catch (IOException e) {\ne.printStackTrace();\nIOUtils.closeQuietly(ExternalDecoder.this);\n}\n}\n}.start();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1079941#16#35.java",
                        "__cluster__": 527
                },
                {
                        "id": "test_bigclonebench_data_14047629",
                        "content": "protected ExternalDecoder(InputStream source, Process process) {\nsuper(source);\nthis.process = process;\nthis.processStdOut = process.getInputStream();\nthis.processStdIn = process.getOutputStream();\nnew Thread() {\n@Override\npublic void run() {\ntry {\nIOUtils.copy(getSource(), processStdIn);\nSystem.err.println(\"Copy done.\");\nclose();\n} catch (IOException e) {\ne.printStackTrace();\nIOUtils.closeQuietly(ExternalDecoder.this);\n}\n}\n}.start();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 527
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11305840",
                        "content": "public boolean setUpdateCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {\nboolean update = false;\ntry {\nstm = conexion.prepareStatement(\"update clientes set nombre='\" + nombre.toUpperCase().trim() + \"' , paterno='\" + paterno.toUpperCase().trim() + \"' ,\" + \"materno='\" + materno.toUpperCase().trim() + \"',ocupacion='\" + ocupacion.toUpperCase().trim() + \"',rfc='\" + rfc.trim() + \"' where IDcliente ='\" + IDcliente + \"' \");\nstm.executeUpdate();\nconexion.commit();\nupdate = true;\n} catch (SQLException e) {\nSystem.out.println(\"error al actualizar registro en la tabla clientes  \" + e.getMessage());\ntry {\nconexion.rollback();\n} catch (SQLException ee) {\nSystem.out.println(ee.getMessage());\n}\nreturn update = false;\n}\nreturn update;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 632
                },
                {
                        "id": "pretrain_java_data_9234621",
                        "content": "public boolean setUpdateCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {\nboolean update = false;\ntry {\nstm = conexion.prepareStatement(\"update clientes set nombre='\" + nombre.toUpperCase().trim() + \"' , paterno='\" + paterno.toUpperCase().trim() + \"' ,\" + \"materno='\" + materno.toUpperCase().trim() + \"',ocupacion='\" + ocupacion.toUpperCase().trim() + \"',rfc='\" + rfc.trim() + \"' where IDcliente ='\" + IDcliente + \"' \");\nstm.executeUpdate();\nconexion.commit();\nupdate = true;\n} catch (SQLException e) {\nSystem.out.println(\"error al actualizar registro en la tabla clientes  \" + e.getMessage());\ntry {\nconexion.rollback();\n} catch (SQLException ee) {\nSystem.out.println(ee.getMessage());\n}\nreturn update = false;\n}\nreturn update;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1878609#32#49.java",
                        "__cluster__": 632
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9241560",
                        "content": "private static String encryptMD5(String password, Long digestSeed) {\ntry {\nMessageDigest digest = MessageDigest.getInstance(\"MD5\");\ndigest.reset();\ndigest.update(password.getBytes(\"UTF-8\"));\ndigest.update(digestSeed.toString().getBytes(\"UTF-8\"));\nbyte[] messageDigest = digest.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < messageDigest.length; i++) {\nhexString.append(Integer.toHexString(0xff & messageDigest[i]));\n}\nreturn hexString.toString();\n} catch (NoSuchAlgorithmException e) {\nthrow new RuntimeException(e);\n} catch (UnsupportedEncodingException e) {\nthrow new RuntimeException(e);\n} catch (NullPointerException e) {\nreturn new StringBuffer().toString();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1489138#24#43.java",
                        "__cluster__": 611
                },
                {
                        "id": "test_bigclonebench_data_14733078",
                        "content": "private static String encrypt(String algorithm, String password, Long digestSeed) {\ntry {\nMessageDigest digest = MessageDigest.getInstance(algorithm);\ndigest.reset();\ndigest.update(password.getBytes(\"UTF-8\"));\ndigest.update(digestSeed.toString().getBytes(\"UTF-8\"));\nbyte[] messageDigest = digest.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < messageDigest.length; i++) {\nhexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4));\nhexString.append(Integer.toHexString(0x0f & messageDigest[i]));\n}\nreturn hexString.toString();\n} catch (NoSuchAlgorithmException e) {\nthrow new RuntimeException(e);\n} catch (UnsupportedEncodingException e) {\nthrow new RuntimeException(e);\n} catch (NullPointerException e) {\nreturn new StringBuffer().toString();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 611
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_16931472",
                        "content": "public void handler(Map<String, String> result, TargetPage target) {\ntry {\nURL url = new URL(target.getUrl());\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\nString line = null;\nwhile ((line = reader.readLine()) != null) {\nfor (Map.Entry<String, String> entry : result.entrySet()) {\nif (line.indexOf(target.getInclude()) != -1) {\nint fromIndex = line.indexOf(target.getFromStr());\nString r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\nentry.setValue(r);\nline = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n}\n}\n}\nreader.close();\n} catch (MalformedURLException e) {\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 772
                },
                {
                        "id": "pretrain_java_data_9356173",
                        "content": "<filename>references/bcb_chosen_clones/selected#2121080#13#32.java\npublic void handler(Map<String, String> result, TargetPage target) {\ntry {\nURL url = new URL(target.getUrl());\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\nString line = null;\nwhile ((line = reader.readLine()) != null) {\nfor (Map.Entry<String, String> entry : result.entrySet()) {\nif (line.indexOf(target.getInclude()) != -1) {\nint fromIndex = line.indexOf(target.getFromStr());\nString r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\nentry.setValue(r);\nline = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n}\n}\n}\nreader.close();\n} catch (MalformedURLException e) {\n} catch (IOException e) {\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2121080#13#32.java",
                        "__cluster__": 772
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20717531",
                        "content": "public static String encrypt(String plainText) {\nif (TextUtils.isEmpty(plainText)) {\nplainText = \"\";\n}\nStringBuilder text = new StringBuilder();\nfor (int i = plainText.length() - 1; i >= 0; i--) {\ntext.append(plainText.charAt(i));\n}\nplainText = text.toString();\nMessageDigest mDigest;\ntry {\nmDigest = MessageDigest.getInstance(\"SHA-256\");\n} catch (NoSuchAlgorithmException e) {\nreturn plainText;\n}\nmDigest.update(plainText.getBytes());\nbyte d[] = mDigest.digest();\nStringBuffer hash = new StringBuffer();\nfor (int i = 0; i < d.length; i++) {\nhash.append(Integer.toHexString(0xFF & d[i]));\n}\nreturn hash.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 706
                },
                {
                        "id": "pretrain_java_data_9320452",
                        "content": "<filename>references/bcb_chosen_clones/selected#1362088#363#385.java\npublic static String toMD5String(String plainText) {\nif (TextUtils.isEmpty(plainText)) {\nplainText = \"\";\n}\nStringBuilder text = new StringBuilder();\nfor (int i = plainText.length() - 1; i >= 0; i--) {\ntext.append(plainText.charAt(i));\n}\nplainText = text.toString();\nMessageDigest mDigest;\ntry {\nmDigest = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\nreturn plainText;\n}\nmDigest.update(plainText.getBytes());\nbyte d[] = mDigest.digest();\nStringBuffer hash = new StringBuffer();\nfor (int i = 0; i < d.length; i++) {\nhash.append(Integer.toHexString(0xFF & d[i]));\n}\nreturn hash.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1362088#363#385.java",
                        "__cluster__": 706
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_17901739",
                        "content": "private static void setMembers() {\ntry {\nURL url = new URL(getTracUrl() + \"newticket\");\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\nString buffer = reader.readLine();\nwhile (buffer != null) {\nif (buffer.contains(\"<select id=\\\"component\\\" name=\\\"component\\\">\")) {\nPattern pattern = Pattern.compile(\">[^<]+?<\");\nMatcher matcher = pattern.matcher(buffer);\nVector<String> erg = new Vector<String>();\nint start = 0;\nwhile (matcher.find(start)) {\nint von = matcher.start() + 1;\nint bis = matcher.end() - 1;\nerg.add(Recoder.recode(buffer.substring(von, bis), \"UTF-8\", Recoder.getDefaultEncoding()));\nstart = bis;\n}\nm_strComponents = new String[erg.size()];\nerg.toArray(m_strComponents);\n}\nif (buffer.contains(\"<select id=\\\"priority\\\" name=\\\"priority\\\">\")) {\nPattern pattern = Pattern.compile(\">[^<]+?<\");\nMatcher matcher = pattern.matcher(buffer);\nVector<String> erg = new Vector<String>();\nint start = 0;\nwhile (matcher.find(start)) {\nint von = matcher.start() + 1;\nint bis = matcher.end() - 1;\nerg.add(Recoder.recode(buffer.substring(von, bis), \"UTF-8\", Recoder.getDefaultEncoding()));\nstart = bis;\n}\nm_strPriorities = new String[erg.size()];\nerg.toArray(m_strPriorities);\n}\nbuffer = reader.readLine();\n}\n} catch (MalformedURLException e) {\nSystem.out.println(\"e1\");\n} catch (IOException e) {\nSystem.out.println(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 286
                },
                {
                        "id": "pretrain_java_data_10827123",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\nprivate static void setMembers() {\ntry {\nURL url = new URL(getTracUrl() + \"newticket\");\nBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\nString buffer = reader.readLine();\nwhile (buffer != null) {\nif (buffer.contains(\"<select id=\\\"component\\\" name=\\\"component\\\">\")) {\nPattern pattern = Pattern.compile(\">[^<]+?<\");\nMatcher matcher = pattern.matcher(buffer);\nVector<String> erg = new Vector<String>();\nint start = 0;\nwhile (matcher.find(start)) {\nint von = matcher.start() + 1;\nint bis = matcher.end() - 1;\nerg.add(Recoder.recode(buffer.substring(von, bis), \"UTF-8\", Recoder.getDefaultEncoding()));\nstart = bis;\n}\nm_strComponents = new String[erg.size()];\nerg.toArray(m_strComponents);\n}\nif (buffer.contains(\"<select id=\\\"priority\\\" name=\\\"priority\\\">\")) {\nPattern pattern = Pattern.compile(\">[^<]+?<\");\nMatcher matcher = pattern.matcher(buffer);\nVector<String> erg = new Vector<String>();\nint start = 0;\nwhile (matcher.find(start)) {\nint von = matcher.start() + 1;\nint bis = matcher.end() - 1;\nerg.add(Recoder.recode(buffer.substring(von, bis), \"UTF-8\", Recoder.getDefaultEncoding()));\nstart = bis;\n}\nm_strPriorities = new String[erg.size()];\nerg.toArray(m_strPriorities);\n}\nbuffer = reader.readLine();\n}\n} catch (MalformedURLException e) {\nSystem.out.println(\"e1\");\n} catch (IOException e) {\nSystem.out.println(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#625127#196#237.java",
                        "__cluster__": 286
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_23677128",
                        "content": "public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {\nFTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);\nftpClient.connect(ftpserver, ftpport);\nftpClient.login(username, password);\nreturn ftpClient;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 522
                },
                {
                        "id": "pretrain_java_data_10844546",
                        "content": "public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {\nFTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);\nftpClient.connect(ftpserver, ftpport);\nftpClient.login(username, password);\nreturn ftpClient;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/sample#FTP_ApacheCommonsNet_Samples#55#60.java",
                        "__cluster__": 522
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9261777",
                        "content": "public static void main(String[] args) {\nString source, destination;\nif (args[0].toLowerCase().endsWith(\".gz\")) {\nsource = args[0];\ndestination = source.substring(0, source.length() - 3);\n} else {\nsource = args[0] + \".gz\";\ndestination = args[0];\n}\nInputStream is = null;\nOutputStream os = null;\ntry {\nis = new GZIPInputStream(new FileInputStream(source));\nos = new FileOutputStream(destination);\nbyte[] buffer = new byte[8192];\nfor (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);\n} catch (IOException e) {\nSystem.err.println(\"Fehler: Kann nicht entpacken \" + args[0]);\n} finally {\nif (os != null) try {\nos.close();\n} catch (IOException e) {\n}\nif (is != null) try {\nis.close();\n} catch (IOException e) {\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 571
                },
                {
                        "id": "pretrain_java_data_10923552",
                        "content": "public static void main(String[] args) {\nString source, destination;\nif (args[0].toLowerCase().endsWith(\".gz\")) {\nsource = args[0];\ndestination = source.substring(0, source.length() - 3);\n} else {\nsource = args[0] + \".gz\";\ndestination = args[0];\n}\nInputStream is = null;\nOutputStream os = null;\ntry {\nis = new GZIPInputStream(new FileInputStream(source));\nos = new FileOutputStream(destination);\nbyte[] buffer = new byte[8192];\nfor (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);\n} catch (IOException e) {\nSystem.err.println(\"Fehler: Kann nicht entpacken \" + args[0]);\n} finally {\nif (os != null) try {\nos.close();\n} catch (IOException e) {\n}\nif (is != null) try {\nis.close();\n} catch (IOException e) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#991052#48#76.java",
                        "__cluster__": 571
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10912940",
                        "content": "<filename>references/bcb_chosen_clones/default#93253#116#261.java\npublic void process(String dir) {\nString[] list = new File(dir).list();\nif (list == null) return;\nint n = list.length;\nlong[] bubblesort = new long[list.length + 1];\nif (!statustext) {\nIJ.log(\"Current Directory is: \" + dir);\nIJ.log(\" \");\nIJ.log(\"DICOM File Name / \" + prefix1 + \" / \" + prefix2 + \" / \" + prefix3 + \" / \" + pick);\nIJ.log(\" \");\n}\nfor (int i = 0; i < n; i++) {\nIJ.showStatus(i + \"/\" + n);\nFile f = new File(dir + list[i]);\nif (!f.isDirectory()) {\nImagePlus img = new Opener().openImage(dir, list[i]);\nif (img != null && img.getStackSize() == 1) {\nif (!scoutengine(img)) return;\nif (!statustext) {\nIJ.log(list[i] + \"/\" + whichprefix1 + \"/\" + whichprefix2 + \"/\" + whichprefix3 + \"/\" + whichcase);\n}\nint lastDigit = whichcase.length() - 1;\nwhile (lastDigit > 0) {\nif (!Character.isDigit(whichcase.charAt(lastDigit))) lastDigit -= 1; else break;\n}\nif (lastDigit < whichcase.length() - 1) whichcase = whichcase.substring(0, lastDigit + 1);\nbubblesort[i] = Long.parseLong(whichcase);\n}\n}\n}\nif (statussorta || statussortd || statustext) {\nboolean sorted = false;\nwhile (!sorted) {\nsorted = true;\nfor (int i = 0; i < n - 1; i++) {\nif (statussorta) {\nif (bubblesort[i] > bubblesort[i + 1]) {\nlong temp = bubblesort[i];\ntempp = list[i];\nbubblesort[i] = bubblesort[i + 1];\nlist[i] = list[i + 1];\nbubblesort[i + 1] = temp;\nlist[i + 1] = tempp;\nsorted = false;\n}\n} else {\nif (bubblesort[i] < bubblesort[i + 1]) {\nlong temp = bubblesort[i];\ntempp = list[i];\nbubblesort[i] = bubblesort[i + 1];\nlist[i] = list[i + 1];\nbubblesort[i + 1] = temp;\nlist[i + 1] = tempp;\nsorted = false;\n}\n}\n}\n}\nIJ.log(\" \");\nfor (int i = 0; i < n; i++) {\nif (!statustext) {\nIJ.log(list[i] + \" / \" + bubblesort[i]);\n} else {\nIJ.log(dir + list[i]);\n}\n}\n}\nif (open_as_stack || only_images) {\nboolean sorted = false;\nwhile (!sorted) {\nsorted = true;\nfor (int i = 0; i < n - 1; i++) {\nif (bubblesort[i] > bubblesort[i + 1]) {\nlong temp = bubblesort[i];\ntempp = list[i];\nbubblesort[i] = bubblesort[i + 1];\nlist[i] = list[i + 1];\nbubblesort[i + 1] = temp;\nlist[i + 1] = tempp;\nsorted = false;\n}\n}\n}\nif (only_images) {\nOpener o = new Opener();\nint counter = 0;\nIJ.log(\" \");\nfor (int i = 0; i < n; i++) {\nString path = (dir + list[i]);\nif (path == null) break; else {\nImagePlus imp = o.openImage(path);\ncounter++;\nif (imp != null) {\nIJ.log(counter + \" + \" + path);\nimp.show();\n} else IJ.log(counter + \" - \" + path);\n}\n}\nreturn;\n}\nint width = 0, height = 0, type = 0;\nImageStack stack = null;\ndouble min = Double.MAX_VALUE;\ndouble max = -Double.MAX_VALUE;\nint k = 0;\ntry {\nfor (int i = 0; i < n; i++) {\nString path = (dir + list[i]);\nif (path == null) break;\nif (list[i].endsWith(\".txt\")) continue;\nImagePlus imp = new Opener().openImage(path);\nif (imp != null && stack == null) {\nwidth = imp.getWidth();\nheight = imp.getHeight();\ntype = imp.getType();\nColorModel cm = imp.getProcessor().getColorModel();\nif (halfSize) stack = new ImageStack(width / 2, height / 2, cm); else stack = new ImageStack(width, height, cm);\n}\nif (stack != null) k = stack.getSize() + 1;\nIJ.showStatus(k + \"/\" + n);\nIJ.showProgress((double) k / n);\nif (imp == null) IJ.log(list[i] + \": unable to open\"); else if (imp.getWidth() != width || imp.getHeight() != height) IJ.log(list[i] + \": wrong dimensions\"); else if (imp.getType() != type) IJ.log(list[i] + \": wrong type\"); else {\nImageProcessor ip = imp.getProcessor();\nif (grayscale) ip = ip.convertToByte(true);\nif (halfSize) ip = ip.resize(width / 2, height / 2);\nif (ip.getMin() < min) min = ip.getMin();\nif (ip.getMax() > max) max = ip.getMax();\nString label = imp.getTitle();\nString info = (String) imp.getProperty(\"Info\");\nif (info != null) label += \"\\n\" + info;\nstack.addSlice(label, ip);\n}\nSystem.gc();\n}\n} catch (OutOfMemoryError e) {\nIJ.outOfMemory(\"FolderOpener\");\nstack.trim();\n}\nif (stack != null && stack.getSize() > 0) {\nImagePlus imp2 = new ImagePlus(\"Stack\", stack);\nif (imp2.getType() == ImagePlus.GRAY16 || imp2.getType() == ImagePlus.GRAY32) imp2.getProcessor().setMinAndMax(min, max);\nimp2.show();\n}\nIJ.showProgress(1.0);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#93253#116#261.java",
                        "__cluster__": 629
                },
                {
                        "id": "test_bigclonebench_data_416857",
                        "content": "public void process(String dir) {\nString[] list = new File(dir).list();\nif (list == null) return;\nint n = list.length;\nlong[] bubblesort = new long[list.length + 1];\nif (!statustext) {\nIJ.log(\"Current Directory is: \" + dir);\nIJ.log(\" \");\nIJ.log(\"DICOM File Name / \" + prefix1 + \" / \" + prefix2 + \" / \" + prefix3 + \" / \" + pick);\nIJ.log(\" \");\n}\nfor (int i = 0; i < n; i++) {\nIJ.showStatus(i + \"/\" + n);\nFile f = new File(dir + list[i]);\nif (!f.isDirectory()) {\nImagePlus img = new Opener().openImage(dir, list[i]);\nif (img != null && img.getStackSize() == 1) {\nif (!scoutengine(img)) return;\nif (!statustext) {\nIJ.log(list[i] + \"/\" + whichprefix1 + \"/\" + whichprefix2 + \"/\" + whichprefix3 + \"/\" + whichcase);\n}\nint lastDigit = whichcase.length() - 1;\nwhile (lastDigit > 0) {\nif (!Character.isDigit(whichcase.charAt(lastDigit))) lastDigit -= 1; else break;\n}\nif (lastDigit < whichcase.length() - 1) whichcase = whichcase.substring(0, lastDigit + 1);\nbubblesort[i] = Long.parseLong(whichcase);\n}\n}\n}\nif (statussorta || statussortd || statustext) {\nboolean sorted = false;\nwhile (!sorted) {\nsorted = true;\nfor (int i = 0; i < n - 1; i++) {\nif (statussorta) {\nif (bubblesort[i] > bubblesort[i + 1]) {\nlong temp = bubblesort[i];\ntempp = list[i];\nbubblesort[i] = bubblesort[i + 1];\nlist[i] = list[i + 1];\nbubblesort[i + 1] = temp;\nlist[i + 1] = tempp;\nsorted = false;\n}\n} else {\nif (bubblesort[i] < bubblesort[i + 1]) {\nlong temp = bubblesort[i];\ntempp = list[i];\nbubblesort[i] = bubblesort[i + 1];\nlist[i] = list[i + 1];\nbubblesort[i + 1] = temp;\nlist[i + 1] = tempp;\nsorted = false;\n}\n}\n}\n}\nIJ.log(\" \");\nfor (int i = 0; i < n; i++) {\nif (!statustext) {\nIJ.log(list[i] + \" / \" + bubblesort[i]);\n} else {\nIJ.log(dir + list[i]);\n}\n}\n}\nif (open_as_stack || only_images) {\nboolean sorted = false;\nwhile (!sorted) {\nsorted = true;\nfor (int i = 0; i < n - 1; i++) {\nif (bubblesort[i] > bubblesort[i + 1]) {\nlong temp = bubblesort[i];\ntempp = list[i];\nbubblesort[i] = bubblesort[i + 1];\nlist[i] = list[i + 1];\nbubblesort[i + 1] = temp;\nlist[i + 1] = tempp;\nsorted = false;\n}\n}\n}\nif (only_images) {\nOpener o = new Opener();\nint counter = 0;\nIJ.log(\" \");\nfor (int i = 0; i < n; i++) {\nString path = (dir + list[i]);\nif (path == null) break; else {\nImagePlus imp = o.openImage(path);\ncounter++;\nif (imp != null) {\nIJ.log(counter + \" + \" + path);\nimp.show();\n} else IJ.log(counter + \" - \" + path);\n}\n}\nreturn;\n}\nint width = 0, height = 0, type = 0;\nImageStack stack = null;\ndouble min = Double.MAX_VALUE;\ndouble max = -Double.MAX_VALUE;\nint k = 0;\ntry {\nfor (int i = 0; i < n; i++) {\nString path = (dir + list[i]);\nif (path == null) break;\nif (list[i].endsWith(\".txt\")) continue;\nImagePlus imp = new Opener().openImage(path);\nif (imp != null && stack == null) {\nwidth = imp.getWidth();\nheight = imp.getHeight();\ntype = imp.getType();\nColorModel cm = imp.getProcessor().getColorModel();\nif (halfSize) stack = new ImageStack(width / 2, height / 2, cm); else stack = new ImageStack(width, height, cm);\n}\nif (stack != null) k = stack.getSize() + 1;\nIJ.showStatus(k + \"/\" + n);\nIJ.showProgress((double) k / n);\nif (imp == null) IJ.log(list[i] + \": unable to open\"); else if (imp.getWidth() != width || imp.getHeight() != height) IJ.log(list[i] + \": wrong dimensions\"); else if (imp.getType() != type) IJ.log(list[i] + \": wrong type\"); else {\nImageProcessor ip = imp.getProcessor();\nif (grayscale) ip = ip.convertToByte(true);\nif (halfSize) ip = ip.resize(width / 2, height / 2);\nif (ip.getMin() < min) min = ip.getMin();\nif (ip.getMax() > max) max = ip.getMax();\nString label = imp.getTitle();\nString info = (String) imp.getProperty(\"Info\");\nif (info != null) label += \"\\n\" + info;\nstack.addSlice(label, ip);\n}\nSystem.gc();\n}\n} catch (OutOfMemoryError e) {\nIJ.outOfMemory(\"FolderOpener\");\nstack.trim();\n}\nif (stack != null && stack.getSize() > 0) {\nImagePlus imp2 = new ImagePlus(\"Stack\", stack);\nif (imp2.getType() == ImagePlus.GRAY16 || imp2.getType() == ImagePlus.GRAY32) imp2.getProcessor().setMinAndMax(min, max);\nimp2.show();\n}\nIJ.showProgress(1.0);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 629
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_10959103",
                        "content": "<filename>references/bcb_chosen_clones/selected#1848100#167#175.java\nprivate String hashPassword(String password) throws NoSuchAlgorithmException {\nString hash = null;\nMessageDigest md = MessageDigest.getInstance(\"SHA\");\nlog.debug(\"secure hash on password \" + password);\nmd.update(password.getBytes());\nhash = new String(Base64.encodeBase64(md.digest()));\nlog.debug(\"returning hash \" + hash);\nreturn hash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1848100#167#175.java",
                        "__cluster__": 686
                },
                {
                        "id": "test_bigclonebench_data_20751378",
                        "content": "private String hashPassword(String password) throws NoSuchAlgorithmException {\nString hash = null;\nMessageDigest md = MessageDigest.getInstance(\"SHA\");\nlog.debug(\"secure hash on password \" + password);\nmd.update(password.getBytes());\nhash = new String(Base64.encodeBase64(md.digest()));\nlog.debug(\"returning hash \" + hash);\nreturn hash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 686
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13720140",
                        "content": "private void modifyProperty(String valueID, String value, Long userID) throws JspTagException {\nProperty property = new Property(new Long(valueID), userID);\nString newValue = value;\nSystem.out.println(property.getName());\nif (property.getName().equals(\"Password\")) {\ntry {\nMessageDigest crypt = MessageDigest.getInstance(\"MD5\");\ncrypt.update(value.getBytes());\nbyte digest[] = crypt.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < digest.length; i++) {\nhexString.append(hexDigit(digest[i]));\n}\nnewValue = hexString.toString();\ncrypt.reset();\n} catch (NoSuchAlgorithmException e) {\nSystem.err.println(\"jspShop: Could not get instance of MD5 algorithm. Please fix this!\" + e.getMessage());\ne.printStackTrace();\nthrow new JspTagException(\"Error crypting password!: \" + e.getMessage());\n}\n}\nproperty.setValue(newValue);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 821
                },
                {
                        "id": "pretrain_java_data_10983971",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate void modifyProperty(String valueID, String value, Long userID) throws JspTagException {\nProperty property = new Property(new Long(valueID), userID);\nString newValue = value;\nSystem.out.println(property.getName());\nif (property.getName().equals(\"Password\")) {\ntry {\nMessageDigest crypt = MessageDigest.getInstance(\"MD5\");\ncrypt.update(value.getBytes());\nbyte digest[] = crypt.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < digest.length; i++) {\nhexString.append(hexDigit(digest[i]));\n}\nnewValue = hexString.toString();\ncrypt.reset();\n} catch (NoSuchAlgorithmException e) {\nSystem.err.println(\"jspShop: Could not get instance of MD5 algorithm. Please fix this!\" + e.getMessage());\ne.printStackTrace();\nthrow new JspTagException(\"Error crypting password!: \" + e.getMessage());\n}\n}\nproperty.setValue(newValue);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#314328#37#59.java",
                        "__cluster__": 821
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_17475530",
                        "content": "@TestProperties(name = \"Simple test for adding different image files to report as link\")\npublic void testAddLinkToImage() throws Exception {\nInputStream in = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/splash.jpg\");\nreport.report(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"splash.jpg\");\nIOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"splash.jpg\")));\nin = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/blue.png\");\nIOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"blue.png\")));\nin = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/classDir.gif\");\nIOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"classDir.gif\")));\nreport.addLink(\"Link to JPG\", \"splash.jpg\");\nreport.addLink(\"Link to PNG\", \"blue.png\");\nreport.addLink(\"Link to GIF\", \"classDir.gif\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 668
                },
                {
                        "id": "pretrain_java_data_10961946",
                        "content": "<gh_stars>10-100\n@TestProperties(name = \"Simple test for adding different image files to report as link\")\npublic void testAddLinkToImage() throws Exception {\nInputStream in = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/splash.jpg\");\nreport.report(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"splash.jpg\");\nIOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"splash.jpg\")));\nin = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/blue.png\");\nIOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"blue.png\")));\nin = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/classDir.gif\");\nIOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"classDir.gif\")));\nreport.addLink(\"Link to JPG\", \"splash.jpg\");\nreport.addLink(\"Link to PNG\", \"blue.png\");\nreport.addLink(\"Link to GIF\", \"classDir.gif\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1240091#216#228.java",
                        "__cluster__": 668
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_647224",
                        "content": "public void uploadFile(File inputFile, String targetFile) throws IOException {\nSystem.out.println(\"Uploading \" + inputFile.getName() + \" to \" + targetFile);\nFile outputFile = new File(targetFile);\nif (targetFile.endsWith(\"/\")) {\noutputFile = new File(outputFile, inputFile.getName());\n} else if (outputFile.getParentFile().exists() == false) {\noutputFile.getParentFile().mkdirs();\n}\nif (inputFile.renameTo(outputFile) == false) {\nInputStream in = new FileInputStream(inputFile);\nOutputStream out = new FileOutputStream(outputFile);\nbyte[] line = new byte[16384];\nint bytes = -1;\nwhile ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);\nin.close();\nout.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 832
                },
                {
                        "id": "pretrain_java_data_10931846",
                        "content": "<gh_stars>10-100\npublic void uploadFile(File inputFile, String targetFile) throws IOException {\nSystem.out.println(\"Uploading \" + inputFile.getName() + \" to \" + targetFile);\nFile outputFile = new File(targetFile);\nif (targetFile.endsWith(\"/\")) {\noutputFile = new File(outputFile, inputFile.getName());\n} else if (outputFile.getParentFile().exists() == false) {\noutputFile.getParentFile().mkdirs();\n}\nif (inputFile.renameTo(outputFile) == false) {\nInputStream in = new FileInputStream(inputFile);\nOutputStream out = new FileOutputStream(outputFile);\nbyte[] line = new byte[16384];\nint bytes = -1;\nwhile ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);\nin.close();\nout.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#88026#52#69.java",
                        "__cluster__": 832
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_15768167",
                        "content": "public static void copyFile(File in, File out) throws Exception {\nFileChannel sourceChannel = null;\nFileChannel destinationChannel = null;\ntry {\nsourceChannel = new FileInputStream(in).getChannel();\ndestinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n} finally {\nif (sourceChannel != null) sourceChannel.close();\nif (destinationChannel != null) destinationChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_10979127",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copyFile(File in, File out) throws FileNotFoundException, IOException {\nFileChannel sourceChannel = null;\nFileChannel destinationChannel = null;\ntry {\nsourceChannel = new FileInputStream(in).getChannel();\ndestinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n} finally {\ntry {\nsourceChannel.close();\n} catch (Exception ex) {\n}\ntry {\ndestinationChannel.close();\n} catch (Exception ex) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#624024#16#33.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_15580610",
                        "content": "@Override\npublic void trainClassifier(File dir, String... args) throws Exception {\nString[] command = new String[args.length + 3];\ncommand[0] = this.getCommand();\nSystem.arraycopy(args, 0, command, 1, args.length);\ncommand[command.length - 2] = new File(dir, \"training-data.libsvm\").getPath();\ncommand[command.length - 1] = new File(dir, this.getModelName()).getPath();\nProcess process = Runtime.getRuntime().exec(command);\nIOUtils.copy(process.getInputStream(), System.out);\nIOUtils.copy(process.getErrorStream(), System.err);\nprocess.waitFor();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 796
                },
                {
                        "id": "pretrain_java_data_9395617",
                        "content": "<reponame>cragkhit/elasticsearch\n@Override\npublic void trainClassifier(File dir, String... args) throws Exception {\nString[] command = new String[args.length + 3];\ncommand[0] = this.getCommand();\nSystem.arraycopy(args, 0, command, 1, args.length);\ncommand[command.length - 2] = new File(dir, \"training-data.libsvm\").getPath();\ncommand[command.length - 1] = new File(dir, this.getModelName()).getPath();\nProcess process = Runtime.getRuntime().exec(command);\nIOUtils.copy(process.getInputStream(), System.out);\nIOUtils.copy(process.getErrorStream(), System.err);\nprocess.waitFor();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#668088#52#63.java",
                        "__cluster__": 796
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5148212",
                        "content": "public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\nlogger.info(\"copyFile(File src=\" + src + \", File dest=\" + dest + \", int bufSize=\" + bufSize + \", boolean force=\" + force + \") - start\");\nFile f = new File(Configuration.getArchiveDir());\nif (!f.exists()) {\nf.mkdir();\n}\nif (dest.exists()) {\nif (force) {\ndest.delete();\n} else {\nthrow new IOException(\"Cannot overwrite existing file: \" + dest);\n}\n}\nbyte[] buffer = new byte[bufSize];\nint read = 0;\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = new FileInputStream(src);\nout = new FileOutputStream(dest);\nwhile (true) {\nread = in.read(buffer);\nif (read == -1) {\nbreak;\n}\nout.write(buffer, 0, read);\n}\n} finally {\nif (in != null) {\ntry {\nin.close();\n} finally {\nif (out != null) {\nout.close();\n}\n}\n}\n}\nlogger.debug(\"copyFile(File, File, int, boolean) - end\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 142
                },
                {
                        "id": "pretrain_java_data_10906755",
                        "content": "<filename>references/bcb_chosen_clones/selected#624984#30#69.java<gh_stars>10-100\npublic static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\nlogger.info(\"copyFile(File src=\" + src + \", File dest=\" + dest + \", int bufSize=\" + bufSize + \", boolean force=\" + force + \") - start\");\nFile f = new File(Configuration.getArchiveDir());\nif (!f.exists()) {\nf.mkdir();\n}\nif (dest.exists()) {\nif (force) {\ndest.delete();\n} else {\nthrow new IOException(\"Cannot overwrite existing file: \" + dest);\n}\n}\nbyte[] buffer = new byte[bufSize];\nint read = 0;\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = new FileInputStream(src);\nout = new FileOutputStream(dest);\nwhile (true) {\nread = in.read(buffer);\nif (read == -1) {\nbreak;\n}\nout.write(buffer, 0, read);\n}\n} finally {\nif (in != null) {\ntry {\nin.close();\n} finally {\nif (out != null) {\nout.close();\n}\n}\n}\n}\nlogger.debug(\"copyFile(File, File, int, boolean) - end\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#624984#30#69.java",
                        "__cluster__": 142
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6470716",
                        "content": "public static void main(String[] args) throws Exception {\nString st = \"http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz\";\nURL url = new URL(st);\nInputStream fis = null;\nif (\"file\".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (\"http\".equals(url.getProtocol())) fis = url.openStream();\nZipInputStream zis = new ZipInputStream(fis);\nZipEntry entry;\nwhile ((entry = zis.getNextEntry()) != null) {\nSystem.out.println(\"Extracting: \" + entry);\nint count;\nbyte data[] = new byte[BUFFER];\nFileOutputStream fos = new FileOutputStream(entry.getName());\nBufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\nwhile ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\ndest.flush();\ndest.close();\n}\nzis.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 212
                },
                {
                        "id": "pretrain_java_data_10927075",
                        "content": "<gh_stars>10-100\npublic static void main(String[] args) throws Exception {\nString st = \"http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz\";\nURL url = new URL(st);\nInputStream fis = null;\nif (\"file\".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (\"http\".equals(url.getProtocol())) fis = url.openStream();\nZipInputStream zis = new ZipInputStream(fis);\nZipEntry entry;\nwhile ((entry = zis.getNextEntry()) != null) {\nSystem.out.println(\"Extracting: \" + entry);\nint count;\nbyte data[] = new byte[BUFFER];\nFileOutputStream fos = new FileOutputStream(entry.getName());\nBufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\nwhile ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\ndest.flush();\ndest.close();\n}\nzis.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#467837#15#33.java",
                        "__cluster__": 212
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12453232",
                        "content": "private String getHash(String string) {\nMonitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, \"HashTime\").start();\nMessageDigest md5 = null;\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nmd5.reset();\nmd5.update(string.getBytes());\nbyte[] result = md5.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < result.length; i++) {\nhexString.append(Integer.toHexString(0xFF & result[i]));\n}\nString str = hexString.toString();\nhashTime.stop();\nreturn str;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1379643#87#105.java",
                        "__cluster__": 319
                },
                {
                        "id": "test_bigclonebench_data_17111859",
                        "content": "private String getHash(String string) {\nMonitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, \"HashTime\").start();\nMessageDigest md5 = null;\ntry {\nmd5 = MessageDigest.getInstance(\"MD5\");\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nmd5.reset();\nmd5.update(string.getBytes());\nbyte[] result = md5.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < result.length; i++) {\nhexString.append(Integer.toHexString(0xFF & result[i]));\n}\nString str = hexString.toString();\nhashTime.stop();\nreturn str;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 319
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13152325",
                        "content": "public void loadExistingAntlibs(ClassLoader classLoader) {\nURL antlibUrl;\nURI antlibUri;\ntry {\nEnumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);\nwhile (resources.hasMoreElements()) {\nURL url = resources.nextElement();\nInputStream stream = url.openStream();\nBufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\nfor (String line = reader.readLine(); line != null; line = reader.readLine()) {\nString pkg = line.trim();\nURI uri = URI.create(\"antlib:\" + pkg);\nURI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? \"\" : \"/\") + \"antlib.xml\");\nantlibUri = NetUtils.resolve(url.toURI(), resource2antlib);\ntry {\nantlibUrl = antlibUri.toURL();\n} catch (IllegalArgumentException e) {\nSystem.err.println(\"base uri: \" + url);\nSystem.err.println(\"relativepath: \" + resource2antlib);\nSystem.err.println(\"target uri: \" + antlibUri);\nthrow new RuntimeException(antlibUri.toString(), e);\n}\nloadAntLib(antlibUrl, uri);\n}\nreader.close();\nstream.close();\n}\n} catch (IOException e) {\nthrow new RuntimeException(e);\n} catch (URISyntaxException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 546
                },
                {
                        "id": "pretrain_java_data_12525149",
                        "content": "public void loadExistingAntlibs(ClassLoader classLoader) {\nURL antlibUrl;\nURI antlibUri;\ntry {\nEnumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);\nwhile (resources.hasMoreElements()) {\nURL url = resources.nextElement();\nInputStream stream = url.openStream();\nBufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\nfor (String line = reader.readLine(); line != null; line = reader.readLine()) {\nString pkg = line.trim();\nURI uri = URI.create(\"antlib:\" + pkg);\nURI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? \"\" : \"/\") + \"antlib.xml\");\nantlibUri = NetUtils.resolve(url.toURI(), resource2antlib);\ntry {\nantlibUrl = antlibUri.toURL();\n} catch (IllegalArgumentException e) {\nSystem.err.println(\"base uri: \" + url);\nSystem.err.println(\"relativepath: \" + resource2antlib);\nSystem.err.println(\"target uri: \" + antlibUri);\nthrow new RuntimeException(antlibUri.toString(), e);\n}\nloadAntLib(antlibUrl, uri);\n}\nreader.close();\nstream.close();\n}\n} catch (IOException e) {\nthrow new RuntimeException(e);\n} catch (URISyntaxException e) {\nthrow new RuntimeException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2047563#148#180.java",
                        "__cluster__": 546
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6908537",
                        "content": "public String login() {\nSystem.out.println(\"Logging in to LOLA\");\ntry {\nString data = URLEncoder.encode(\"email\", \"UTF-8\") + \"=\" + URLEncoder.encode(get_email(), \"UTF-8\");\ndata += \"&\" + URLEncoder.encode(\"pw\", \"UTF-8\") + \"=\" + URLEncoder.encode(get_pw(), \"UTF-8\");\nURL url = new URL(URL_LOLA + FILE_LOGIN);\nURLConnection conn = url.openConnection();\nconn.setDoOutput(true);\nOutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\nwr.write(data);\nwr.flush();\nBufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nString line, sessid;\nline = rd.readLine();\nsessid = get_sessid(line);\nthis.set_session(sessid);\nwr.close();\nrd.close();\nreturn sessid;\n} catch (Exception e) {\nSystem.out.println(\"Login Error\");\nreturn \"\";\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 696
                },
                {
                        "id": "pretrain_java_data_12430355",
                        "content": "<reponame>cragkhit/elasticsearch\npublic String login() {\nSystem.out.println(\"Logging in to LOLA\");\ntry {\nString data = URLEncoder.encode(\"email\", \"UTF-8\") + \"=\" + URLEncoder.encode(get_email(), \"UTF-8\");\ndata += \"&\" + URLEncoder.encode(\"pw\", \"UTF-8\") + \"=\" + URLEncoder.encode(get_pw(), \"UTF-8\");\nURL url = new URL(URL_LOLA + FILE_LOGIN);\nURLConnection conn = url.openConnection();\nconn.setDoOutput(true);\nOutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\nwr.write(data);\nwr.flush();\nBufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nString line, sessid;\nline = rd.readLine();\nsessid = get_sessid(line);\nthis.set_session(sessid);\nwr.close();\nrd.close();\nreturn sessid;\n} catch (Exception e) {\nSystem.out.println(\"Login Error\");\nreturn \"\";\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1527173#84#107.java",
                        "__cluster__": 696
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12460207",
                        "content": "<gh_stars>10-100\npublic void elimina(Cliente cli) throws errorSQL, errorConexionBD {\nSystem.out.println(\"GestorCliente.elimina()\");\nint id = cli.getId();\nString sql;\nStatement stmt = null;\ntry {\ngd.begin();\nsql = \"DELETE FROM cliente WHERE cod_cliente = '\" + id + \"'\";\nSystem.out.println(\"Ejecutando: \" + sql);\nstmt = gd.getConexion().createStatement();\nstmt.executeUpdate(sql);\nSystem.out.println(\"executeUpdate\");\ngd.commit();\nSystem.out.println(\"commit\");\nstmt.close();\n} catch (SQLException e) {\ngd.rollback();\nthrow new errorSQL(e.toString());\n} catch (errorConexionBD e) {\nSystem.err.println(\"Error en GestorCliente.elimina(): \" + e);\n} catch (errorSQL e) {\nSystem.err.println(\"Error en GestorCliente.elimina(): \" + e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/default#58326#18#41.java",
                        "__cluster__": 639
                },
                {
                        "id": "test_bigclonebench_data_646016",
                        "content": "public void elimina(Cliente cli) throws errorSQL, errorConexionBD {\nSystem.out.println(\"GestorCliente.elimina()\");\nint id = cli.getId();\nString sql;\nStatement stmt = null;\ntry {\ngd.begin();\nsql = \"DELETE FROM cliente WHERE cod_cliente =\" + id;\nSystem.out.println(\"Ejecutando: \" + sql);\nstmt = gd.getConexion().createStatement();\nstmt.executeUpdate(sql);\nSystem.out.println(\"executeUpdate\");\nsql = \"DELETE FROM persona WHERE id =\" + id;\nSystem.out.println(\"Ejecutando: \" + sql);\nstmt.executeUpdate(sql);\ngd.commit();\nSystem.out.println(\"commit\");\nstmt.close();\n} catch (SQLException e) {\ngd.rollback();\nthrow new errorSQL(e.toString());\n} catch (errorConexionBD e) {\nSystem.err.println(\"Error en GestorCliente.elimina(): \" + e);\n} catch (errorSQL e) {\nSystem.err.println(\"Error en GestorCliente.elimina(): \" + e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 639
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_3187685",
                        "content": "private void copyJar(File src, File dst) throws IOException {\nFileChannel srcChannel = null;\nFileChannel dstChannel = null;\ntry {\nsrcChannel = new FileInputStream(src).getChannel();\ndstChannel = new FileOutputStream(dst).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n} catch (IOException e) {\nfLog.log(Level.SEVERE, e.getMessage(), e);\n} finally {\nsrcChannel.close();\ndstChannel.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 376
                },
                {
                        "id": "pretrain_java_data_12463671",
                        "content": "<filename>references/bcb_chosen_clones/selected#1332083#225#238.java\nprivate void copyJar(File src, File dst) throws IOException {\nFileChannel srcChannel = null;\nFileChannel dstChannel = null;\ntry {\nsrcChannel = new FileInputStream(src).getChannel();\ndstChannel = new FileOutputStream(dst).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n} catch (IOException e) {\nfLog.log(Level.SEVERE, e.getMessage(), e);\n} finally {\nsrcChannel.close();\ndstChannel.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1332083#225#238.java",
                        "__cluster__": 376
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12510670",
                        "content": "<reponame>cragkhit/elasticsearch\nstatic void copyFile(File in, File out) throws IOException {\nFileChannel source = new FileInputStream(in).getChannel();\nFileChannel destination = new FileOutputStream(out).getChannel();\nsource.transferTo(0, source.size(), destination);\nsource.close();\ndestination.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#426729#43#49.java",
                        "__cluster__": 111
                },
                {
                        "id": "test_bigclonebench_data_18504192",
                        "content": "static void copyFile(File in, File out) throws IOException {\nFileChannel source = new FileInputStream(in).getChannel();\nFileChannel destination = new FileOutputStream(out).getChannel();\nsource.transferTo(0, source.size(), destination);\nsource.close();\ndestination.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 111
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20073619",
                        "content": "public static String getPagina(String strurl) {\nString resp = \"\";\nAuthenticator.setDefault(new Autenticador());\ntry {\nURL url = new URL(strurl);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString str;\nwhile ((str = in.readLine()) != null) {\nresp += str;\n}\nin.close();\n} catch (MalformedURLException e) {\nresp = e.toString();\n} catch (IOException e) {\nresp = e.toString();\n} catch (Exception e) {\nresp = e.toString();\n}\nreturn resp;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 284
                },
                {
                        "id": "pretrain_java_data_12501737",
                        "content": "<filename>references/bcb_chosen_clones/selected#1146596#691#710.java<gh_stars>10-100\npublic static String getPagina(String strurl) {\nString resp = \"\";\nAuthenticator.setDefault(new Autenticador());\ntry {\nURL url = new URL(strurl);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString str;\nwhile ((str = in.readLine()) != null) {\nresp += str;\n}\nin.close();\n} catch (MalformedURLException e) {\nresp = e.toString();\n} catch (IOException e) {\nresp = e.toString();\n} catch (Exception e) {\nresp = e.toString();\n}\nreturn resp;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1146596#691#710.java",
                        "__cluster__": 284
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12576253",
                        "content": "<filename>references/bcb_chosen_clones/selected#2050386#139#150.java<gh_stars>10-100\npublic void seeURLConnection() throws Exception {\nURL url = new URL(\"http://wantmeet.iptime.org\");\nURLConnection uc = url.openConnection();\nBufferedReader br = new BufferedReader(new InputStreamReader(uc.getInputStream()));\nString s = null;\nStringBuffer sb = new StringBuffer();\nwhile ((s = br.readLine()) != null) {\nsb.append(s);\n}\nbr.close();\nlog.debug(\"sb=[\" + sb.toString() + \"]\");\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2050386#139#150.java",
                        "__cluster__": 517
                },
                {
                        "id": "test_bigclonebench_data_9450274",
                        "content": "public void seeURLConnection() throws Exception {\nURL url = new URL(\"http://wantmeet.iptime.org\");\nURLConnection uc = url.openConnection();\nBufferedReader br = new BufferedReader(new InputStreamReader(uc.getInputStream()));\nString s = null;\nStringBuffer sb = new StringBuffer();\nwhile ((s = br.readLine()) != null) {\nsb.append(s);\n}\nbr.close();\nlog.debug(\"sb=[\" + sb.toString() + \"]\");\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 517
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14303294",
                        "content": "public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\nbyte[] hash;\ntry {\nMessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\ndigest.reset();\ndigest.update(PasswordSalt.getBytes(\"UTF-16\"));\nhash = digest.digest(passwordHash.getBytes(\"UTF-16\"));\nreturn bytesToHex(hash);\n} catch (NoSuchAlgorithmException ex) {\nthrow new PasswordHashingException(\"Current environment does not supply needed security algorithms. Please update Java\");\n} catch (UnsupportedEncodingException ex) {\nthrow new PasswordHashingException(\"Current environment does not supply needed character encoding. Please update Java\");\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 107
                },
                {
                        "id": "pretrain_java_data_12575102",
                        "content": "<filename>references/bcb_chosen_clones/selected#1499385#56#69.java\npublic String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\nbyte[] hash;\ntry {\nMessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\ndigest.reset();\ndigest.update(PasswordSalt.getBytes(\"UTF-16\"));\nhash = digest.digest(passwordHash.getBytes(\"UTF-16\"));\nreturn bytesToHex(hash);\n} catch (NoSuchAlgorithmException ex) {\nthrow new PasswordHashingException(\"Current environment does not supply needed security algorithms. Please update Java\");\n} catch (UnsupportedEncodingException ex) {\nthrow new PasswordHashingException(\"Current environment does not supply needed character encoding. Please update Java\");\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1499385#56#69.java",
                        "__cluster__": 107
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_14130671",
                        "content": "private void bootKernel(String conf) {\ntry {\nAssetManager am = getResources().getAssets();\nInputStream is = am.open(conf + \".conf\");\nProperties props = new Properties();\nprops.load(is);\nis.close();\nLog.d(\"bootKernel\", \"Listing sdcard assets...\");\nString[] sdcardfiles = am.list(\"sdcard\");\nfor (String file : sdcardfiles) {\nLog.d(\"bootKernel\", \"Copying sdcard asset \" + file + \".\");\nAssetFileDescriptor afd = am.openFd(\"sdcard/\" + file);\nFileInputStream fis = afd.createInputStream();\nFileChannel fic = fis.getChannel();\nFileOutputStream fos = new FileOutputStream(\"/sdcard/\" + file);\nFileChannel foc = fos.getChannel();\nfic.transferTo(0, fic.size(), foc);\nfic.close();\nfoc.close();\n}\nConfiguration gconf = new JavaPropertiesConfiguration(props);\nConfiguration bconf = gconf.subset(\"boot\");\nString kclass_name = bconf.getString(\"kernel\");\nLog.d(\"bootKernel\", \"Attempting to load kernel from class '\" + kclass_name + \"'...\");\nClass<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);\nKernel kernel = kclass.newInstance();\nLog.d(\"bootKernel\", \"Kernel loaded, proceeding with boot...\");\nBootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);\nkernel.boot(bctx).get();\nLog.d(\"bootKernel\", \"Kernel boot complete.\");\n} catch (Exception e) {\nLog.e(\"bootKernel\", \"Unable to boot kernel due to exception.\", e);\nfinish();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#57924#141#175.java",
                        "__cluster__": 23
                },
                {
                        "id": "test_bigclonebench_data_7499186",
                        "content": "private void bootKernel(String conf) {\ntry {\nAssetManager am = getResources().getAssets();\nInputStream is = am.open(conf + \".conf\");\nProperties props = new Properties();\nprops.load(is);\nis.close();\nLog.d(\"bootKernel\", \"Listing sdcard assets...\");\nString[] sdcardfiles = am.list(\"sdcard\");\nfor (String file : sdcardfiles) {\nLog.d(\"bootKernel\", \"Copying sdcard asset \" + file + \".\");\nAssetFileDescriptor afd = am.openFd(\"sdcard/\" + file);\nFileInputStream fis = afd.createInputStream();\nFileChannel fic = fis.getChannel();\nFileOutputStream fos = new FileOutputStream(\"/sdcard/\" + file);\nFileChannel foc = fos.getChannel();\nfic.transferTo(0, fic.size(), foc);\nfic.close();\nfoc.close();\n}\nConfiguration gconf = new JavaPropertiesConfiguration(props);\nConfiguration bconf = gconf.subset(\"boot\");\nString kclass_name = bconf.getString(\"kernel\");\nLog.d(\"bootKernel\", \"Attempting to load kernel from class '\" + kclass_name + \"'...\");\nClass<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);\nKernel kernel = kclass.newInstance();\nLog.d(\"bootKernel\", \"Kernel loaded, proceeding with boot...\");\nBootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);\nkernel.boot(bctx).get();\nLog.d(\"bootKernel\", \"Kernel boot complete.\");\n} catch (Exception e) {\nLog.e(\"bootKernel\", \"Unable to boot kernel due to exception.\", e);\nfinish();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 23
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_7166270",
                        "content": "protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {\nURLConnection urlConn = serverURL.openConnection();\nurlConn.setDoInput(true);\nurlConn.setDoOutput(true);\nurlConn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\nOutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());\nString content = ApplyChangesServlet.PARAMETER_COMMAND + \"=\" + command;\ncontent += \"&\" + ApplyChangesServlet.PARAMETER_CAPSULE + \"=\" + URLEncoder.encode(changeCapsule.toJSON(), \"UTF-8\");\nwr.write(content);\nwr.flush();\nBufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\nStringBuffer response = new StringBuffer();\nString str;\nwhile (null != ((str = input.readLine()))) {\nresponse.append(str);\n}\nwr.close();\ninput.close();\nreturn response.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 730
                },
                {
                        "id": "pretrain_java_data_15656164",
                        "content": "protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {\nURLConnection urlConn = serverURL.openConnection();\nurlConn.setDoInput(true);\nurlConn.setDoOutput(true);\nurlConn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\nOutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());\nString content = ApplyChangesServlet.PARAMETER_COMMAND + \"=\" + command;\ncontent += \"&\" + ApplyChangesServlet.PARAMETER_CAPSULE + \"=\" + URLEncoder.encode(changeCapsule.toJSON(), \"UTF-8\");\nwr.write(content);\nwr.flush();\nBufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\nStringBuffer response = new StringBuffer();\nString str;\nwhile (null != ((str = input.readLine()))) {\nresponse.append(str);\n}\nwr.close();\ninput.close();\nreturn response.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2651775#56#75.java",
                        "__cluster__": 730
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6188784",
                        "content": "public static void copy(File source, File dest) throws IOException {\nFileChannel in = null, out = null;\ntry {\nin = new FileInputStream(source).getChannel();\nout = new FileOutputStream(dest).getChannel();\nlong size = in.size();\nMappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\nout.write(buf);\n} finally {\nif (in != null) in.close();\nif (out != null) out.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 708
                },
                {
                        "id": "pretrain_java_data_14055637",
                        "content": "public static void fileCopy(File source, File dest) throws IOException {\nFileChannel in = null, out = null;\ntry {\nin = new FileInputStream(source).getChannel();\nout = new FileOutputStream(dest).getChannel();\nlong size = in.size();\nMappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\nout.write(buf);\n} finally {\nif (in != null) in.close();\nif (out != null) out.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2558574#570#582.java",
                        "__cluster__": 708
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_14055637",
                        "content": "public static void fileCopy(File source, File dest) throws IOException {\nFileChannel in = null, out = null;\ntry {\nin = new FileInputStream(source).getChannel();\nout = new FileOutputStream(dest).getChannel();\nlong size = in.size();\nMappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\nout.write(buf);\n} finally {\nif (in != null) in.close();\nif (out != null) out.close();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2558574#570#582.java",
                        "__cluster__": 708
                },
                {
                        "id": "test_bigclonebench_data_13783549",
                        "content": "private static void copy(String sourceName, String destName) throws IOException {\nFile source = new File(sourceName);\nFile dest = new File(destName);\nFileChannel in = null, out = null;\ntry {\nin = new FileInputStream(source).getChannel();\nout = new FileOutputStream(dest).getChannel();\nlong size = in.size();\nMappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\nout.write(buf);\n} finally {\nif (in != null) in.close();\nif (out != null) out.close();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 708
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_5760649",
                        "content": "public void createFile(File src, String filename) throws IOException {\ntry {\nFileInputStream fis = new FileInputStream(src);\nOutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\nIOUtils.copy(fis, fos);\nfos.close();\nfis.close();\n} catch (ResourceManagerException e) {\nLOGGER.error(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 298
                },
                {
                        "id": "pretrain_java_data_15636774",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic void createFile(File src, String filename) throws IOException {\ntry {\nFileInputStream fis = new FileInputStream(src);\nOutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);\nIOUtils.copy(fis, fos);\nfos.close();\nfis.close();\n} catch (ResourceManagerException e) {\nLOGGER.error(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1330483#93#103.java",
                        "__cluster__": 298
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_14088656",
                        "content": "<filename>references/bcb_chosen_clones/selected#842090#182#188.java\npublic static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\nZipEntry entry = new ZipEntry(filename);\npodArchiveOutputStream.putNextEntry(entry);\nIOUtils.copy(source, podArchiveOutputStream);\npodArchiveOutputStream.closeEntry();\nreturn PodArchiveResolver.withinPodArchive(pod, filename);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#842090#182#188.java",
                        "__cluster__": 79
                },
                {
                        "id": "test_bigclonebench_data_21092340",
                        "content": "public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\nZipEntry entry = new ZipEntry(filename);\npodArchiveOutputStream.putNextEntry(entry);\nIOUtils.copy(source, podArchiveOutputStream);\npodArchiveOutputStream.closeEntry();\nreturn PodArchiveResolver.withinPodArchive(pod, filename);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 79
                },
                [
                        {
                                "real_dup": 3
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_4686922",
                        "content": "public void extractResourceToFile(String resourcePath, File dest) {\nInputStream in = getClass().getResourceAsStream(resourcePath);\ntry {\nFileOutputStream out = FileUtils.openOutputStream(dest);\ntry {\nIOUtils.copy(in, out);\n} finally {\nif (out != null) {\nout.close();\n}\n}\n} finally {\nif (in != null) {\nin.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 112
                },
                {
                        "id": "pretrain_java_data_15740243",
                        "content": "public void extractResourceToFile(String resourcePath, File dest) {\nInputStream in = getClass().getResourceAsStream(resourcePath);\ntry {\nFileOutputStream out = FileUtils.openOutputStream(dest);\ntry {\nIOUtils.copy(in, out);\n} finally {\nif (out != null) {\nout.close();\n}\n}\n} finally {\nif (in != null) {\nin.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#816428#177#193.java",
                        "__cluster__": 112
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_1456771",
                        "content": "<filename>references/bcb_chosen_clones/selected#1664668#151#170.java\npublic byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {\nbyte[] digest = new byte[0];\nif (!(attribute.getLocalName().equals(\"xmlns\") || attribute.getLocalName().startsWith(\"xmlns:\"))) try {\nMessageDigest md = MessageDigest.getInstance(digestAlgorithm);\nmd.update((byte) 0);\nmd.update((byte) 0);\nmd.update((byte) 0);\nmd.update((byte) 2);\nmd.update(getExpandedName(attribute).getBytes(\"UnicodeBigUnmarked\"));\nmd.update((byte) 0);\nmd.update((byte) 0);\nmd.update(attribute.getAttributeValue().getBytes(\"UnicodeBigUnmarked\"));\ndigest = md.digest();\n} catch (NoSuchAlgorithmException e) {\nthrow new OMException(e);\n} catch (UnsupportedEncodingException e) {\nthrow new OMException(e);\n}\nreturn digest;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1664668#151#170.java",
                        "__cluster__": 174
                },
                {
                        "id": "test_bigclonebench_data_17724879",
                        "content": "public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {\nbyte[] digest = new byte[0];\nif (!(attribute.getLocalName().equals(\"xmlns\") || attribute.getLocalName().startsWith(\"xmlns:\"))) try {\nMessageDigest md = MessageDigest.getInstance(digestAlgorithm);\nmd.update((byte) 0);\nmd.update((byte) 0);\nmd.update((byte) 0);\nmd.update((byte) 2);\nmd.update(getExpandedName(attribute).getBytes(\"UnicodeBigUnmarked\"));\nmd.update((byte) 0);\nmd.update((byte) 0);\nmd.update(attribute.getAttributeValue().getBytes(\"UnicodeBigUnmarked\"));\ndigest = md.digest();\n} catch (NoSuchAlgorithmException e) {\nthrow new OMException(e);\n} catch (UnsupportedEncodingException e) {\nthrow new OMException(e);\n}\nreturn digest;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 174
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_4830847",
                        "content": "@Override\npublic synchronized void deleteJvmStatistics(String contextName, Date dateFrom, Date dateTo) throws DatabaseException {\nfinal Connection connection = this.getConnection();\ntry {\nconnection.setAutoCommit(false);\nString queryString = \"DELETE \" + this.getJvmInvocationsSchemaAndTableName() + \" FROM \" + this.getJvmInvocationsSchemaAndTableName() + \" INNER JOIN \" + this.getJvmElementsSchemaAndTableName() + \" ON \" + this.getJvmElementsSchemaAndTableName() + \".element_id =  \" + this.getJvmInvocationsSchemaAndTableName() + \".element_id WHERE \";\nif (contextName != null) {\nqueryString = queryString + \" context_name LIKE ? AND \";\n}\nif (dateFrom != null) {\nqueryString = queryString + \" start_timestamp >= ? AND \";\n}\nif (dateTo != null) {\nqueryString = queryString + \" start_timestamp <= ? AND \";\n}\nqueryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);\nfinal PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);\nint indexCounter = 1;\nif (contextName != null) {\npreparedStatement.setString(indexCounter, contextName);\nindexCounter = indexCounter + 1;\n}\nif (dateFrom != null) {\npreparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));\nindexCounter = indexCounter + 1;\n}\nif (dateTo != null) {\npreparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));\nindexCounter = indexCounter + 1;\n}\npreparedStatement.executeUpdate();\npreparedStatement.close();\nconnection.commit();\n} catch (final SQLException e) {\ntry {\nconnection.rollback();\n} catch (final SQLException ex) {\nJeeObserverServerContext.logger.log(Level.SEVERE, \"Transaction rollback error.\", ex);\n}\nJeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());\nthrow new DatabaseException(\"Error deleting JVM statistics.\", e);\n} finally {\nthis.releaseConnection(connection);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 194
                },
                {
                        "id": "pretrain_java_data_15677904",
                        "content": "<filename>references/bcb_chosen_clones/selected#2144556#186#230.java\n@Override\npublic synchronized void deleteJvmStatistics(String contextName, Date dateFrom, Date dateTo) throws DatabaseException {\nfinal Connection connection = this.getConnection();\ntry {\nconnection.setAutoCommit(false);\nString queryString = \"DELETE \" + this.getJvmInvocationsSchemaAndTableName() + \" FROM \" + this.getJvmInvocationsSchemaAndTableName() + \" INNER JOIN \" + this.getJvmElementsSchemaAndTableName() + \" ON \" + this.getJvmElementsSchemaAndTableName() + \".element_id =  \" + this.getJvmInvocationsSchemaAndTableName() + \".element_id WHERE \";\nif (contextName != null) {\nqueryString = queryString + \" context_name LIKE ? AND \";\n}\nif (dateFrom != null) {\nqueryString = queryString + \" start_timestamp >= ? AND \";\n}\nif (dateTo != null) {\nqueryString = queryString + \" start_timestamp <= ? AND \";\n}\nqueryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);\nfinal PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);\nint indexCounter = 1;\nif (contextName != null) {\npreparedStatement.setString(indexCounter, contextName);\nindexCounter = indexCounter + 1;\n}\nif (dateFrom != null) {\npreparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));\nindexCounter = indexCounter + 1;\n}\nif (dateTo != null) {\npreparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));\nindexCounter = indexCounter + 1;\n}\npreparedStatement.executeUpdate();\npreparedStatement.close();\nconnection.commit();\n} catch (final SQLException e) {\ntry {\nconnection.rollback();\n} catch (final SQLException ex) {\nJeeObserverServerContext.logger.log(Level.SEVERE, \"Transaction rollback error.\", ex);\n}\nJeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());\nthrow new DatabaseException(\"Error deleting JVM statistics.\", e);\n} finally {\nthis.releaseConnection(connection);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2144556#186#230.java",
                        "__cluster__": 194
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_15703824",
                        "content": "protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nString senha = \"\";\nString email = request.getParameter(\"EmailLogin\");\ntry {\nMessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.update(request.getParameter(\"SenhaLogin\").getBytes(), 0, request.getParameter(\"SenhaLogin\").length());\nsenha = new BigInteger(1, messageDigest.digest()).toString(16);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nUsuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);\nString redirect = request.getHeader(\"REFERER\").replace(\"?msg=3\", \"\").replace(\"&msg=3\", \"\") + \"?&msg=3\";\nif (request.getHeader(\"REFERER\").indexOf(\"?\") != -1) {\nredirect = request.getHeader(\"REFERER\").replace(\"?msg=3\", \"\").replace(\"&msg=3\", \"\") + \"&msg=3\";\n}\nif (usuario.getNome() != null) {\nHttpSession session = request.getSession();\nsession.setAttribute(\"usuario\", usuario);\nredirect = \"index.jsp\";\n}\nresponse.sendRedirect(redirect);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#266372#41#62.java",
                        "__cluster__": 494
                },
                {
                        "id": "test_bigclonebench_data_11183087",
                        "content": "protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nString senha = \"\";\nString email = request.getParameter(\"EmailLogin\");\ntry {\nMessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.update(request.getParameter(\"SenhaLogin\").getBytes(), 0, request.getParameter(\"SenhaLogin\").length());\nsenha = new BigInteger(1, messageDigest.digest()).toString(16);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nUsuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);\nString redirect = request.getHeader(\"REFERER\").replace(\"?msg=3\", \"\").replace(\"&msg=3\", \"\") + \"?&msg=3\";\nif (request.getHeader(\"REFERER\").indexOf(\"?\") != -1) {\nredirect = request.getHeader(\"REFERER\").replace(\"?msg=3\", \"\").replace(\"&msg=3\", \"\") + \"&msg=3\";\n}\nif (usuario.getNome() != null) {\nHttpSession session = request.getSession();\nsession.setAttribute(\"usuario\", usuario);\nredirect = \"index.jsp\";\n}\nresponse.sendRedirect(redirect);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 494
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_19849797",
                        "content": "public static void copyFile(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "id": "pretrain_java_data_15762813",
                        "content": "private void copyFile(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1791697#70#88.java",
                        "__cluster__": 277
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_15762813",
                        "content": "private void copyFile(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\nif (source != null) {\nsource.close();\n}\nif (destination != null) {\ndestination.close();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1791697#70#88.java",
                        "__cluster__": 277
                },
                {
                        "id": "test_bigclonebench_data_21824901",
                        "content": "public static void copyExternalResource(File sourceFile, File destFile) throws IOException {\nif (!destFile.exists()) {\ndestFile.createNewFile();\n}\nFileChannel source = null;\nFileChannel destination = null;\ntry {\nsource = new FileInputStream(sourceFile).getChannel();\ndestination = new FileOutputStream(destFile).getChannel();\ndestination.transferFrom(source, 0, source.size());\n} finally {\ncloseQuietly(source);\ncloseQuietly(destination);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 277
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_19276022",
                        "content": "public DataSet parse() throws SnifflibDatatypeException {\nNumberFormat numformat = NumberFormat.getInstance();\nif (this.headers.size() != this.types.size()) {\nthrow new SnifflibDatatypeException(\"Different number of headers (\" + this.headers.size() + \") and types(\" + this.types.size() + \").\");\n}\nDataSet out = null;\nif (!this.dryrun) {\nout = new DataSet();\n}\nBufferedReader r = null;\nStreamTokenizer tokenizer = null;\ntry {\nif (this.isURL) {\nif (this.url2goto == null) {\nreturn (null);\n}\nDataInputStream in = null;\ntry {\nin = new DataInputStream(this.url2goto.openStream());\nSystem.out.println(\"READY TO READ FROM URL:\" + url2goto);\nr = new BufferedReader(new InputStreamReader(in));\n} catch (Exception err) {\nthrow new RuntimeException(\"Problem reading from URL \" + this.url2goto + \".\", err);\n}\n} else {\nif (this.file == null) {\nthrow new RuntimeException(\"Data file to be parsed can not be null.\");\n}\nif (!this.file.exists()) {\nthrow new RuntimeException(\"The file \" + this.file + \" does not exist.\");\n}\nr = new BufferedReader(new FileReader(this.file));\n}\nif (this.ignorePreHeaderLines > 0) {\nString strLine;\nint k = 0;\nwhile ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {\nk++;\n}\n}\ntokenizer = new StreamTokenizer(r);\ntokenizer.resetSyntax();\ntokenizer.eolIsSignificant(true);\ntokenizer.parseNumbers();\nif (this.delimiter.equals(\"\\\\t\")) {\ntokenizer.whitespaceChars('\\t', '\\t');\n}\nif (this.delimiter.equals(\",\")) {\ntokenizer.whitespaceChars(',', ',');\n}\ntokenizer.quoteChar('\"');\ntokenizer.whitespaceChars(' ', ' ');\nboolean readingHeaders = true;\nboolean readingInitialValues = false;\nboolean readingData = false;\nboolean readingScientificNotation = false;\nif (this.headers.size() > 0) {\nreadingHeaders = false;\nreadingInitialValues = true;\n}\nif (this.types.size() > 0) {\nreadingInitialValues = false;\nClass targetclass;\nfor (int j = 0; j < this.types.size(); j++) {\ntargetclass = (Class) this.types.get(j);\ntry {\nthis.constructors.add(targetclass.getConstructor(String.class));\n} catch (java.lang.NoSuchMethodException err) {\nthrow new SnifflibDatatypeException(\"Could not find appropriate constructor for \" + targetclass + \". \" + err.getMessage());\n}\n}\nreadingData = true;\n}\nint currentColumn = 0;\nint currentRow = 0;\nthis.rowcount = 0;\nboolean advanceField = true;\nwhile (true) {\ntokenizer.nextToken();\nswitch(tokenizer.ttype) {\ncase StreamTokenizer.TT_WORD:\n{\nif (readingScientificNotation) {\nthrow new RuntimeException(\"Problem reading scientific notation at row \" + currentRow + \" column \" + currentColumn + \".\");\n}\nadvanceField = true;\nif (readingHeaders) {\nthis.headers.add(tokenizer.sval);\n} else {\nif (readingInitialValues) {\nthis.types.add(String.class);\n}\nif (!this.dryrun) {\nif (out.getColumnCount() <= currentColumn) {\nout.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n}\n}\ntry {\nConstructor construct;\nif (currentColumn < this.constructors.size()) {\nconstruct = (Constructor) this.constructors.get(currentColumn);\n} else {\nClass targetclass = (Class) this.types.get(currentColumn);\nconstruct = targetclass.getConstructor(String.class);\nthis.constructors.add(construct);\n}\ntry {\ntry {\ntry {\nif (!this.dryrun) {\nout.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);\n} else if (this.findingTargetValue) {\nif ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\nthis.targetValue = construct.newInstance((String) tokenizer.sval);\nr.close();\nreturn (null);\n}\n}\n} catch (java.lang.reflect.InvocationTargetException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 1\" + err.getMessage());\n}\n} catch (java.lang.IllegalAccessException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 2\" + err.getMessage());\n}\n} catch (java.lang.InstantiationException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 3\" + err.getMessage());\n}\n} catch (java.lang.NoSuchMethodException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 4\" + err.getMessage());\n}\n}\nbreak;\n}\ncase StreamTokenizer.TT_NUMBER:\n{\nadvanceField = true;\nif (readingHeaders) {\nthrow new SnifflibDatatypeException(\"Expecting string header at row=\" + currentRow + \", column=\" + currentColumn + \".\");\n} else {\nif (readingInitialValues) {\nthis.types.add(Double.class);\n}\nif (!this.dryrun) {\nif (out.getColumnCount() <= currentColumn) {\nout.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n}\n}\ntry {\nConstructor construct;\nif (currentColumn < this.constructors.size()) {\nconstruct = (Constructor) this.constructors.get(currentColumn);\n} else {\nClass targetclass = (Class) this.types.get(currentColumn);\nconstruct = targetclass.getConstructor(double.class);\nthis.constructors.add(construct);\n}\nif (readingScientificNotation) {\nDouble val = this.scientificNumber;\nif (!this.dryrun) {\ntry {\nout.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);\n} catch (Exception err) {\nthrow new SnifflibDatatypeException(\"Problem constructing \" + construct.getDeclaringClass() + \"at row \" + currentRow + \" column \" + currentColumn + \".\", err);\n}\n} else if (this.findingTargetValue) {\nif ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\nDouble NVAL = new Double(tokenizer.nval);\ntry {\nthis.targetValue = numformat.parse(val + \"E\" + NVAL);\n} catch (Exception err) {\nthrow new RuntimeException(\"Problem parsing scientific notation at row=\" + currentRow + \" col=\" + currentColumn + \".\");\n}\ntokenizer.nextToken();\nif (tokenizer.ttype != 'e') {\nr.close();\nreturn (null);\n} else {\ntokenizer.pushBack();\n}\n}\n}\nreadingScientificNotation = false;\n} else {\ntry {\nthis.scientificNumber = new Double(tokenizer.nval);\nif (!this.dryrun) {\nout.setValueAt(this.scientificNumber, currentRow, currentColumn);\n} else if (this.findingTargetValue) {\nif ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\nthis.targetValue = this.scientificNumber;\nr.close();\nreturn (null);\n}\n}\n} catch (Exception err) {\nthrow new SnifflibDatatypeException(\"Problem constructing \" + construct.getDeclaringClass() + \"at row \" + currentRow + \" column \" + currentColumn + \".\", err);\n}\n}\n} catch (java.lang.NoSuchMethodException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing\" + err.getMessage());\n}\n}\nbreak;\n}\ncase StreamTokenizer.TT_EOL:\n{\nif (readingHeaders) {\nreadingHeaders = false;\nreadingInitialValues = true;\n} else {\nif (readingInitialValues) {\nreadingInitialValues = false;\nreadingData = true;\n}\n}\nif (readingData) {\ncurrentRow++;\n}\nbreak;\n}\ncase StreamTokenizer.TT_EOF:\n{\nif (readingHeaders) {\nthrow new SnifflibDatatypeException(\"End of file reached while reading headers.\");\n}\nif (readingInitialValues) {\nthrow new SnifflibDatatypeException(\"End of file reached while reading initial values.\");\n}\nif (readingData) {\nreadingData = false;\n}\nbreak;\n}\ndefault:\n{\nif (tokenizer.ttype == '\"') {\nadvanceField = true;\nif (readingHeaders) {\nthis.headers.add(tokenizer.sval);\n} else {\nif (readingInitialValues) {\nthis.types.add(String.class);\n}\nif (!this.dryrun) {\nif (out.getColumnCount() <= currentColumn) {\nout.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n}\n}\ntry {\nConstructor construct;\nif (currentColumn < this.constructors.size()) {\nconstruct = (Constructor) this.constructors.get(currentColumn);\n} else {\nClass targetclass = (Class) this.types.get(currentColumn);\nconstruct = targetclass.getConstructor(String.class);\nthis.constructors.add(construct);\n}\ntry {\ntry {\ntry {\nif (!this.dryrun) {\nout.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);\n} else if (this.findingTargetValue) {\nif ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\nthis.targetValue = construct.newInstance((String) tokenizer.sval);\nr.close();\nreturn (null);\n}\n}\n} catch (java.lang.reflect.InvocationTargetException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 1 \" + err.getMessage());\n}\n} catch (java.lang.IllegalAccessException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 2 \" + err.getMessage());\n}\n} catch (java.lang.InstantiationException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 3 \" + err.getMessage());\n}\n} catch (java.lang.NoSuchMethodException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 4\" + err.getMessage());\n}\n}\n} else if (tokenizer.ttype == 'e') {\nClass targetclass = (Class) this.types.get(currentColumn);\nif (Number.class.isAssignableFrom(targetclass)) {\ncurrentColumn--;\nreadingScientificNotation = true;\nadvanceField = false;\n}\n} else {\nadvanceField = false;\n}\nbreak;\n}\n}\nif (tokenizer.ttype == StreamTokenizer.TT_EOF) {\nbreak;\n}\nif (advanceField) {\ncurrentColumn++;\nif (!readingHeaders) {\nif (currentColumn >= this.headers.size()) {\ncurrentColumn = 0;\n}\n}\n}\n}\nif (!readingHeaders) {\nthis.rowcount = currentRow;\n} else {\nthis.rowcount = 0;\nreadingHeaders = false;\nif (this.ignorePostHeaderLines > 0) {\nString strLine;\nint k = 0;\nwhile ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {\nk++;\n}\n}\n}\nr.close();\n} catch (java.io.IOException err) {\nthrow new SnifflibDatatypeException(err.getMessage());\n}\nif (!this.dryrun) {\nfor (int j = 0; j < this.headers.size(); j++) {\nout.setColumnName(j, (String) this.headers.get(j));\n}\n}\nreturn (out);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 693
                },
                {
                        "id": "pretrain_java_data_1419949",
                        "content": "public DataSet newparse() throws SnifflibDatatypeException {\nNumberFormat numformat = NumberFormat.getInstance();\nif (this.headers.size() != this.types.size()) {\nthrow new SnifflibDatatypeException(\"Different number of headers (\" + this.headers.size() + \") and types(\" + this.types.size() + \").\");\n}\nDataSet out = null;\nif (!this.dryrun) {\nout = new DataSet();\n}\nBufferedReader r = null;\nStreamTokenizer tokenizer = null;\ntry {\nif (this.isURL) {\nif (this.url2goto == null) {\nreturn (null);\n}\nDataInputStream in = null;\ntry {\nin = new DataInputStream(this.url2goto.openStream());\nSystem.out.println(\"READY TO READ FROM URL:\" + url2goto);\nr = new BufferedReader(new InputStreamReader(in));\n} catch (Exception err) {\nthrow new RuntimeException(\"Problem reading from URL \" + this.url2goto + \".\", err);\n}\n} else {\nif (this.file == null) {\nthrow new RuntimeException(\"Data file to be parsed can not be null.\");\n}\nif (!this.file.exists()) {\nthrow new RuntimeException(\"The file \" + this.file + \" does not exist.\");\n}\nr = new BufferedReader(new FileReader(this.file));\n}\nif (this.ignorePreHeaderLines > 0) {\nString strLine;\nint k = 0;\nwhile ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {\nk++;\n}\n}\ntokenizer = new StreamTokenizer(r);\ntokenizer.resetSyntax();\ntokenizer.eolIsSignificant(true);\nboolean parseNumbers = false;\nfor (int k = 0; k < this.types.size(); k++) {\nClass type = (Class) this.types.get(k);\nif (Number.class.isAssignableFrom(type)) {\nparseNumbers = true;\nbreak;\n}\n}\nif (parseNumbers) {\ntokenizer.parseNumbers();\n}\ntokenizer.eolIsSignificant(true);\nif (this.delimiter.equals(\"\\\\t\")) {\ntokenizer.whitespaceChars('\\t', '\\t');\ntokenizer.quoteChar('\"');\ntokenizer.whitespaceChars(' ', ' ');\n} else if (this.delimiter.equals(\",\")) {\ntokenizer.quoteChar('\"');\ntokenizer.whitespaceChars(',', ',');\ntokenizer.whitespaceChars(' ', ' ');\n} else {\nif (this.delimiter.length() > 1) {\nthrow new RuntimeException(\"Delimiter must be a single character.  Multiple character delimiters are not allowed.\");\n}\nif (this.delimiter.length() > 0) {\ntokenizer.whitespaceChars(this.delimiter.charAt(0), this.delimiter.charAt(0));\n} else {\ntokenizer.wordChars(Character.MIN_VALUE, Character.MAX_VALUE);\ntokenizer.eolIsSignificant(true);\ntokenizer.ordinaryChar('\\n');\n}\n}\nboolean readingHeaders = true;\nboolean readingInitialValues = false;\nboolean readingData = false;\nboolean readingScientificNotation = false;\nif (this.headers.size() > 0) {\nreadingHeaders = false;\nreadingInitialValues = true;\n}\nif (this.types.size() > 0) {\nreadingInitialValues = false;\nClass targetclass;\nfor (int j = 0; j < this.types.size(); j++) {\ntargetclass = (Class) this.types.get(j);\ntry {\nthis.constructors.add(targetclass.getConstructor(String.class));\n} catch (java.lang.NoSuchMethodException err) {\nthrow new SnifflibDatatypeException(\"Could not find appropriate constructor for \" + targetclass + \". \" + err.getMessage());\n}\n}\nreadingData = true;\n}\nint currentColumn = 0;\nint currentRow = 0;\nthis.rowcount = 0;\nboolean advanceField = true;\nwhile (true) {\ntokenizer.nextToken();\nswitch(tokenizer.ttype) {\ncase StreamTokenizer.TT_WORD:\n{\nadvanceField = true;\nif (readingScientificNotation) {\nthrow new RuntimeException(\"Problem reading scientific notation at row \" + currentRow + \" column \" + currentColumn + \".\");\n}\nif (readingHeaders) {\nthis.headers.add(tokenizer.sval);\n} else {\nif (readingInitialValues) {\nthis.types.add(String.class);\n}\nif (!this.dryrun) {\nif (out.getColumnCount() <= currentColumn) {\nout.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n}\n}\ntry {\nConstructor construct;\nif (currentColumn < this.constructors.size()) {\nconstruct = (Constructor) this.constructors.get(currentColumn);\n} else {\nClass targetclass = (Class) this.types.get(currentColumn);\nconstruct = targetclass.getConstructor(String.class);\nthis.constructors.add(construct);\n}\ntry {\ntry {\ntry {\nif (!this.dryrun) {\nout.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);\n} else if (this.findingTargetValue) {\nObject vvv = construct.newInstance((String) tokenizer.sval);\nthis.valueQueue.push(vvv);\nif ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\nthis.targetValue = vvv;\nr.close();\nreturn (null);\n}\n}\n} catch (java.lang.reflect.InvocationTargetException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 1\" + err.getMessage());\n}\n} catch (java.lang.IllegalAccessException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 2\" + err.getMessage());\n}\n} catch (java.lang.InstantiationException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 3\" + err.getMessage());\n}\n} catch (java.lang.NoSuchMethodException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 4\" + err.getMessage());\n}\n}\nbreak;\n}\ncase StreamTokenizer.TT_NUMBER:\n{\nadvanceField = true;\nif (readingHeaders) {\nthrow new SnifflibDatatypeException(\"Expecting string header at row=\" + currentRow + \", column=\" + currentColumn + \".\");\n} else {\nif (readingInitialValues) {\nthis.types.add(Double.class);\n}\nif (!this.dryrun) {\nif (out.getColumnCount() <= currentColumn) {\nout.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n}\n}\ntry {\nConstructor construct;\nif (currentColumn < this.constructors.size()) {\nconstruct = (Constructor) this.constructors.get(currentColumn);\n} else {\nClass targetclass = (Class) this.types.get(currentColumn);\nconstruct = targetclass.getConstructor(double.class);\nthis.constructors.add(construct);\n}\nif (readingScientificNotation) {\nDouble val = this.scientificNumber;\nif (!this.dryrun) {\ntry {\nout.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);\n} catch (Exception err) {\nthrow new SnifflibDatatypeException(\"Problem constructing \" + construct.getDeclaringClass() + \"at row \" + currentRow + \" column \" + currentColumn + \".\", err);\n}\n} else if (this.findingTargetValue) {\nDouble NVAL = new Double(tokenizer.nval);\nObject vvv = null;\ntry {\nvvv = Double.parseDouble(val + \"E\" + NVAL.intValue());\n} catch (Exception err) {\nthrow new RuntimeException(\"Problem parsing scientific notation at row=\" + currentRow + \" col=\" + currentColumn + \".\", err);\n}\ntokenizer.nextToken();\nif (tokenizer.ttype != 'e') {\nthis.valueQueue.push(vvv);\nif ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\nthis.targetValue = vvv;\nr.close();\nreturn (null);\n}\ncurrentColumn++;\n} else {\ntokenizer.pushBack();\n}\n}\nreadingScientificNotation = false;\n} else {\ntry {\nthis.scientificNumber = new Double(tokenizer.nval);\nif (!this.dryrun) {\nout.setValueAt(this.scientificNumber, currentRow, currentColumn);\n} else if (this.findingTargetValue) {\nthis.valueQueue.push(this.scientificNumber);\nif ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\nthis.targetValue = this.scientificNumber;\nr.close();\nreturn (null);\n}\n}\n} catch (Exception err) {\nthrow new SnifflibDatatypeException(\"Problem constructing \" + construct.getDeclaringClass() + \"at row \" + currentRow + \" column \" + currentColumn + \".\", err);\n}\n}\n} catch (java.lang.NoSuchMethodException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing\" + err.getMessage());\n}\n}\nbreak;\n}\ncase StreamTokenizer.TT_EOL:\n{\nif (readingHeaders) {\nreadingHeaders = false;\nreadingInitialValues = true;\n} else {\nif (readingInitialValues) {\nreadingInitialValues = false;\nreadingData = true;\n}\n}\nif (readingData) {\nif (valueQueue.getUpperIndex() < currentRow) {\nvalueQueue.push(\"\");\n}\ncurrentRow++;\n}\nbreak;\n}\ncase StreamTokenizer.TT_EOF:\n{\nif (readingHeaders) {\nthrow new SnifflibDatatypeException(\"End of file reached while reading headers.\");\n}\nif (readingInitialValues) {\nthrow new SnifflibDatatypeException(\"End of file reached while reading initial values.\");\n}\nif (readingData) {\nreadingData = false;\n}\nbreak;\n}\ndefault:\n{\nif (tokenizer.ttype == '\"') {\nadvanceField = true;\nif (readingHeaders) {\nthis.headers.add(tokenizer.sval);\n} else {\nif (readingInitialValues) {\nthis.types.add(String.class);\n}\nif (!this.dryrun) {\nif (out.getColumnCount() <= currentColumn) {\nout.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n}\n}\ntry {\nConstructor construct;\nif (currentColumn < this.constructors.size()) {\nconstruct = (Constructor) this.constructors.get(currentColumn);\n} else {\nClass targetclass = (Class) this.types.get(currentColumn);\nconstruct = targetclass.getConstructor(String.class);\nthis.constructors.add(construct);\n}\ntry {\ntry {\ntry {\nif (!this.dryrun) {\nout.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);\n} else if (this.findingTargetValue) {\nObject vvv = construct.newInstance((String) tokenizer.sval);\nthis.valueQueue.push(vvv);\nif ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\nthis.targetValue = vvv;\nr.close();\nreturn (null);\n}\n}\n} catch (java.lang.reflect.InvocationTargetException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing a \" + construct, err);\n}\n} catch (java.lang.IllegalAccessException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 2 \", err);\n}\n} catch (java.lang.InstantiationException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 3 \", err);\n}\n} catch (java.lang.NoSuchMethodException err) {\nthrow new SnifflibDatatypeException(\"Problem constructing 4\", err);\n}\n}\n} else if (tokenizer.ttype == 'e') {\nClass targetclass = (Class) this.types.get(currentColumn);\nif (Number.class.isAssignableFrom(targetclass)) {\ncurrentColumn--;\nreadingScientificNotation = true;\nadvanceField = false;\n}\n} else {\nadvanceField = false;\n}\nbreak;\n}\n}\nif (tokenizer.ttype == StreamTokenizer.TT_EOF) {\nadvanceField = false;\nbreak;\n}\nif (advanceField) {\ncurrentColumn++;\nif (!readingHeaders) {\nif (currentColumn >= this.headers.size()) {\ncurrentColumn = 0;\n}\n}\n}\n}\nif (!readingHeaders) {\nthis.rowcount = currentRow;\n} else {\nthis.rowcount = 0;\nreadingHeaders = false;\nif (this.ignorePostHeaderLines > 0) {\nString strLine;\nint k = 0;\nwhile ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {\nk++;\n}\n}\n}\nr.close();\n} catch (java.io.IOException err) {\nthrow new SnifflibDatatypeException(err.getMessage());\n}\nif (!this.dryrun) {\nfor (int j = 0; j < this.headers.size(); j++) {\nout.setColumnName(j, (String) this.headers.get(j));\n}\n}\nreturn (out);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1551944#372#738.java",
                        "__cluster__": 693
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8921716",
                        "content": "public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[32];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nmd5hash = md.digest();\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 26
                },
                {
                        "id": "pretrain_java_data_3092554",
                        "content": "public static String mdFive(String string) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nbyte[] array = new byte[32];\nmd.update(string.getBytes(\"iso-8859-1\"), 0, string.length());\narray = md.digest();\nreturn convertToHex(array);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#56715#9#15.java",
                        "__cluster__": 26
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_6756635",
                        "content": "public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[32];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nmd5hash = md.digest();\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 26
                },
                {
                        "id": "pretrain_java_data_3092554",
                        "content": "public static String mdFive(String string) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nbyte[] array = new byte[32];\nmd.update(string.getBytes(\"iso-8859-1\"), 0, string.length());\narray = md.digest();\nreturn convertToHex(array);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#56715#9#15.java",
                        "__cluster__": 26
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8385785",
                        "content": "public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nbyte[] md5hash = new byte[32];\nmd.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\nmd5hash = md.digest();\nreturn convertToHex(md5hash);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 26
                },
                {
                        "id": "pretrain_java_data_3092554",
                        "content": "public static String mdFive(String string) throws NoSuchAlgorithmException, UnsupportedEncodingException {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nbyte[] array = new byte[32];\nmd.update(string.getBytes(\"iso-8859-1\"), 0, string.length());\narray = md.digest();\nreturn convertToHex(array);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#56715#9#15.java",
                        "__cluster__": 26
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_16550855",
                        "content": "public String readPage(boolean ignoreComments) throws Exception {\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nString html = \"\";\nif (ignoreComments) {\nwhile ((inputLine = in.readLine()) != null) {\nif (inputLine.length() > 0) {\nif (inputLine.substring(0, 1).compareTo(\"#\") != 0) {\nhtml = html + inputLine + \"\\n\";\n}\n}\n}\n} else {\nwhile ((inputLine = in.readLine()) != null) {\nhtml = html + inputLine + \"\\n\";\n}\n}\nin.close();\nreturn html;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 345
                },
                {
                        "id": "pretrain_java_data_3049371",
                        "content": "public String readPage(boolean ignoreComments) throws Exception {\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nString html = \"\";\nif (ignoreComments) {\nwhile ((inputLine = in.readLine()) != null) {\nif (inputLine.length() > 0) {\nif (inputLine.substring(0, 1).compareTo(\"#\") != 0) {\nhtml = html + inputLine + \"\\n\";\n}\n}\n}\n} else {\nwhile ((inputLine = in.readLine()) != null) {\nhtml = html + inputLine + \"\\n\";\n}\n}\nin.close();\nreturn html;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2062499#14#33.java",
                        "__cluster__": 345
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_18011804",
                        "content": "public FileChooserTestFrame() throws HeadlessException, MalformedURLException {\nsuper();\naddWindowListener(new WindowAdapter() {\npublic void windowClosing(WindowEvent aEvent) {\nSystem.exit(0);\n}\n});\nDimension dim = getToolkit().getScreenSize();\nRectangle abounds = getBounds();\nsetLocation((dim.width - abounds.width) / 2, (dim.height - abounds.height) / 2);\nsetVisible(true);\nURL url = new URL(\"ftp://cendantstp/\");\nchar[] password = \"spnr\".toCharArray();\nPasswordAuthentication passwordAuthentication = new PasswordAuthentication(\"spnr\", password);\nFTPRemoteFileSystemView remoteFileSystemView = new FTPRemoteFileSystemView(url, passwordAuthentication);\nJFileChooser fileChooser = new InsightRemoteFileChooser(remoteFileSystemView);\nfileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\nfileChooser.setMultiSelectionEnabled(true);\nFile[] selectedFiles = null;\nif (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {\nselectedFiles = fileChooser.getSelectedFiles();\nfor (int i = 0; i < selectedFiles.length; i++) {\nif (selectedFiles[i] instanceof FTPFileFile) {\nFTPFileFile ftpFile = (FTPFileFile) selectedFiles[i];\nlogger.fine(ftpFile.getName());\nlogger.fine(ftpFile.getPath());\n} else {\nlogger.fine(selectedFiles[i].toString());\nlogger.fine(selectedFiles[i].getAbsolutePath());\n}\n}\n}\nremoteFileSystemView.disconnect();\ntry {\nif (null != selectedFiles) {\nFTPClient ftpClient = new FTPClient();\nInetAddress inetAddress = InetAddress.getByName(url.getHost());\nftpClient.connect(inetAddress);\nif (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\nthrow new FTPBrowseException(ftpClient.getReplyString());\n}\nif (null != passwordAuthentication) {\nftpClient.login(passwordAuthentication.getUserName(), new StringBuffer().append(passwordAuthentication.getPassword()).toString());\n}\nfor (int i = 0; i < selectedFiles.length; i++) {\nFTPFileFile file = (FTPFileFile) selectedFiles[i];\nlogger.fine(file.getPath());\nFileOutputStream fos = new FileOutputStream(new File(\"d:/junk/ftp/test.txt\"));\nlogger.fine(\"\" + ftpClient.retrieveFile(file.getPath().replaceAll(\"\\\\\\\\\", \"/\"), fos));\nfos.close();\n}\n}\n} catch (UnknownHostException e) {\ne.printStackTrace();\n} catch (SocketException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nSystem.exit(0);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 412
                },
                {
                        "id": "pretrain_java_data_1493800",
                        "content": "public FileChooserTestFrame() throws HeadlessException, MalformedURLException {\nsuper();\naddWindowListener(new WindowAdapter() {\npublic void windowClosing(WindowEvent aEvent) {\nSystem.exit(0);\n}\n});\nDimension dim = getToolkit().getScreenSize();\nRectangle abounds = getBounds();\nsetLocation((dim.width - abounds.width) / 2, (dim.height - abounds.height) / 2);\nsetVisible(true);\nURL url = new URL(\"ftp://cendantstp/\");\nchar[] password = \"<PASSWORD>\".toCharArray();\nPasswordAuthentication passwordAuthentication = new PasswordAuthentication(\"spnr\", password);\nFTPRemoteFileSystemView remoteFileSystemView = new FTPRemoteFileSystemView(url, passwordAuthentication);\nJFileChooser fileChooser = new InsightRemoteFileChooser(remoteFileSystemView);\nfileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\nfileChooser.setMultiSelectionEnabled(true);\nFile[] selectedFiles = null;\nif (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {\nselectedFiles = fileChooser.getSelectedFiles();\nfor (int i = 0; i < selectedFiles.length; i++) {\nif (selectedFiles[i] instanceof FTPFileFile) {\nFTPFileFile ftpFile = (FTPFileFile) selectedFiles[i];\nlogger.fine(ftpFile.getName());\nlogger.fine(ftpFile.getPath());\n} else {\nlogger.fine(selectedFiles[i].toString());\nlogger.fine(selectedFiles[i].getAbsolutePath());\n}\n}\n}\nremoteFileSystemView.disconnect();\ntry {\nif (null != selectedFiles) {\nFTPClient ftpClient = new FTPClient();\nInetAddress inetAddress = InetAddress.getByName(url.getHost());\nftpClient.connect(inetAddress);\nif (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\nthrow new FTPBrowseException(ftpClient.getReplyString());\n}\nif (null != passwordAuthentication) {\nftpClient.login(passwordAuthentication.getUserName(), new StringBuffer().append(passwordAuthentication.getPassword()).toString());\n}\nfor (int i = 0; i < selectedFiles.length; i++) {\nFTPFileFile file = (FTPFileFile) selectedFiles[i];\nlogger.fine(file.getPath());\nFileOutputStream fos = new FileOutputStream(new File(\"d:/junk/ftp/test.txt\"));\nlogger.fine(\"\" + ftpClient.retrieveFile(file.getPath().replaceAll(\"\\\\\\\\\", \"/\"), fos));\nfos.close();\n}\n}\n} catch (UnknownHostException e) {\ne.printStackTrace();\n} catch (SocketException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nSystem.exit(0);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2621206#53#114.java",
                        "__cluster__": 412
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_1507191",
                        "content": "public void run(IAction action) {\nint style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();\nShell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);\nGraphicalViewer viewer = new ScrollingGraphicalViewer();\nviewer.createControl(shell);\nviewer.setEditDomain(new DefaultEditDomain(null));\nviewer.setRootEditPart(new ScalableFreeformRootEditPart());\nviewer.setEditPartFactory(new GraphicalPartFactory());\nviewer.setContents(getContents());\nviewer.flush();\nint printMode = new PrintModeDialog(shell).open();\nif (printMode == -1) return;\nPrintDialog dialog = new PrintDialog(shell, SWT.NULL);\nPrinterData data = dialog.open();\nif (data != null) {\nPrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);\nop.setPrintMode(printMode);\nop.run(selectedFile.getName());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1255609#50#69.java",
                        "__cluster__": 645
                },
                {
                        "id": "test_bigclonebench_data_7843322",
                        "content": "public void run(IAction action) {\nint style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();\nShell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);\nGraphicalViewer viewer = new ScrollingGraphicalViewer();\nviewer.createControl(shell);\nviewer.setEditDomain(new DefaultEditDomain(null));\nviewer.setRootEditPart(new ScalableFreeformRootEditPart());\nviewer.setEditPartFactory(new TableEditPartFactory());\nviewer.setContents(getContents());\nviewer.flush();\nint printMode = new PrintModeDialog(shell).open();\nif (printMode == -1) return;\nPrintDialog dialog = new PrintDialog(shell, SWT.NULL);\nPrinterData data = dialog.open();\nif (data != null) {\nPrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);\nop.setPrintMode(printMode);\nop.run(selectedFile.getName());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 645
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_8000624",
                        "content": "private void CopyTo(File dest) throws IOException {\nFileReader in = null;\nFileWriter out = null;\nint c;\ntry {\nin = new FileReader(image);\nout = new FileWriter(dest);\nwhile ((c = in.read()) != -1) out.write(c);\n} finally {\nif (in != null) try {\nin.close();\n} catch (Exception e) {\n}\nif (out != null) try {\nout.close();\n} catch (Exception e) {\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 714
                },
                {
                        "id": "pretrain_java_data_3103344",
                        "content": "private void CopyTo(File dest) throws IOException {\nFileReader in = null;\nFileWriter out = null;\nint c;\ntry {\nin = new FileReader(image);\nout = new FileWriter(dest);\nwhile ((c = in.read()) != -1) out.write(c);\n} finally {\nif (in != null) try {\nin.close();\n} catch (Exception e) {\n}\nif (out != null) try {\nout.close();\n} catch (Exception e) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1785105#78#96.java",
                        "__cluster__": 714
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_10131427",
                        "content": "public static void copyFile(File in, File out) throws IOException {\nFileChannel sourceChannel = new FileInputStream(in).getChannel();\nFileChannel destinationChannel = new FileOutputStream(out).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 19
                },
                {
                        "id": "pretrain_java_data_3008919",
                        "content": "<gh_stars>10-100\npublic static void copyFile(File src, File dst) throws IOException {\nFileChannel sourceChannel = new FileInputStream(src).getChannel();\nFileChannel destinationChannel = new FileOutputStream(dst).getChannel();\nsourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\nsourceChannel.close();\ndestinationChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1893527#47#53.java",
                        "__cluster__": 19
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_22560224",
                        "content": "public static String hashStringMD5(String string) throws NoSuchAlgorithmException {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(string.getBytes());\nbyte byteData[] = md.digest();\nStringBuffer sb = new StringBuffer();\nfor (int i = 0; i < byteData.length; i++) {\nsb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n}\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < byteData.length; i++) {\nString hex = Integer.toHexString(0xff & byteData[i]);\nif (hex.length() == 1) hexString.append('0');\nhexString.append(hex);\n}\nreturn hexString.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 188
                },
                {
                        "id": "pretrain_java_data_3116025",
                        "content": "package mailchimp.util;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\npublic class GenerateMD5 {\npublic static String stringToMd5(String value) throws NoSuchAlgorithmException {\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\nmd.update(value.getBytes());\nbyte byteData[] = md.digest();\nStringBuffer sb = new StringBuffer();\nfor (int i = 0; i < byteData.length; i++) {\nsb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n}\nStringBuffer hexString = new StringBuffer();\nfor (int i=0;i<byteData.length;i++) {\nString hex=Integer.toHexString(0xff & byteData[i]);\nif(hex.length()==1) hexString.append('0');\nhexString.append(hex);\n}\nreturn hexString.toString();\n}\n}",
                        "max_stars_count": 7,
                        "max_stars_repo_name": "NetoDevel/mailchimp-v3-java",
                        "max_stars_repo_path": "src/main/java/mailchimp/util/GenerateMD5.java",
                        "__cluster__": 188
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_17428877",
                        "content": "public synchronized String encryptPassword(String passwordString) throws Exception {\nMessageDigest digest = null;\ndigest = MessageDigest.getInstance(\"SHA\");\ndigest.update(passwordString.getBytes(\"UTF-8\"));\nbyte raw[] = digest.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2129195#20#27.java",
                        "__cluster__": 78
                },
                {
                        "id": "test_bigclonebench_data_17158020",
                        "content": "public synchronized String encryptPassword(String passwordString) throws Exception {\nMessageDigest digest = null;\ndigest = MessageDigest.getInstance(\"SHA\");\ndigest.update(passwordString.getBytes(\"UTF-8\"));\nbyte raw[] = digest.digest();\nString hash = (new BASE64Encoder()).encode(raw);\nreturn hash;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 78
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_16557837",
                        "content": "public static void copyFromTo(File srcFile, File destFile) {\nFileChannel in = null, out = null;\nFileInputStream fis = null;\nFileOutputStream fos = null;\ntry {\nfis = new FileInputStream(srcFile);\n} catch (FileNotFoundException fnfe) {\nSystem.out.println(\"File: \" + srcFile.toString());\nSystem.out.println(\"file does not exist, \" + \"is a directory rather than a regular file, \" + \"or for some other reason cannot be opened for reading\");\nSystem.exit(-1);\n}\ntry {\nfos = new FileOutputStream(destFile);\n} catch (FileNotFoundException fnfe) {\nSystem.out.println(\"File: \" + destFile.toString());\nSystem.out.println(\"file exists but is a directory rather than a regular file, \" + \"does not exist but cannot be created, \" + \"or cannot be opened for any other reason\");\nSystem.exit(-1);\n}\ntry {\nin = fis.getChannel();\nout = fos.getChannel();\nin.transferTo(0, in.size(), out);\nfos.flush();\nfos.close();\nout.close();\nfis.close();\nin.close();\nSystem.out.println(\"Completed copying \" + srcFile.toString() + \" to \" + destFile.toString());\n} catch (IOException ioe) {\nSystem.out.println(\"IOException copying file: \" + ioe.getMessage());\nSystem.exit(-1);\n}\nlong srcModified = srcFile.lastModified();\nif (srcModified > 0L && destFile.exists()) {\ndestFile.setLastModified(srcModified);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 352
                },
                {
                        "id": "pretrain_java_data_3141023",
                        "content": "public static void copyFromTo(File srcFile, File destFile) {\nFileChannel in = null, out = null;\nFileInputStream fis = null;\nFileOutputStream fos = null;\ntry {\nfis = new FileInputStream(srcFile);\n} catch (FileNotFoundException fnfe) {\nSystem.out.println(\"File: \" + srcFile.toString());\nSystem.out.println(\"file does not exist, \" + \"is a directory rather than a regular file, \" + \"or for some other reason cannot be opened for reading\");\nSystem.exit(-1);\n}\ntry {\nfos = new FileOutputStream(destFile);\n} catch (FileNotFoundException fnfe) {\nSystem.out.println(\"File: \" + destFile.toString());\nSystem.out.println(\"file exists but is a directory rather than a regular file, \" + \"does not exist but cannot be created, \" + \"or cannot be opened for any other reason\");\nSystem.exit(-1);\n}\ntry {\nin = fis.getChannel();\nout = fos.getChannel();\nin.transferTo(0, in.size(), out);\nfos.flush();\nfos.close();\nout.close();\nfis.close();\nin.close();\nSystem.out.println(\"Completed copying \" + srcFile.toString() + \" to \" + destFile.toString());\n} catch (IOException ioe) {\nSystem.out.println(\"IOException copying file: \" + ioe.getMessage());\nSystem.exit(-1);\n}\nlong srcModified = srcFile.lastModified();\nif (srcModified > 0L && destFile.exists()) {\ndestFile.setLastModified(srcModified);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#943392#21#57.java",
                        "__cluster__": 352
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14877116",
                        "content": "public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {\nif (!source.exists()) throw new IOException(\"source file not exists\");\nif (!source.isFile()) throw new IOException(\"source file not exists(is a directory)\");\nInputStream src = new FileInputStream(source);\nFile tarn = target;\nif (target.isDirectory() || !(!(target.exists()) || replace)) {\nString tardir = target.isDirectory() ? target.getPath() : target.getParent();\ntarn = new File(tardir + File.separator + source.getName());\nint n = 1;\nwhile (!(!tarn.exists() || replace)) {\ntarn = new File(tardir + File.separator + String.valueOf(n) + \" copy of \" + source.getName());\nn++;\n}\n}\nif (source.getPath().equals(tarn.getPath()) && replace) return;\nOutputStream tar = new FileOutputStream(tarn);\nbyte[] bytes = new byte[bufferSize];\nint readn = -1;\nwhile ((readn = src.read(bytes)) > 0) {\ntar.write(bytes, 0, readn);\n}\ntar.flush();\ntar.close();\nsrc.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 437
                },
                {
                        "id": "pretrain_java_data_3187976",
                        "content": "public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {\nif (!source.exists()) throw new IOException(\"source file not exists\");\nif (!source.isFile()) throw new IOException(\"source file not exists(is a directory)\");\nInputStream src = new FileInputStream(source);\nFile tarn = target;\nif (target.isDirectory() || !(!(target.exists()) || replace)) {\nString tardir = target.isDirectory() ? target.getPath() : target.getParent();\ntarn = new File(tardir + File.separator + source.getName());\nint n = 1;\nwhile (!(!tarn.exists() || replace)) {\ntarn = new File(tardir + File.separator + String.valueOf(n) + \" copy of \" + source.getName());\nn++;\n}\n}\nif (source.getPath().equals(tarn.getPath()) && replace) return;\nOutputStream tar = new FileOutputStream(tarn);\nbyte[] bytes = new byte[bufferSize];\nint readn = -1;\nwhile ((readn = src.read(bytes)) > 0) {\ntar.write(bytes, 0, readn);\n}\ntar.flush();\ntar.close();\nsrc.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#201786#290#314.java",
                        "__cluster__": 437
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_23335922",
                        "content": "public String digest(String message) throws NoSuchAlgorithmException, EncoderException {\nMessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\nmessageDigest.update(message.getBytes());\nbyte[] raw = messageDigest.digest();\nbyte[] chars = new Base64().encode(raw);\nreturn new String(chars);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 724
                },
                {
                        "id": "pretrain_java_data_3153111",
                        "content": "public String digest(String message) throws NoSuchAlgorithmException, EncoderException {\nMessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\nmessageDigest.update(message.getBytes());\nbyte[] raw = messageDigest.digest();\nbyte[] chars = new Base64().encode(raw);\nreturn new String(chars);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1920325#23#29.java",
                        "__cluster__": 724
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_16572931",
                        "content": "private String unJar(String jarPath, String jarEntry) {\nString path;\nif (jarPath.lastIndexOf(\"lib/\") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(\"lib/\")); else path = jarPath.substring(0, jarPath.lastIndexOf(\"/\"));\nString relPath = jarEntry.substring(0, jarEntry.lastIndexOf(\"/\"));\ntry {\nnew File(path + \"/\" + relPath).mkdirs();\nJarFile jar = new JarFile(jarPath);\nZipEntry ze = jar.getEntry(jarEntry);\nFile bin = new File(path + \"/\" + jarEntry);\nIOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn path + \"/\" + jarEntry;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 273
                },
                {
                        "id": "pretrain_java_data_17535117",
                        "content": "<gh_stars>10-100\nprivate String unJar(String jarPath, String jarEntry) {\nString path;\nif (jarPath.lastIndexOf(\"lib/\") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(\"lib/\")); else path = jarPath.substring(0, jarPath.lastIndexOf(\"/\"));\nString relPath = jarEntry.substring(0, jarEntry.lastIndexOf(\"/\"));\ntry {\nnew File(path + \"/\" + relPath).mkdirs();\nJarFile jar = new JarFile(jarPath);\nZipEntry ze = jar.getEntry(jarEntry);\nFile bin = new File(path + \"/\" + jarEntry);\nIOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn path + \"/\" + jarEntry;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#993537#152#166.java",
                        "__cluster__": 273
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17420138",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic static void main(String[] args) throws Exception {\nFileChannel fc = new FileOutputStream(\"data2.txt\").getChannel();\nfc.write(ByteBuffer.wrap(\"Some text\".getBytes()));\nfc.close();\nfc = new FileInputStream(\"data2.txt\").getChannel();\nByteBuffer buff = ByteBuffer.allocate(BSIZE);\nfc.read(buff);\nbuff.flip();\nSystem.out.println(buff.asCharBuffer());\nbuff.rewind();\nString encoding = System.getProperty(\"file.encoding\");\nSystem.out.println(\"Decoded using \" + encoding + \": \" + Charset.forName(encoding).decode(buff));\nfc = new FileOutputStream(\"data2.txt\").getChannel();\nfc.write(ByteBuffer.wrap(\"Some text\".getBytes(\"UTF-16BE\")));\nfc.close();\nfc = new FileInputStream(\"data2.txt\").getChannel();\nbuff.clear();\nfc.read(buff);\nbuff.flip();\nSystem.out.println(buff.asCharBuffer());\nfc = new FileOutputStream(\"data2.txt\").getChannel();\nbuff = ByteBuffer.allocate(24);\nbuff.asCharBuffer().put(\"Some text\");\nfc.write(buff);\nfc.close();\nfc = new FileInputStream(\"data2.txt\").getChannel();\nbuff.clear();\nfc.read(buff);\nbuff.flip();\nSystem.out.println(buff.asCharBuffer());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2455809#12#42.java",
                        "__cluster__": 649
                },
                {
                        "id": "test_bigclonebench_data_3053403",
                        "content": "public static void main(String[] args) throws Exception {\nFileChannel fc = new FileOutputStream(\"data2.txt\").getChannel();\nfc.write(ByteBuffer.wrap(\"Some text\".getBytes()));\nfc.close();\nfc = new FileInputStream(\"data2.txt\").getChannel();\nByteBuffer buff = ByteBuffer.allocate(BSIZE);\nfc.read(buff);\nbuff.flip();\nSystem.out.println(buff.asCharBuffer());\nbuff.rewind();\nString encoding = System.getProperty(\"file.encoding\");\nSystem.out.println(\"Decoded using \" + encoding + \": \" + Charset.forName(encoding).decode(buff));\nfc = new FileOutputStream(\"data2.txt\").getChannel();\nfc.write(ByteBuffer.wrap(\"Some text\".getBytes(\"UTF-16BE\")));\nfc.close();\nfc = new FileInputStream(\"data2.txt\").getChannel();\nbuff.clear();\nfc.read(buff);\nbuff.flip();\nSystem.out.println(buff.asCharBuffer());\nfc = new FileOutputStream(\"data2.txt\").getChannel();\nbuff = ByteBuffer.allocate(24);\nbuff.asCharBuffer().put(\"Some text\");\nfc.write(buff);\nfc.close();\nfc = new FileInputStream(\"data2.txt\").getChannel();\nbuff.clear();\nfc.read(buff);\nbuff.flip();\nSystem.out.println(buff.asCharBuffer());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 649
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_19113613",
                        "content": "public static void copy(File in, File out) throws IOException {\nif (in.exists() && in != null && out != null) {\nif (!out.exists()) {\nif (in.isDirectory()) {\nout.mkdirs();\n} else {\nout.createNewFile();\n}\n}\nString source = in.isDirectory() ? \"directory\" : \"file\";\nString target = out.isDirectory() ? \"directory\" : \"file\";\nif (!source.equals(target)) {\nthrow new IOException(\"Can't duplicate \" + source + \" as \" + target);\n} else {\nif (source.equals(\"directory\")) {\nFile[] files = in.listFiles();\nfor (File file : files) {\ncopy(file, new File(out, file.getName()));\n}\n} else {\nFileChannel inCh = new FileInputStream(in).getChannel();\nFileChannel outCh = new FileOutputStream(out).getChannel();\ninCh.transferTo(0, inCh.size(), outCh);\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 827
                },
                {
                        "id": "pretrain_java_data_3160478",
                        "content": "<gh_stars>10-100\npublic static void copy(File in, File out) throws IOException {\nif (in.exists() && in != null && out != null) {\nif (!out.exists()) {\nif (in.isDirectory()) {\nout.mkdirs();\n} else {\nout.createNewFile();\n}\n}\nString source = in.isDirectory() ? \"directory\" : \"file\";\nString target = out.isDirectory() ? \"directory\" : \"file\";\nif (!source.equals(target)) {\nthrow new IOException(\"Can't duplicate \" + source + \" as \" + target);\n} else {\nif (source.equals(\"directory\")) {\nFile[] files = in.listFiles();\nfor (File file : files) {\ncopy(file, new File(out, file.getName()));\n}\n} else {\nFileChannel inCh = new FileInputStream(in).getChannel();\nFileChannel outCh = new FileOutputStream(out).getChannel();\ninCh.transferTo(0, inCh.size(), outCh);\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1567283#58#84.java",
                        "__cluster__": 827
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20991673",
                        "content": "public NodeId generateTopicId(String topicName) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\n} catch (NoSuchAlgorithmException e) {\nSystem.err.println(\"No SHA support!\");\n}\nif (m_ready) System.out.println(\"Scribe is ready at\" + getNodeId() + \" , topic is \" + topicName);\nmd.update(topicName.getBytes());\nbyte[] digest = md.digest();\nNodeId newId = new NodeId(digest);\nreturn newId;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 873
                },
                {
                        "id": "pretrain_java_data_3140300",
                        "content": "public NodeId generateTopicId(String topicName) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA\");\n} catch (NoSuchAlgorithmException e) {\nSystem.err.println(\"No SHA support!\");\n}\nmd.update(topicName.getBytes());\nbyte[] digest = md.digest();\nNodeId newId = new NodeId(digest);\nreturn newId;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#8783#374#385.java",
                        "__cluster__": 873
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_1357662",
                        "content": "private void copyFileTo(File destination) throws IOException {\nlogger.fine(\"Copying from \" + destination + \"...\");\nFileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\nlogger.fine(\"...got source channel \" + srcChannel + \"...\");\nFileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\nlogger.fine(\"...got destination channel \" + destChannel + \"...\");\nlogger.fine(\"...Got channels...\");\ndestChannel.transferFrom(srcChannel, 0, srcChannel.size());\nlogger.fine(\"...transferred.\");\nsrcChannel.close();\ndestChannel.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 67
                },
                {
                        "id": "pretrain_java_data_17451551",
                        "content": "<filename>references/bcb_chosen_clones/selected#2484283#80#91.java\nprivate void copyFileTo(File destination) throws IOException {\nlogger.fine(\"Copying from \" + destination + \"...\");\nFileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\nlogger.fine(\"...got source channel \" + srcChannel + \"...\");\nFileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\nlogger.fine(\"...got destination channel \" + destChannel + \"...\");\nlogger.fine(\"...Got channels...\");\ndestChannel.transferFrom(srcChannel, 0, srcChannel.size());\nlogger.fine(\"...transferred.\");\nsrcChannel.close();\ndestChannel.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2484283#80#91.java",
                        "__cluster__": 67
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19058641",
                        "content": "private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\nCategory log = ThreadCategory.getInstance(OutageWriter.class);\nif (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\nlog.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid/ip/svc: \" + eventID + \"/\" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\nreturn;\n}\nConnection dbConn = null;\ntry {\ndbConn = DatabaseConnectionFactory.getInstance().getConnection();\nif (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\ntry {\ndbConn.setAutoCommit(false);\n} catch (SQLException sqle) {\nlog.error(\"Unable to change database AutoCommit to FALSE\", sqle);\nreturn;\n}\nPreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\noutageUpdater.setLong(1, eventID);\noutageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\noutageUpdater.setLong(3, nodeID);\noutageUpdater.setString(4, ipAddr);\noutageUpdater.setLong(5, serviceID);\noutageUpdater.executeUpdate();\noutageUpdater.close();\ntry {\ndbConn.commit();\nif (log.isDebugEnabled()) log.debug(\"nodeRegainedService: closed outage for nodeid/ip/service \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" in DB\");\n} catch (SQLException se) {\nlog.warn(\"Rolling back transaction, nodeRegainedService could not be recorded  for nodeId/ipAddr/service: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID, se);\ntry {\ndbConn.rollback();\n} catch (SQLException sqle) {\nlog.warn(\"SQL exception during rollback, reason\", sqle);\n}\n}\n} else {\nlog.warn(\"\\'\" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \"\\' for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" does not have open record.\");\n}\n} catch (SQLException se) {\nlog.warn(\"SQL exception while handling \\'nodeRegainedService\\'\", se);\n} finally {\ntry {\nif (dbConn != null) dbConn.close();\n} catch (SQLException e) {\nlog.warn(\"Exception closing JDBC connection\", e);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#978099#539#586.java",
                        "__cluster__": 53
                },
                {
                        "id": "test_bigclonebench_data_9096319",
                        "content": "private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\nCategory log = ThreadCategory.getInstance(OutageWriter.class);\nif (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\nlog.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid/ip/svc: \" + eventID + \"/\" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\nreturn;\n}\nConnection dbConn = null;\ntry {\ndbConn = DatabaseConnectionFactory.getInstance().getConnection();\nif (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\ntry {\ndbConn.setAutoCommit(false);\n} catch (SQLException sqle) {\nlog.error(\"Unable to change database AutoCommit to FALSE\", sqle);\nreturn;\n}\nPreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\noutageUpdater.setLong(1, eventID);\noutageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\noutageUpdater.setLong(3, nodeID);\noutageUpdater.setString(4, ipAddr);\noutageUpdater.setLong(5, serviceID);\noutageUpdater.executeUpdate();\noutageUpdater.close();\ntry {\ndbConn.commit();\nif (log.isDebugEnabled()) log.debug(\"nodeRegainedService: closed outage for nodeid/ip/service \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" in DB\");\n} catch (SQLException se) {\nlog.warn(\"Rolling back transaction, nodeRegainedService could not be recorded  for nodeId/ipAddr/service: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID, se);\ntry {\ndbConn.rollback();\n} catch (SQLException sqle) {\nlog.warn(\"SQL exception during rollback, reason\", sqle);\n}\n}\n} else {\nlog.warn(\"\\'\" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \"\\' for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" does not have open record.\");\n}\n} catch (SQLException se) {\nlog.warn(\"SQL exception while handling \\'nodeRegainedService\\'\", se);\n} finally {\ntry {\nif (dbConn != null) dbConn.close();\n} catch (SQLException e) {\nlog.warn(\"Exception closing JDBC connection\", e);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 53
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_7143591",
                        "content": "public void getWebByUrl(String strUrl, String charset, String fileIndex) {\ntry {\nSystem.out.println(\"Getting web by url: \" + strUrl);\naddReport(\"Getting web by url: \" + strUrl + \"\\n\");\nURL url = new URL(strUrl);\nURLConnection conn = url.openConnection();\nconn.setDoOutput(true);\nInputStream is = null;\nis = url.openStream();\nString filePath = fPath + \"/web\" + fileIndex + \".htm\";\nPrintWriter pw = null;\nFileOutputStream fos = new FileOutputStream(filePath);\nOutputStreamWriter writer = new OutputStreamWriter(fos);\npw = new PrintWriter(writer);\nBufferedReader bReader = new BufferedReader(new InputStreamReader(is));\nStringBuffer sb = new StringBuffer();\nString rLine = null;\nString tmp_rLine = null;\nwhile ((rLine = bReader.readLine()) != null) {\ntmp_rLine = rLine;\nint str_len = tmp_rLine.length();\nif (str_len > 0) {\nsb.append(\"\\n\" + tmp_rLine);\npw.println(tmp_rLine);\npw.flush();\nif (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);\n}\ntmp_rLine = null;\n}\nis.close();\npw.close();\nSystem.out.println(\"Get web successfully! \" + strUrl);\naddReport(\"Get web successfully! \" + strUrl + \"\\n\");\naddWebSuccessed();\n} catch (Exception e) {\nSystem.out.println(\"Get web failed!       \" + strUrl);\naddReport(\"Get web failed!       \" + strUrl + \"\\n\");\naddWebFailed();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 497
                },
                {
                        "id": "pretrain_java_data_17595641",
                        "content": "public void getWebByUrl(String strUrl, String charset, String fileIndex) {\ntry {\nSystem.out.println(\"Getting web by url: \" + strUrl);\naddReport(\"Getting web by url: \" + strUrl + \"\\n\");\nURL url = new URL(strUrl);\nURLConnection conn = url.openConnection();\nconn.setDoOutput(true);\nInputStream is = null;\nis = url.openStream();\nString filePath = fPath + \"/web\" + fileIndex + \".htm\";\nPrintWriter pw = null;\nFileOutputStream fos = new FileOutputStream(filePath);\nOutputStreamWriter writer = new OutputStreamWriter(fos);\npw = new PrintWriter(writer);\nBufferedReader bReader = new BufferedReader(new InputStreamReader(is));\nStringBuffer sb = new StringBuffer();\nString rLine = null;\nString tmp_rLine = null;\nwhile ((rLine = bReader.readLine()) != null) {\ntmp_rLine = rLine;\nint str_len = tmp_rLine.length();\nif (str_len > 0) {\nsb.append(\"\\n\" + tmp_rLine);\npw.println(tmp_rLine);\npw.flush();\nif (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);\n}\ntmp_rLine = null;\n}\nis.close();\npw.close();\nSystem.out.println(\"Get web successfully! \" + strUrl);\naddReport(\"Get web successfully! \" + strUrl + \"\\n\");\naddWebSuccessed();\n} catch (Exception e) {\nSystem.out.println(\"Get web failed!       \" + strUrl);\naddReport(\"Get web failed!       \" + strUrl + \"\\n\");\naddWebFailed();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#848822#166#205.java",
                        "__cluster__": 497
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_17589443",
                        "content": "public String upload() {\nSystem.out.println(imgFile);\nString destDir = \"E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\map_bg.jpg\";\nFileOutputStream fos;\ntry {\nfos = new FileOutputStream(new File(destDir));\nIOUtils.copy(new FileInputStream(imgFile), fos);\nIOUtils.closeQuietly(fos);\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn \"show\";\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2266172#32#46.java",
                        "__cluster__": 500
                },
                {
                        "id": "test_bigclonebench_data_10795866",
                        "content": "public String upload() {\nSystem.out.println(imgFile);\nString destDir = \"E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\map_bg.jpg\";\nFileOutputStream fos;\ntry {\nfos = new FileOutputStream(new File(destDir));\nIOUtils.copy(new FileInputStream(imgFile), fos);\nIOUtils.closeQuietly(fos);\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn \"show\";\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 500
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19093483",
                        "content": "private void copyIconFiles(UmlClass clazz) {\nif (clazz.hasAnnotation(\"icon16\")) {\nString i16 = clazz.annotationValue(\"icon16\");\nString fileType = \".png\";\nif (i16.endsWith(\".jpg\")) fileType = \".jpg\";\nif (i16.endsWith(\".gif\")) fileType = \".gif\";\nString desti16 = output_dir + \"/../resources/images/\" + clazz.getName() + \"16\" + fileType;\ntry {\nFileChannel src = new FileInputStream(i16).getChannel();\nFileChannel dst = new FileOutputStream(desti16).getChannel();\ndst.transferFrom(src, 0, src.size());\nsrc.close();\ndst.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\nif (clazz.hasAnnotation(\"icon32\")) {\nString i32 = clazz.annotationValue(\"icon32\");\nString fileType = \".png\";\nif (i32.endsWith(\".jpg\")) fileType = \".jpg\";\nif (i32.endsWith(\".gif\")) fileType = \".gif\";\nString desti32 = output_dir + \"/../resources/images/\" + clazz.getName() + \"32\" + fileType;\ntry {\nFileChannel src = new FileInputStream(i32).getChannel();\nFileChannel dst = new FileOutputStream(desti32).getChannel();\ndst.transferFrom(src, 0, src.size());\nsrc.close();\ndst.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#771840#74#107.java",
                        "__cluster__": 548
                },
                {
                        "id": "test_bigclonebench_data_23672408",
                        "content": "private void copyIconFiles(UmlClass clazz) {\nif (clazz.hasAnnotation(\"icon16\")) {\nString i16 = clazz.annotationValue(\"icon16\");\nString fileType = \".png\";\nif (i16.endsWith(\".jpg\")) fileType = \".jpg\";\nif (i16.endsWith(\".gif\")) fileType = \".gif\";\nString desti16 = output_dir + \"/../resources/images/\" + clazz.getName() + \"16\" + fileType;\ntry {\nFileChannel src = new FileInputStream(i16).getChannel();\nFileChannel dst = new FileOutputStream(desti16).getChannel();\ndst.transferFrom(src, 0, src.size());\nsrc.close();\ndst.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\nif (clazz.hasAnnotation(\"icon32\")) {\nString i32 = clazz.annotationValue(\"icon32\");\nString fileType = \".png\";\nif (i32.endsWith(\".jpg\")) fileType = \".jpg\";\nif (i32.endsWith(\".gif\")) fileType = \".gif\";\nString desti32 = output_dir + \"/../resources/images/\" + clazz.getName() + \"32\" + fileType;\ntry {\nFileChannel src = new FileInputStream(i32).getChannel();\nFileChannel dst = new FileOutputStream(desti32).getChannel();\ndst.transferFrom(src, 0, src.size());\nsrc.close();\ndst.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 548
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19120746",
                        "content": "private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {\ntry {\nFile inFile = new File(completePath + fSep + \"SmartGRAPE\" + fSep + masterFile);\nFileChannel inC = new FileInputStream(inFile).getChannel();\nFile outFile1 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + MovieIndexFileName);\nFileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();\nFile outFile2 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + CustRatingFileName);\nFileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();\nint fileSize = (int) inC.size();\nint totalNoDataRows = fileSize / 7;\nByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\nint startIndex = 1, count = 0;\nshort currentMovie = 1;\nwhile (mappedBuffer.hasRemaining()) {\ncount++;\nshort movieName = mappedBuffer.getShort();\nint customer = mappedBuffer.getInt();\nbyte rating = mappedBuffer.get();\nif (movieName != currentMovie) {\nByteBuffer outBuf1 = ByteBuffer.allocate(10);\noutBuf1.putShort(currentMovie);\noutBuf1.putInt(startIndex);\noutBuf1.putInt(count - 1);\noutBuf1.flip();\noutC1.write(outBuf1);\ncurrentMovie = movieName;\nstartIndex = count;\n}\nByteBuffer outBuf2 = ByteBuffer.allocate(5);\noutBuf2.putInt(customer);\noutBuf2.put(rating);\noutBuf2.flip();\noutC2.write(outBuf2);\n}\nByteBuffer endOfIndexFile = ByteBuffer.allocate(10);\nendOfIndexFile.putShort(currentMovie);\nendOfIndexFile.putInt(startIndex);\nendOfIndexFile.putInt(100480506);\nendOfIndexFile.flip();\noutC1.write(endOfIndexFile);\noutC1.close();\noutC2.close();\nreturn true;\n} catch (IOException e) {\nSystem.err.println(e);\nreturn false;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1809056#183#230.java",
                        "__cluster__": 692
                },
                {
                        "id": "test_bigclonebench_data_7872659",
                        "content": "private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {\ntry {\nFile inFile = new File(completePath + fSep + \"SmartGRAPE\" + fSep + masterFile);\nFileChannel inC = new FileInputStream(inFile).getChannel();\nFile outFile1 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + MovieIndexFileName);\nFileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();\nFile outFile2 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + CustRatingFileName);\nFileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();\nint fileSize = (int) inC.size();\nint totalNoDataRows = fileSize / 7;\nByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\nint startIndex = 1, count = 0;\nshort currentMovie = 1;\nwhile (mappedBuffer.hasRemaining()) {\ncount++;\nshort movieName = mappedBuffer.getShort();\nint customer = mappedBuffer.getInt();\nbyte rating = mappedBuffer.get();\nif (movieName != currentMovie) {\nByteBuffer outBuf1 = ByteBuffer.allocate(10);\noutBuf1.putShort(currentMovie);\noutBuf1.putInt(startIndex);\noutBuf1.putInt(count - 1);\noutBuf1.flip();\noutC1.write(outBuf1);\ncurrentMovie = movieName;\nstartIndex = count;\n}\nByteBuffer outBuf2 = ByteBuffer.allocate(5);\noutBuf2.putInt(customer);\noutBuf2.put(rating);\noutBuf2.flip();\noutC2.write(outBuf2);\n}\nByteBuffer endOfIndexFile = ByteBuffer.allocate(10);\nendOfIndexFile.putShort(currentMovie);\nendOfIndexFile.putInt(startIndex);\nendOfIndexFile.putInt(100480506);\nendOfIndexFile.flip();\noutC1.write(endOfIndexFile);\noutC1.close();\noutC2.close();\nreturn true;\n} catch (IOException e) {\nSystem.err.println(e);\nreturn false;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 692
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19057082",
                        "content": "public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {\nBufferedInputStream bis = null;\nBufferedOutputStream bos = null;\ntry {\nbis = new BufferedInputStream(new FileInputStream(this.loadData(req)));\nbos = new BufferedOutputStream(resp.getOutputStream());\nIOUtils.copy(bis, bos);\nbos.flush();\n} catch (Exception e) {\n_cat.warn(\"Write data failed!\", e);\n} finally {\nIOUtils.closeQuietly(bis);\nIOUtils.closeQuietly(bos);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2138004#66#80.java",
                        "__cluster__": 855
                },
                {
                        "id": "test_bigclonebench_data_18731843",
                        "content": "public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {\nBufferedInputStream bis = null;\nBufferedOutputStream bos = null;\ntry {\nbis = new BufferedInputStream(new FileInputStream(this.loadData(req)));\nbos = new BufferedOutputStream(resp.getOutputStream());\nIOUtils.copy(bis, bos);\nbos.flush();\n} catch (Exception e) {\n_cat.warn(\"Write data failed!\", e);\n} finally {\nIOUtils.closeQuietly(bis);\nIOUtils.closeQuietly(bos);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 855
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19024968",
                        "content": "<gh_stars>10-100\npublic static String getMD5(String s) {\ntry {\nMessageDigest m = MessageDigest.getInstance(\"MD5\");\nm.update(s.getBytes(), 0, s.length());\nreturn \"\" + new BigInteger(1, m.digest()).toString(16);\n} catch (NoSuchAlgorithmException e) {\nlogger.error(\"MD5 is not supported !!!\");\n}\nreturn s;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1968067#164#173.java",
                        "__cluster__": 57
                },
                {
                        "id": "test_bigclonebench_data_9796161",
                        "content": "public static String getMD5(String s) {\ntry {\nMessageDigest m = MessageDigest.getInstance(\"MD5\");\nm.update(s.getBytes(), 0, s.length());\nreturn \"\" + new BigInteger(1, m.digest()).toString(16);\n} catch (NoSuchAlgorithmException e) {\nlogger.error(\"MD5 is not supported !!!\");\n}\nreturn s;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 57
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_2834524",
                        "content": "public void write() throws IOException {\nJarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\nif (includeJars != null) {\nHashSet allEntries = new HashSet(includeJars);\nif (!ignoreDependencies) expandSet(allEntries);\nfor (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) {\nJarFile jar = getJarFile(iterator.next());\nEnumeration jarEntries = jar.entries();\nwhile (jarEntries.hasMoreElements()) {\nZipEntry o1 = (ZipEntry) jarEntries.nextElement();\nif (o1.getName().equalsIgnoreCase(\"META-INF/MANIFEST.MF\") || o1.getSize() <= 0) continue;\njarOut.putNextEntry(o1);\nInputStream entryStream = jar.getInputStream(o1);\nIOUtils.copy(entryStream, jarOut);\njarOut.closeEntry();\n}\n}\n}\njarOut.finish();\njarOut.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 716
                },
                {
                        "id": "pretrain_java_data_19117846",
                        "content": "<reponame>cragkhit/elasticsearch\npublic void write() throws IOException {\nJarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\nif (includeJars != null) {\nHashSet allEntries = new HashSet(includeJars);\nif (!ignoreDependencies) expandSet(allEntries);\nfor (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) {\nJarFile jar = getJarFile(iterator.next());\nEnumeration jarEntries = jar.entries();\nwhile (jarEntries.hasMoreElements()) {\nZipEntry o1 = (ZipEntry) jarEntries.nextElement();\nif (o1.getName().equalsIgnoreCase(\"META-INF/MANIFEST.MF\") || o1.getSize() <= 0) continue;\njarOut.putNextEntry(o1);\nInputStream entryStream = jar.getInputStream(o1);\nIOUtils.copy(entryStream, jarOut);\njarOut.closeEntry();\n}\n}\n}\njarOut.finish();\njarOut.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#814889#68#88.java",
                        "__cluster__": 716
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_19003177",
                        "content": "<filename>references/bcb_chosen_clones/selected#1500836#465#593.java\n@Override\npublic boolean delete(String consulta, boolean autocommit, int transactionIsolation, Connection cx) throws SQLException {\nfilasDelete = 0;\nif (!consulta.contains(\";\")) {\nthis.tipoConsulta = new Scanner(consulta);\nif (this.tipoConsulta.hasNext()) {\nexecConsulta = this.tipoConsulta.next();\nif (execConsulta.equalsIgnoreCase(\"delete\")) {\nConnection conexion = cx;\nStatement st = null;\ntry {\nconexion.setAutoCommit(autocommit);\nif (transactionIsolation == 1 || transactionIsolation == 2 || transactionIsolation == 4 || transactionIsolation == 8) {\nconexion.setTransactionIsolation(transactionIsolation);\n} else {\nthrow new IllegalArgumentException(\"Valor invalido sobre TransactionIsolation,\\n TRANSACTION_NONE no es soportado por MySQL\");\n}\nst = (Statement) conexion.createStatement(ResultSetImpl.TYPE_SCROLL_SENSITIVE, ResultSetImpl.CONCUR_UPDATABLE);\nconexion.setReadOnly(false);\nfilasDelete = st.executeUpdate(consulta.trim(), Statement.RETURN_GENERATED_KEYS);\nif (filasDelete > -1) {\nif (autocommit == false) {\nconexion.commit();\n}\nreturn true;\n} else {\nreturn false;\n}\n} catch (MySQLIntegrityConstraintViolationException e) {\nif (autocommit == false) {\ntry {\nconexion.rollback();\nSystem.out.println(\"Se ejecuto un Rollback\");\n} catch (MySQLTransactionRollbackException sqlE) {\nSystem.out.println(\"No se ejecuto un Rollback\");\nsqlE.printStackTrace();\n} catch (SQLException se) {\nse.printStackTrace();\n}\n}\ne.printStackTrace();\nreturn false;\n} catch (MySQLNonTransientConnectionException e) {\nif (autocommit == false) {\ntry {\nconexion.rollback();\nSystem.out.println(\"Se ejecuto un Rollback\");\n} catch (MySQLTransactionRollbackException sqlE) {\nSystem.out.println(\"No se ejecuto un Rollback\");\nsqlE.printStackTrace();\n} catch (SQLException se) {\nse.printStackTrace();\n}\n}\ne.printStackTrace();\nreturn false;\n} catch (MySQLDataException e) {\nSystem.out.println(\"Datos incorrectos\");\nif (autocommit == false) {\ntry {\nconexion.rollback();\nSystem.out.println(\"Se ejecuto un Rollback\");\n} catch (MySQLTransactionRollbackException sqlE) {\nSystem.out.println(\"No se ejecuto un Rollback\");\nsqlE.printStackTrace();\n} catch (SQLException se) {\nse.printStackTrace();\n}\n}\nreturn false;\n} catch (MySQLSyntaxErrorException e) {\nSystem.out.println(\"Error en la sintaxis de la Consulta en MySQL\");\nif (autocommit == false) {\ntry {\nconexion.rollback();\nSystem.out.println(\"Se ejecuto un Rollback\");\n} catch (MySQLTransactionRollbackException sqlE) {\nSystem.out.println(\"No se ejecuto un Rollback\");\nsqlE.printStackTrace();\n} catch (SQLException se) {\nse.printStackTrace();\n}\n}\nreturn false;\n} catch (SQLException e) {\nif (autocommit == false) {\ntry {\nconexion.rollback();\nSystem.out.println(\"Se ejecuto un Rollback\");\n} catch (MySQLTransactionRollbackException sqlE) {\nSystem.out.println(\"No se ejecuto un Rollback\");\nsqlE.printStackTrace();\n} catch (SQLException se) {\nse.printStackTrace();\n}\n}\ne.printStackTrace();\nreturn false;\n} finally {\ntry {\nif (st != null) {\nif (!st.isClosed()) {\nst.close();\n}\n}\nif (!conexion.isClosed()) {\nconexion.close();\n}\n} catch (NullPointerException ne) {\nne.printStackTrace();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n} else {\nthrow new IllegalArgumentException(\"No es una instruccion Delete\");\n}\n} else {\ntry {\nthrow new JMySQLException(\"Error Grave , notifique al departamento de Soporte Tecnico \\n\" + email);\n} catch (JMySQLException ex) {\nLogger.getLogger(JMySQL.class.getName()).log(Level.SEVERE, null, ex);\nreturn false;\n}\n}\n} else {\nthrow new IllegalArgumentException(\"No estan permitidas las MultiConsultas en este metodo\");\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1500836#465#593.java",
                        "__cluster__": 620
                },
                {
                        "id": "test_bigclonebench_data_14093044",
                        "content": "@Override\npublic boolean insert(String consulta, boolean autocommit, int transactionIsolation, Connection cx) throws SQLException {\nfilasInsert = 0;\nif (!consulta.contains(\";\")) {\nthis.tipoConsulta = new Scanner(consulta);\nif (this.tipoConsulta.hasNext()) {\nexecConsulta = this.tipoConsulta.next();\nif (execConsulta.equalsIgnoreCase(\"insert\")) {\nConnection conexion = cx;\nStatement st = null;\ntry {\nconexion.setAutoCommit(autocommit);\nif (transactionIsolation == 1 || transactionIsolation == 2 || transactionIsolation == 4 || transactionIsolation == 8) {\nconexion.setTransactionIsolation(transactionIsolation);\n} else {\nthrow new IllegalArgumentException(\"Valor invalido sobre TransactionIsolation,\\n TRANSACTION_NONE no es soportado por MySQL\");\n}\nst = (Statement) conexion.createStatement(ResultSetImpl.TYPE_SCROLL_SENSITIVE, ResultSetImpl.CONCUR_UPDATABLE);\nconexion.setReadOnly(false);\nfilasInsert = st.executeUpdate(consulta.trim(), Statement.RETURN_GENERATED_KEYS);\nif (filasInsert > -1) {\nif (autocommit == false) {\nconexion.commit();\n}\nreturn true;\n} else {\nreturn false;\n}\n} catch (MySQLIntegrityConstraintViolationException e) {\nSystem.out.println(\"Posible duplicacion de DATOS\");\nif (autocommit == false) {\ntry {\nconexion.rollback();\nSystem.out.println(\"Se ejecuto un Rollback\");\n} catch (MySQLTransactionRollbackException sqlE) {\nSystem.out.println(\"No se ejecuto un Rollback\");\nsqlE.printStackTrace();\n} catch (SQLException se) {\nse.printStackTrace();\n}\n}\ne.printStackTrace();\nreturn false;\n} catch (MySQLNonTransientConnectionException e) {\nif (autocommit == false) {\ntry {\nconexion.rollback();\nSystem.out.println(\"Se ejecuto un Rollback\");\n} catch (MySQLTransactionRollbackException sqlE) {\nSystem.out.println(\"No se ejecuto un Rollback\");\nsqlE.printStackTrace();\n} catch (SQLException se) {\nse.printStackTrace();\n}\n}\ne.printStackTrace();\nreturn false;\n} catch (MySQLDataException e) {\nSystem.out.println(\"Datos incorrectos\");\nif (autocommit == false) {\ntry {\nconexion.rollback();\nSystem.out.println(\"Se ejecuto un Rollback\");\n} catch (MySQLTransactionRollbackException sqlE) {\nSystem.out.println(\"No se ejecuto un Rollback\");\nsqlE.printStackTrace();\n} catch (SQLException se) {\nse.printStackTrace();\n}\n}\nreturn false;\n} catch (MySQLSyntaxErrorException e) {\nSystem.out.println(\"Error en la sintaxis de la Consulta en MySQL\");\nif (autocommit == false) {\ntry {\nconexion.rollback();\nSystem.out.println(\"Se ejecuto un Rollback\");\n} catch (MySQLTransactionRollbackException sqlE) {\nSystem.out.println(\"No se ejecuto un Rollback\");\nsqlE.printStackTrace();\n} catch (SQLException se) {\nse.printStackTrace();\n}\n}\nreturn false;\n} catch (SQLException e) {\nif (autocommit == false) {\ntry {\nconexion.rollback();\nSystem.out.println(\"Se ejecuto un Rollback\");\n} catch (MySQLTransactionRollbackException sqlE) {\nSystem.out.println(\"No se ejecuto un Rollback\");\nsqlE.printStackTrace();\n} catch (SQLException se) {\nse.printStackTrace();\n}\n}\ne.printStackTrace();\nreturn false;\n} finally {\ntry {\nif (st != null) {\nif (!st.isClosed()) {\nst.close();\n}\n}\nif (!conexion.isClosed()) {\nconexion.close();\n}\n} catch (NullPointerException ne) {\nne.printStackTrace();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n} else {\nthrow new IllegalArgumentException(\"No es una instruccion Insert\");\n}\n} else {\ntry {\nthrow new JMySQLException(\"Error Grave , notifique al departamento de Soporte Tecnico \\n\" + email);\n} catch (JMySQLException ex) {\nLogger.getLogger(JMySQL.class.getName()).log(Level.SEVERE, null, ex);\nreturn false;\n}\n}\n} else {\nthrow new IllegalArgumentException(\"No estan permitidas las MultiConsultas en este metodo\");\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 620
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_19070132",
                        "content": "<reponame>suzhengquan/MBCAF\npackage com.MBCAF.common;\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\npublic class CalcUtil {\nprivate static CalcUtil sEncrypt;\nprivate CalcUtil(){\n}\npublic static CalcUtil instance(){\nif(null == sEncrypt){\nsEncrypt = new CalcUtil();\n}\nreturn sEncrypt;\n}\n/**\n*/\npublic String toMD5(String str) {\nMessageDigest messageDigest = null;\ntry {\nmessageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.reset();\nmessageDigest.update(str.getBytes(\"UTF-8\"));\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"NoSuchAlgorithmException caught!\");\nSystem.exit(-1);\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nbyte[] byteArray = messageDigest.digest();\nStringBuffer md5StrBuff = new StringBuffer();\nfor (int i = 0; i < byteArray.length; i++) {\nif (Integer.toHexString(0xFF & byteArray[i]).length() == 1)\nmd5StrBuff.append(\"0\").append(Integer.toHexString(0xFF & byteArray[i]));\nelse\nmd5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));\n}\nreturn md5StrBuff.toString();\n}\n}",
                        "max_stars_count": 2,
                        "max_stars_repo_name": "suzhengquan/MBCAF",
                        "max_stars_repo_path": "Client_Android/app/src/main/java/com/MBCAF/common/CalcUtil.java",
                        "__cluster__": 405
                },
                {
                        "id": "test_bigclonebench_data_20929570",
                        "content": "public static String toMd5(String str) {\nMessageDigest messageDigest = null;\ntry {\nmessageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.reset();\nmessageDigest.update(str.getBytes(\"UTF-8\"));\n} catch (NoSuchAlgorithmException e) {\nSystem.out.println(\"NoSuchAlgorithmException caught!\");\nSystem.exit(-1);\n} catch (UnsupportedEncodingException e) {\ne.printStackTrace();\n}\nbyte[] byteArray = messageDigest.digest();\nStringBuffer md5StrBuff = new StringBuffer();\nfor (int i = 0; i < byteArray.length; i++) {\nif (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(\"0\").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));\n}\nreturn md5StrBuff.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 405
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_4653319",
                        "content": "private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {\nInputStream in = downloadData(s3key);\nif (in == null) {\nthrow new IOException(\"No data found\");\n}\nin = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));\nFile temp = File.createTempFile(\"dirsync\", null);\nFileOutputStream fout = new FileOutputStream(temp);\ntry {\nIOUtils.copy(in, fout);\nif (target.exists()) {\ntarget.delete();\n}\nIOUtils.closeQuietly(fout);\nIOUtils.closeQuietly(in);\nFileUtils.moveFile(temp, target);\n} catch (IOException e) {\nfetchStream(in);\nthrow e;\n} finally {\nIOUtils.closeQuietly(fout);\nIOUtils.closeQuietly(in);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#138870#492#515.java",
                        "__cluster__": 125
                },
                {
                        "id": "test_bigclonebench_data_23370621",
                        "content": "private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {\nInputStream in = downloadData(s3key);\nif (in == null) {\nthrow new IOException(\"No data found\");\n}\nin = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));\nFile temp = File.createTempFile(\"dirsync\", null);\nFileOutputStream fout = new FileOutputStream(temp);\ntry {\nIOUtils.copy(in, fout);\nif (target.exists()) {\ntarget.delete();\n}\nIOUtils.closeQuietly(fout);\nIOUtils.closeQuietly(in);\nFileUtils.moveFile(temp, target);\n} catch (IOException e) {\nfetchStream(in);\nthrow e;\n} finally {\nIOUtils.closeQuietly(fout);\nIOUtils.closeQuietly(in);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 125
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_1097146",
                        "content": "public static String getMessageDigest(String input) {\nif (input == null) {\nlog.warn(\"Returning SHA-1 null value for null input\");\nreturn null;\n}\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nmd.update(input.getBytes(\"UTF-8\"));\nbyte[] bytes = md.digest();\nreturn new BASE64Encoder().encode(bytes);\n} catch (NoSuchAlgorithmException e) {\nthrow new IllegalStateException(e.getMessage());\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(e.getMessage());\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 139
                },
                {
                        "id": "pretrain_java_data_4790268",
                        "content": "public static String getMessageDigest(String input) {\nif (input == null) {\nlog.warn(\"Returning SHA-1 null value for null input\");\nreturn null;\n}\ntry {\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nmd.update(input.getBytes(\"UTF-8\"));\nbyte[] bytes = md.digest();\nreturn new BASE64Encoder().encode(bytes);\n} catch (NoSuchAlgorithmException e) {\nthrow new IllegalStateException(e.getMessage());\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(e.getMessage());\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1279859#602#617.java",
                        "__cluster__": 139
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5998352",
                        "content": "@Test\npublic void testStandardTee() throws Exception {\nfinal String reference = \"test\";\nfinal Reader source = new StringReader(reference);\nfinal StringWriter destination1 = new StringWriter();\nfinal StringWriter destination2 = new StringWriter();\nfinal TeeWriter tee = new TeeWriter(destination1, destination2);\norg.apache.commons.io.IOUtils.copy(source, tee);\ntee.close();\nassertEquals(\"the two string are equals\", reference, destination1.toString());\nassertEquals(\"the two string are equals\", reference, destination2.toString());\nassertEquals(\"byte count\", reference.length(), tee.getSize());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 178
                },
                {
                        "id": "pretrain_java_data_6210717",
                        "content": "@Test\npublic void testStandardTee() throws Exception {\nfinal String reference = \"test\";\nfinal Reader source = new StringReader(reference);\nfinal StringWriter destination1 = new StringWriter();\nfinal StringWriter destination2 = new StringWriter();\nfinal TeeWriter tee = new TeeWriter(destination1, destination2);\norg.apache.commons.io.IOUtils.copy(source, tee);\ntee.close();\nassertEquals(\"the two string are equals\", reference, destination1.toString());\nassertEquals(\"the two string are equals\", reference, destination2.toString());\nassertEquals(\"byte count\", reference.length(), tee.getSize());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2611054#45#57.java",
                        "__cluster__": 178
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4647863",
                        "content": "private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {\nDocument dom = null;\ntry {\nDocumentBuilderFactory f = DocumentBuilderFactory.newInstance();\nf.setNamespaceAware(false);\nf.setCoalescing(true);\nf.setIgnoringComments(true);\nf.setValidating(false);\nDocumentBuilder b = f.newDocumentBuilder();\ndom = b.parse(new InputSource(xmlIn));\n} catch (ParserConfigurationException err) {\nthrow new IOException(err);\n}\nElement root = dom.getDocumentElement();\nif (root == null) throw new SAXException(\"Not root in document\");\nAttr att = root.getAttributeNode(\"label\");\nif (att == null) root.setAttribute(\"label\", \"Wikipedia\");\nMenu menu = parseMenu(root);\nmenu.id = \"menuWikipedia\";\nZipOutputStream zout = new ZipOutputStream(out);\nString content = ResourceUtils.getContent(XUL4Wikipedia.class, \"chrome.manifest\");\naddEntry(zout, \"chrome.manifest\", content);\ncontent = ResourceUtils.getContent(XUL4Wikipedia.class, \"install.rdf\");\naddEntry(zout, \"install.rdf\", content);\ncontent = ResourceUtils.getContent(XUL4Wikipedia.class, \"library.js\");\naddDir(zout, \"chrome/\");\naddDir(zout, \"chrome/content/\");\naddDir(zout, \"chrome/skin/\");\nString signal = \"/*INSERT_CMD_HERE*/\";\nint n = content.indexOf(signal);\nif (n == -1) throw new RuntimeException(\"where is \" + signal + \" ??\");\nZipEntry entry = new ZipEntry(\"chrome/content/library.js\");\nzout.putNextEntry(entry);\nPrintWriter pout = new PrintWriter(zout);\npout.write(content.substring(0, n));\nmenu.toJS(pout);\npout.write(content.substring(n + signal.length()));\npout.flush();\nzout.closeEntry();\nentry = new ZipEntry(\"chrome/content/menu.xul\");\nzout.putNextEntry(entry);\npout = new PrintWriter(zout);\npout.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\npout.println(\"<overlay id=\\\"xul4wikipedia\\\" xmlns=\\\"\" + XUL.NS + \"\\\">\");\npout.println(\"<script src=\\\"library.js\\\"/>\");\npout.println(\"<popup id=\\\"contentAreaContextMenu\\\">\");\npout.println(\"<menuseparator/>\");\nmenu.toXUL(pout);\npout.println(\"</popup>\");\npout.println(\"</overlay>\");\npout.flush();\nzout.closeEntry();\nInputStream png = XUL4Wikipedia.class.getResourceAsStream(\"32px-Wikipedia-logo.png\");\nif (png == null) throw new IOException(\"Cannot get icon\");\nentry = new ZipEntry(\"chrome/skin/wikipedia.png\");\nzout.putNextEntry(entry);\nIOUtils.copyTo(png, zout);\nzout.closeEntry();\nzout.finish();\nzout.flush();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1910419#186#246.java",
                        "__cluster__": 381
                },
                {
                        "id": "test_bigclonebench_data_13333160",
                        "content": "private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {\nDocument dom = null;\ntry {\nDocumentBuilderFactory f = DocumentBuilderFactory.newInstance();\nf.setNamespaceAware(false);\nf.setCoalescing(true);\nf.setIgnoringComments(true);\nf.setValidating(false);\nDocumentBuilder b = f.newDocumentBuilder();\ndom = b.parse(new InputSource(xmlIn));\n} catch (ParserConfigurationException err) {\nthrow new IOException(err);\n}\nElement root = dom.getDocumentElement();\nif (root == null) throw new SAXException(\"Not root in document\");\nAttr att = root.getAttributeNode(\"label\");\nif (att == null) root.setAttribute(\"label\", \"Wikipedia\");\nMenu menu = parseMenu(root);\nmenu.id = \"menuWikipedia\";\nZipOutputStream zout = new ZipOutputStream(out);\nString content = ResourceUtils.getContent(XUL4Wikipedia.class, \"chrome.manifest\");\naddEntry(zout, \"chrome.manifest\", content);\ncontent = ResourceUtils.getContent(XUL4Wikipedia.class, \"install.rdf\");\naddEntry(zout, \"install.rdf\", content);\ncontent = ResourceUtils.getContent(XUL4Wikipedia.class, \"library.js\");\naddDir(zout, \"chrome/\");\naddDir(zout, \"chrome/content/\");\naddDir(zout, \"chrome/skin/\");\nString signal = \"/*INSERT_CMD_HERE*/\";\nint n = content.indexOf(signal);\nif (n == -1) throw new RuntimeException(\"where is \" + signal + \" ??\");\nZipEntry entry = new ZipEntry(\"chrome/content/library.js\");\nzout.putNextEntry(entry);\nPrintWriter pout = new PrintWriter(zout);\npout.write(content.substring(0, n));\nmenu.toJS(pout);\npout.write(content.substring(n + signal.length()));\npout.flush();\nzout.closeEntry();\nentry = new ZipEntry(\"chrome/content/menu.xul\");\nzout.putNextEntry(entry);\npout = new PrintWriter(zout);\npout.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\npout.println(\"<overlay id=\\\"xul4wikipedia\\\" xmlns=\\\"\" + XUL.NS + \"\\\">\");\npout.println(\"<script src=\\\"library.js\\\"/>\");\npout.println(\"<popup id=\\\"contentAreaContextMenu\\\">\");\npout.println(\"<menuseparator/>\");\nmenu.toXUL(pout);\npout.println(\"</popup>\");\npout.println(\"</overlay>\");\npout.flush();\nzout.closeEntry();\nInputStream png = XUL4Wikipedia.class.getResourceAsStream(\"32px-Wikipedia-logo.png\");\nif (png == null) throw new IOException(\"Cannot get icon\");\nentry = new ZipEntry(\"chrome/skin/wikipedia.png\");\nzout.putNextEntry(entry);\nIOUtils.copyTo(png, zout);\nzout.closeEntry();\nzout.finish();\nzout.flush();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 381
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_6558022",
                        "content": "public static String CheckUrl(String urlvalue) {\nString inputLine = \"\";\ntry {\nURL url = new URL(urlvalue);\nHttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\nBufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\ninputLine = in.readLine().toString();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn inputLine;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 384
                },
                {
                        "id": "pretrain_java_data_4652756",
                        "content": "public static String CheckUrl(String urlvalue) {\nString inputLine = \"\";\ntry {\nURL url = new URL(urlvalue);\nHttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\nBufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\ninputLine = in.readLine().toString();\n} catch (Exception e) {\ne.printStackTrace();\n}\nreturn inputLine;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2660801#32#43.java",
                        "__cluster__": 384
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4738825",
                        "content": "@Override\npublic void export(final Library lib) throws PluginException {\ntry {\nnew Thread(new Runnable() {\npublic void run() {\nformatter.format(lib, writer);\nwriter.flush();\nwriter.close();\n}\n}).start();\nftp.connect(host);\nif (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\nftp.disconnect();\nthrow new PluginException(\"Unable to connect to FTP\");\n}\nftp.login(user, pass);\nftp.pasv();\nftp.changeWorkingDirectory(dir);\nftp.storeFile(file, inStream);\nftp.logout();\n} catch (SocketException e) {\nthrow new PluginException(e);\n} catch (IOException e) {\nthrow new PluginException(e);\n} finally {\nif (ftp.isConnected()) {\ntry {\nftp.disconnect();\n} catch (IOException e) {\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#139501#40#73.java",
                        "__cluster__": 734
                },
                {
                        "id": "test_bigclonebench_data_1986417",
                        "content": "@Override\npublic void export(final Library lib) throws PluginException {\ntry {\nnew Thread(new Runnable() {\npublic void run() {\nformatter.format(lib, writer);\nwriter.flush();\nwriter.close();\n}\n}).start();\nftp.connect(host);\nif (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\nftp.disconnect();\nthrow new PluginException(\"Unable to connect to FTP\");\n}\nftp.login(user, pass);\nftp.pasv();\nftp.changeWorkingDirectory(dir);\nftp.storeFile(file, inStream);\nftp.logout();\n} catch (SocketException e) {\nthrow new PluginException(e);\n} catch (IOException e) {\nthrow new PluginException(e);\n} finally {\nif (ftp.isConnected()) {\ntry {\nftp.disconnect();\n} catch (IOException e) {\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 734
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4668000",
                        "content": "<reponame>cragkhit/elasticsearch<gh_stars>10-100\npublic String execute() {\nString dir = \"E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\\";\nHomeMap map = new HomeMap();\nmap.setDescription(description);\nInteger id = homeMapDao.saveHomeMap(map);\nFileOutputStream fos;\ntry {\nfos = new FileOutputStream(dir + id);\nIOUtils.copy(new FileInputStream(imageFile), fos);\nIOUtils.closeQuietly(fos);\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn list();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#304309#39#55.java",
                        "__cluster__": 814
                },
                {
                        "id": "test_bigclonebench_data_7908169",
                        "content": "public String execute() {\nString dir = \"E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\\";\nHomeMap map = new HomeMap();\nmap.setDescription(description);\nInteger id = homeMapDao.saveHomeMap(map);\nFileOutputStream fos;\ntry {\nfos = new FileOutputStream(dir + id);\nIOUtils.copy(new FileInputStream(imageFile), fos);\nIOUtils.closeQuietly(fos);\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n}\nreturn list();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 814
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_4655406",
                        "content": "private void copy(File source, File target) throws IOException {\nFileChannel in = (new FileInputStream(source)).getChannel();\nFileChannel out = (new FileOutputStream(target)).getChannel();\nin.transferTo(0, source.length(), out);\nin.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#279603#40#46.java",
                        "__cluster__": 181
                },
                {
                        "id": "test_bigclonebench_data_20019847",
                        "content": "public static void copyFile(File source, File target) throws IOException {\nFileChannel in = (new FileInputStream(source)).getChannel();\nFileChannel out = (new FileOutputStream(target)).getChannel();\nin.transferTo(0, source.length(), out);\nin.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 181
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_4655406",
                        "content": "private void copy(File source, File target) throws IOException {\nFileChannel in = (new FileInputStream(source)).getChannel();\nFileChannel out = (new FileOutputStream(target)).getChannel();\nin.transferTo(0, source.length(), out);\nin.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#279603#40#46.java",
                        "__cluster__": 181
                },
                {
                        "id": "test_bigclonebench_data_22046596",
                        "content": "public void copy(File s, File t) throws IOException {\nFileChannel in = (new FileInputStream(s)).getChannel();\nFileChannel out = (new FileOutputStream(t)).getChannel();\nin.transferTo(0, s.length(), out);\nin.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 181
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_14691829",
                        "content": "public static String getMD5Hash(String in) {\nStringBuffer result = new StringBuffer(32);\ntry {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(in.getBytes());\nFormatter f = new Formatter(result);\nfor (byte b : md5.digest()) {\nf.format(\"%02x\", b);\n}\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n}\nreturn result.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 104
                },
                {
                        "id": "pretrain_java_data_4682223",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static String getMD5Hash(String in) {\nStringBuffer result = new StringBuffer(32);\ntry {\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(in.getBytes());\nFormatter f = new Formatter(result);\nfor (byte b : md5.digest()) {\nf.format(\"%02x\", b);\n}\n} catch (NoSuchAlgorithmException ex) {\nex.printStackTrace();\n}\nreturn result.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2373450#297#310.java",
                        "__cluster__": 104
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9081749",
                        "content": "private static String encrypt(String password, String encryptType) {\ntry {\nMessageDigest md = MessageDigest.getInstance(encryptType);\nmd.update(password.getBytes());\nbyte[] hash = md.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < hash.length; i++) {\nif ((0xff & hash[i]) < 0x10) {\nhexString.append(\"0\" + Integer.toHexString((0xFF & hash[i])));\n} else {\nhexString.append(Integer.toHexString(0xFF & hash[i]));\n}\n}\npassword = hexString.toString();\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nreturn password.toUpperCase();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 652
                },
                {
                        "id": "pretrain_java_data_4781685",
                        "content": "<filename>references/bcb_chosen_clones/selected#1071211#12#30.java\nprivate static String encrypt(String password, String encryptType) {\ntry {\nMessageDigest md = MessageDigest.getInstance(encryptType);\nmd.update(password.getBytes());\nbyte[] hash = md.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i = 0; i < hash.length; i++) {\nif ((0xff & hash[i]) < 0x10) {\nhexString.append(\"0\" + Integer.toHexString((0xFF & hash[i])));\n} else {\nhexString.append(Integer.toHexString(0xFF & hash[i]));\n}\n}\npassword = hexString.toString();\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\nreturn password.toUpperCase();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1071211#12#30.java",
                        "__cluster__": 652
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_4593011",
                        "content": "private void loadDDL() throws IOException {\ntry {\nconn.createStatement().executeQuery(\"SELECT * FROM overrides\").close();\n} catch (SQLException e) {\nStatement stmt = null;\nif (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {\nLOG.fatal(SQL_ERROR, e);\nthrow new IOException(\"Error on initial data store read\", e);\n}\nString[] qry = { \"CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)\", \"CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))\", \"CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))\", \"INSERT INTO settings (var, val) VALUES ('schema', '1')\" };\ntry {\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nfor (String q : qry) stmt.executeUpdate(q);\nconn.commit();\n} catch (SQLException e2) {\ntry {\nconn.rollback();\n} catch (SQLException e3) {\nLOG.fatal(SQL_ERROR, e3);\n}\nLOG.fatal(SQL_ERROR, e2);\nthrow new IOException(\"Error initializing data store\", e2);\n} finally {\nif (stmt != null) {\ntry {\nstmt.close();\n} catch (SQLException e4) {\nLOG.fatal(SQL_ERROR, e4);\nthrow new IOException(\"Unable to cleanup data store resources\", e4);\n}\n}\ntry {\nconn.setAutoCommit(true);\n} catch (SQLException e3) {\nLOG.fatal(SQL_ERROR, e3);\nthrow new IOException(\"Unable to reset data store auto commit\", e3);\n}\n}\n}\nreturn;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 34
                },
                {
                        "id": "pretrain_java_data_7835583",
                        "content": "private void loadDDL() throws IOException {\ntry {\nconn.createStatement().executeQuery(\"SELECT * FROM overrides\").close();\n} catch (SQLException e) {\nStatement stmt = null;\nif (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {\nLOG.fatal(SQL_ERROR, e);\nthrow new IOException(\"Error on initial data store read\", e);\n}\nString[] qry = { \"CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)\", \"CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))\", \"CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))\", \"INSERT INTO settings (var, val) VALUES ('schema', '1')\" };\ntry {\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nfor (String q : qry) stmt.executeUpdate(q);\nconn.commit();\n} catch (SQLException e2) {\ntry {\nconn.rollback();\n} catch (SQLException e3) {\nLOG.fatal(SQL_ERROR, e3);\n}\nLOG.fatal(SQL_ERROR, e2);\nthrow new IOException(\"Error initializing data store\", e2);\n} finally {\nif (stmt != null) {\ntry {\nstmt.close();\n} catch (SQLException e4) {\nLOG.fatal(SQL_ERROR, e4);\nthrow new IOException(\"Unable to cleanup data store resources\", e4);\n}\n}\ntry {\nconn.setAutoCommit(true);\n} catch (SQLException e3) {\nLOG.fatal(SQL_ERROR, e3);\nthrow new IOException(\"Unable to reset data store auto commit\", e3);\n}\n}\n}\nreturn;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#647988#185#226.java",
                        "__cluster__": 34
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6248108",
                        "content": "public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {\nString name = metadata.get(Metadata.RESOURCE_NAME_KEY);\nif (name != null && wanted.containsKey(name)) {\nFileOutputStream out = new FileOutputStream(wanted.get(name));\nIOUtils.copy(stream, out);\nout.close();\n} else {\nif (downstreamParser != null) {\ndownstreamParser.parse(stream, handler, metadata, context);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#219671#48#59.java",
                        "__cluster__": 733
                },
                {
                        "id": "test_bigclonebench_data_15797402",
                        "content": "public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {\nString name = metadata.get(Metadata.RESOURCE_NAME_KEY);\nif (name != null && wanted.containsKey(name)) {\nFileOutputStream out = new FileOutputStream(wanted.get(name));\nIOUtils.copy(stream, out);\nout.close();\n} else {\nif (downstreamParser != null) {\ndownstreamParser.parse(stream, handler, metadata, context);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 733
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6345725",
                        "content": "public void testNetworkHTTP() {\nLog.v(\"Test\", \"[*] testNetworkHTTP()\");\nURL url = null;\nHttpURLConnection urlConnection = null;\ntry {\nurl = new URL(\"http://code.google.com/p/droidbox/\");\nurlConnection = (HttpURLConnection) url.openConnection();\nBufferedReader rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n@SuppressWarnings(\"unused\") String line = \"\";\nwhile ((line = rd.readLine()) != null) ;\nurl = new URL(\"http://pjlantz.com/imei.php?imei=\" + hashedImei);\nurlConnection = (HttpURLConnection) url.openConnection();\nrd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\nwhile ((line = rd.readLine()) != null) ;\nurl = new URL(\"http://pjlantz.com/phone.php?phone=\" + phoneNbr);\nurlConnection = (HttpURLConnection) url.openConnection();\nrd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\nwhile ((line = rd.readLine()) != null) ;\nurl = new URL(\"http://pjlantz.com/msg.php?msg=\" + msg.replace(\" \", \"+\"));\nurlConnection = (HttpURLConnection) url.openConnection();\nrd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\nurl = new URL(\"http://pjlantz.com/file.php?file=\" + fileContent.replace(\" \", \"+\"));\nurlConnection = (HttpURLConnection) url.openConnection();\nrd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\nwhile ((line = rd.readLine()) != null) ;\nurl = new URL(\"http://pjlantz.com/app.php?installed=\" + installedApps.replace(\" \", \"+\"));\nurlConnection = (HttpURLConnection) url.openConnection();\nrd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\nwhile ((line = rd.readLine()) != null) ;\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nurlConnection.disconnect();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1584180#283#317.java",
                        "__cluster__": 780
                },
                {
                        "id": "test_bigclonebench_data_5951610",
                        "content": "public void testNetworkHTTP() {\nLog.v(\"Test\", \"[*] testNetworkHTTP()\");\nURL url = null;\nHttpURLConnection urlConnection = null;\ntry {\nurl = new URL(\"http://code.google.com/p/droidbox/\");\nurlConnection = (HttpURLConnection) url.openConnection();\nBufferedReader rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n@SuppressWarnings(\"unused\") String line = \"\";\nwhile ((line = rd.readLine()) != null) ;\nurl = new URL(\"http://pjlantz.com/imei.php?imei=\" + hashedImei);\nurlConnection = (HttpURLConnection) url.openConnection();\nrd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\nwhile ((line = rd.readLine()) != null) ;\nurl = new URL(\"http://pjlantz.com/phone.php?phone=\" + phoneNbr);\nurlConnection = (HttpURLConnection) url.openConnection();\nrd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\nwhile ((line = rd.readLine()) != null) ;\nurl = new URL(\"http://pjlantz.com/msg.php?msg=\" + msg.replace(\" \", \"+\"));\nurlConnection = (HttpURLConnection) url.openConnection();\nrd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\nurl = new URL(\"http://pjlantz.com/file.php?file=\" + fileContent.replace(\" \", \"+\"));\nurlConnection = (HttpURLConnection) url.openConnection();\nrd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\nwhile ((line = rd.readLine()) != null) ;\nurl = new URL(\"http://pjlantz.com/app.php?installed=\" + installedApps.replace(\" \", \"+\"));\nurlConnection = (HttpURLConnection) url.openConnection();\nrd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\nwhile ((line = rd.readLine()) != null) ;\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nurlConnection.disconnect();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 780
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6345460",
                        "content": "<reponame>cragkhit/elasticsearch\nint doOne(int bid, int tid, int aid, int delta) {\nint aBalance = 0;\nif (Conn == null) {\nbench.incrementFailedTransactionCount();\nreturn 0;\n}\ntry {\nif (Benchmark.prepared_stmt) {\npstmt1.setInt(1, delta);\npstmt1.setInt(2, aid);\npstmt1.executeUpdate();\npstmt1.clearWarnings();\npstmt2.setInt(1, aid);\nResultSet RS = pstmt2.executeQuery();\npstmt2.clearWarnings();\nwhile (RS.next()) {\naBalance = RS.getInt(1);\n}\npstmt3.setInt(1, delta);\npstmt3.setInt(2, tid);\npstmt3.executeUpdate();\npstmt3.clearWarnings();\npstmt4.setInt(1, delta);\npstmt4.setInt(2, bid);\npstmt4.executeUpdate();\npstmt4.clearWarnings();\npstmt5.setInt(1, tid);\npstmt5.setInt(2, bid);\npstmt5.setInt(3, aid);\npstmt5.setInt(4, delta);\npstmt5.executeUpdate();\npstmt5.clearWarnings();\n} else {\nStatement Stmt = Conn.createStatement();\nString Query = \"UPDATE accounts\";\nQuery += \" SET Abalance = Abalance + \" + delta;\nQuery += \" WHERE Aid = \" + aid;\nint res = Stmt.executeUpdate(Query);\nStmt.clearWarnings();\nQuery = \"SELECT Abalance\";\nQuery += \" FROM accounts\";\nQuery += \" WHERE Aid = \" + aid;\nResultSet RS = Stmt.executeQuery(Query);\nStmt.clearWarnings();\nwhile (RS.next()) {\naBalance = RS.getInt(1);\n}\nQuery = \"UPDATE tellers\";\nQuery += \" SET Tbalance = Tbalance + \" + delta;\nQuery += \" WHERE Tid = \" + tid;\nStmt.executeUpdate(Query);\nStmt.clearWarnings();\nQuery = \"UPDATE branches\";\nQuery += \" SET Bbalance = Bbalance + \" + delta;\nQuery += \" WHERE Bid = \" + bid;\nStmt.executeUpdate(Query);\nStmt.clearWarnings();\nQuery = \"INSERT INTO history(Tid, Bid, Aid, delta)\";\nQuery += \" VALUES (\";\nQuery += tid + \",\";\nQuery += bid + \",\";\nQuery += aid + \",\";\nQuery += delta + \")\";\nStmt.executeUpdate(Query);\nStmt.clearWarnings();\nStmt.close();\n}\nif (Benchmark.transactions) {\nConn.commit();\n}\nreturn aBalance;\n} catch (java.lang.Exception e) {\nif (Benchmark.verbose) {\nSystem.out.println(\"Transaction failed: \" + e.getMessage());\ne.printStackTrace();\n}\nbench.incrementFailedTransactionCount();\nif (Benchmark.transactions) {\ntry {\nConn.rollback();\n} catch (SQLException e1) {\n}\n}\n}\nreturn 0;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1859003#581#666.java",
                        "__cluster__": 66
                },
                {
                        "id": "test_bigclonebench_data_1586662",
                        "content": "int doOne(int bid, int tid, int aid, int delta) {\nint aBalance = 0;\nif (Conn == null) {\nbench.incrementFailedTransactionCount();\nreturn 0;\n}\ntry {\nif (Benchmark.prepared_stmt) {\npstmt1.setInt(1, delta);\npstmt1.setInt(2, aid);\npstmt1.executeUpdate();\npstmt1.clearWarnings();\npstmt2.setInt(1, aid);\nResultSet RS = pstmt2.executeQuery();\npstmt2.clearWarnings();\nwhile (RS.next()) {\naBalance = RS.getInt(1);\n}\npstmt3.setInt(1, delta);\npstmt3.setInt(2, tid);\npstmt3.executeUpdate();\npstmt3.clearWarnings();\npstmt4.setInt(1, delta);\npstmt4.setInt(2, bid);\npstmt4.executeUpdate();\npstmt4.clearWarnings();\npstmt5.setInt(1, tid);\npstmt5.setInt(2, bid);\npstmt5.setInt(3, aid);\npstmt5.setInt(4, delta);\npstmt5.executeUpdate();\npstmt5.clearWarnings();\n} else {\nStatement Stmt = Conn.createStatement();\nString Query = \"UPDATE accounts\";\nQuery += \" SET Abalance = Abalance + \" + delta;\nQuery += \" WHERE Aid = \" + aid;\nint res = Stmt.executeUpdate(Query);\nStmt.clearWarnings();\nQuery = \"SELECT Abalance\";\nQuery += \" FROM accounts\";\nQuery += \" WHERE Aid = \" + aid;\nResultSet RS = Stmt.executeQuery(Query);\nStmt.clearWarnings();\nwhile (RS.next()) {\naBalance = RS.getInt(1);\n}\nQuery = \"UPDATE tellers\";\nQuery += \" SET Tbalance = Tbalance + \" + delta;\nQuery += \" WHERE Tid = \" + tid;\nStmt.executeUpdate(Query);\nStmt.clearWarnings();\nQuery = \"UPDATE branches\";\nQuery += \" SET Bbalance = Bbalance + \" + delta;\nQuery += \" WHERE Bid = \" + bid;\nStmt.executeUpdate(Query);\nStmt.clearWarnings();\nQuery = \"INSERT INTO history(Tid, Bid, Aid, delta)\";\nQuery += \" VALUES (\";\nQuery += tid + \",\";\nQuery += bid + \",\";\nQuery += aid + \",\";\nQuery += delta + \")\";\nStmt.executeUpdate(Query);\nStmt.clearWarnings();\nStmt.close();\n}\nif (Benchmark.transactions) {\nConn.commit();\n}\nreturn aBalance;\n} catch (java.lang.Exception e) {\nif (Benchmark.verbose) {\nSystem.out.println(\"Transaction failed: \" + e.getMessage());\ne.printStackTrace();\n}\nbench.incrementFailedTransactionCount();\nif (Benchmark.transactions) {\ntry {\nConn.rollback();\n} catch (SQLException e1) {\n}\n}\n}\nreturn 0;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 66
                },
                [
                        {
                                "real_dup": 3
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6228664",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void main(String[] args) throws IOException {\nString urltext = \"http://www.vogella.de\";\nURL url = new URL(urltext);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\nSystem.out.println(inputLine);\n}\nin.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#759729#10#19.java",
                        "__cluster__": 653
                },
                {
                        "id": "test_bigclonebench_data_9267602",
                        "content": "public static void main(String[] args) throws IOException {\nString urltext = \"http://www.vogella.de\";\nURL url = new URL(urltext);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\nSystem.out.println(inputLine);\n}\nin.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 653
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_20920051",
                        "content": "public static void copyTo(File source, File dest) {\nif (source.isHidden()) ; else if (source.isDirectory()) {\nFile temp = new File(dest.getPath() + \"/\" + source.getName());\ntemp.mkdir();\nfor (File sel : source.listFiles()) copyTo(sel, temp);\n} else {\ntry {\nFile tempDest = new File(dest.getPath() + \"/\" + source.getName());\ntempDest.createNewFile();\nFileChannel sourceCh = new FileInputStream(source).getChannel();\nFileChannel destCh = new FileOutputStream(tempDest).getChannel();\nsourceCh.transferTo(0, sourceCh.size(), destCh);\nsourceCh.close();\ndestCh.close();\n} catch (IOException ex) {\nLogger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 737
                },
                {
                        "id": "pretrain_java_data_6241253",
                        "content": "<reponame>cragkhit/elasticsearch\npublic static void copyTo(File source, File dest) {\nif (source.isHidden()) ; else if (source.isDirectory()) {\nFile temp = new File(dest.getPath() + \"/\" + source.getName());\ntemp.mkdir();\nfor (File sel : source.listFiles()) copyTo(sel, temp);\n} else {\ntry {\nFile tempDest = new File(dest.getPath() + \"/\" + source.getName());\ntempDest.createNewFile();\nFileChannel sourceCh = new FileInputStream(source).getChannel();\nFileChannel destCh = new FileOutputStream(tempDest).getChannel();\nsourceCh.transferTo(0, sourceCh.size(), destCh);\nsourceCh.close();\ndestCh.close();\n} catch (IOException ex) {\nLogger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2035905#71#89.java",
                        "__cluster__": 737
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_6320864",
                        "content": "public static void copy(File source, File destination) throws IOException {\nInputStream in = new FileInputStream(source);\nOutputStream out = new FileOutputStream(destination);\nbyte[] buffer = new byte[1024];\nint len;\nwhile ((len = in.read(buffer)) > 0) out.write(buffer, 0, len);\nin.close();\nout.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#836722#118#126.java",
                        "__cluster__": 206
                },
                {
                        "id": "test_bigclonebench_data_17791385",
                        "content": "public static void copyFile(File src, File dst) throws IOException {\nInputStream in = new FileInputStream(src);\nOutputStream out = new FileOutputStream(dst);\nbyte[] buf = new byte[1024];\nint len;\nwhile ((len = in.read(buf)) > 0) out.write(buf, 0, len);\nin.close();\nout.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 206
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_7875954",
                        "content": "private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {\nif (file.isDirectory()) {\nFile[] files = file.listFiles();\nfor (File file2 : files) {\nrecurseFiles(root, file2, zaos, absolute);\n}\n} else if ((!file.getName().endsWith(\".zip\")) && (!file.getName().endsWith(\".ZIP\"))) {\nString filename = null;\nif (absolute) {\nfilename = file.getAbsolutePath().substring(root.getAbsolutePath().length());\n} else {\nfilename = file.getName();\n}\nZipArchiveEntry zae = new ZipArchiveEntry(filename);\nzae.setSize(file.length());\nzaos.putArchiveEntry(zae);\nFileInputStream fis = new FileInputStream(file);\nIOUtils.copy(fis, zaos);\nzaos.closeArchiveEntry();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2283235#71#91.java",
                        "__cluster__": 209
                },
                {
                        "id": "test_bigclonebench_data_19251426",
                        "content": "private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {\nif (file.isDirectory()) {\nFile[] files = file.listFiles();\nfor (File file2 : files) {\nrecurseFiles(root, file2, zaos, absolute);\n}\n} else if ((!file.getName().endsWith(\".zip\")) && (!file.getName().endsWith(\".ZIP\"))) {\nString filename = null;\nif (absolute) {\nfilename = file.getAbsolutePath().substring(root.getAbsolutePath().length());\n} else {\nfilename = file.getName();\n}\nZipArchiveEntry zae = new ZipArchiveEntry(filename);\nzae.setSize(file.length());\nzaos.putArchiveEntry(zae);\nFileInputStream fis = new FileInputStream(file);\nIOUtils.copy(fis, zaos);\nzaos.closeArchiveEntry();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 209
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_12146394",
                        "content": "public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {\nif (key == null || key.length == 0) {\nthrow new IllegalArgumentException(\"Argument 'key' cannot be null or an empty array.\");\n}\nif (salt == null || salt.length == 0) {\nthrow new IllegalArgumentException(\"Argument 'salt' cannot be null or an empty array.\");\n}\nfinal MessageDigest _md = MessageDigest.getInstance(\"MD5\");\n_md.update(key);\n_md.update(MAGIC.getBytes());\n_md.update(salt);\nfinal MessageDigest md2 = MessageDigest.getInstance(\"MD5\");\nmd2.update(key);\nmd2.update(salt);\nmd2.update(key);\nbyte[] abyFinal = md2.digest();\nfor (int n = key.length; n > 0; n -= 16) {\n_md.update(abyFinal, 0, n > 16 ? 16 : n);\n}\nabyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nfor (int j = 0, i = key.length; i != 0; i >>>= 1) {\nif ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);\n}\nfinal StringBuilder sbPasswd = new StringBuilder();\nsbPasswd.append(MAGIC);\nsbPasswd.append(new String(salt));\nsbPasswd.append('$');\nabyFinal = _md.digest();\nfor (int n = 0; n < 1000; n++) {\nfinal MessageDigest md3 = MessageDigest.getInstance(\"MD5\");\nif ((n & 1) != 0) {\nmd3.update(key);\n} else {\nmd3.update(abyFinal);\n}\nif ((n % 3) != 0) {\nmd3.update(salt);\n}\nif ((n % 7) != 0) {\nmd3.update(key);\n}\nif ((n & 1) != 0) {\nmd3.update(abyFinal);\n} else {\nmd3.update(key);\n}\nabyFinal = md3.digest();\n}\nint[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };\nto64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);\nto64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);\nto64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);\nto64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);\nto64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);\nto64(sbPasswd, anFinal[11], 2);\nreturn sbPasswd.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 896
                },
                {
                        "id": "pretrain_java_data_7905178",
                        "content": "<filename>references/bcb_chosen_clones/selected#724066#121#177.java\npublic static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {\nif (key == null || key.length == 0) {\nthrow new IllegalArgumentException(\"Argument 'key' cannot be null or an empty array.\");\n}\nif (salt == null || salt.length == 0) {\nthrow new IllegalArgumentException(\"Argument 'salt' cannot be null or an empty array.\");\n}\nfinal MessageDigest _md = MessageDigest.getInstance(\"MD5\");\n_md.update(key);\n_md.update(MAGIC.getBytes());\n_md.update(salt);\nfinal MessageDigest md2 = MessageDigest.getInstance(\"MD5\");\nmd2.update(key);\nmd2.update(salt);\nmd2.update(key);\nbyte[] abyFinal = md2.digest();\nfor (int n = key.length; n > 0; n -= 16) {\n_md.update(abyFinal, 0, n > 16 ? 16 : n);\n}\nabyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nfor (int j = 0, i = key.length; i != 0; i >>>= 1) {\nif ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);\n}\nfinal StringBuilder sbPasswd = new StringBuilder();\nsbPasswd.append(MAGIC);\nsbPasswd.append(new String(salt));\nsbPasswd.append('$');\nabyFinal = _md.digest();\nfor (int n = 0; n < 1000; n++) {\nfinal MessageDigest md3 = MessageDigest.getInstance(\"MD5\");\nif ((n & 1) != 0) {\nmd3.update(key);\n} else {\nmd3.update(abyFinal);\n}\nif ((n % 3) != 0) {\nmd3.update(salt);\n}\nif ((n % 7) != 0) {\nmd3.update(key);\n}\nif ((n & 1) != 0) {\nmd3.update(abyFinal);\n} else {\nmd3.update(key);\n}\nabyFinal = md3.digest();\n}\nint[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };\nto64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);\nto64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);\nto64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);\nto64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);\nto64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);\nto64(sbPasswd, anFinal[11], 2);\nreturn sbPasswd.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#724066#121#177.java",
                        "__cluster__": 896
                },
                [
                        {
                                "real_dup": 3
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_14820302",
                        "content": "protected void innerProcess(ProcessorURI curi) throws InterruptedException {\nPattern regexpr = curi.get(this, STRIP_REG_EXPR);\nReplayCharSequence cs = null;\ntry {\ncs = curi.getRecorder().getReplayCharSequence();\n} catch (Exception e) {\ncuri.getNonFatalFailures().add(e);\nlogger.warning(\"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage() + \" \" + Thread.currentThread().getName());\nreturn;\n}\nMessageDigest digest = null;\ntry {\ntry {\ndigest = MessageDigest.getInstance(SHA1);\n} catch (NoSuchAlgorithmException e1) {\ne1.printStackTrace();\nreturn;\n}\ndigest.reset();\nString s = null;\nif (regexpr != null) {\ns = cs.toString();\n} else {\nMatcher m = regexpr.matcher(cs);\ns = m.replaceAll(\" \");\n}\ndigest.update(s.getBytes());\nbyte[] newDigestValue = digest.digest();\ncuri.setContentDigest(SHA1, newDigestValue);\n} finally {\nif (cs != null) {\ntry {\ncs.close();\n} catch (IOException ioe) {\nlogger.warning(TextUtils.exceptionToString(\"Failed close of ReplayCharSequence.\", ioe));\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 482
                },
                {
                        "id": "pretrain_java_data_7911271",
                        "content": "<gh_stars>10-100\nprotected void innerProcess(ProcessorURI curi) throws InterruptedException {\nPattern regexpr = curi.get(this, STRIP_REG_EXPR);\nReplayCharSequence cs = null;\ntry {\ncs = curi.getRecorder().getReplayCharSequence();\n} catch (Exception e) {\ncuri.getNonFatalFailures().add(e);\nlogger.warning(\"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage() + \" \" + Thread.currentThread().getName());\nreturn;\n}\nMessageDigest digest = null;\ntry {\ntry {\ndigest = MessageDigest.getInstance(SHA1);\n} catch (NoSuchAlgorithmException e1) {\ne1.printStackTrace();\nreturn;\n}\ndigest.reset();\nString s = null;\nif (regexpr != null) {\ns = cs.toString();\n} else {\nMatcher m = regexpr.matcher(cs);\ns = m.replaceAll(\" \");\n}\ndigest.update(s.getBytes());\nbyte[] newDigestValue = digest.digest();\ncuri.setContentDigest(SHA1, newDigestValue);\n} finally {\nif (cs != null) {\ntry {\ncs.close();\n} catch (IOException ioe) {\nlogger.warning(TextUtils.exceptionToString(\"Failed close of ReplayCharSequence.\", ioe));\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#62037#78#116.java",
                        "__cluster__": 482
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11017048",
                        "content": "public static void main(String args[]) throws IOException {\nBufferedReader in = new BufferedReader(new FileReader(args[0]));\nWriter out = new FileWriter(args[1]);\nout = new WrapFilter(new BufferedWriter(out), 40);\nout = new TitleCaseFilter(out);\nString line;\nwhile ((line = in.readLine()) != null) out.write(line + \"\\n\");\nout.close();\nin.close();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#472727#13#22.java",
                        "__cluster__": 271
                },
                {
                        "id": "test_bigclonebench_data_22977189",
                        "content": "public static void main(String args[]) throws IOException {\nBufferedReader in = new BufferedReader(new FileReader(args[0]));\nWriter out = new FileWriter(args[1]);\nout = new WrapFilter(new BufferedWriter(out), 40);\nout = new TitleCaseFilter(out);\nString line;\nwhile ((line = in.readLine()) != null) out.write(line + \"\\n\");\nout.close();\nin.close();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 271
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_16820041",
                        "content": "public static String encodePassword(String _originalPassword) {\nMessageDigest md = null;\nString encodedPassword = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA-1\");\nmd.update(_originalPassword.getBytes(\"UTF-8\"));\nencodedPassword = (new BASE64Encoder()).encode(md.digest());\n} catch (NoSuchAlgorithmException _e) {\n_e.printStackTrace();\n} catch (UnsupportedEncodingException _e) {\n_e.printStackTrace();\n}\nreturn encodedPassword;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 280
                },
                {
                        "id": "pretrain_java_data_9508665",
                        "content": "public static String encodePassword(String _originalPassword) {\nMessageDigest md = null;\nString encodedPassword = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA-1\");\nmd.update(_originalPassword.getBytes(\"UTF-8\"));\nencodedPassword = (new BASE64Encoder()).encode(md.digest());\n} catch (NoSuchAlgorithmException _e) {\n_e.printStackTrace();\n} catch (UnsupportedEncodingException _e) {\n_e.printStackTrace();\n}\nreturn encodedPassword;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#307205#15#28.java",
                        "__cluster__": 280
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9506240",
                        "content": "<filename>references/bcb_chosen_clones/selected#269698#51#68.java<gh_stars>10-100\npublic static String md5String(String str) {\ntry {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nmd.update(str.getBytes());\nbyte[] hash = md.digest();\nfinal char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\nStringBuffer res = new StringBuffer();\nfor (int i = 0; i < hash.length; i++) {\nres.append(hexChars[(0xF0 & hash[i]) >> 4]);\nres.append(hexChars[0x0F & hash[i]]);\n}\nreturn res.toString();\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#269698#51#68.java",
                        "__cluster__": 391
                },
                {
                        "id": "test_bigclonebench_data_19206412",
                        "content": "public static String md5String(String str) {\ntry {\nMessageDigest md;\nmd = MessageDigest.getInstance(\"MD5\");\nmd.update(str.getBytes());\nbyte[] hash = md.digest();\nfinal char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\nStringBuffer res = new StringBuffer();\nfor (int i = 0; i < hash.length; i++) {\nres.append(hexChars[(0xF0 & hash[i]) >> 4]);\nres.append(hexChars[0x0F & hash[i]]);\n}\nreturn res.toString();\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 391
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_9566349",
                        "content": "private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\nresp.setContentType(getContentType(req, streamName));\nresp.setHeader(\"Content-Disposition\", \"inline;filename=\" + streamName);\nresp.setContentLength((int) sz);\nOutputStream out = resp.getOutputStream();\nBufferedOutputStream bos = new BufferedOutputStream(out, 2048);\ntry {\nIOUtils.copy(streamToLoad, bos);\n} finally {\nIOUtils.closeQuietly(streamToLoad);\nIOUtils.closeQuietly(bos);\n}\ngetCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2045423#55#68.java",
                        "__cluster__": 477
                },
                {
                        "id": "test_bigclonebench_data_3958807",
                        "content": "private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\nresp.setContentType(getContentType(req, streamName));\nresp.setHeader(\"Content-Disposition\", \"inline;filename=\" + streamName);\nresp.setContentLength((int) sz);\nOutputStream out = resp.getOutputStream();\nBufferedOutputStream bos = new BufferedOutputStream(out, 2048);\ntry {\nIOUtils.copy(streamToLoad, bos);\n} finally {\nIOUtils.closeQuietly(streamToLoad);\nIOUtils.closeQuietly(bos);\n}\ngetCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 477
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_9550506",
                        "content": "private String cookieString(String url, String ip) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA-1\");\nmd.update((url + \"&&\" + ip + \"&&\" + salt.toString()).getBytes());\njava.math.BigInteger hash = new java.math.BigInteger(1, md.digest());\nreturn hash.toString(16);\n} catch (NoSuchAlgorithmException e) {\nfilterConfig.getServletContext().log(this.getClass().getName() + \" error \" + e);\nreturn null;\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 481
                },
                {
                        "id": "pretrain_java_data_11086954",
                        "content": "<gh_stars>10-100\nprivate String cookieString(String url, String ip) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(\"SHA-1\");\nmd.update((url + \"&&\" + ip + \"&&\" + salt.toString()).getBytes());\njava.math.BigInteger hash = new java.math.BigInteger(1, md.digest());\nreturn hash.toString(16);\n} catch (NoSuchAlgorithmException e) {\nfilterConfig.getServletContext().log(this.getClass().getName() + \" error \" + e);\nreturn null;\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#797815#228#239.java",
                        "__cluster__": 481
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_11865906",
                        "content": "@Test\npublic void testIdentification() {\ntry {\nString username = \"muchu\";\nString password = \"123\";\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(password.getBytes());\nLogService logServiceMock = EasyMock.createMock(LogService.class);\nDbService dbServiceMock = EasyMock.createMock(DbService.class);\nuserServ.setDbServ(dbServiceMock);\nuserServ.setLogger(logServiceMock);\nlogServiceMock.info(DbUserServiceImpl.class, \">>>identification \" + username + \"<<<\");\nIFeelerUser user = new FeelerUserImpl();\nuser.setUsername(username);\nuser.setPassword(new String(md5.digest()));\nEasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\nEasyMock.replay(logServiceMock, dbServiceMock);\nAssert.assertTrue(userServ.identification(username, password));\nEasyMock.verify(logServiceMock, dbServiceMock);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 225
                },
                {
                        "id": "pretrain_java_data_11025283",
                        "content": "@Test\npublic void testRegister() {\ntry {\nString username = \"muchu\";\nString password = \"<PASSWORD>\";\nMessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(password.getBytes());\nString passwordMd5 = new String(md5.digest());\nLogService logServiceMock = EasyMock.createMock(LogService.class);\nDbService dbServiceMock = EasyMock.createMock(DbService.class);\nuserServ.setDbServ(dbServiceMock);\nuserServ.setLogger(logServiceMock);\nIFeelerUser user = new FeelerUserImpl();\nuser.setUsername(username);\nuser.setPassword(<PASSWORD>);\nlogServiceMock.info(DbUserServiceImpl.class, \">>>rigister \" + username + \"<<<\");\nEasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(null);\ndbServiceMock.addFeelerUser(username, passwordMd5);\nlogServiceMock.info(DbUserServiceImpl.class, \">>>identification \" + username + \"<<<\");\nEasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\nEasyMock.replay(dbServiceMock, logServiceMock);\nAssert.assertTrue(userServ.register(username, password));\nEasyMock.verify(dbServiceMock, logServiceMock);\n} catch (NoSuchAlgorithmException e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#626974#23#49.java",
                        "__cluster__": 225
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_9516953",
                        "content": "<filename>references/bcb_chosen_clones/selected#1103983#124#148.java\npublic boolean exists(String fileToCheck) throws IOException {\nFTPClient ftp = new FTPClient();\nboolean found = false;\ntry {\nint reply = 0;\nftp.connect(this.endpointURL, Config.getFtpPort());\nreply = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftp.disconnect();\nthrow new IOException(\"Ftp exists server refused connection.\");\n}\nif (!ftp.login(\"anonymous\", \"\")) {\nftp.logout();\nthrow new IOException(\"FTP: server wrong passwd\");\n}\nftp.enterLocalPassiveMode();\nif (ftp.listNames(fileToCheck) != null) {\nfound = true;\n}\nftp.logout();\n} catch (Exception e) {\nthrow new IOException(e.getMessage());\n}\nreturn found;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1103983#124#148.java",
                        "__cluster__": 215
                },
                {
                        "id": "test_bigclonebench_data_8452134",
                        "content": "public int exists(String fileToCheck) throws IOException {\nFTPClient ftp = new FTPClient();\nint found = 0;\ntry {\nint reply = 0;\nftp.connect(this.endpointURL, this.endpointPort);\nreply = ftp.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftp.disconnect();\nthrow new IOException(\"Ftp exists server refused connection.\");\n}\nif (!ftp.login(\"anonymous\", \"\")) {\nftp.logout();\nthrow new IOException(\"FTP: server wrong passwd\");\n}\nftp.enterLocalPassiveMode();\nif (ftp.listNames(fileToCheck) != null) {\nfound = 1;\n}\nftp.logout();\n} catch (Exception e) {\nthrow new IOException(e.getMessage());\n}\nreturn found;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 215
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_9505278",
                        "content": "public static byte[] encode(String cryptPassword, byte[] credentials, byte[] salt) {\ntry {\nMessageDigest digester = MessageDigest.getInstance(DIGEST);\nSecureRandom random = SecureRandom.getInstance(RANDOM);\ndigester.reset();\nfor (int i = 0; i < ITERATIONS; i++) {\ndigester.update(salt);\ndigester.update(cryptPassword.getBytes(\"UTF-8\"));\n}\nbyte[] hash = digester.digest();\nrandom.setSeed(hash);\nint maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\nKeyGenerator generator = KeyGenerator.getInstance(CIPHER);\ngenerator.init(maxKeySize, random);\nSecretKey key = generator.generateKey();\nCipher cipher = Cipher.getInstance(CIPHER);\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] cipherOut = cipher.doFinal(credentials);\nbyte[] ret = new byte[salt.length + cipherOut.length];\nSystem.arraycopy(salt, 0, ret, 0, salt.length);\nSystem.arraycopy(cipherOut, 0, ret, salt.length, cipherOut.length);\nreturn ret;\n} catch (Exception e) {\nStorePlugin.getDefault().log(e);\n}\nreturn new byte[0];\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1658518#37#63.java",
                        "__cluster__": 534
                },
                {
                        "id": "test_bigclonebench_data_2525897",
                        "content": "public static byte[] decode(String cryptPassword, byte[] encoded, byte[] salt) {\ntry {\nMessageDigest digester = MessageDigest.getInstance(DIGEST);\nSecureRandom random = SecureRandom.getInstance(RANDOM);\ndigester.reset();\nfor (int i = 0; i < ITERATIONS; i++) {\ndigester.update(salt);\ndigester.update(cryptPassword.getBytes(\"UTF-8\"));\n}\nbyte[] hash = digester.digest();\nrandom.setSeed(hash);\nint maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\nKeyGenerator generator = KeyGenerator.getInstance(CIPHER);\ngenerator.init(maxKeySize, random);\nSecretKey key = generator.generateKey();\nCipher cipher = Cipher.getInstance(CIPHER);\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] decoded = cipher.doFinal(encoded);\nreturn decoded;\n} catch (Exception e) {\nStorePlugin.getDefault().log(e);\n}\nreturn new byte[0];\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 534
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_12642593",
                        "content": "private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\nByteArrayOutputStream stream = new ByteArrayOutputStream();\nIOUtils.copy(in, stream);\nbyte[] out = stream.toByteArray();\nif (all) assertEquals(cmp.length, out.length);\nfor (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1699317#418#424.java",
                        "__cluster__": 758
                },
                {
                        "id": "test_bigclonebench_data_11562173",
                        "content": "private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\nByteArrayOutputStream stream = new ByteArrayOutputStream();\nIOUtils.copy(in, stream);\nbyte[] out = stream.toByteArray();\nif (all) assertEquals(cmp.length, out.length);\nfor (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 758
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_5237257",
                        "content": "private void download(String fileName) {\nString filePath = Activator.showSaveDialog(fileName, new String[] { \".xls\" });\nif (filePath != null) {\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = this.getClass().getResourceAsStream(\"/\" + fileName);\nout = new FileOutputStream(filePath);\nIOUtils.copy(in, out);\n} catch (IOException ioe) {\nActivator.showExceptionDialog(ioe);\n} finally {\nif (in != null) {\ntry {\nin.close();\n} catch (IOException e1) {\nActivator.showExceptionDialog(e1);\n}\n}\nif (out != null) {\ntry {\nout.close();\n} catch (IOException e1) {\nActivator.showExceptionDialog(e1);\n}\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 889
                },
                {
                        "id": "pretrain_java_data_11149685",
                        "content": "private void download(String fileName) {\nString filePath = Activator.showSaveDialog(fileName, new String[] { \".xls\" });\nif (filePath != null) {\nInputStream in = null;\nOutputStream out = null;\ntry {\nin = this.getClass().getResourceAsStream(\"/\" + fileName);\nout = new FileOutputStream(filePath);\nIOUtils.copy(in, out);\n} catch (IOException ioe) {\nActivator.showExceptionDialog(ioe);\n} finally {\nif (in != null) {\ntry {\nin.close();\n} catch (IOException e1) {\nActivator.showExceptionDialog(e1);\n}\n}\nif (out != null) {\ntry {\nout.close();\n} catch (IOException e1) {\nActivator.showExceptionDialog(e1);\n}\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#562112#102#130.java",
                        "__cluster__": 889
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_12686937",
                        "content": "<gh_stars>10-100\nprotected boolean copyFile(File sourceFile, File destinationFile) {\ntry {\nFileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\nFileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\n} catch (IOException e) {\ne.printStackTrace();\nreturn false;\n}\nreturn true;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2290756#41#53.java",
                        "__cluster__": 829
                },
                {
                        "id": "test_bigclonebench_data_18974466",
                        "content": "protected boolean copyFile(File sourceFile, File destinationFile) {\ntry {\nFileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\nFileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\ndstChannel.transferFrom(srcChannel, 0, srcChannel.size());\nsrcChannel.close();\ndstChannel.close();\n} catch (IOException e) {\ne.printStackTrace();\nreturn false;\n}\nreturn true;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 829
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_11147302",
                        "content": "<reponame>cragkhit/elasticsearch\npublic boolean ponerRivalxRonda(int idJugadorDiv, int idRonda, int dato) {\nint intResult = 0;\nString sql = \"UPDATE jugadorxdivxronda \" + \" SET idPareoRival = \" + dato + \" WHERE jugadorxDivision_idJugadorxDivision = \" + idJugadorDiv + \" AND ronda_numeroRonda = \" + idRonda;\ntry {\nconnection = conexionBD.getConnection();\nconnection.setAutoCommit(false);\nps = connection.prepareStatement(sql);\nintResult = ps.executeUpdate();\nconnection.commit();\n} catch (SQLException ex) {\nex.printStackTrace();\ntry {\nconnection.rollback();\n} catch (SQLException exe) {\nexe.printStackTrace();\n}\n} finally {\nconexionBD.close(ps);\nconexionBD.close(connection);\n}\nreturn (intResult > 0);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1596202#421#442.java",
                        "__cluster__": 227
                },
                {
                        "id": "test_bigclonebench_data_19147279",
                        "content": "public boolean actualizarDatosFinal(int idJugadorDiv, int idRonda, jugadorxDivxRonda unjxdxr) {\nint intResult = 0;\nString sql = \"UPDATE jugadorxdivxronda \" + \" SET resultado = ?, puntajeRonda = ? \" + \" WHERE jugadorxDivision_idJugadorxDivision = \" + idJugadorDiv + \" AND ronda_numeroRonda = \" + idRonda;\ntry {\nconnection = conexionBD.getConnection();\nconnection.setAutoCommit(false);\nps = connection.prepareStatement(sql);\npopulatePreparedStatementActFinal(unjxdxr);\nintResult = ps.executeUpdate();\nconnection.commit();\n} catch (SQLException ex) {\nex.printStackTrace();\ntry {\nconnection.rollback();\n} catch (SQLException exe) {\nexe.printStackTrace();\n}\n} finally {\nconexionBD.close(ps);\nconexionBD.close(connection);\n}\nreturn (intResult > 0);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 227
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_11147302",
                        "content": "<reponame>cragkhit/elasticsearch\npublic boolean ponerRivalxRonda(int idJugadorDiv, int idRonda, int dato) {\nint intResult = 0;\nString sql = \"UPDATE jugadorxdivxronda \" + \" SET idPareoRival = \" + dato + \" WHERE jugadorxDivision_idJugadorxDivision = \" + idJugadorDiv + \" AND ronda_numeroRonda = \" + idRonda;\ntry {\nconnection = conexionBD.getConnection();\nconnection.setAutoCommit(false);\nps = connection.prepareStatement(sql);\nintResult = ps.executeUpdate();\nconnection.commit();\n} catch (SQLException ex) {\nex.printStackTrace();\ntry {\nconnection.rollback();\n} catch (SQLException exe) {\nexe.printStackTrace();\n}\n} finally {\nconexionBD.close(ps);\nconexionBD.close(connection);\n}\nreturn (intResult > 0);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1596202#421#442.java",
                        "__cluster__": 227
                },
                {
                        "id": "test_bigclonebench_data_19147281",
                        "content": "public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {\nint intResult = 0;\nString sql = \"UPDATE jugadorxdivxronda \" + \" SET idPareoRival = \" + idPareoRival + \" , color = \" + color + \" , flotante = \" + flotante + \" \" + \" WHERE jugadorxDivision_idJugadorxDivision = \" + idJugadorDiv + \" AND ronda_numeroRonda = \" + idRonda;\ntry {\nconnection = conexionBD.getConnection();\nconnection.setAutoCommit(false);\nps = connection.prepareStatement(sql);\nintResult = ps.executeUpdate();\nconnection.commit();\n} catch (SQLException ex) {\nex.printStackTrace();\ntry {\nconnection.rollback();\n} catch (SQLException exe) {\nexe.printStackTrace();\n}\n} finally {\nconexionBD.close(ps);\nconexionBD.close(connection);\n}\nreturn (intResult > 0);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 227
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_java_data_12776661",
                        "content": "<reponame>cragkhit/elasticsearch\npublic void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {\nFileReader reader = null;\nWriter writer = null;\ntry {\nreader = new FileReader(sourceFile);\nlogger.info(\"Using source file: \" + trimPath(userDir, sourceFile));\nif (!destinationFile.getParentFile().exists()) {\ncreateDirectory(destinationFile.getParentFile());\n}\nwriter = new FileWriter(destinationFile);\nlogger.info(\"Destination file:  \" + trimPath(userDir, destinationFile));\nexecute(reader, writer, conversionType, java2HtmlConfig);\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nif (writer != null) {\ntry {\nwriter.close();\nwriter = null;\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\nif (reader != null) {\ntry {\nreader.close();\nreader = null;\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#920107#101#135.java",
                        "__cluster__": 84
                },
                {
                        "id": "test_bigclonebench_data_5299276",
                        "content": "public void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {\nFileReader reader = null;\nWriter writer = null;\ntry {\nreader = new FileReader(sourceFile);\nlogger.info(\"Using source file: \" + trimPath(userDir, sourceFile));\nif (!destinationFile.getParentFile().exists()) {\ncreateDirectory(destinationFile.getParentFile());\n}\nwriter = new FileWriter(destinationFile);\nlogger.info(\"Destination file:  \" + trimPath(userDir, destinationFile));\nexecute(reader, writer, conversionType, java2HtmlConfig);\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nif (writer != null) {\ntry {\nwriter.close();\nwriter = null;\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\nif (reader != null) {\ntry {\nreader.close();\nreader = null;\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 84
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_22536033",
                        "content": "private boolean setPayload() throws IOException {\nif (Index < Headers.length) {\nFileOutputStream fos = new FileOutputStream(Headers[Index], true);\nFileInputStream fis = new FileInputStream(HeadlessData);\nFileChannel fic = fis.getChannel();\nFileChannel foc = fos.getChannel();\nfic.transferTo(0, fic.size(), foc);\nfic.close();\nfoc.close();\nsetDestination(Destinations[Index]);\nsetPayload(Headers[Index]);\nIndex++;\nreturn true;\n}\nreturn false;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 315
                },
                {
                        "id": "pretrain_java_data_12742672",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate boolean setPayload() throws IOException {\nif (Index < Headers.length) {\nFileOutputStream fos = new FileOutputStream(Headers[Index], true);\nFileInputStream fis = new FileInputStream(HeadlessData);\nFileChannel fic = fis.getChannel();\nFileChannel foc = fos.getChannel();\nfic.transferTo(0, fic.size(), foc);\nfic.close();\nfoc.close();\nsetDestination(Destinations[Index]);\nsetPayload(Headers[Index]);\nIndex++;\nreturn true;\n}\nreturn false;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2566904#33#48.java",
                        "__cluster__": 315
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_10759917",
                        "content": "public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {\ntry {\nConnection conn = null;\nStatement stmt = null;\ntry {\nconn = fido.util.FidoDataSource.getConnection();\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nif (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);\nAdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();\nprepTable.deleteLinkType(stmt, name);\nObjectLinkTable objectLinkTable = new ObjectLinkTable();\nobjectLinkTable.deleteLinkType(stmt, name);\nString sql = \"delete from ClassLinkTypes where LinkName = '\" + name + \"'\";\nstmt.executeUpdate(sql);\nconn.commit();\n} catch (SQLException e) {\nif (conn != null) conn.rollback();\nthrow e;\n} finally {\nif (stmt != null) stmt.close();\nif (conn != null) conn.close();\n}\n} catch (SQLException e) {\nthrow new FidoDatabaseException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 378
                },
                {
                        "id": "pretrain_java_data_14200487",
                        "content": "public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {\ntry {\nConnection conn = null;\nStatement stmt = null;\ntry {\nconn = fido.util.FidoDataSource.getConnection();\nconn.setAutoCommit(false);\nstmt = conn.createStatement();\nif (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);\nAdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();\nprepTable.deleteLinkType(stmt, name);\nObjectLinkTable objectLinkTable = new ObjectLinkTable();\nobjectLinkTable.deleteLinkType(stmt, name);\nString sql = \"delete from ClassLinkTypes where LinkName = '\" + name + \"'\";\nstmt.executeUpdate(sql);\nconn.commit();\n} catch (SQLException e) {\nif (conn != null) conn.rollback();\nthrow e;\n} finally {\nif (stmt != null) stmt.close();\nif (conn != null) conn.close();\n}\n} catch (SQLException e) {\nthrow new FidoDatabaseException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1624820#106#132.java",
                        "__cluster__": 378
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_17337238",
                        "content": "private Retailer create() throws SQLException, IOException {\nConnection conn = null;\nStatement st = null;\nString query = null;\nResultSet rs = null;\ntry {\nconn = dataSource.getConnection();\nst = conn.createStatement();\nquery = \"insert into \" + DB.Tbl.ret + \"(\" + col.title + \",\" + col.addDate + \",\" + col.authorId + \") \" + \"values('\" + title + \"',now(),\" + user.getId() + \")\";\nst.executeUpdate(query, new String[] { col.id });\nrs = st.getGeneratedKeys();\nif (!rs.next()) {\nthrow new SQLException(\"\u041d\u0435 \u0443\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c generated key 'id' \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 retailers.\");\n}\nint genId = rs.getInt(1);\nrs.close();\nsaveDescr(genId);\nconn.commit();\nRetailer ret = new Retailer();\nret.setId(genId);\nret.setTitle(title);\nret.setDescr(descr);\nRetailerViewer.getInstance().somethingUpdated();\nreturn ret;\n} catch (SQLException e) {\ntry {\nconn.rollback();\n} catch (Exception e1) {\n}\nthrow e;\n} finally {\ntry {\nrs.close();\n} catch (Exception e) {\n}\ntry {\nst.close();\n} catch (Exception e) {\n}\ntry {\nconn.close();\n} catch (Exception e) {\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 525
                },
                {
                        "id": "pretrain_java_data_14288337",
                        "content": "<filename>references/bcb_chosen_clones/selected#212143#26#70.java\nprivate Retailer create() throws SQLException, IOException {\nConnection conn = null;\nStatement st = null;\nString query = null;\nResultSet rs = null;\ntry {\nconn = dataSource.getConnection();\nst = conn.createStatement();\nquery = \"insert into \" + DB.Tbl.ret + \"(\" + col.title + \",\" + col.addDate + \",\" + col.authorId + \") \" + \"values('\" + title + \"',now(),\" + user.getId() + \")\";\nst.executeUpdate(query, new String[] { col.id });\nrs = st.getGeneratedKeys();\nif (!rs.next()) {\nthrow new SQLException(\"\u041d\u0435 \u0443\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c generated key 'id' \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 retailers.\");\n}\nint genId = rs.getInt(1);\nrs.close();\nsaveDescr(genId);\nconn.commit();\nRetailer ret = new Retailer();\nret.setId(genId);\nret.setTitle(title);\nret.setDescr(descr);\nRetailerViewer.getInstance().somethingUpdated();\nreturn ret;\n} catch (SQLException e) {\ntry {\nconn.rollback();\n} catch (Exception e1) {\n}\nthrow e;\n} finally {\ntry {\nrs.close();\n} catch (Exception e) {\n}\ntry {\nst.close();\n} catch (Exception e) {\n}\ntry {\nconn.close();\n} catch (Exception e) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#212143#26#70.java",
                        "__cluster__": 525
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_4629990",
                        "content": "private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {\nString remoteHomeDir = null;\nnoRetriesSoFar = 0;\nwhile (true) {\ntry {\nftpClient.connect(ftpAddress, ftpPort);\nint reply = ftpClient.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftpClient.disconnect();\nthrow new IOException();\n}\nif (!ftpClient.login(user, password)) {\nthrow new IOException();\n}\nremoteHomeDir = ftpClient.printWorkingDirectory();\nmsgEntry.setAppContext(\"logonToServer()\");\nmsgEntry.setMessageText(\"Logged into FTP server \" + ftpAddress + \":\" + ftpPort + \" as user \" + user);\nlogger.logProcess(msgEntry);\nbreak;\n} catch (IOException e) {\nlogoutAndDisconnect(ftpClient);\nif (noRetriesSoFar++ < noRetries) {\nwaitBetweenRetry();\nnotifyAndStartWaitingFlag = false;\n} else {\nnotifyAndStartWaitingFlag = true;\nerrEntry.setThrowable(e);\nerrEntry.setAppContext(\"logonToServer()\");\nerrEntry.setAppMessage(\"Unable to login after \" + (noRetriesSoFar - 1) + \" retries. Max Retries.\\n\" + \"Address:\" + ftpAddress + \"\\n\" + \"User:\" + user);\nerrEntry.setSubjectSendEmail(\"Unable to login to \" + ftpAddress + \" after \" + (noRetriesSoFar - 1) + \" retries.\");\nlogger.logError(errEntry);\nbreak;\n}\n}\n}\nreturn remoteHomeDir;\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 561
                },
                {
                        "id": "pretrain_java_data_12778497",
                        "content": "<reponame>cragkhit/elasticsearch\nprivate String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {\nString remoteHomeDir = null;\nnoRetriesSoFar = 0;\nwhile (true) {\ntry {\nftpClient.connect(ftpAddress, ftpPort);\nint reply = ftpClient.getReplyCode();\nif (!FTPReply.isPositiveCompletion(reply)) {\nftpClient.disconnect();\nthrow new IOException();\n}\nif (!ftpClient.login(user, password)) {\nthrow new IOException();\n}\nremoteHomeDir = ftpClient.printWorkingDirectory();\nmsgEntry.setAppContext(\"logonToServer()\");\nmsgEntry.setMessageText(\"Logged into FTP server \" + ftpAddress + \":\" + ftpPort + \" as user \" + user);\nlogger.logProcess(msgEntry);\nbreak;\n} catch (IOException e) {\nlogoutAndDisconnect(ftpClient);\nif (noRetriesSoFar++ < noRetries) {\nwaitBetweenRetry();\nnotifyAndStartWaitingFlag = false;\n} else {\nnotifyAndStartWaitingFlag = true;\nerrEntry.setThrowable(e);\nerrEntry.setAppContext(\"logonToServer()\");\nerrEntry.setAppMessage(\"Unable to login after \" + (noRetriesSoFar - 1) + \" retries. Max Retries.\\n\" + \"Address:\" + ftpAddress + \"\\n\" + \"User:\" + user);\nerrEntry.setSubjectSendEmail(\"Unable to login to \" + ftpAddress + \" after \" + (noRetriesSoFar - 1) + \" retries.\");\nlogger.logError(errEntry);\nbreak;\n}\n}\n}\nreturn remoteHomeDir;\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#347068#384#420.java",
                        "__cluster__": 561
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_12782570",
                        "content": "public void logging() throws Fault {\nfinal InterceptorWrapper wrap = new InterceptorWrapper(message);\nfinal LoggingMessage buffer = new LoggingMessage(\"Inbound Message\\n----------------------------\");\nString encoding = (String) wrap.getEncoding();\nif (encoding != null) {\nbuffer.getEncoding().append(encoding);\n}\nObject headers = wrap.getProtocolHeaders();\nif (headers != null) {\nbuffer.getHeader().append(headers);\n}\nInputStream is = (InputStream) wrap.getContent(InputStream.class);\nif (is != null) {\nCachedOutputStream bos = new CachedOutputStream();\ntry {\nIOUtils.copy(is, bos);\nbos.flush();\nis.close();\nthis.message.setContent(InputStream.class, bos.getInputStream());\nif (bos.getTempFile() != null) {\nlogger.error(\"\\nMessage (saved to tmp file):\\n\");\nlogger.error(\"Filename: \" + bos.getTempFile().getAbsolutePath() + \"\\n\");\n}\nif (bos.size() > limit) {\nlogger.error(\"(message truncated to \" + limit + \" bytes)\\n\");\n}\nbos.writeCacheTo(buffer.getPayload(), limit);\nbos.close();\n} catch (IOException e) {\nthrow new Fault(e);\n}\n}\nlogger.debug(\"Message received :\\n\" + buffer.getPayload().toString());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 808
                },
                {
                        "id": "pretrain_java_data_12795795",
                        "content": "public void logging() throws Fault {\nfinal InterceptorWrapper wrap = new InterceptorWrapper(message);\nfinal LoggingMessage buffer = new LoggingMessage(\"Inbound Message\\n----------------------------\");\nString encoding = (String) wrap.getEncoding();\nif (encoding != null) {\nbuffer.getEncoding().append(encoding);\n}\nObject headers = wrap.getProtocolHeaders();\nif (headers != null) {\nbuffer.getHeader().append(headers);\n}\nInputStream is = (InputStream) wrap.getContent(InputStream.class);\nif (is != null) {\nCachedOutputStream bos = new CachedOutputStream();\ntry {\nIOUtils.copy(is, bos);\nbos.flush();\nis.close();\nthis.message.setContent(InputStream.class, bos.getInputStream());\nif (bos.getTempFile() != null) {\nlogger.error(\"\\nMessage (saved to tmp file):\\n\");\nlogger.error(\"Filename: \" + bos.getTempFile().getAbsolutePath() + \"\\n\");\n}\nif (bos.size() > limit) {\nlogger.error(\"(message truncated to \" + limit + \" bytes)\\n\");\n}\nbos.writeCacheTo(buffer.getPayload(), limit);\nbos.close();\n} catch (IOException e) {\nthrow new Fault(e);\n}\n}\nlogger.debug(buffer.getPayload().toString().replaceAll(\"\\r\\n|\\n|\\r\", \"\"));\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#34150#40#73.java",
                        "__cluster__": 808
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_bigclonebench_data_17296916",
                        "content": "public void logging() throws Fault {\nfinal InterceptorWrapper wrap = new InterceptorWrapper(message);\nfinal LoggingMessage buffer = new LoggingMessage(\"Inbound Message\\n----------------------------\");\nString encoding = (String) wrap.getEncoding();\nif (encoding != null) {\nbuffer.getEncoding().append(encoding);\n}\nObject headers = wrap.getProtocolHeaders();\nif (headers != null) {\nbuffer.getHeader().append(headers);\n}\nInputStream is = (InputStream) wrap.getContent(InputStream.class);\nif (is != null) {\nCachedOutputStream bos = new CachedOutputStream();\ntry {\nIOUtils.copy(is, bos);\nbos.flush();\nis.close();\nthis.message.setContent(InputStream.class, bos.getInputStream());\nif (bos.getTempFile() != null) {\nlogger.error(\"\\nMessage (saved to tmp file):\\n\");\nlogger.error(\"Filename: \" + bos.getTempFile().getAbsolutePath() + \"\\n\");\n}\nif (bos.size() > limit) {\nlogger.error(\"(message truncated to \" + limit + \" bytes)\\n\");\n}\nbos.writeCacheTo(buffer.getPayload(), limit);\nbos.close();\n} catch (IOException e) {\nthrow new Fault(e);\n}\n}\nlogger.debug(buffer.getPayload().toString().replaceAll(\"\\r\\n|\\n|\\r\", \"\"));\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 808
                },
                {
                        "id": "pretrain_java_data_12795795",
                        "content": "public void logging() throws Fault {\nfinal InterceptorWrapper wrap = new InterceptorWrapper(message);\nfinal LoggingMessage buffer = new LoggingMessage(\"Inbound Message\\n----------------------------\");\nString encoding = (String) wrap.getEncoding();\nif (encoding != null) {\nbuffer.getEncoding().append(encoding);\n}\nObject headers = wrap.getProtocolHeaders();\nif (headers != null) {\nbuffer.getHeader().append(headers);\n}\nInputStream is = (InputStream) wrap.getContent(InputStream.class);\nif (is != null) {\nCachedOutputStream bos = new CachedOutputStream();\ntry {\nIOUtils.copy(is, bos);\nbos.flush();\nis.close();\nthis.message.setContent(InputStream.class, bos.getInputStream());\nif (bos.getTempFile() != null) {\nlogger.error(\"\\nMessage (saved to tmp file):\\n\");\nlogger.error(\"Filename: \" + bos.getTempFile().getAbsolutePath() + \"\\n\");\n}\nif (bos.size() > limit) {\nlogger.error(\"(message truncated to \" + limit + \" bytes)\\n\");\n}\nbos.writeCacheTo(buffer.getPayload(), limit);\nbos.close();\n} catch (IOException e) {\nthrow new Fault(e);\n}\n}\nlogger.debug(buffer.getPayload().toString().replaceAll(\"\\r\\n|\\n|\\r\", \"\"));\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#34150#40#73.java",
                        "__cluster__": 808
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_14323464",
                        "content": "public String getXML(String servletURL, String request) {\nStringBuffer stringBuffer = new StringBuffer();\ntry {\nString encodedRequest = URLEncoder.encode(request, \"UTF-8\");\nURL url = new URL(servletURL + request);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\nstringBuffer.append(inputLine);\n}\nin.close();\n} catch (MalformedURLException ex) {\nreturn null;\n} catch (UnsupportedEncodingException ex) {\nreturn null;\n} catch (IOException ex) {\nreturn null;\n}\nreturn stringBuffer.toString();\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2085174#27#46.java",
                        "__cluster__": 908
                },
                {
                        "id": "test_bigclonebench_data_10212189",
                        "content": "public String getXML(String servletURL, String request) {\nStringBuffer stringBuffer = new StringBuffer();\ntry {\nString encodedRequest = URLEncoder.encode(request, \"UTF-8\");\nURL url = new URL(servletURL + request);\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\nString inputLine;\nwhile ((inputLine = in.readLine()) != null) {\nstringBuffer.append(inputLine);\n}\nin.close();\n} catch (MalformedURLException ex) {\nreturn null;\n} catch (UnsupportedEncodingException ex) {\nreturn null;\n} catch (IOException ex) {\nreturn null;\n}\nreturn stringBuffer.toString();\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 908
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_16719805",
                        "content": "public static void copyFile(File from, File to) throws IOException {\nif (from.isDirectory()) {\nif (!to.exists()) {\nto.mkdir();\n}\nFile[] children = from.listFiles();\nfor (int i = 0; i < children.length; i++) {\nif (children[i].getName().equals(\".\") || children[i].getName().equals(\"..\")) {\ncontinue;\n}\nif (children[i].isDirectory()) {\nFile f = new File(to, children[i].getName());\ncopyFile(children[i], f);\n} else {\ncopyFile(children[i], to);\n}\n}\n} else if (from.isFile() && (to.isDirectory() || to.isFile())) {\nif (to.isDirectory()) {\nto = new File(to, from.getName());\n}\nFileInputStream in = new FileInputStream(from);\nFileOutputStream out = new FileOutputStream(to);\nbyte[] buf = new byte[32678];\nint read;\nwhile ((read = in.read(buf)) > -1) {\nout.write(buf, 0, read);\n}\ncloseStream(in);\ncloseStream(out);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 21
                },
                {
                        "id": "pretrain_java_data_14214986",
                        "content": "<filename>references/bcb_chosen_clones/selected#2676871#89#120.java\npublic static void copyFile(File from, File to) throws IOException {\nif (from.isDirectory()) {\nif (!to.exists()) {\nto.mkdir();\n}\nFile[] children = from.listFiles();\nfor (int i = 0; i < children.length; i++) {\nif (children[i].getName().equals(\".\") || children[i].getName().equals(\"..\")) {\ncontinue;\n}\nif (children[i].isDirectory()) {\nFile f = new File(to, children[i].getName());\ncopyFile(children[i], f);\n} else {\ncopyFile(children[i], to);\n}\n}\n} else if (from.isFile() && (to.isDirectory() || to.isFile())) {\nif (to.isDirectory()) {\nto = new File(to, from.getName());\n}\nFileInputStream in = new FileInputStream(from);\nFileOutputStream out = new FileOutputStream(to);\nbyte[] buf = new byte[32678];\nint read;\nwhile ((read = in.read(buf)) > -1) {\nout.write(buf, 0, read);\n}\ncloseStream(in);\ncloseStream(out);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2676871#89#120.java",
                        "__cluster__": 21
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_3558512",
                        "content": "public void serialize(OutputStream out) throws IOException, BadIMSCPException {\nensureParsed();\nZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\nparser.setContentPackage(cp);\nif (on_disk != null) on_disk.delete();\non_disk = createTemporaryFile();\nparser.serialize(on_disk);\nInputStream in = new FileInputStream(on_disk);\nIOUtils.copy(in, out);\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 900
                },
                {
                        "id": "pretrain_java_data_14268307",
                        "content": "<filename>references/bcb_chosen_clones/selected#281369#49#58.java\npublic void serialize(OutputStream out) throws IOException, BadIMSCPException {\nensureParsed();\nZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\nparser.setContentPackage(cp);\nif (on_disk != null) on_disk.delete();\non_disk = createTemporaryFile();\nparser.serialize(on_disk);\nInputStream in = new FileInputStream(on_disk);\nIOUtils.copy(in, out);\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#281369#49#58.java",
                        "__cluster__": 900
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_15857386",
                        "content": "public void updateShoppingBean(String userId) {\nConnection connection = null;\nPreparedStatement preparedStatement1 = null;\nPreparedStatement preparedStatement2 = null;\ntry {\nClass.forName(\"com.mysql.jdbc.Driver\");\nconnection = DriverManager.getConnection(this.jdbcURL);\nconnection.setAutoCommit(false);\nString preparedQuery = \"INSERT INTO dbComputerShopping.order(name,product_id,quantity,date,status)VALUES(?,?,?,?,?)\";\npreparedStatement1 = connection.prepareStatement(preparedQuery);\nDate date = new Date();\nSimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\nString orderDate = format.format(date);\nIterator iterator = this.cart.iterator();\nObject[] shoppingInfo = null;\nwhile (iterator.hasNext()) {\nshoppingInfo = (Object[]) iterator.next();\nProductBean product = (ProductBean) shoppingInfo[0];\nint quantity = (Integer) shoppingInfo[1];\npreparedStatement1.setString(1, userId);\npreparedStatement1.setInt(2, product.getId());\npreparedStatement1.setInt(3, quantity);\npreparedStatement1.setString(4, orderDate);\npreparedStatement1.setString(5, \"confirmed\");\npreparedStatement1.executeUpdate();\n}\nObject[] cartInfo = null;\npreparedQuery = \"UPDATE components SET quantity=quantity-? WHERE comp_id=?\";\npreparedStatement2 = connection.prepareStatement(preparedQuery);\nfor (Iterator i = this.cart.iterator(); i.hasNext(); ) {\ncartInfo = (Object[]) i.next();\nProductBean product = (ProductBean) cartInfo[0];\nint quantity = (Integer) cartInfo[1];\nProductListBean productList = new ProductListBean(jdbcURL);\nArrayList components = productList.getComponents(product.getId());\nfor (Iterator j = components.iterator(); j.hasNext(); ) {\nComponentBean component = (ComponentBean) j.next();\npreparedStatement2.setInt(1, quantity);\npreparedStatement2.setInt(2, component.getId());\npreparedStatement2.executeUpdate();\n}\n}\nconnection.commit();\n} catch (Exception ex) {\ntry {\nconnection.rollback();\n} catch (SQLException e) {\n}\n} finally {\ntry {\nconnection.close();\n} catch (SQLException ex) {\n}\ntry {\npreparedStatement1.close();\n} catch (SQLException ex) {\n}\ntry {\npreparedStatement2.close();\n} catch (SQLException ex) {\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#225815#113#175.java",
                        "__cluster__": 49
                },
                {
                        "id": "test_bigclonebench_data_5607440",
                        "content": "public void updateShoppingBean(String userId) {\nConnection connection = null;\nPreparedStatement preparedStatement1 = null;\nPreparedStatement preparedStatement2 = null;\ntry {\nClass.forName(\"com.mysql.jdbc.Driver\");\nconnection = DriverManager.getConnection(this.jdbcURL);\nconnection.setAutoCommit(false);\nString preparedQuery = \"INSERT INTO dbComputerShopping.order(name,product_id,quantity,date,status)VALUES(?,?,?,?,?)\";\npreparedStatement1 = connection.prepareStatement(preparedQuery);\nDate date = new Date();\nSimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\nString orderDate = format.format(date);\nIterator iterator = this.cart.iterator();\nObject[] shoppingInfo = null;\nwhile (iterator.hasNext()) {\nshoppingInfo = (Object[]) iterator.next();\nProductBean product = (ProductBean) shoppingInfo[0];\nint quantity = (Integer) shoppingInfo[1];\npreparedStatement1.setString(1, userId);\npreparedStatement1.setInt(2, product.getId());\npreparedStatement1.setInt(3, quantity);\npreparedStatement1.setString(4, orderDate);\npreparedStatement1.setString(5, \"confirmed\");\npreparedStatement1.executeUpdate();\n}\nObject[] cartInfo = null;\npreparedQuery = \"UPDATE components SET quantity=quantity-? WHERE comp_id=?\";\npreparedStatement2 = connection.prepareStatement(preparedQuery);\nfor (Iterator i = this.cart.iterator(); i.hasNext(); ) {\ncartInfo = (Object[]) i.next();\nProductBean product = (ProductBean) cartInfo[0];\nint quantity = (Integer) cartInfo[1];\nProductListBean productList = new ProductListBean(jdbcURL);\nArrayList components = productList.getComponents(product.getId());\nfor (Iterator j = components.iterator(); j.hasNext(); ) {\nComponentBean component = (ComponentBean) j.next();\npreparedStatement2.setInt(1, quantity);\npreparedStatement2.setInt(2, component.getId());\npreparedStatement2.executeUpdate();\n}\n}\nconnection.commit();\n} catch (Exception ex) {\ntry {\nconnection.rollback();\n} catch (SQLException e) {\n}\n} finally {\ntry {\nconnection.close();\n} catch (SQLException ex) {\n}\ntry {\npreparedStatement1.close();\n} catch (SQLException ex) {\n}\ntry {\npreparedStatement2.close();\n} catch (SQLException ex) {\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 49
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_15829105",
                        "content": "public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\nthis.name = name;\nthis.contentType = contentType;\nthis.index = index;\nthis.extension = FilenameUtils.getExtension(this.name);\nthis.isImage = ImageUtils.isImage(name);\nArrayInputStream isAux = null;\nfinal ByteArrayOutputStream out = new ByteArrayOutputStream();\ntry {\nIOUtils.copy(is, out);\nisAux = new ArrayInputStream(out.toByteArray());\nif (this.isImage) {\nthis.bufferedImage = imaging.read(isAux);\n}\n} finally {\nIOUtils.closeQuietly(out);\nIOUtils.closeQuietly(isAux);\n}\nthis.inputStream = new ArrayInputStream(out.toByteArray());\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#2378709#98#117.java",
                        "__cluster__": 199
                },
                {
                        "id": "test_bigclonebench_data_3266833",
                        "content": "public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\nthis.name = name;\nthis.contentType = contentType;\nthis.index = index;\nthis.extension = FilenameUtils.getExtension(this.name);\nthis.isImage = ImageUtils.isImage(name);\nArrayInputStream isAux = null;\nfinal ByteArrayOutputStream out = new ByteArrayOutputStream();\ntry {\nIOUtils.copy(is, out);\nisAux = new ArrayInputStream(out.toByteArray());\nif (this.isImage) {\nthis.bufferedImage = imaging.read(isAux);\n}\n} finally {\nIOUtils.closeQuietly(out);\nIOUtils.closeQuietly(isAux);\n}\nthis.inputStream = new ArrayInputStream(out.toByteArray());\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 199
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "pretrain_java_data_15934188",
                        "content": "<filename>references/bcb_chosen_clones/selected#1347639#1351#1368.java\nprivate String md5(String uri) throws ConnoteaRuntimeException {\ntry {\nMessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.update(uri.getBytes());\nbyte[] bytes = messageDigest.digest();\nStringBuffer stringBuffer = new StringBuffer();\nfor (byte b : bytes) {\nString hex = Integer.toHexString(0xff & b);\nif (hex.length() == 1) {\nstringBuffer.append('0');\n}\nstringBuffer.append(hex);\n}\nreturn stringBuffer.toString();\n} catch (NoSuchAlgorithmException e) {\nthrow new ConnoteaRuntimeException(e);\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1347639#1351#1368.java",
                        "__cluster__": 738
                },
                {
                        "id": "test_bigclonebench_data_23517481",
                        "content": "private String md5(String uri) throws ConnoteaRuntimeException {\ntry {\nMessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.update(uri.getBytes());\nbyte[] bytes = messageDigest.digest();\nStringBuffer stringBuffer = new StringBuffer();\nfor (byte b : bytes) {\nString hex = Integer.toHexString(0xff & b);\nif (hex.length() == 1) {\nstringBuffer.append('0');\n}\nstringBuffer.append(hex);\n}\nreturn stringBuffer.toString();\n} catch (NoSuchAlgorithmException e) {\nthrow new ConnoteaRuntimeException(e);\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 738
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ],


        [
                {
                        "id": "test_bigclonebench_data_13362846",
                        "content": "public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\nif (contenuFichier != null) {\nSupportDocument support = fichierElectronique.getSupport();\nsupport.setFichierElectronique(fichierElectronique);\nFicheDocument ficheDocument = support.getFicheDocument();\nString nomFichier = contenuFichier.getNomFichier();\nString extension = FilenameUtils.getExtension(nomFichier);\nif (ficheDocument.getFichierElectronique(nomFichier) != null) {\nFichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\nif (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\nthrow new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n}\n}\nif (fichierElectronique.getId() == null) {\nif (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\nLong idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\nif (idIgid != null) {\nthrow new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n}\n}\n}\nInputStream inputStream = contenuFichier.getInputStream();\nOutputStream outputStream = fichierElectronique.getOutputStream();\ntry {\nIOUtils.copy(inputStream, outputStream);\n} finally {\ntry {\ninputStream.close();\n} finally {\noutputStream.close();\n}\n}\nString typeMime = contenuFichier.getContentType();\nlong tailleFichier = contenuFichier.getTailleFichier();\nDate dateDerniereModification = new Date();\nfichierElectronique.setNom(nomFichier);\nfichierElectronique.setTypeMime(extension);\ncreerFormatSiNecessaire(typeMime, extension);\nfichierElectronique.setTaille(tailleFichier);\nfichierElectronique.setDateDerniereModification(dateDerniereModification);\nfichierElectronique.setSoumetteur(utilisateurCourant);\nif (extension.endsWith(\"msg\")) {\nCourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n} else if (extension.endsWith(\"eml\")) {\nMap<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\nCourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n} else {\nFGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n}\n}\n}",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "max_stars_repo_path": "NA",
                        "__cluster__": 803
                },
                {
                        "id": "pretrain_java_data_15801945",
                        "content": "public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\nif (contenuFichier != null) {\nSupportDocument support = fichierElectronique.getSupport();\nsupport.setFichierElectronique(fichierElectronique);\nFicheDocument ficheDocument = support.getFicheDocument();\nString nomFichier = contenuFichier.getNomFichier();\nString extension = FilenameUtils.getExtension(nomFichier);\nif (ficheDocument.getFichierElectronique(nomFichier) != null) {\nFichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\nif (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\nthrow new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n}\n}\nif (fichierElectronique.getId() == null) {\nif (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\nLong idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\nif (idIgid != null) {\nthrow new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n}\n}\n}\nInputStream inputStream = contenuFichier.getInputStream();\nOutputStream outputStream = fichierElectronique.getOutputStream();\ntry {\nIOUtils.copy(inputStream, outputStream);\n} finally {\ntry {\ninputStream.close();\n} finally {\noutputStream.close();\n}\n}\nString typeMime = contenuFichier.getContentType();\nlong tailleFichier = contenuFichier.getTailleFichier();\nDate dateDerniereModification = new Date();\nfichierElectronique.setNom(nomFichier);\nfichierElectronique.setTypeMime(extension);\ncreerFormatSiNecessaire(typeMime, extension);\nfichierElectronique.setTaille(tailleFichier);\nfichierElectronique.setDateDerniereModification(dateDerniereModification);\nfichierElectronique.setSoumetteur(utilisateurCourant);\nif (extension.endsWith(\"msg\")) {\nCourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n} else if (extension.endsWith(\"eml\")) {\nMap<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\nCourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n} else {\nFGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n}\n}\n}",
                        "max_stars_count": 23,
                        "max_stars_repo_name": "cragkhit/elasticsearch",
                        "max_stars_repo_path": "references/bcb_chosen_clones/selected#1185398#28#78.java",
                        "__cluster__": 803
                },
                [
                        {
                                "real_dup": "3"
                        }
                ]
        ]
]