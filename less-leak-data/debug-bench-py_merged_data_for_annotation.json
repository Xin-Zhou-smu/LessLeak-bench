[
        {
                "data_len": 2
        },
        [
                {
                        "id": "test_debug-bench_data_2785",
                        "content": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\nFor example, the following two linked lists begin to intersect at node c1:\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\nNote that the linked lists must retain their original structure after the function returns.\nCustom Judge:\nThe inputs to the judge are given as follows (your program is not given these inputs):\nintersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\nlistA - The first linked list.\nlistB - The second linked list.\nskipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\nskipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.\npublic class Solution {\npublic ListNode getIntersectionNode(ListNode headA, ListNode headB) {\nListNode a = headA;\nListNode b = headB;\nwhile(a != b) {\na = a==null ? headB : a.next;\nb = b==null ? headA : a.next;\n}\nreturn a;\n}\n}\nThe bug is in second while loop condition, 'b' should be assigned to 'b.next' not 'a.next'.\npublic class Solution {\npublic ListNode getIntersectionNode(ListNode headA, ListNode headB) {\nListNode a = headA;\nListNode b = headB;\nwhile(a!=b) {\na = a==null ? headB : a.next;\nb = b==null ? headA : b.next;\n}\nreturn a;\n}\n}\n# Code\\n```\\npublic class Solution {\\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\\n\\n        ListNode a = headA;\\n        ListNode b = headB;\\n\\n        while(a!=b) {\\n            a = a==null ? headB : a.next;\\n            b = b==null ? headA : b.next;\\n        }\\n        return a;\\n    }\\n}\\n```",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 2784
                },
                {
                        "id": "pretrain_python_data_4385151",
                        "content": "class Solution:\ndef getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\nwhile headA is not None:\nheadB_iter = headB\nwhile headB_iter is not None:\nif headA == headB_iter:\nreturn headA\nheadB_iter = headB_iter.next\nheadA = headA.next\nreturn None\nTime complexity : O(N\u00d7M).\nSpace complexity : O(1).\n###############################\nclass Solution:\ndef getIntersectionNode(self, headA, headB):\nnodes_in_B = set()\nwhile headB is not None:\nnodes_in_B.add(headB)\nheadB = headB.next\nwhile headA is not None:\n# if we find the node pointed to by headA,\n# in our set containing nodes of B, then return the node\nif headA in nodes_in_B:\nreturn headA\nheadA = headA.next\nreturn None\nTime complexity : O(N + M).\nSpace complexity : O(M).\n\"\"\"\n160. Intersection of Two Linked Lists\nEasy\n7939\n803\nAdd to List\nShare\nGiven the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\nFor example, the following two linked lists begin to intersect at node c1:\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\nNote that the linked lists must retain their original structure after the function returns.\nCustom Judge:\nThe inputs to the judge are given as follows (your program is not given these inputs):\nintersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\nlistA - The first linked list.\nlistB - The second linked list.\nskipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\nskipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.\n\"\"\"",
                        "max_stars_repo_name": "syeddabeer/0projects",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "ds/160. Intersection of Two Linked Lists.py",
                        "__cluster__": 2784
                },
                {
                        "real_dup": 1
                }
        ],


        [
                {
                        "id": "test_debug-bench_data_1834",
                        "content": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\nint next() Moves the pointer to the right, then returns the number at the pointer.\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n/**\n* Definition for a binary tree node.\n* public class TreeNode {\n*     int val;\n*     TreeNode left;\n*     TreeNode right;\n*     TreeNode() {}\n*     TreeNode(int val) { this.val = val; }\n*     TreeNode(int val, TreeNode left, TreeNode right) {\n*         this.val = val;\n*         this.left = left;\n*         this.right = right;\n*     }\n* }\n*\nclass BSTIterator {\nList<Integer> l;\nint len;\nint curr;\npublic BSTIterator(TreeNode root) {\nBST1 B = new BST1()\nB.inOrder(root);\nthis.l = B.l;\nlen = this.l.size();\nthis.curr = 0;\n}\npublic int next() {\nint data = -1;\nif (curr < len) {\ndata = l.get(curr);\ncurr++;\n}\nreturn data;\n}\npublic boolean hasNext() {\nreturn curr < len;\n}\n}\nclass BST1 {\nList<Integer> l = new ArrayList<>();\npublic void inOrder(TreeNode root) {\nif (root == null) {\nreturn;\n}\ninOrder(root.left);\nl.add(root.val);\ninOrder(root.right);\n}\n} */\n/**\n* Your BSTIterator object will be instantiated and called as such:\n* BSTIterator obj = new BSTIterator(root);\n* int param_1 = obj.next();\n* boolean param_2 = obj.hasNext();\n*/\na mixture of colon missing, wrong comment mark\n/**\n* Definition for a binary tree node.\n* public class TreeNode {\n*     int val;\n*     TreeNode left;\n*     TreeNode right;\n*     TreeNode() {}\n*     TreeNode(int val) { this.val = val; }\n*     TreeNode(int val, TreeNode left, TreeNode right) {\n*         this.val = val;\n*         this.left = left;\n*         this.right = right;\n*     }\n* }\n*/\nclass BSTIterator {\nList<Integer> l;\nint len;\nint curr;\npublic BSTIterator(TreeNode root) {\nBST1 B = new BST1();\nB.inOrder(root);\nthis.l = B.l;\nlen = this.l.size();\nthis.curr = 0;\n}\npublic int next() {\nint data = -1;\nif (curr < len) {\ndata = l.get(curr);\ncurr++;\n}\nreturn data;\n}\npublic boolean hasNext() {\nreturn curr < len;\n}\n}\nclass BST1 {\nList<Integer> l = new ArrayList<>();\npublic void inOrder(TreeNode root) {\nif (root == null) {\nreturn;\n}\ninOrder(root.left);\nl.add(root.val);\ninOrder(root.right);\n}\n}\n/**\n* Your BSTIterator object will be instantiated and called as such:\n* BSTIterator obj = new BSTIterator(root);\n* int param_1 = obj.next();\n* boolean param_2 = obj.hasNext();\n*/\n\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass BSTIterator {\\n\\n    List<Integer> l;\\n    int len;\\n    int curr;\\n\\n    public BSTIterator(TreeNode root) {\\n        BST1 B = new BST1();\\n        B.inOrder(root);\\n        this.l = B.l;\\n        len = this.l.size();\\n        this.curr = 0;\\n\\n    }\\n\\n    public int next() {\\n        int data = -1;\\n        if (curr < len) {\\n            data = l.get(curr);\\n            curr++;\\n        }\\n\\n        return data;\\n\\n    }\\n\\n    public boolean hasNext() {\\n        return curr < len;\\n\\n    }\\n}\\n\\nclass BST1 {\\n\\n    List<Integer> l = new ArrayList<>();\\n\\n    public void inOrder(TreeNode root) {\\n        if (root == null) {\\n            return;\\n        }\\n        inOrder(root.left);\\n        l.add(root.val);\\n        inOrder(root.right);\\n    }\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * BSTIterator obj = new BSTIterator(root);\\n * int param_1 = obj.next();\\n * boolean param_2 = obj.hasNext();\\n */\\n```",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "NA",
                        "__cluster__": 1768
                },
                {
                        "id": "pretrain_python_data_12772893",
                        "content": "'''\nImplement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\nint next() Moves the pointer to the right, then returns the number at the pointer.\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n'''\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator(object):\ndef __init__(self, root):\n\"\"\"\n:type root: TreeNode\n\"\"\"\nself.stack = [root]\nself.size = 1\ndef next(self):\n\"\"\"\n:rtype: int\n\"\"\"\nwhile self.stack:\nnode = self.stack.pop()\nif not node:\nnode = self.stack.pop()\nself.size = len(self.stack)\nreturn node.val\nif node.right:\nself.stack.append(node.right)\nself.stack.append(node)\nself.stack.append(None)\nif node.left:\nself.stack.append(node.left)\nreturn None\ndef hasNext(self):\n\"\"\"\n:rtype: bool\n\"\"\"\nreturn self.size > 0\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()",
                        "max_stars_repo_name": "JunzhongLin/leetcode_practice",
                        "max_stars_count": 0,
                        "max_stars_repo_path": "data_structure/binary_search_tree/173. Binary Search Tree Iterator_medium.py",
                        "__cluster__": 1768
                },
                {
                        "real_dup": "2"
                }
        ]
]