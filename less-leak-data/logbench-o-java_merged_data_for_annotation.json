[
        {
                "data_len": 160
        },
        [
                {
                        "id": 1
                },
                {
                        "id": "test_logbench-o_data_2004",
                        "content": "public void listenTopic(final String topicName, final String selectors) {\ntry {\nProperties props = new Properties();\nprops.put(\"java.naming.factory.initial\", \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\nprops.put(\"java.naming.provider.url\", connectionUri);\nprops.put(\"topic.topicName\", topicName);\njavax.naming.Context ctx = new InitialContext(props);\nTopicConnectionFactory factory = (TopicConnectionFactory) ctx.lookup(\"ConnectionFactory\");\nTopicConnection conn = factory.createTopicConnection();\nfinal Topic topic = (Topic) ctx.lookup(\"topicName\");\nTopicSession session = conn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);\nTopicSubscriber receiver = session.createSubscriber(topic, selectors, false);\nreceiver.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\ntry {\nif (message instanceof TextMessage) {\nTextMessage txtMsg = (TextMessage) message;\nString msg = txtMsg.getText();\nLOG.info(\"Topic Message Received: \" + topicName + \" - \" + msg);\n}\nmessage.acknowledge();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\nconn.start();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ2084Test_listenTopic.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2003
                },
                {
                        "id": "pretrain_java_data_43580",
                        "content": "//,temp,AMQ2084Test.java,110,142,temp,AMQ2084Test.java,74,108\n//,3\npublic class xxx {\npublic void listenTopic(final String topicName, final String selectors) {\ntry {\nProperties props = new Properties();\nprops.put(\"java.naming.factory.initial\", \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\nprops.put(\"java.naming.provider.url\", connectionUri);\nprops.put(\"topic.topicName\", topicName);\njavax.naming.Context ctx = new InitialContext(props);\nTopicConnectionFactory factory = (TopicConnectionFactory) ctx.lookup(\"ConnectionFactory\");\nTopicConnection conn = factory.createTopicConnection();\nfinal Topic topic = (Topic) ctx.lookup(\"topicName\");\nTopicSession session = conn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);\nTopicSubscriber receiver = session.createSubscriber(topic, selectors, false);\nreceiver.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\ntry {\nif (message instanceof TextMessage) {\nTextMessage txtMsg = (TextMessage) message;\nString msg = txtMsg.getText();\nLOG.info(\"Topic Message Received: \" + topicName + \" - \" + msg);\n}\nmessage.acknowledge();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\nconn.start();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2243_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2003
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 2
                },
                {
                        "id": "test_logbench-o_data_1713",
                        "content": "@Test(timeout = 60000)\npublic void testCRLF() throws Exception {\nfor (TransportConnector connector : brokerService.getTransportConnectors()) {\nLOG.info(\"try: \" + connector.getConnectUri());\nint port = connector.getConnectUri().getPort();\nStompConnection stompConnection = new StompConnection();\nstompConnection.open(createSocket(port));\nString frame = \"CONNECT\\r\\n\\r\\n\" + Stomp.NULL;\nstompConnection.sendFrame(frame);\nframe = stompConnection.receiveFrame();\nLOG.info(\"response from: \" + connector.getConnectUri() + \", \" + frame);\nassertTrue(frame.startsWith(\"CONNECTED\"));\nstompConnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_StompTelnetTest_testCRLF.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 4
                },
                {
                        "id": "pretrain_java_data_139422",
                        "content": "<filename>LACCPlus/ActiveMQ/587_2.java<gh_stars>0\n//,temp,StompTelnetTest.java,53,70,temp,StompTelnetTest.java,34,51\n//,2\npublic class xxx {\n@Test(timeout = 60000)\npublic void testCRLF() throws Exception {\nfor (TransportConnector connector : brokerService.getTransportConnectors()) {\nLOG.info(\"try: \" + connector.getConnectUri());\nint port = connector.getConnectUri().getPort();\nStompConnection stompConnection = new StompConnection();\nstompConnection.open(createSocket(port));\nString frame = \"CONNECT\\r\\n\\r\\n\" + Stomp.NULL;\nstompConnection.sendFrame(frame);\nframe = stompConnection.receiveFrame();\nLOG.info(\"response from: \" + connector.getConnectUri() + \", \" + frame);\nassertTrue(frame.startsWith(\"CONNECTED\"));\nstompConnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/587_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 4
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 3
                },
                {
                        "id": "pretrain_java_data_1648913",
                        "content": "//,temp,AMQ4636Test.java,190,228,temp,ConnectionPerMessageTest.java,41,80\n//,3\npublic class xxx {\npublic void testConnectionPerMessage() throws Exception {\nfinal String topicName = \"test.topic\";\nLOG.info(\"Initializing connection factory for JMS to URL: \"\n+ bindAddress);\nfinal ActiveMQConnectionFactory normalFactory = new ActiveMQConnectionFactory();\nnormalFactory.setBrokerURL(bindAddress);\nfor (int i = 0; i < COUNT; i++) {\nif (i % 100 == 0) {\nLOG.info(new Integer(i).toString());\n}\nConnection conn = null;\ntry {\nconn = normalFactory.createConnection();\nfinal Session session = conn.createSession(false,\nSession.AUTO_ACKNOWLEDGE);\nfinal Topic topic = session.createTopic(topicName);\nfinal MessageProducer producer = session.createProducer(topic);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nfinal MapMessage m = session.createMapMessage();\nm.setInt(\"hey\", i);\nproducer.send(m);\n} catch (JMSException e) {\nLOG.warn(e.getMessage(), e);\n} finally {\nif (conn != null)\ntry {\nconn.close();\n} catch (JMSException e) {\nLOG.warn(e.getMessage(), e);\n}\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/317_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1925
                },
                {
                        "id": "test_logbench-o_data_1926",
                        "content": "public void testConnectionPerMessage() throws Exception {\nfinal String topicName = \"test.topic\";\nLOG.info(\"Initializing connection factory for JMS to URL: \" + bindAddress);\nfinal ActiveMQConnectionFactory normalFactory = new ActiveMQConnectionFactory();\nnormalFactory.setBrokerURL(bindAddress);\nfor (int i = 0; i < COUNT; i++) {\nif (i % 100 == 0) {\nLOG.info(Integer.toString(i));\n}\nConnection conn = null;\ntry {\nconn = normalFactory.createConnection();\nfinal Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfinal Topic topic = session.createTopic(topicName);\nfinal MessageProducer producer = session.createProducer(topic);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nfinal MapMessage m = session.createMapMessage();\nm.setInt(\"hey\", i);\nproducer.send(m);\n} catch (JMSException e) {\nLOG.warn(e.getMessage(), e);\n} finally {\nif (conn != null)\ntry {\nconn.close();\n} catch (JMSException e) {\nLOG.warn(e.getMessage(), e);\n}\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ConnectionPerMessageTest_testConnectionPerMessage.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1925
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 4
                },
                {
                        "id": "test_logbench-o_data_3173",
                        "content": "private void consumeMessages(AtomicLong count) throws Exception {\nJmsConnection connection = (JmsConnection) factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, ActiveMQSession.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getDestinationName());\nMessageConsumer consumer = session.createConsumer(queue);\nlong v;\nwhile ((v = count.decrementAndGet()) > 0) {\nif ((count.get() % 10000) == 0) {\nLOG.info(\"Received message: {}\", NUM_SENDS - count.get());\n}\nassertNotNull(\"got message \" + v, consumer.receive(15000));\n}\nLOG.info(\"Received message: {}\", NUM_SENDS);\nconsumer.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JmsSendReceiveStressTest_consumeMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3172
                },
                {
                        "id": "pretrain_java_data_1688027",
                        "content": "//,temp,AMQ5863CompositePublishTest.java,86,110,temp,JmsSendReceiveStressTest.java,124,140\n//,3\npublic class xxx {\nprivate void consumeMessages(AtomicLong count) throws Exception {\nJmsConnection connection = (JmsConnection) factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, ActiveMQSession.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getDestinationName());\nMessageConsumer consumer = session.createConsumer(queue);\nlong v;\nwhile ((v = count.decrementAndGet()) > 0) {\nif ((count.get() % 10000) == 0) {\nLOG.info(\"Received message: {}\", NUM_SENDS - count.get());\n}\nassertNotNull(\"got message \" + v, consumer.receive(15000));\n}\nLOG.info(\"Received message: {}\", NUM_SENDS);\nconsumer.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/399_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3172
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 5
                },
                {
                        "id": "test_logbench-o_data_2009",
                        "content": "public void run() {\ntry {\nint count = 0;\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(destination);\nwhile (consumer.receive(messageReceiveTimeout) == null) {\nconsumerReady.countDown();\n}\ncount++;\nLOG.info(\"Received one... waiting\");\nconsumerContinue.await();\nif (consumeAll) {\nLOG.info(\"Consuming the rest of the messages...\");\nwhile (consumer.receive(messageReceiveTimeout) != null) {\ncount++;\n}\n}\nLOG.info(\"consumer session closing: consumed count: \" + count);\nsession.close();\n} catch (Throwable ex) {\nex.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ2314Test_run.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2008
                },
                {
                        "id": "pretrain_java_data_16018078",
                        "content": "<gh_stars>0\n//,temp,AMQ2314Test.java,103,126,temp,DiscriminatingConsumerLoadTest.java,270,299\n//,3\npublic class xxx {\npublic void run() {\ntry {\nint count = 0;\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(destination);\nwhile (consumer.receive(messageReceiveTimeout) == null) {\nconsumerReady.countDown();\n}\ncount++;\nLOG.info(\"Received one... waiting\");\nconsumerContinue.await();\nif (consumeAll) {\nLOG.info(\"Consuming the rest of the messages...\");\nwhile (consumer.receive(messageReceiveTimeout) != null) {\ncount++;\n}\n}\nLOG.info(\"consumer session closing: consumed count: \" + count);\nsession.close();\n} catch (Throwable ex) {\nex.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/868_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2008
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 6
                },
                {
                        "id": "pretrain_java_data_17628773",
                        "content": "//,temp,ConsumerListenerTest.java,132,144,temp,TempDestDeleteTest.java,130,141\n//,3\npublic class xxx {\nprotected MessageConsumer createConsumer(Destination dest) throws JMSException {\nfinal String consumerText = \"Consumer: \" + (++consumerCounter);\nLOG.info(\"Creating consumer: \" + consumerText + \" on destination: \" + dest);\nMessageConsumer consumer = session.createConsumer(dest);\nconsumer.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\nLOG.info(\"Received message by: \" + consumerText + \" message: \" + message);\n}\n});\nreturn consumer;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2199_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 574
                },
                {
                        "id": "test_logbench-o_data_575",
                        "content": "protected MessageConsumer createConsumer(Destination dest) throws JMSException {\nfinal String consumerText = \"Consumer: \" + (++consumerCounter);\nLOG.info(\"Creating consumer: \" + consumerText + \" on destination: \" + dest);\nMessageConsumer consumer = session.createConsumer(dest);\nconsumer.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\nLOG.info(\"Received message by: \" + consumerText + \" message: \" + message);\n}\n});\nreturn consumer;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_TempDestDeleteTest_createConsumer.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 574
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 7
                },
                {
                        "id": "test_logbench-o_data_1523",
                        "content": "public void testNoDuplicateAfterCacheFullAndReadPast() throws Exception {\nfinal PersistenceAdapter persistenceAdapter = brokerService.getPersistenceAdapter();\nfinal MessageStore queueMessageStore = persistenceAdapter.createQueueMessageStore(destination);\nfinal ConsumerInfo consumerInfo = new ConsumerInfo();\nfinal DestinationStatistics destinationStatistics = new DestinationStatistics();\nconsumerInfo.setExclusive(true);\nfinal Queue queue = new Queue(brokerService, destination, queueMessageStore, destinationStatistics, null);\nqueueMessageStore.start();\nqueueMessageStore.registerIndexListener(null);\nQueueStorePrefetch underTest = new QueueStorePrefetch(queue, brokerService.getBroker());\nSystemUsage systemUsage = new SystemUsage();\n// ensure memory limit is reached\nsystemUsage.getMemoryUsage().setLimit(messageBytesSize * (count + 2));\nunderTest.setSystemUsage(systemUsage);\nunderTest.setEnableAudit(false);\nunderTest.start();\nassertTrue(\"cache enabled\", underTest.isUseCache() && underTest.isCacheEnabled());\nfinal ConnectionContext contextNotInTx = new ConnectionContext();\nfor (int i = 0; i < count; i++) {\nActiveMQTextMessage msg = getMessage(i);\nmsg.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(contextNotInTx, msg);\nunderTest.addMessageLast(msg);\n}\nassertTrue(\"cache is disabled as limit reached\", !underTest.isCacheEnabled());\nint dequeueCount = 0;\nunderTest.setMaxBatchSize(2);\nunderTest.reset();\nwhile (underTest.hasNext() && dequeueCount < count) {\nMessageReference ref = underTest.next();\nref.decrementReferenceCount();\nunderTest.remove();\nLOG.info(\"Received message: {} with body: {}\", ref.getMessageId(), ((ActiveMQTextMessage) ref.getMessage()).getText());\nassertEquals(dequeueCount++, ref.getMessageId().getProducerSequenceId());\n}\nunderTest.release();\nassertEquals(count, dequeueCount);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_StoreQueueCursorNoDuplicateTest_testNoDuplicateAfterCacheFullAndReadPast.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1522
                },
                {
                        "id": "pretrain_java_data_4864698",
                        "content": "//,temp,MemoryMessageStoreQueueCursorTest.java,67,131,temp,StoreQueueCursorNoDuplicateTest.java,70,118\n//,3\npublic class xxx {\npublic void testNoDuplicateAfterCacheFullAndReadPast() throws Exception {\nfinal PersistenceAdapter persistenceAdapter = brokerService\n.getPersistenceAdapter();\nfinal MessageStore queueMessageStore = persistenceAdapter\n.createQueueMessageStore(destination);\nfinal ConsumerInfo consumerInfo = new ConsumerInfo();\nfinal DestinationStatistics destinationStatistics = new DestinationStatistics();\nconsumerInfo.setExclusive(true);\nfinal Queue queue = new Queue(brokerService, destination,\nqueueMessageStore, destinationStatistics, null);\nqueueMessageStore.start();\nqueueMessageStore.registerIndexListener(null);\nQueueStorePrefetch underTest = new QueueStorePrefetch(queue, brokerService.getBroker());\nSystemUsage systemUsage = new SystemUsage();\n// ensure memory limit is reached\nsystemUsage.getMemoryUsage().setLimit(messageBytesSize * (count + 2));\nunderTest.setSystemUsage(systemUsage);\nunderTest.setEnableAudit(false);\nunderTest.start();\nassertTrue(\"cache enabled\", underTest.isUseCache() && underTest.isCacheEnabled());\nfinal ConnectionContext contextNotInTx = new ConnectionContext();\nfor (int i = 0; i < count; i++) {\nActiveMQTextMessage msg = getMessage(i);\nmsg.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(contextNotInTx, msg);\nunderTest.addMessageLast(msg);\n}\nassertTrue(\"cache is disabled as limit reached\", !underTest.isCacheEnabled());\nint dequeueCount = 0;\nunderTest.setMaxBatchSize(2);\nunderTest.reset();\nwhile (underTest.hasNext() && dequeueCount < count) {\nMessageReference ref = underTest.next();\nref.decrementReferenceCount();\nunderTest.remove();\nLOG.info(\"Received message: {} with body: {}\",\nref.getMessageId(), ((ActiveMQTextMessage)ref.getMessage()).getText());\nassertEquals(dequeueCount++, ref.getMessageId().getProducerSequenceId());\n}\nunderTest.release();\nassertEquals(count, dequeueCount);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2411_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1522
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 8
                },
                {
                        "id": "pretrain_java_data_4978639",
                        "content": "//,temp,JobSchedulerStoreTest.java,36,76,temp,InMemoryJobSchedulerStoreTest.java,40,73\n//,3\npublic class xxx {\n@Test(timeout = 120 * 1000)\npublic void testRestart() throws Exception {\nJobSchedulerStore store = new JobSchedulerStoreImpl();\nFile directory = new File(\"target/test/ScheduledDB\");\nIOHelper.mkdirs(directory);\nIOHelper.deleteChildren(directory);\nstore.setDirectory(directory);\nfinal int NUMBER = 1000;\nstore.start();\nList<ByteSequence> list = new ArrayList<ByteSequence>();\nfor (int i = 0; i < NUMBER; i++) {\nByteSequence buff = new ByteSequence(new String(\"testjob\" + i).getBytes());\nlist.add(buff);\n}\nJobScheduler js = store.getJobScheduler(\"test\");\njs.startDispatching();\nint count = 0;\nlong startTime = 10 * 60 * 1000;\nlong period = startTime;\nfor (ByteSequence job : list) {\njs.schedule(\"id:\" + (count++), job, \"\", startTime, period, -1);\n}\nList<Job> test = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store before restart\", test.size());\nassertEquals(list.size(), test.size());\nstore.stop();\nstore.start();\njs = store.getJobScheduler(\"test\");\ntest = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store after restart\", test.size());\nassertEquals(list.size(), test.size());\nfor (int i = 0; i < list.size(); i++) {\nString orig = new String(list.get(i).getData());\nString payload = new String(test.get(i).getPayload());\nassertEquals(orig, payload);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2429_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2426
                },
                {
                        "id": "test_logbench-o_data_2944",
                        "content": "@Test(timeout = 120 * 1000)\npublic void testRestart() throws Exception {\nJobSchedulerStore store = new JobSchedulerStoreImpl();\nFile directory = new File(\"target/test/ScheduledDB\");\nIOHelper.mkdirs(directory);\nIOHelper.deleteChildren(directory);\nstore.setDirectory(directory);\nfinal int NUMBER = 1000;\nstore.start();\nList<ByteSequence> list = new ArrayList<ByteSequence>();\nfor (int i = 0; i < NUMBER; i++) {\nByteSequence buff = new ByteSequence(new String(\"testjob\" + i).getBytes());\nlist.add(buff);\n}\nJobScheduler js = store.getJobScheduler(\"test\");\njs.startDispatching();\nint count = 0;\nlong startTime = 10 * 60 * 1000;\nlong period = startTime;\nfor (ByteSequence job : list) {\njs.schedule(\"id:\" + (count++), job, \"\", startTime, period, -1);\n}\nList<Job> test = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store before restart\", test.size());\nassertEquals(list.size(), test.size());\nstore.stop();\nstore.start();\njs = store.getJobScheduler(\"test\");\ntest = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store after restart\", test.size());\nassertEquals(list.size(), test.size());\nfor (int i = 0; i < list.size(); i++) {\nString orig = new String(list.get(i).getData());\nString payload = new String(test.get(i).getPayload());\nassertEquals(orig, payload);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JobSchedulerStoreTest_testRestart.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2426
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 9
                },
                {
                        "id": "pretrain_java_data_4978639",
                        "content": "//,temp,JobSchedulerStoreTest.java,36,76,temp,InMemoryJobSchedulerStoreTest.java,40,73\n//,3\npublic class xxx {\n@Test(timeout = 120 * 1000)\npublic void testRestart() throws Exception {\nJobSchedulerStore store = new JobSchedulerStoreImpl();\nFile directory = new File(\"target/test/ScheduledDB\");\nIOHelper.mkdirs(directory);\nIOHelper.deleteChildren(directory);\nstore.setDirectory(directory);\nfinal int NUMBER = 1000;\nstore.start();\nList<ByteSequence> list = new ArrayList<ByteSequence>();\nfor (int i = 0; i < NUMBER; i++) {\nByteSequence buff = new ByteSequence(new String(\"testjob\" + i).getBytes());\nlist.add(buff);\n}\nJobScheduler js = store.getJobScheduler(\"test\");\njs.startDispatching();\nint count = 0;\nlong startTime = 10 * 60 * 1000;\nlong period = startTime;\nfor (ByteSequence job : list) {\njs.schedule(\"id:\" + (count++), job, \"\", startTime, period, -1);\n}\nList<Job> test = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store before restart\", test.size());\nassertEquals(list.size(), test.size());\nstore.stop();\nstore.start();\njs = store.getJobScheduler(\"test\");\ntest = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store after restart\", test.size());\nassertEquals(list.size(), test.size());\nfor (int i = 0; i < list.size(); i++) {\nString orig = new String(list.get(i).getData());\nString payload = new String(test.get(i).getPayload());\nassertEquals(orig, payload);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2429_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2426
                },
                {
                        "id": "test_logbench-o_data_2427",
                        "content": "@Test(timeout = 120 * 1000)\npublic void testRestart() throws Exception {\nInMemoryJobSchedulerStore store = new InMemoryJobSchedulerStore();\nFile directory = new File(\"target/test/ScheduledDB\");\nIOHelper.mkdirs(directory);\nIOHelper.deleteChildren(directory);\nstore.setDirectory(directory);\nfinal int NUMBER = 1000;\nstore.start();\nList<ByteSequence> list = new ArrayList<ByteSequence>();\nfor (int i = 0; i < NUMBER; i++) {\nByteSequence buff = new ByteSequence(new String(\"testjob\" + i).getBytes());\nlist.add(buff);\n}\nJobScheduler js = store.getJobScheduler(\"test\");\njs.startDispatching();\nint count = 0;\nlong startTime = 10 * 60 * 1000;\nlong period = startTime;\nfor (ByteSequence job : list) {\njs.schedule(\"id:\" + (count++), job, \"\", startTime, period, -1);\n}\nList<Job> test = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store before restart\", test.size());\nassertEquals(list.size(), test.size());\nstore.stop();\nstore.start();\njs = store.getJobScheduler(\"test\");\ntest = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store after restart\", test.size());\nassertEquals(0, test.size());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_InMemoryJobSchedulerStoreTest_testRestart.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2426
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 10
                },
                {
                        "id": "test_logbench-o_data_970",
                        "content": "@Test\npublic void testLostMessage() {\nConnection connection = null;\ntry {\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://localhost?broker.useJmx=false\");\nconnection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nDestination test_data_destination = session.createQueue(\"test\" + System.currentTimeMillis());\nMessageConsumer consumer = session.createConsumer(test_data_destination);\nLOG.info(\"Consumer 1 connected\");\nMessageProducer producer = session.createProducer(test_data_destination);\nproducer.send(session.createTextMessage(\"Message 1\"));\n// committing the session prior to the close\nsession.commit();\n// starting a new transaction\nproducer.send(session.createTextMessage(\"Message 2\"));\n// in a new transaction, with prefetch>0, the message\n// 1 will be pending till second commit\nLOG.info(\"Closing consumer 1...\");\nconsumer.close();\n// create a consumer\nconsumer = session.createConsumer(test_data_destination);\nLOG.info(\"Consumer 2 connected\");\n// retrieve message previously committed to tmp queue\nMessage message = consumer.receive(10000);\nif (message != null) {\nLOG.info(\"Got message 1:\", message);\nassertEquals(\"expected message\", \"Message 1\", ((TextMessage) message).getText());\nsession.commit();\n} else {\nLOG.error(\"Expected message but it never arrived\");\n}\nassertNotNull(message);\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ4472Test_testLostMessage.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 969
                },
                {
                        "id": "pretrain_java_data_6476135",
                        "content": "//,temp,AMQ4472Test.java,39,89,temp,AMQ4554Test.java,77,105\n//,3\npublic class xxx {\n@Test\npublic void testLostMessage() {\nConnection connection = null;\ntry {\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://localhost?broker.useJmx=false\");\nconnection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nDestination test_data_destination = session.createQueue(\"test\"+System.currentTimeMillis());\nMessageConsumer consumer = session.createConsumer(test_data_destination);\nLOG.info(\"Consumer 1 connected\");\nMessageProducer producer = session.createProducer(test_data_destination);\nproducer.send(session.createTextMessage(\"Message 1\"));\n// committing the session prior to the close\nsession.commit();\n// starting a new transaction\nproducer.send(session.createTextMessage(\"Message 2\"));\n// in a new transaction, with prefetch>0, the message\n// 1 will be pending till second commit\nLOG.info(\"Closing consumer 1...\");\nconsumer.close();\n// create a consumer\nconsumer = session.createConsumer(test_data_destination);\nLOG.info(\"Consumer 2 connected\");\n// retrieve message previously committed to tmp queue\nMessage message = consumer.receive(10000);\nif (message != null) {\nLOG.info(\"Got message 1:\", message);\nassertEquals(\"expected message\", \"Message 1\", ((TextMessage) message).getText());\nsession.commit();\n} else {\nLOG.error(\"Expected message but it never arrived\");\n}\nassertNotNull(message);\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/367_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 969
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 11
                },
                {
                        "id": "test_logbench-o_data_716",
                        "content": "private static void produce(String brokerURL, int count) throws Exception {\nConnection connection = null;\ntry {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURL);\nconnection = factory.createConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(destination);\nproducer.setTimeToLive(0);\nconnection.start();\nfor (int i = 0; i < count; i++) {\nint id = i + 1;\nTextMessage message = session.createTextMessage(\"Message \" + id);\nmessage.setIntProperty(\"MsgNumber\", id);\nproducer.send(message);\nif (id % 500 == 0) {\nLOG.info(\"sent \" + id + \", ith \" + message);\n}\n}\n} finally {\ntry {\nif (connection != null) {\nconnection.close();\n}\n} catch (Throwable e) {\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ2171Test_produce.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 715
                },
                {
                        "id": "pretrain_java_data_8079480",
                        "content": "//,temp,JMSClientTransactionTest.java,321,345,temp,AMQ2171Test.java,111,141\n//,3\npublic class xxx {\nprivate static void produce(String brokerURL, int count) throws Exception {\nConnection connection = null;\ntry {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURL);\nconnection = factory.createConnection();\nSession session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(destination);\nproducer.setTimeToLive(0);\nconnection.start();\nfor (int i = 0; i < count; i++) {\nint id = i + 1;\nTextMessage message = session.createTextMessage(\"Message \" + id);\nmessage.setIntProperty(\"MsgNumber\", id);\nproducer.send(message);\nif (id % 500 == 0) {\nLOG.info(\"sent \" + id + \", ith \" + message);\n}\n}\n} finally {\ntry {\nif (connection != null) {\nconnection.close();\n}\n} catch (Throwable e) {\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/939_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 715
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 12
                },
                {
                        "id": "test_logbench-o_data_2927",
                        "content": "@Test(timeout = 60000)\npublic void testSessionClosedDoesNotGetReceiverDetachFromRemote() throws Exception {\nAmqpClient client = createAmqpClient();\nassertNotNull(client);\nclient.setValidator(new AmqpValidator() {\n@Override\npublic void inspectClosedResource(Session session) {\nLOG.info(\"Session closed: {}\", session.getContext());\n}\n@Override\npublic void inspectDetachedResource(Receiver receiver) {\nmarkAsInvalid(\"Broker should not detach receiver linked to closed session.\");\n}\n@Override\npublic void inspectClosedResource(Receiver receiver) {\nmarkAsInvalid(\"Broker should not close receiver linked to closed session.\");\n}\n});\nAmqpConnection connection = trackConnection(client.connect());\nassertNotNull(connection);\nAmqpSession session = connection.createSession();\nassertNotNull(session);\nAmqpReceiver receiver = session.createReceiver(\"queue://\" + getTestName());\nassertNotNull(receiver);\nsession.close();\nconnection.getStateInspector().assertValid();\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AmqpSessionTest_testSessionClosedDoesNotGetReceiverDetachFromRemote.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2926
                },
                {
                        "id": "pretrain_java_data_8120659",
                        "content": "<filename>LACCPlus/ActiveMQ/327_1.java\n//,temp,AmqpSessionTest.java,84,118,temp,AmqpReceiverTest.java,202,237\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testSessionClosedDoesNotGetReceiverDetachFromRemote() throws Exception {\nAmqpClient client = createAmqpClient();\nassertNotNull(client);\nclient.setValidator(new AmqpValidator() {\n@Override\npublic void inspectClosedResource(Session session) {\nLOG.info(\"Session closed: {}\", session.getContext());\n}\n@Override\npublic void inspectDetachedResource(Receiver receiver) {\nmarkAsInvalid(\"Broker should not detach receiver linked to closed session.\");\n}\n@Override\npublic void inspectClosedResource(Receiver receiver) {\nmarkAsInvalid(\"Broker should not close receiver linked to closed session.\");\n}\n});\nAmqpConnection connection = trackConnection(client.connect());\nassertNotNull(connection);\nAmqpSession session = connection.createSession();\nassertNotNull(session);\nAmqpReceiver receiver = session.createReceiver(\"queue://\" + getTestName());\nassertNotNull(receiver);\nsession.close();\nconnection.getStateInspector().assertValid();\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/327_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2926
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 13
                },
                {
                        "id": "pretrain_java_data_11252267",
                        "content": "//,temp,PooledSessionExhaustionBlockTimeoutTest.java,130,179,temp,PooledSessionExhaustionTest.java,126,175\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testCanExhaustSessions() throws Exception {\nfinal int totalMessagesExpected =  NUM_MESSAGES * 2;\nfinal CountDownLatch latch = new CountDownLatch(2);\nThread thread = new Thread(new Runnable() {\n@Override\npublic void run() {\ntry {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);\nConnection connection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(QUEUE);\nMessageConsumer consumer = session.createConsumer(destination);\nfor (int i = 0; i < totalMessagesExpected; ++i) {\nMessage msg = consumer.receive(5000);\nif (msg == null) {\nreturn;\n}\nnumReceived++;\nif (numReceived % 20 == 0) {\nLOG.debug(\"received \" + numReceived + \" messages \");\nSystem.runFinalization();\n}\n}\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\n});\nthread.start();\nExecutorService threads = Executors.newFixedThreadPool(2);\nfinal CyclicBarrier barrier = new CyclicBarrier(2, new Runnable() {\n@Override\npublic void run() {\nLOG.trace(\"Starting threads to send messages!\");\n}\n});\nthreads.execute(new TestRunner(barrier, latch));\nthreads.execute(new TestRunner(barrier, latch));\nlatch.await(2, TimeUnit.SECONDS);\nthread.join();\nassertEquals(totalMessagesExpected, numReceived);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/404_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 844
                },
                {
                        "id": "test_logbench-o_data_3704",
                        "content": "@Test(timeout = 60000)\npublic void testCanExhaustSessions() throws Exception {\nfinal int totalMessagesExpected = NUM_MESSAGES * 2;\nfinal CountDownLatch latch = new CountDownLatch(2);\nThread thread = new Thread(new Runnable() {\n@Override\npublic void run() {\ntry {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);\nConnection connection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(QUEUE);\nMessageConsumer consumer = session.createConsumer(destination);\nfor (int i = 0; i < totalMessagesExpected; ++i) {\nMessage msg = consumer.receive(5000);\nif (msg == null) {\nreturn;\n}\nnumReceived++;\nif (numReceived % 20 == 0) {\nLOG.debug(\"received \" + numReceived + \" messages \");\nSystem.runFinalization();\n}\n}\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\n});\nthread.start();\nExecutorService threads = Executors.newFixedThreadPool(2);\nfinal CyclicBarrier barrier = new CyclicBarrier(2, new Runnable() {\n@Override\npublic void run() {\nLOG.trace(\"Starting threads to send messages!\");\n}\n});\nthreads.execute(new TestRunner(barrier, latch));\nthreads.execute(new TestRunner(barrier, latch));\nlatch.await(2, TimeUnit.SECONDS);\nthread.join();\nassertEquals(totalMessagesExpected, numReceived);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_PooledSessionExhaustionBlockTimeoutTest_testCanExhaustSessions.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 844
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 14
                },
                {
                        "id": "pretrain_java_data_11399979",
                        "content": "//,temp,AMQ4636Test.java,165,188,temp,AMQ4671Test.java,57,79\n//,3\npublic class xxx {\n@Test(timeout = 30000)\npublic void testNonDurableSubscriberInvalidUnsubscribe() throws Exception {\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);\nConnection connection = connectionFactory.createConnection();\nconnection.setClientID(getClass().getName());\nconnection.start();\ntry {\nSession ts = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\ntry {\nts.unsubscribe(\"invalid-subscription-name\");\nfail(\"this should fail\");\n} catch (javax.jms.InvalidDestinationException e) {\nLOG.info(\"Test caught correct invalid destination exception\");\n}\n} finally {\nif (connection != null) {\nconnection.close();\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/799_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1230
                },
                {
                        "id": "test_logbench-o_data_1231",
                        "content": "@Test(timeout = 30000)\npublic void testNonDurableSubscriberInvalidUnsubscribe() throws Exception {\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);\nConnection connection = connectionFactory.createConnection();\nconnection.setClientID(getClass().getName());\nconnection.start();\ntry {\nSession ts = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\ntry {\nts.unsubscribe(\"invalid-subscription-name\");\nfail(\"this should fail\");\n} catch (javax.jms.InvalidDestinationException e) {\nLOG.info(\"Test caught correct invalid destination exception\");\n}\n} finally {\nif (connection != null) {\nconnection.close();\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ4671Test_testNonDurableSubscriberInvalidUnsubscribe.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1230
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 15
                },
                {
                        "id": "pretrain_java_data_11389130",
                        "content": "<filename>LACCPlus/ActiveMQ/932_1.java\n//,temp,KahaDBSchedulerMissingJournalLogsTest.java,128,159,temp,KahaDBSchedulerMissingJournalLogsTest.java,99,126\n//,3\npublic class xxx {\n@Test(timeout=120 * 1000)\npublic void testRecoverWhenSomeLogsAreMissing() throws Exception {\nfillUpSomeLogFiles();\nint jobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();\nLOG.info(\"There are {} jobs in the store.\", jobCount);\nList<File> toDelete = new ArrayList<File>();\nMap<Integer, DataFile> files = schedulerStore.getJournal().getFileMap();\nfor (int i = files.size() - 1; i > files.size() / 2; i--) {\ntoDelete.add(files.get(i).getFile());\n}\nbroker.stop();\nbroker.waitUntilStopped();\nfor (File file : toDelete) {\nLOG.info(\"File to delete: {}\", file);\nIOHelper.delete(file);\n}\nschedulerStore = createScheduler();\nschedulerStore.setIgnoreMissingJournalfiles(true);\ncreateBroker(schedulerStore);\nbroker.start();\nbroker.waitUntilStarted();\nint postRecoverJobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();\nassertTrue(postRecoverJobCount > 0);\nassertTrue(postRecoverJobCount < jobCount);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/932_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1248
                },
                {
                        "id": "test_logbench-o_data_1671",
                        "content": "@Test(timeout = 120 * 1000)\npublic void testRecoverWhenSomeLogsAreMissing() throws Exception {\nfillUpSomeLogFiles();\nint jobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();\nLOG.info(\"There are {} jobs in the store.\", jobCount);\nList<File> toDelete = new ArrayList<File>();\nMap<Integer, DataFile> files = schedulerStore.getJournal().getFileMap();\nfor (int i = files.size() - 1; i > files.size() / 2; i--) {\ntoDelete.add(files.get(i).getFile());\n}\nbroker.stop();\nbroker.waitUntilStopped();\nfor (File file : toDelete) {\nLOG.info(\"File to delete: {}\", file);\nIOHelper.delete(file);\n}\nschedulerStore = createScheduler();\nschedulerStore.setIgnoreMissingJournalfiles(true);\ncreateBroker(schedulerStore);\nbroker.start();\nbroker.waitUntilStarted();\nint postRecoverJobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();\nassertTrue(postRecoverJobCount > 0);\nassertTrue(postRecoverJobCount < jobCount);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_KahaDBSchedulerMissingJournalLogsTest_testRecoverWhenSomeLogsAreMissing.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1248
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 16
                },
                {
                        "id": "test_logbench-o_data_3377",
                        "content": "@org.junit.Test\npublic void testFailoverSendCommitReplyLost() throws Exception {\nbroker = createBroker(true);\nfinal AtomicBoolean first = new AtomicBoolean(false);\nbroker.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {\n@Override\npublic void commitTransaction(final ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {\nsuper.commitTransaction(context, xid, onePhase);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\n}\n} });\nbroker.start();\nActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(\"failover:(\" + url + \")\");\nXAConnection connection = cf.createXAConnection();\nconnection.start();\nfinal XASession session = connection.createXASession();\nQueue destination = session.createQueue(QUEUE_NAME);\nXid xid = TestUtils.createXid();\nsession.getXAResource().start(xid, XAResource.TMNOFLAGS);\nproduceMessage(session, destination);\nsession.getXAResource().end(xid, XAResource.TMSUCCESS);\ntry {\nsession.getXAResource().prepare(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\ntry {\nsession.getXAResource().commit(xid, false);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\nconnection.close();\nassertEquals(1, broker.getAdminView().getTotalMessageCount());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_FailoverXATransactionTest_testFailoverSendCommitReplyLost.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1396
                },
                {
                        "id": "pretrain_java_data_14505130",
                        "content": "//,temp,FailoverXATransactionTest.java,154,210,temp,FailoverXATransactionTest.java,94,152\n//,3\npublic class xxx {\n@org.junit.Test\npublic void testFailoverSendPrepareReplyLost() throws Exception {\nbroker = createBroker(true);\nfinal AtomicBoolean first = new AtomicBoolean(false);\nbroker.setPlugins(new BrokerPlugin[]{\nnew BrokerPluginSupport() {\n@Override\npublic int prepareTransaction(final ConnectionContext context,\nTransactionId xid) throws Exception {\nint result = super.prepareTransaction(context, xid);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\nreturn result;\n}\n}\n});\nbroker.start();\nActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(\"failover:(\" + url + \")\");\nXAConnection connection = cf.createXAConnection();\nconnection.start();\nfinal XASession session = connection.createXASession();\nQueue destination = session.createQueue(QUEUE_NAME);\nXid xid = TestUtils.createXid();\nsession.getXAResource().start(xid, XAResource.TMNOFLAGS);\nproduceMessage(session, destination);\nsession.getXAResource().end(xid, XAResource.TMSUCCESS);\ntry {\nsession.getXAResource().prepare(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\ntry {\nsession.getXAResource().rollback(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\nconnection.close();\nassertEquals(0, broker.getAdminView().getTotalMessageCount());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1043_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1396
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 17
                },
                {
                        "id": "test_logbench-o_data_1397",
                        "content": "@org.junit.Test\npublic void testFailoverSendPrepareReplyLost() throws Exception {\nbroker = createBroker(true);\nfinal AtomicBoolean first = new AtomicBoolean(false);\nbroker.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {\n@Override\npublic int prepareTransaction(final ConnectionContext context, TransactionId xid) throws Exception {\nint result = super.prepareTransaction(context, xid);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\nreturn result;\n}\n} });\nbroker.start();\nActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(\"failover:(\" + url + \")\");\nXAConnection connection = cf.createXAConnection();\nconnection.start();\nfinal XASession session = connection.createXASession();\nQueue destination = session.createQueue(QUEUE_NAME);\nXid xid = TestUtils.createXid();\nsession.getXAResource().start(xid, XAResource.TMNOFLAGS);\nproduceMessage(session, destination);\nsession.getXAResource().end(xid, XAResource.TMSUCCESS);\ntry {\nsession.getXAResource().prepare(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\ntry {\nsession.getXAResource().rollback(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\nconnection.close();\nassertEquals(0, broker.getAdminView().getTotalMessageCount());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_FailoverXATransactionTest_testFailoverSendPrepareReplyLost.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1396
                },
                {
                        "id": "pretrain_java_data_14505130",
                        "content": "//,temp,FailoverXATransactionTest.java,154,210,temp,FailoverXATransactionTest.java,94,152\n//,3\npublic class xxx {\n@org.junit.Test\npublic void testFailoverSendPrepareReplyLost() throws Exception {\nbroker = createBroker(true);\nfinal AtomicBoolean first = new AtomicBoolean(false);\nbroker.setPlugins(new BrokerPlugin[]{\nnew BrokerPluginSupport() {\n@Override\npublic int prepareTransaction(final ConnectionContext context,\nTransactionId xid) throws Exception {\nint result = super.prepareTransaction(context, xid);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\nreturn result;\n}\n}\n});\nbroker.start();\nActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(\"failover:(\" + url + \")\");\nXAConnection connection = cf.createXAConnection();\nconnection.start();\nfinal XASession session = connection.createXASession();\nQueue destination = session.createQueue(QUEUE_NAME);\nXid xid = TestUtils.createXid();\nsession.getXAResource().start(xid, XAResource.TMNOFLAGS);\nproduceMessage(session, destination);\nsession.getXAResource().end(xid, XAResource.TMSUCCESS);\ntry {\nsession.getXAResource().prepare(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\ntry {\nsession.getXAResource().rollback(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\nconnection.close();\nassertEquals(0, broker.getAdminView().getTotalMessageCount());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1043_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1396
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 18
                },
                {
                        "id": "pretrain_java_data_14429767",
                        "content": "//,temp,BrowseOverNetworkTest.java,43,75,temp,TwoBrokerNetworkLoadBalanceTest.java,32,67\n//,3\npublic class xxx {\npublic void testLoadBalancing() throws Exception {\nbridgeBrokers(\"BrokerA\", \"BrokerB\");\nbridgeBrokers(\"BrokerB\", \"BrokerA\");\nstartAllBrokers();\nwaitForBridgeFormation();\n// Setup destination\nDestination dest = createDestination(\"TEST.FOO\", false);\n// Setup consumers\nMessageConsumer clientA = createConsumer(\"BrokerA\", dest);\n// Setup consumers\nMessageConsumer clientB = createConsumer(\"BrokerB\", dest);\n// Send messages\nsendMessages(\"BrokerA\", dest, 5000);\n// Send messages\nsendMessages(\"BrokerB\", dest, 1000);\n// Get message count\nfinal MessageIdList msgsA = getConsumerMessages(\"BrokerA\", clientA);\nfinal MessageIdList msgsB = getConsumerMessages(\"BrokerB\", clientB);\nWait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nreturn msgsA.getMessageCount() + msgsB.getMessageCount() == 6000;\n}});\nLOG.info(\"A got: \" +  msgsA.getMessageCount());\nLOG.info(\"B got: \" +  msgsB.getMessageCount());\nassertTrue(\"B got is fair share: \" + msgsB.getMessageCount(), msgsB.getMessageCount() > 2000);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1711_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 141
                },
                {
                        "id": "test_logbench-o_data_142",
                        "content": "public void testLoadBalancing() throws Exception {\nbridgeBrokers(\"BrokerA\", \"BrokerB\");\nbridgeBrokers(\"BrokerB\", \"BrokerA\");\nstartAllBrokers();\nwaitForBridgeFormation();\n// Setup destination\nDestination dest = createDestination(\"TEST.FOO\", false);\n// Setup consumers\nMessageConsumer clientA = createConsumer(\"BrokerA\", dest);\n// Setup consumers\nMessageConsumer clientB = createConsumer(\"BrokerB\", dest);\n// Send messages\nsendMessages(\"BrokerA\", dest, 5000);\n// Send messages\nsendMessages(\"BrokerB\", dest, 1000);\n// Get message count\nfinal MessageIdList msgsA = getConsumerMessages(\"BrokerA\", clientA);\nfinal MessageIdList msgsB = getConsumerMessages(\"BrokerB\", clientB);\nWait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nreturn msgsA.getMessageCount() + msgsB.getMessageCount() == 6000;\n}\n});\nLOG.info(\"A got: \" + msgsA.getMessageCount());\nLOG.info(\"B got: \" + msgsB.getMessageCount());\nassertTrue(\"B got is fair share: \" + msgsB.getMessageCount(), msgsB.getMessageCount() > 2000);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_TwoBrokerNetworkLoadBalanceTest_testLoadBalancing.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 141
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 19
                },
                {
                        "id": "test_logbench-o_data_2226",
                        "content": "public void testBlockedTxProducerConnectionTimeoutConnectionCanClose() throws Exception {\nfinal ActiveMQConnection cx = (ActiveMQConnection) createConnection();\nfinal ActiveMQDestination queue = createDestination(\"noPfc\");\ncx.setSendTimeout(4000);\ncx.setCloseTimeout(1000);\nfinal AtomicInteger exceptionCount = new AtomicInteger(0);\nRunnable r = new Runnable() {\npublic void run() {\nint count = 0;\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(queue);\nBytesMessage message = session.createBytesMessage();\nmessage.writeBytes(new byte[8 * 1024]);\nfor (; count < 100; count++) {\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\nLOG.info(\"Got expected send time out on message: \" + count);\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}\n};\ncx.start();\nThread producerThread = new Thread(r);\nproducerThread.start();\nproducerThread.join(7000);\ncx.close();\n// We should have a few timeout exceptions as store will fill up\nassertTrue(\"No exception from the broker\", exceptionCount.get() > 0);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ6240Test_testBlockedTxProducerConnectionTimeoutConnectionCanClose.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2225
                },
                {
                        "id": "pretrain_java_data_12926281",
                        "content": "<gh_stars>0\n//,temp,JmsTimeoutTest.java,95,130,temp,AMQ6240Test.java,41,81\n//,3\npublic class xxx {\npublic void testBlockedTxProducerConnectionTimeoutConnectionCanClose() throws Exception {\nfinal ActiveMQConnection cx = (ActiveMQConnection)createConnection();\nfinal ActiveMQDestination queue = createDestination(\"noPfc\");\ncx.setSendTimeout(4000);\ncx.setCloseTimeout(1000);\nfinal AtomicInteger exceptionCount = new AtomicInteger(0);\nRunnable r = new Runnable() {\npublic void run() {\nint count=0;\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(queue);\nBytesMessage message = session.createBytesMessage();\nmessage.writeBytes(new byte[8*1024]);\nfor(; count<100; count++){\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\nLOG.info(\"Got expected send time out on message: \" + count);\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}\n};\ncx.start();\nThread producerThread = new Thread(r);\nproducerThread.start();\nproducerThread.join(7000);\ncx.close();\n// We should have a few timeout exceptions as store will fill up\nassertTrue(\"No exception from the broker\", exceptionCount.get() > 0);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/979_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2225
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 20
                },
                {
                        "id": "test_logbench-o_data_1914",
                        "content": "@Override\npublic Response messagePull(ConnectionContext context, final MessagePull pull) throws Exception {\ncontext.setDontSendReponse(true);\npullDone.countDown();\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on pull: \" + pull);\ntry {\nbroker.stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\nreturn null;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_FailoverPrefetchZeroTest_messagePull.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1913
                },
                {
                        "id": "pretrain_java_data_14444131",
                        "content": "//,temp,FailoverPrefetchZeroTest.java,90,105,temp,FailoverTransactionTest.java,280,296\n//,3\npublic class xxx {\n@Override\npublic Response messagePull(ConnectionContext context, final MessagePull pull) throws Exception {\ncontext.setDontSendReponse(true);\npullDone.countDown();\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on pull: \" + pull);\ntry {\nbroker.stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\nreturn null;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2201_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1913
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 21
                },
                {
                        "id": "test_logbench-o_data_2730",
                        "content": "public static void waitForJettySocketToAccept(String bindLocation) throws Exception {\nfinal URL url = new URL(bindLocation);\nassertTrue(\"Jetty endpoint is available\", Wait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nboolean canConnect = false;\ntry {\nSocket socket = SocketFactory.getDefault().createSocket(url.getHost(), url.getPort());\nsocket.close();\ncanConnect = true;\n} catch (Exception e) {\nLOG.warn(\"verify jetty available, failed to connect to \" + url + e);\n}\nreturn canConnect;\n}\n}, 60 * 1000));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_WaitForJettyListener_waitForJettySocketToAccept.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 821
                },
                {
                        "id": "pretrain_java_data_327976",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,JettyTestSupport.java,127,143,temp,WaitForJettyListener.java,32,47\n//,3\npublic class xxx {\npublic static void waitForJettySocketToAccept(String bindLocation) throws Exception {\nfinal URL url = new URL(bindLocation);\nassertTrue(\"Jetty endpoint is available\", Wait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nboolean canConnect = false;\ntry {\nSocket socket = SocketFactory.getDefault().createSocket(url.getHost(), url.getPort());\nsocket.close();\ncanConnect = true;\n} catch (Exception e) {\nLOG.warn(\"verify jetty available, failed to connect to \" + url + e);\n}\nreturn canConnect;\n}}, 60 * 1000));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/786_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 821
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 22
                },
                {
                        "id": "test_logbench-o_data_1308",
                        "content": "public void waitForJettySocketToAccept(String bindLocation) throws Exception {\nfinal URL url = new URL(bindLocation);\nassertTrue(\"Jetty endpoint is available\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nboolean canConnect = false;\ntry {\nSocket socket = SocketFactory.getDefault().createSocket(url.getHost(), url.getPort());\nsocket.close();\ncanConnect = true;\n} catch (Exception e) {\nLOG.warn(\"verify jetty available, failed to connect to \" + url + e);\n}\nreturn canConnect;\n}\n}, 60 * 1000));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JettyTestSupport_waitForJettySocketToAccept.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 821
                },
                {
                        "id": "pretrain_java_data_327976",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,JettyTestSupport.java,127,143,temp,WaitForJettyListener.java,32,47\n//,3\npublic class xxx {\npublic static void waitForJettySocketToAccept(String bindLocation) throws Exception {\nfinal URL url = new URL(bindLocation);\nassertTrue(\"Jetty endpoint is available\", Wait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nboolean canConnect = false;\ntry {\nSocket socket = SocketFactory.getDefault().createSocket(url.getHost(), url.getPort());\nsocket.close();\ncanConnect = true;\n} catch (Exception e) {\nLOG.warn(\"verify jetty available, failed to connect to \" + url + e);\n}\nreturn canConnect;\n}}, 60 * 1000));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/786_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 821
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 23
                },
                {
                        "id": "test_logbench-o_data_905",
                        "content": "protected boolean addToAlreadyInterestedConsumers(ConsumerInfo info, boolean isForcedDurable) {\n// If a network subscription and a queue check if isConduitNetworkQueueSubscriptions is true\n// If true then we want to try and conduit\n// For topics we always want to conduit regardless of network subscription or not\nif (info.isNetworkSubscription() && info.getDestination().isQueue() && !configuration.isConduitNetworkQueueSubscriptions()) {\nreturn false;\n}\nboolean matched = false;\n// search through existing subscriptions and see if we have a match\nfor (DemandSubscription ds : subscriptionMapByLocalId.values()) {\nDestinationFilter filter = DestinationFilter.parseFilter(ds.getLocalInfo().getDestination());\nif (canConduit(ds) && filter.matches(info.getDestination())) {\nLOG.debug(\"{} {} with ids {} matched (add interest) {}\", configuration.getBrokerName(), info, info.getNetworkConsumerIds(), ds);\n// add the interest in the subscription\nif (!info.isDurable()) {\nds.add(info.getConsumerId());\nif (isForcedDurable) {\nforcedDurableRemoteId.add(info.getConsumerId());\nds.addForcedDurableConsumer(info.getConsumerId());\n}\n} else {\n// Handle the demand generated by proxy network subscriptions\n// The broker path is case is normal\nif (isProxyNSConsumerBrokerPath(info) && info.getSubscriptionName() != null && info.getSubscriptionName().startsWith(DURABLE_SUB_PREFIX)) {\nfinal BrokerId[] path = info.getBrokerPath();\naddProxyNetworkSubscriptionBrokerPath(ds, path, info.getSubscriptionName());\n// This is the durable sync case on broker restart\n} else if (isProxyNSConsumerClientId(info.getClientId()) && isProxyBridgeSubscription(info.getClientId(), info.getSubscriptionName())) {\naddProxyNetworkSubscriptionClientId(ds, info.getClientId(), info.getSubscriptionName());\n} else {\nds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));\n}\n}\nmatched = true;\n// continue - we want interest to any existing DemandSubscriptions\n}\n}\nreturn matched;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ConduitBridge_addToAlreadyInterestedConsumers.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 904
                },
                {
                        "id": "pretrain_java_data_233810",
                        "content": "//,temp,DemandForwardingBridgeSupport.java,1411,1438,temp,ConduitBridge.java,59,102\n//,3\npublic class xxx {\nprotected boolean addToAlreadyInterestedConsumers(ConsumerInfo info, boolean isForcedDurable) {\n//If a network subscription and a queue check if isConduitNetworkQueueSubscriptions is true\n//If true then we want to try and conduit\n//For topics we always want to conduit regardless of network subscription or not\nif (info.isNetworkSubscription() && info.getDestination().isQueue() &&\n!configuration.isConduitNetworkQueueSubscriptions()) {\nreturn false;\n}\nboolean matched = false;\n// search through existing subscriptions and see if we have a match\nfor (DemandSubscription ds : subscriptionMapByLocalId.values()) {\nDestinationFilter filter = DestinationFilter.parseFilter(ds.getLocalInfo().getDestination());\nif (canConduit(ds) && filter.matches(info.getDestination())) {\nLOG.debug(\"{} {} with ids {} matched (add interest) {}\",\nconfiguration.getBrokerName(), info, info.getNetworkConsumerIds(), ds);\n// add the interest in the subscription\nif (!info.isDurable()) {\nds.add(info.getConsumerId());\nif (isForcedDurable) {\nforcedDurableRemoteId.add(info.getConsumerId());\nds.addForcedDurableConsumer(info.getConsumerId());\n}\n} else {\n//Handle the demand generated by proxy network subscriptions\n//The broker path is case is normal\nif (isProxyNSConsumerBrokerPath(info) &&\ninfo.getSubscriptionName() != null && info.getSubscriptionName().startsWith(DURABLE_SUB_PREFIX)) {\nfinal BrokerId[] path = info.getBrokerPath();\naddProxyNetworkSubscriptionBrokerPath(ds, path, info.getSubscriptionName());\n//This is the durable sync case on broker restart\n} else if (isProxyNSConsumerClientId(info.getClientId()) &&\nisProxyBridgeSubscription(info.getClientId(), info.getSubscriptionName())) {\naddProxyNetworkSubscriptionClientId(ds, info.getClientId(), info.getSubscriptionName());\n} else {\nds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));\n}\n}\nmatched = true;\n// continue - we want interest to any existing DemandSubscriptions\n}\n}\nreturn matched;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2264_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 904
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 24
                },
                {
                        "id": "test_logbench-o_data_948",
                        "content": "public void testProducerForcesNotificationOfNewDestination() throws Exception {\n// now lets cause a destination to be created\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQQueue newQueue = new ActiveMQQueue(\"Test.Beer\");\nMessageProducer producer = session.createProducer(newQueue);\nTextMessage message = session.createTextMessage(\"<hello>world</hello>\");\nproducer.send(message);\nThread.sleep(3000);\nassertThat(newQueue, isIn(newDestinations));\nLOG.info(\"New destinations are: \" + newDestinations);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DestinationListenerTest_testProducerForcesNotificationOfNewDestination.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 947
                },
                {
                        "id": "pretrain_java_data_397527",
                        "content": "//,temp,DestinationListenerTest.java,78,91,temp,JMSClientSimpleAuthTest.java,172,185\n//,3\npublic class xxx {\npublic void testProducerForcesNotificationOfNewDestination() throws Exception {\n// now lets cause a destination to be created\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQQueue newQueue = new ActiveMQQueue(\"Test.Beer\");\nMessageProducer producer = session.createProducer(newQueue);\nTextMessage message = session.createTextMessage(\"<hello>world</hello>\");\nproducer.send(message);\nThread.sleep(3000);\nassertThat(newQueue, isIn(newDestinations));\nLOG.info(\"New destinations are: \" + newDestinations);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/827_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 947
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 25
                },
                {
                        "id": "pretrain_java_data_1804460",
                        "content": "<filename>LACCPlus/ActiveMQ/181_1.java\n//,temp,StompEmptyDestinationTest.java,27,46,temp,Stomp12Test.java,72,106\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testEmptyDestinationOnSubscribe() throws Exception{\nstompConnect();\nstompConnection.sendFrame(\"CONNECT\\n\" + \"login:system\\n\" + \"passcode:<PASSWORD>\" + Stomp.NULL);\nStompFrame frame = stompConnection.receive();\nassertTrue(frame.toString().startsWith(\"CONNECTED\"));\nString send = \"SUBSCRIBE\\r\\n\" +\n\"id:1\\r\\n\" +\n\"destination:\\r\\n\" +\n\"receipt:1\\r\\n\" +\n\"\\r\\n\"+\n\"\\u0000\\r\\n\";\nstompConnection.sendFrame(send);\nStompFrame receipt = stompConnection.receive();\nLOG.info(\"Broker sent: \" + receipt);\nassertTrue(receipt.getAction().startsWith(\"ERROR\"));\nString errorMessage = receipt.getHeaders().get(\"message\");\nassertEquals(\"Invalid empty or 'null' Destination header\", errorMessage);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/181_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 467
                },
                {
                        "id": "test_logbench-o_data_468",
                        "content": "@Test(timeout = 60000)\npublic void testEmptyDestinationOnSubscribe() throws Exception {\nstompConnect();\nstompConnection.sendFrame(\"CONNECT\\n\" + \"login:system\\n\" + \"passcode:manager\\n\\n\" + Stomp.NULL);\nStompFrame frame = stompConnection.receive();\nassertTrue(frame.toString().startsWith(\"CONNECTED\"));\nString send = \"SUBSCRIBE\\r\\n\" + \"id:1\\r\\n\" + \"destination:\\r\\n\" + \"receipt:1\\r\\n\" + \"\\r\\n\" + \"\\u0000\\r\\n\";\nstompConnection.sendFrame(send);\nStompFrame receipt = stompConnection.receive();\nLOG.info(\"Broker sent: \" + receipt);\nassertTrue(receipt.getAction().startsWith(\"ERROR\"));\nString errorMessage = receipt.getHeaders().get(\"message\");\nassertEquals(\"Invalid empty or 'null' Destination header\", errorMessage);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_StompEmptyDestinationTest_testEmptyDestinationOnSubscribe.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 467
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 26
                },
                {
                        "id": "pretrain_java_data_17992448",
                        "content": "//,temp,AbortSlowConsumer1Test.java,86,101,temp,AbortSlowConsumer1Test.java,68,84\n//,3\npublic class xxx {\n@Test(timeout = 60 * 1000)\npublic void testAbortAlreadyClosedConsumers() throws Exception {\nConnection conn = createConnectionFactory().createConnection();\nconn.setExceptionListener(this);\nconnections.add(conn);\nSession sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nfinal MessageConsumer consumer = sess.createConsumer(destination);\nconn.start();\nstartProducers(destination, 20);\nTimeUnit.SECONDS.sleep(1);\nLOG.info(\"closing consumer: \" + consumer);\nconsumer.close();\nTimeUnit.SECONDS.sleep(5);\nassertTrue(\"no exceptions : \" + exceptions.toArray(), exceptions.isEmpty());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2214_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 353
                },
                {
                        "id": "test_logbench-o_data_2546",
                        "content": "@Test(timeout = 60 * 1000)\npublic void testAbortAlreadyClosedConsumers() throws Exception {\nConnection conn = createConnectionFactory().createConnection();\nconn.setExceptionListener(this);\nconnections.add(conn);\nSession sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nfinal MessageConsumer consumer = sess.createConsumer(destination);\nconn.start();\nstartProducers(destination, 20);\nTimeUnit.SECONDS.sleep(1);\nLOG.info(\"closing consumer: \" + consumer);\nconsumer.close();\nTimeUnit.SECONDS.sleep(5);\nassertTrue(\"no exceptions : \" + exceptions.toArray(), exceptions.isEmpty());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AbortSlowConsumer1Test_testAbortAlreadyClosedConsumers.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 353
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 27
                },
                {
                        "id": "pretrain_java_data_17973851",
                        "content": "<filename>LACCPlus/ActiveMQ/162_2.java\n//,temp,ConcurrentDestinationCreationTest.java,106,123,temp,ConcurrentDestinationCreationTest.java,81,99\n//,3\npublic class xxx {\n@Override\npublic void run() {\ntry {\nfinal Connection connection = factory.createConnection();\nconnection.start();\nfinal Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfor (int j = 0; j< jobs*10; j++) {\nfinal MessageProducer producer = session.createProducer(new ActiveMQQueue(\"Q.\" + (j%destinationCount)));\nproducer.send(session.createMessage());\n}\nconnection.close();\nallDone.countDown();\nLOG.info(\"Producers done!\");\n} catch (Exception ignored) {\nLOG.error(\"unexpected \", ignored);\nexceptions.add(ignored);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/162_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 70
                },
                {
                        "id": "test_logbench-o_data_71",
                        "content": "@Override\npublic void run() {\ntry {\nfinal Connection connection = factory.createConnection();\nconnection.start();\nfinal Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfor (int j = 0; j < jobs * 10; j++) {\nfinal MessageProducer producer = session.createProducer(new ActiveMQQueue(\"Q.\" + (j % destinationCount)));\nproducer.send(session.createMessage());\n}\nconnection.close();\nallDone.countDown();\nLOG.info(\"Producers done!\");\n} catch (Exception ignored) {\nLOG.error(\"unexpected \", ignored);\nexceptions.add(ignored);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ConcurrentDestinationCreationTest_run.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 70
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 28
                },
                {
                        "id": "test_logbench-o_data_2074",
                        "content": "public void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\nconnection = factory.createConnection();\nqueue = new ActiveMQQueue(getClass().getName() + \".\" + getName());\nproducerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumerSession = connection.createSession(true, 0);\nproducer = producerSession.createProducer(queue);\nconsumer = consumerSession.createConsumer(queue);\nconsumer.setMessageListener(new MessageListener() {\n@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage) m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nconnection.start();\nTextMessage tm = null;\ntry {\ntm = producerSession.createTextMessage();\ntm.setText(\"Hello, \" + new Date());\nproducer.send(tm);\nLOG.info(\"producer sent message :\" + tm.getText());\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nlatch.await(2, TimeUnit.SECONDS);\nassertNotNull(receivedText);\nLOG.info(\"test completed, destination=\" + receivedText);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_TransactionTest_testTransaction.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2073
                },
                {
                        "id": "pretrain_java_data_19505580",
                        "content": "//,temp,TransactionTest.java,59,113,temp,TransactionRollbackOrderTest.java,64,150\n//,3\npublic class xxx {\npublic void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\nconnection = factory.createConnection();\nqueue = new ActiveMQQueue(getClass().getName() + \".\" + getName());\nproducerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumerSession = connection.createSession(true, 0);\nproducer = producerSession.createProducer(queue);\nconsumer = consumerSession.createConsumer(queue);\nconsumer.setMessageListener(new MessageListener() {\n@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage)m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nconnection.start();\nTextMessage tm = null;\ntry {\ntm = producerSession.createTextMessage();\ntm.setText(\"Hello, \" + new Date());\nproducer.send(tm);\nLOG.info(\"producer sent message :\" + tm.getText());\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nlatch.await(2,TimeUnit.SECONDS);\nassertNotNull(receivedText);\nLOG.info(\"test completed, destination=\" + receivedText);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/449_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2073
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 29
                },
                {
                        "id": "test_logbench-o_data_2717",
                        "content": "public void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\nconnection = factory.createConnection();\nqueue = new ActiveMQQueue(getClass().getName() + \".\" + getName());\nproducerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumerSession = connection.createSession(true, 0);\nproducer = producerSession.createProducer(queue);\nconsumer = consumerSession.createConsumer(queue);\nconsumer.setMessageListener(new MessageListener() {\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage) m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nconnection.start();\nTextMessage tm = null;\ntry {\ntm = producerSession.createTextMessage();\ntm.setText(\"Hello, \" + new Date());\nproducer.send(tm);\nLOG.info(\"producer sent message :\" + tm.getText());\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nlatch.await(2, TimeUnit.SECONDS);\nassertNotNull(receivedText);\nLOG.info(\"test completed, destination=\" + receivedText);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_QueueRepeaterTest_testTransaction.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2073
                },
                {
                        "id": "pretrain_java_data_19505580",
                        "content": "//,temp,TransactionTest.java,59,113,temp,TransactionRollbackOrderTest.java,64,150\n//,3\npublic class xxx {\npublic void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\nconnection = factory.createConnection();\nqueue = new ActiveMQQueue(getClass().getName() + \".\" + getName());\nproducerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumerSession = connection.createSession(true, 0);\nproducer = producerSession.createProducer(queue);\nconsumer = consumerSession.createConsumer(queue);\nconsumer.setMessageListener(new MessageListener() {\n@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage)m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nconnection.start();\nTextMessage tm = null;\ntry {\ntm = producerSession.createTextMessage();\ntm.setText(\"Hello, \" + new Date());\nproducer.send(tm);\nLOG.info(\"producer sent message :\" + tm.getText());\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nlatch.await(2,TimeUnit.SECONDS);\nassertNotNull(receivedText);\nLOG.info(\"test completed, destination=\" + receivedText);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/449_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2073
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 30
                },
                {
                        "id": "pretrain_java_data_3537466",
                        "content": "//,temp,ActiveMQSSLAdmin.java,39,71,temp,ActiveMQNIOPlusSSLAdmin.java,39,71\n//,2\npublic class xxx {\n@Override\npublic void startServer() throws Exception {\nSSLContext ctx = SSLContext.getInstance(\"TLS\");\nctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());\nSSLContext.setDefault(ctx);\n// Setup SSL context...\nfinal File classesDir = new File(ActiveMQNIOPlusSSLAdmin.class.getProtectionDomain().getCodeSource().getLocation().getFile());\nFile keystore = new File(classesDir, \"../../src/test/resources/keystore\");\nfinal SpringSslContext sslContext = new SpringSslContext();\nsslContext.setKeyStore(keystore.getCanonicalPath());\nsslContext.setKeyStorePassword(\"password\");\nsslContext.setTrustStore(keystore.getCanonicalPath());\nsslContext.setTrustStorePassword(\"password\");\nsslContext.afterPropertiesSet();\nif (broker != null) {\nstopServer();\n}\nif (System.getProperty(\"basedir\") == null) {\nFile file = new File(\".\");\nSystem.setProperty(\"basedir\", file.getAbsolutePath());\n}\nbroker = createBroker();\nbroker.setSslContext(sslContext);\nString connectorURI = getConnectorURI();\nTransportConnector connector = broker.addConnector(connectorURI);\nport = connector.getConnectUri().getPort();\nLOG.info(\"nio+ssl port is {}\", port);\nbroker.start();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1213_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3193
                },
                {
                        "id": "test_logbench-o_data_3194",
                        "content": "@Override\npublic void startServer() throws Exception {\nSSLContext ctx = SSLContext.getInstance(\"TLS\");\nctx.init(new KeyManager[0], new TrustManager[] { new DefaultTrustManager() }, new SecureRandom());\nSSLContext.setDefault(ctx);\n// Setup SSL context...\nfinal File classesDir = new File(ActiveMQSSLAdmin.class.getProtectionDomain().getCodeSource().getLocation().getFile());\nFile keystore = new File(classesDir, \"../../src/test/resources/keystore\");\nfinal SpringSslContext sslContext = new SpringSslContext();\nsslContext.setKeyStore(keystore.getCanonicalPath());\nsslContext.setKeyStorePassword(\"password\");\nsslContext.setTrustStore(keystore.getCanonicalPath());\nsslContext.setTrustStorePassword(\"password\");\nsslContext.afterPropertiesSet();\nif (broker != null) {\nstopServer();\n}\nif (System.getProperty(\"basedir\") == null) {\nFile file = new File(\".\");\nSystem.setProperty(\"basedir\", file.getAbsolutePath());\n}\nbroker = createBroker();\nbroker.setSslContext(sslContext);\nString connectorURI = getConnectorURI();\nTransportConnector connector = broker.addConnector(connectorURI);\nport = connector.getConnectUri().getPort();\nLOG.info(\"ssl port is {}\", port);\nbroker.start();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ActiveMQSSLAdmin_startServer.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3193
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 31
                },
                {
                        "id": "pretrain_java_data_3537466",
                        "content": "//,temp,ActiveMQSSLAdmin.java,39,71,temp,ActiveMQNIOPlusSSLAdmin.java,39,71\n//,2\npublic class xxx {\n@Override\npublic void startServer() throws Exception {\nSSLContext ctx = SSLContext.getInstance(\"TLS\");\nctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());\nSSLContext.setDefault(ctx);\n// Setup SSL context...\nfinal File classesDir = new File(ActiveMQNIOPlusSSLAdmin.class.getProtectionDomain().getCodeSource().getLocation().getFile());\nFile keystore = new File(classesDir, \"../../src/test/resources/keystore\");\nfinal SpringSslContext sslContext = new SpringSslContext();\nsslContext.setKeyStore(keystore.getCanonicalPath());\nsslContext.setKeyStorePassword(\"password\");\nsslContext.setTrustStore(keystore.getCanonicalPath());\nsslContext.setTrustStorePassword(\"password\");\nsslContext.afterPropertiesSet();\nif (broker != null) {\nstopServer();\n}\nif (System.getProperty(\"basedir\") == null) {\nFile file = new File(\".\");\nSystem.setProperty(\"basedir\", file.getAbsolutePath());\n}\nbroker = createBroker();\nbroker.setSslContext(sslContext);\nString connectorURI = getConnectorURI();\nTransportConnector connector = broker.addConnector(connectorURI);\nport = connector.getConnectUri().getPort();\nLOG.info(\"nio+ssl port is {}\", port);\nbroker.start();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1213_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3193
                },
                {
                        "id": "test_logbench-o_data_3349",
                        "content": "@Override\npublic void startServer() throws Exception {\nSSLContext ctx = SSLContext.getInstance(\"TLS\");\nctx.init(new KeyManager[0], new TrustManager[] { new DefaultTrustManager() }, new SecureRandom());\nSSLContext.setDefault(ctx);\n// Setup SSL context...\nfinal File classesDir = new File(ActiveMQNIOPlusSSLAdmin.class.getProtectionDomain().getCodeSource().getLocation().getFile());\nFile keystore = new File(classesDir, \"../../src/test/resources/keystore\");\nfinal SpringSslContext sslContext = new SpringSslContext();\nsslContext.setKeyStore(keystore.getCanonicalPath());\nsslContext.setKeyStorePassword(\"password\");\nsslContext.setTrustStore(keystore.getCanonicalPath());\nsslContext.setTrustStorePassword(\"password\");\nsslContext.afterPropertiesSet();\nif (broker != null) {\nstopServer();\n}\nif (System.getProperty(\"basedir\") == null) {\nFile file = new File(\".\");\nSystem.setProperty(\"basedir\", file.getAbsolutePath());\n}\nbroker = createBroker();\nbroker.setSslContext(sslContext);\nString connectorURI = getConnectorURI();\nTransportConnector connector = broker.addConnector(connectorURI);\nport = connector.getConnectUri().getPort();\nLOG.info(\"nio+ssl port is {}\", port);\nbroker.start();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ActiveMQNIOPlusSSLAdmin_startServer.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3193
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 32
                },
                {
                        "id": "test_logbench-o_data_771",
                        "content": "public void sendMessages(ConnectionFactory connectionFactory) throws Exception {\nfor (int i = 0; i < NUM_MESSAGES; i++) {\nConnection connection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(QUEUE);\nMessageProducer producer = session.createProducer(destination);\nString msgTo = \"hello\";\nTextMessage message = session.createTextMessage(msgTo);\nproducer.send(message);\nconnection.close();\nLOG.debug(\"sent \" + i + \" messages using \" + connectionFactory.getClass());\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_PooledSessionExhaustionBlockTimeoutTest_sendMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 770
                },
                {
                        "id": "pretrain_java_data_6641005",
                        "content": "//,temp,TotalMessageCountTest.java,100,113,temp,PooledSessionExhaustionTest.java,109,124\n//,3\npublic class xxx {\npublic void sendMessages(ConnectionFactory connectionFactory) throws Exception {\nfor (int i = 0; i < NUM_MESSAGES; i++) {\nConnection connection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(QUEUE);\nMessageProducer producer = session.createProducer(destination);\nString msgTo = \"hello\";\nTextMessage message = session.createTextMessage(msgTo);\nproducer.send(message);\nconnection.close();\nLOG.debug(\"sent \" + i + \" messages using \" + connectionFactory.getClass());\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/222_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 770
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 33
                },
                {
                        "id": "test_logbench-o_data_3748",
                        "content": "public void sendMessages(ConnectionFactory connectionFactory) throws Exception {\nfor (int i = 0; i < NUM_MESSAGES; i++) {\nConnection connection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(QUEUE);\nMessageProducer producer = session.createProducer(destination);\nString msgTo = \"hello\";\nTextMessage message = session.createTextMessage(msgTo);\nproducer.send(message);\nconnection.close();\nLOG.debug(\"sent \" + i + \" messages using \" + connectionFactory.getClass());\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_PooledSessionExhaustionTest_sendMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 770
                },
                {
                        "id": "pretrain_java_data_6641005",
                        "content": "//,temp,TotalMessageCountTest.java,100,113,temp,PooledSessionExhaustionTest.java,109,124\n//,3\npublic class xxx {\npublic void sendMessages(ConnectionFactory connectionFactory) throws Exception {\nfor (int i = 0; i < NUM_MESSAGES; i++) {\nConnection connection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(QUEUE);\nMessageProducer producer = session.createProducer(destination);\nString msgTo = \"hello\";\nTextMessage message = session.createTextMessage(msgTo);\nproducer.send(message);\nconnection.close();\nLOG.debug(\"sent \" + i + \" messages using \" + connectionFactory.getClass());\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/222_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 770
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 34
                },
                {
                        "id": "test_logbench-o_data_1260",
                        "content": "public void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage) m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_QueueRepeaterTest_onMessage.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 395
                },
                {
                        "id": "pretrain_java_data_6630446",
                        "content": "//,temp,TransactionTest.java,73,94,temp,QueueRepeaterTest.java,72,92\n//,3\npublic class xxx {\n@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage)m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1556_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 395
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 35
                },
                {
                        "id": "test_logbench-o_data_2728",
                        "content": "@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage) m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_TransactionTest_onMessage.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 395
                },
                {
                        "id": "pretrain_java_data_6630446",
                        "content": "//,temp,TransactionTest.java,73,94,temp,QueueRepeaterTest.java,72,92\n//,3\npublic class xxx {\n@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage)m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1556_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 395
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 36
                },
                {
                        "id": "pretrain_java_data_6667547",
                        "content": "//,temp,SimpleQueueReceiver.java,55,129,temp,SimpleConsumer.java,56,129\n//,3\npublic class xxx {\npublic static void main(String[] args) {\nString destinationName = null;\nContext jndiContext = null;\nConnectionFactory connectionFactory = null;\nConnection connection = null;\nSession session = null;\nDestination destination = null;\nMessageConsumer consumer = null;\n/*\n* Read destination name from command line and display it.\n*/\nif (args.length != 1) {\nLOG.info(\"Usage: java SimpleConsumer <destination-name>\");\nSystem.exit(1);\n}\ndestinationName = args[0];\nLOG.info(\"Destination name is \" + destinationName);\n/*\n* Create a JNDI API InitialContext object\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API \" + \"context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and destination.\n*/\ntry {\nconnectionFactory = (ConnectionFactory)jndiContext.lookup(\"ConnectionFactory\");\ndestination = (Destination)jndiContext.lookup(destinationName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create receiver, then start message\n* delivery. Receive all text messages from destination until a non-text\n* message is received indicating end of message stream. Close\n* connection.\n*/\ntry {\nconnection = connectionFactory.createConnection();\nsession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumer = session.createConsumer(destination);\nconnection.start();\nwhile (true) {\nMessage m = consumer.receive(1);\nif (m != null) {\nif (m instanceof TextMessage) {\nTextMessage message = (TextMessage)m;\nLOG.info(\"Reading message: \" + message.getText());\n} else {\nbreak;\n}\n}\n}\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e);\n} finally {\nif (connection != null) {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/459_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 22
                },
                {
                        "id": "test_logbench-o_data_23",
                        "content": "/**\n* @param args the queue used by the example\n*/\npublic static void main(String[] args) {\nString destinationName = null;\nContext jndiContext = null;\nConnectionFactory connectionFactory = null;\nConnection connection = null;\nSession session = null;\nDestination destination = null;\nMessageConsumer consumer = null;\n/*\n* Read destination name from command line and display it.\n*/\nif (args.length != 1) {\nLOG.info(\"Usage: java SimpleConsumer <destination-name>\");\nSystem.exit(1);\n}\ndestinationName = args[0];\nLOG.info(\"Destination name is \" + destinationName);\n/*\n* Create a JNDI API InitialContext object\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API \" + \"context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and destination.\n*/\ntry {\nconnectionFactory = (ConnectionFactory) jndiContext.lookup(\"ConnectionFactory\");\ndestination = (Destination) jndiContext.lookup(destinationName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create receiver, then start message\n* delivery. Receive all text messages from destination until a non-text\n* message is received indicating end of message stream. Close\n* connection.\n*/\ntry {\nconnection = connectionFactory.createConnection();\nsession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumer = session.createConsumer(destination);\nconnection.start();\nwhile (true) {\nMessage m = consumer.receive(1);\nif (m != null) {\nif (m instanceof TextMessage) {\nTextMessage message = (TextMessage) m;\nLOG.info(\"Reading message: \" + message.getText());\n} else {\nbreak;\n}\n}\n}\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e);\n} finally {\nif (connection != null) {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_SimpleConsumer_main.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 22
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 37
                },
                {
                        "id": "pretrain_java_data_6605122",
                        "content": "//,temp,WSTransportProxy.java,202,216,temp,StompSocket.java,69,83\n//,3\npublic class xxx {\n@Override\npublic void onWebSocketClose(int arg0, String arg1) {\ntry {\nif (protocolLock.tryLock() || protocolLock.tryLock(ORDERLY_CLOSE_TIMEOUT, TimeUnit.SECONDS)) {\nLOG.debug(\"Stomp WebSocket closed: code[{}] message[{}]\", arg0, arg1);\nprotocolConverter.onStompCommand(new StompFrame(Stomp.Commands.DISCONNECT));\n}\n} catch (Exception e) {\nLOG.debug(\"Failed to close STOMP WebSocket cleanly\", e);\n} finally {\nif (protocolLock.isHeldByCurrentThread()) {\nprotocolLock.unlock();\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/879_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1253
                },
                {
                        "id": "test_logbench-o_data_1254",
                        "content": "@Override\npublic void onWebSocketClose(int arg0, String arg1) {\ntry {\nif (protocolLock.tryLock() || protocolLock.tryLock(ORDERLY_CLOSE_TIMEOUT, TimeUnit.SECONDS)) {\nLOG.debug(\"Stomp WebSocket closed: code[{}] message[{}]\", arg0, arg1);\nprotocolConverter.onStompCommand(new StompFrame(Stomp.Commands.DISCONNECT));\n}\n} catch (Exception e) {\nLOG.debug(\"Failed to close STOMP WebSocket cleanly\", e);\n} finally {\nif (protocolLock.isHeldByCurrentThread()) {\nprotocolLock.unlock();\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_StompSocket_onWebSocketClose.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1253
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 38
                },
                {
                        "id": "test_logbench-o_data_1157",
                        "content": "public void run() {\nLOG.info(\"Sleeping for 10 seconds before allowing db restart\");\ntry {\nrestartDBLatch.await(10, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nds.setShutdownDatabase(\"false\");\nLOG.info(\"DB RESTARTED!@!!!!\");\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DbRestartJDBCQueueTest_run.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1156
                },
                {
                        "id": "pretrain_java_data_8245388",
                        "content": "//,temp,DbRestartJDBCQueueTest.java,117,126,temp,TwoBrokerQueueClientsReconnectTest.java,473,483\n//,3\npublic class xxx {\npublic void run() {\nLOG.info(\"Sleeping for 10 seconds before allowing db restart\");\ntry {\nrestartDBLatch.await(10, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nds.setShutdownDatabase(\"false\");\nLOG.info(\"DB RESTARTED!@!!!!\");\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/765_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1156
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 39
                },
                {
                        "id": "pretrain_java_data_11587867",
                        "content": "<filename>LACCPlus/ActiveMQ/1559_2.java<gh_stars>0\n//,temp,DurableSubscriptionOfflineTest.java,515,532,temp,QueueDuplicatesTest.java,124,141\n//,3\npublic class xxx {\npublic void run() {\ntry {\nSession session = createSession(brokerConnection);\nDestination dest = session.createQueue(subject);\nMessageProducer producer = session.createProducer(dest);\nproducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\nfor (int i = 0; i < 20; i++) {\nString txt = \"Text Message: \" + i;\nTextMessage msg = session.createTextMessage(txt);\nproducer.send(msg);\nLOG.info(formatter.format(new Date()) + \" Sent ==> \" + msg + \" to \" + subject);\nThread.sleep(1000);\n}\nsession.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1559_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 189
                },
                {
                        "id": "test_logbench-o_data_190",
                        "content": "public void run() {\ntry {\nSession session = createSession(brokerConnection);\nDestination dest = session.createQueue(subject);\nMessageProducer producer = session.createProducer(dest);\nproducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\nfor (int i = 0; i < 20; i++) {\nString txt = \"Text Message: \" + i;\nTextMessage msg = session.createTextMessage(txt);\nproducer.send(msg);\nLOG.info(formatter.format(new Date()) + \" Sent ==> \" + msg + \" to \" + subject);\nThread.sleep(1000);\n}\nsession.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_QueueDuplicatesTest_run.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 189
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 40
                },
                {
                        "id": "pretrain_java_data_14673077",
                        "content": "//,temp,DeadLetterExpiryTest.java,204,213,temp,DeadLetterTest.java,65,74\n//,2\npublic class xxx {\nprotected void consumeAndRollback(int messageCounter) throws Exception {\nfor (int i = 0; i < rollbackCount; i++) {\nMessage message = consumer.receive(5000);\nassertNotNull(\"No message received for message: \" + messageCounter + \" and rollback loop: \" + i, message);\nassertMessage(message, messageCounter);\nsession.rollback();\n}\nLOG.info(\"Rolled back: \" + rollbackCount + \" times\");\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1311_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 231
                },
                {
                        "id": "test_logbench-o_data_232",
                        "content": "protected void consumeAndRollback(int messageCounter) throws Exception {\nfor (int i = 0; i < rollbackCount; i++) {\nMessage message = consumer.receive(5000);\nassertNotNull(\"No message received for message: \" + messageCounter + \" and rollback loop: \" + i, message);\nassertMessage(message, messageCounter);\nsession.rollback();\n}\nLOG.info(\"Rolled back: \" + rollbackCount + \" times\");\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DeadLetterTest_consumeAndRollback.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 231
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 41
                },
                {
                        "id": "pretrain_java_data_13082633",
                        "content": "//,temp,JmsTopicSendReceiveTest.java,37,74,temp,JmsTopicRedeliverTest.java,51,88\n//,3\npublic class xxx {\nprotected void setUp() throws Exception {\nsuper.setUp();\nconnectionFactory = createConnectionFactory();\nconnection = createConnection();\ninitRedeliveryDelay = ((ActiveMQConnection)connection).getRedeliveryPolicy().getInitialRedeliveryDelay();\nif (durable) {\nconnection.setClientID(getClass().getName());\n}\nLOG.info(\"Created connection: \" + connection);\nsession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nconsumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nLOG.info(\"Created session: \" + session);\nLOG.info(\"Created consumeSession: \" + consumeSession);\nproducer = session.createProducer(null);\n// producer.setDeliveryMode(deliveryMode);\nLOG.info(\"Created producer: \" + producer);\nif (topic) {\nconsumerDestination = session.createTopic(getConsumerSubject());\nproducerDestination = session.createTopic(getProducerSubject());\n} else {\nconsumerDestination = session.createQueue(getConsumerSubject());\nproducerDestination = session.createQueue(getProducerSubject());\n}\nLOG.info(\"Created  consumer destination: \" + consumerDestination + \" of type: \" + consumerDestination.getClass());\nLOG.info(\"Created  producer destination: \" + producerDestination + \" of type: \" + producerDestination.getClass());\nconsumer = createConsumer();\nconnection.start();\nLOG.info(\"Created connection: \" + connection);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/937_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3586
                },
                {
                        "id": "test_logbench-o_data_3587",
                        "content": "protected void setUp() throws Exception {\nsuper.setUp();\nconnectionFactory = createConnectionFactory();\nconnection = createConnection();\ninitRedeliveryDelay = ((ActiveMQConnection) connection).getRedeliveryPolicy().getInitialRedeliveryDelay();\nif (durable) {\nconnection.setClientID(getClass().getName());\n}\nLOG.info(\"Created connection: \" + connection);\nsession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nconsumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nLOG.info(\"Created session: \" + session);\nLOG.info(\"Created consumeSession: \" + consumeSession);\nproducer = session.createProducer(null);\n// producer.setDeliveryMode(deliveryMode);\nLOG.info(\"Created producer: \" + producer);\nif (topic) {\nconsumerDestination = session.createTopic(getConsumerSubject());\nproducerDestination = session.createTopic(getProducerSubject());\n} else {\nconsumerDestination = session.createQueue(getConsumerSubject());\nproducerDestination = session.createQueue(getProducerSubject());\n}\nLOG.info(\"Created  consumer destination: \" + consumerDestination + \" of type: \" + consumerDestination.getClass());\nLOG.info(\"Created  producer destination: \" + producerDestination + \" of type: \" + producerDestination.getClass());\nconsumer = createConsumer();\nconnection.start();\nLOG.info(\"Created connection: \" + connection);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JmsTopicRedeliverTest_setUp.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3586
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 42
                },
                {
                        "id": "test_logbench-o_data_2747",
                        "content": "@Test\npublic void testIndexDirExists() throws Exception {\nproduceMessages();\nLOG.info(\"Index dir is configured as: {}\", kahaIndexDir);\nassertTrue(kahaDataDir.exists());\nassertTrue(kahaIndexDir.exists());\nString destName = nameFromDestinationFilter(queue);\nString[] index = new File(kahaIndexDir, destName).list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing index filename: {}\", name);\nreturn name.endsWith(\"data\") || name.endsWith(\"redo\");\n}\n});\nString[] journal = new File(kahaDataDir, destName).list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing log filename: {}\", name);\nreturn name.endsWith(\"log\") || name.equals(\"lock\");\n}\n});\n// Should be db.data and db.redo and nothing else.\nassertNotNull(index);\nassertEquals(2, index.length);\n// Should contain the initial log for the journal\nassertNotNull(journal);\nassertEquals(1, journal.length);\nstopBroker();\ncreateBroker();\nbroker.start();\nbroker.waitUntilStarted();\nconsume();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_MKahaDBIndexLocationTest_testIndexDirExists.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1810
                },
                {
                        "id": "pretrain_java_data_14674841",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,KahaDBIndexLocationTest.java,108,141,temp,MKahaDBIndexLocationTest.java,94,138\n//,3\npublic class xxx {\n@Test\npublic void testIndexDirExists() throws Exception {\nproduceMessages();\nLOG.info(\"Index dir is configured as: {}\", kahaIndexDir);\nassertTrue(kahaDataDir.exists());\nassertTrue(kahaIndexDir.exists());\nString destName = nameFromDestinationFilter(queue);\nString[] index = new File(kahaIndexDir, destName).list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing index filename: {}\", name);\nreturn name.endsWith(\"data\") || name.endsWith(\"redo\");\n}\n});\nString[] journal = new File(kahaDataDir, destName).list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing log filename: {}\", name);\nreturn name.endsWith(\"log\") || name.equals(\"lock\");\n}\n});\n// Should be db.data and db.redo and nothing else.\nassertNotNull(index);\nassertEquals(2, index.length);\n// Should contain the initial log for the journal\nassertNotNull(journal);\nassertEquals(1, journal.length);\nstopBroker();\ncreateBroker();\nbroker.start();\nbroker.waitUntilStarted();\nconsume();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/308_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1810
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 43
                },
                {
                        "id": "test_logbench-o_data_3809",
                        "content": "@Test(timeout = 30000)\npublic void testFrameSizeNotExceededWorks() throws Exception {\nLOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\nMQTT mqtt = createMQTTConnection();\nmqtt.setClientId(getTestName());\nmqtt.setKeepAlive((short) 10);\nmqtt.setVersion(\"3.1.1\");\nBlockingConnection connection = mqtt.blockingConnection();\nconnection.connect();\nfinal int payloadSize = maxFrameSize / 2;\nbyte[] payload = new byte[payloadSize];\nfor (int i = 0; i < payloadSize; ++i) {\npayload[i] = 42;\n}\ntry {\nconnection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);\n} catch (Exception ex) {\nfail(\"should not have thrown an exception\");\n} finally {\nconnection.disconnect();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_MQTTMaxFrameSizeTest_testFrameSizeNotExceededWorks.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1524
                },
                {
                        "id": "pretrain_java_data_450628",
                        "content": "//,temp,MQTTMaxFrameSizeTest.java,94,121,temp,MQTTMaxFrameSizeTest.java,65,92\n//,2\npublic class xxx {\n@Test(timeout = 30000)\npublic void testFrameSizeNotExceededWorks() throws Exception {\nLOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\nMQTT mqtt = createMQTTConnection();\nmqtt.setClientId(getTestName());\nmqtt.setKeepAlive((short) 10);\nmqtt.setVersion(\"3.1.1\");\nBlockingConnection connection = mqtt.blockingConnection();\nconnection.connect();\nfinal int payloadSize = maxFrameSize / 2;\nbyte[] payload = new byte[payloadSize];\nfor (int i = 0; i < payloadSize; ++i) {\npayload[i] = 42;\n}\ntry {\nconnection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);\n} catch (Exception ex) {\nfail(\"should not have thrown an exception\");\n} finally {\nconnection.disconnect();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1963_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1524
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 44
                },
                {
                        "id": "test_logbench-o_data_1525",
                        "content": "@Test(timeout = 30000)\npublic void testFrameSizeToLargeClosesConnection() throws Exception {\nLOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\nMQTT mqtt = createMQTTConnection();\nmqtt.setClientId(getTestName());\nmqtt.setKeepAlive((short) 10);\nmqtt.setVersion(\"3.1.1\");\nBlockingConnection connection = mqtt.blockingConnection();\nconnection.connect();\nfinal int payloadSize = maxFrameSize + 100;\nbyte[] payload = new byte[payloadSize];\nfor (int i = 0; i < payloadSize; ++i) {\npayload[i] = 42;\n}\ntry {\nconnection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);\nfail(\"should have thrown an exception\");\n} catch (Exception ex) {\n} finally {\nconnection.disconnect();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_MQTTMaxFrameSizeTest_testFrameSizeToLargeClosesConnection.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1524
                },
                {
                        "id": "pretrain_java_data_450628",
                        "content": "//,temp,MQTTMaxFrameSizeTest.java,94,121,temp,MQTTMaxFrameSizeTest.java,65,92\n//,2\npublic class xxx {\n@Test(timeout = 30000)\npublic void testFrameSizeNotExceededWorks() throws Exception {\nLOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\nMQTT mqtt = createMQTTConnection();\nmqtt.setClientId(getTestName());\nmqtt.setKeepAlive((short) 10);\nmqtt.setVersion(\"3.1.1\");\nBlockingConnection connection = mqtt.blockingConnection();\nconnection.connect();\nfinal int payloadSize = maxFrameSize / 2;\nbyte[] payload = new byte[payloadSize];\nfor (int i = 0; i < payloadSize; ++i) {\npayload[i] = 42;\n}\ntry {\nconnection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);\n} catch (Exception ex) {\nfail(\"should not have thrown an exception\");\n} finally {\nconnection.disconnect();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1963_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1524
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 45
                },
                {
                        "id": "pretrain_java_data_14758134",
                        "content": "//,temp,JmsTimeoutTest.java,101,121,temp,MemoryUsageBlockResumeTest.java,105,120\n//,3\npublic class xxx {\npublic void run() {\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(false, 1);\nMessageProducer producer = session.createProducer(queue);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nTextMessage message = session.createTextMessage(createMessageText());\nfor(int count=0; count<messageCount; count++){\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e instanceof ResourceAllocationException || e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/209_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3581
                },
                {
                        "id": "test_logbench-o_data_3582",
                        "content": "public void run() {\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(false, 1);\nMessageProducer producer = session.createProducer(queue);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nTextMessage message = session.createTextMessage(createMessageText());\nfor (int count = 0; count < messageCount; count++) {\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e instanceof ResourceAllocationException || e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JmsTimeoutTest_run.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3581
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 46
                },
                {
                        "id": "pretrain_java_data_2079996",
                        "content": "<filename>LACCPlus/ActiveMQ/459_1.java\n//,temp,SimpleQueueReceiver.java,55,129,temp,SimpleConsumer.java,56,129\n//,3\npublic class xxx {\npublic static void main(String[] args) {\nString queueName = null;\nContext jndiContext = null;\nQueueConnectionFactory queueConnectionFactory = null;\nQueueConnection queueConnection = null;\nQueueSession queueSession = null;\nQueue queue = null;\nQueueReceiver queueReceiver = null;\nTextMessage message = null;\n/*\n* Read queue name from command line and display it.\n*/\nif (args.length != 1) {\nLOG.info(\"Usage: java \" + \"SimpleQueueReceiver <queue-name>\");\nSystem.exit(1);\n}\nqueueName = args[0];\nLOG.info(\"Queue name is \" + queueName);\n/*\n* Create a JNDI API InitialContext object if none exists yet.\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API \" + \"context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and queue. If either does not exist, exit.\n*/\ntry {\nqueueConnectionFactory = (QueueConnectionFactory)jndiContext.lookup(\"QueueConnectionFactory\");\nqueue = (Queue)jndiContext.lookup(queueName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create receiver, then start message\n* delivery. Receive all text messages from queue until a non-text\n* message is received indicating end of message stream. Close\n* connection.\n*/\ntry {\nqueueConnection = queueConnectionFactory.createQueueConnection();\nqueueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\nqueueReceiver = queueSession.createReceiver(queue);\nqueueConnection.start();\nwhile (true) {\nMessage m = queueReceiver.receive(1);\nif (m != null) {\nif (m instanceof TextMessage) {\nmessage = (TextMessage)m;\nLOG.info(\"Reading message: \" + message.getText());\n} else {\nbreak;\n}\n}\n}\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e.toString());\n} finally {\nif (queueConnection != null) {\ntry {\nqueueConnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/459_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 22
                },
                {
                        "id": "test_logbench-o_data_2768",
                        "content": "/**\n* Main method.\n*\n* @param args the queue used by the example\n*/\npublic static void main(String[] args) {\nString queueName = null;\nContext jndiContext = null;\nQueueConnectionFactory queueConnectionFactory = null;\nQueueConnection queueConnection = null;\nQueueSession queueSession = null;\nQueue queue = null;\nQueueReceiver queueReceiver = null;\nTextMessage message = null;\n/*\n* Read queue name from command line and display it.\n*/\nif (args.length != 1) {\nLOG.info(\"Usage: java \" + \"SimpleQueueReceiver <queue-name>\");\nSystem.exit(1);\n}\nqueueName = args[0];\nLOG.info(\"Queue name is \" + queueName);\n/*\n* Create a JNDI API InitialContext object if none exists yet.\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API \" + \"context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and queue. If either does not exist, exit.\n*/\ntry {\nqueueConnectionFactory = (QueueConnectionFactory) jndiContext.lookup(\"QueueConnectionFactory\");\nqueue = (Queue) jndiContext.lookup(queueName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create receiver, then start message\n* delivery. Receive all text messages from queue until a non-text\n* message is received indicating end of message stream. Close\n* connection.\n*/\ntry {\nqueueConnection = queueConnectionFactory.createQueueConnection();\nqueueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\nqueueReceiver = queueSession.createReceiver(queue);\nqueueConnection.start();\nwhile (true) {\nMessage m = queueReceiver.receive(1);\nif (m != null) {\nif (m instanceof TextMessage) {\nmessage = (TextMessage) m;\nLOG.info(\"Reading message: \" + message.getText());\n} else {\nbreak;\n}\n}\n}\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e.toString());\n} finally {\nif (queueConnection != null) {\ntry {\nqueueConnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_SimpleQueueReceiver_main.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 22
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 47
                },
                {
                        "id": "pretrain_java_data_2052774",
                        "content": "<gh_stars>0\n//,temp,AMQ4472Test.java,39,89,temp,AMQ4554Test.java,77,105\n//,3\npublic class xxx {\npublic void testMSXProducerTXID() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);\nConnection connection = factory.createConnection();\nconnection.start();\nSession producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = producerSession.createProducer(producerSession.createQueue(\"myQueue\"));\nTextMessage producerMessage = producerSession.createTextMessage(\"Test Message\");\nproducer.send(producerMessage);\nproducer.close();\nproducerSession.commit();\nproducerSession.close();\nSession consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageConsumer consumer = consumerSession.createConsumer(consumerSession.createQueue(\"myQueue\"));\nMessage consumerMessage = consumer.receive(1000);\ntry {\nString txId = consumerMessage.getStringProperty(\"JMSXProducerTXID\");\nassertNotNull(txId);\n} catch(Exception e) {\nLOG.info(\"Caught Exception that was not expected:\", e);\nfail(\"Should not throw\");\n}\nconsumer.close();\nconsumerSession.commit();\nconsumerSession.close();\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/367_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3590
                },
                {
                        "id": "test_logbench-o_data_3591",
                        "content": "public void testMSXProducerTXID() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);\nConnection connection = factory.createConnection();\nconnection.start();\nSession producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = producerSession.createProducer(producerSession.createQueue(\"myQueue\"));\nTextMessage producerMessage = producerSession.createTextMessage(\"Test Message\");\nproducer.send(producerMessage);\nproducer.close();\nproducerSession.commit();\nproducerSession.close();\nSession consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageConsumer consumer = consumerSession.createConsumer(consumerSession.createQueue(\"myQueue\"));\nMessage consumerMessage = consumer.receive(1000);\ntry {\nString txId = consumerMessage.getStringProperty(\"JMSXProducerTXID\");\nassertNotNull(txId);\n} catch (Exception e) {\nLOG.info(\"Caught Exception that was not expected:\", e);\nfail(\"Should not throw\");\n}\nconsumer.close();\nconsumerSession.commit();\nconsumerSession.close();\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ4554Test_testMSXProducerTXID.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3590
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 48
                },
                {
                        "id": "test_logbench-o_data_389",
                        "content": "protected void doTest() throws Exception {\nconnection.start();\nActiveMQConnection amqConnection = (ActiveMQConnection) connection;\nrollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;\nLOG.info(\"Will redeliver messages: \" + rollbackCount + \" times\");\nmakeConsumer();\nmakeDlqConsumer();\nsendMessages();\n// now lets receive and rollback N times\nfor (int i = 0; i < messageCount; i++) {\nconsumeAndRollback(i);\n}\nverifyIsDlq((Queue) dlqDestination);\nfor (int i = 0; i < messageCount; i++) {\nMessage msg = dlqConsumer.receive(1000);\nassertMessage(msg, i);\nassertNotNull(\"Should be a DLQ message for loop: \" + i, msg);\n}\nsession.commit();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DeadLetterTest_doTest.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 388
                },
                {
                        "id": "pretrain_java_data_16432232",
                        "content": "//,temp,DiscardingDeadLetterPolicyTest.java,53,76,temp,DeadLetterTest.java,39,63\n//,3\npublic class xxx {\nprotected void doTest() throws Exception {\nconnection.start();\nActiveMQConnection amqConnection = (ActiveMQConnection) connection;\nrollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;\nLOG.info(\"Will redeliver messages: \" + rollbackCount + \" times\");\nmakeConsumer();\nmakeDlqConsumer();\nsendMessages();\n// now lets receive and rollback N times\nfor (int i = 0; i < messageCount; i++) {\nconsumeAndRollback(i);\n}\nverifyIsDlq((Queue) dlqDestination);\nfor (int i = 0; i < messageCount; i++) {\nMessage msg = dlqConsumer.receive(1000);\nassertMessage(msg, i);\nassertNotNull(\"Should be a DLQ message for loop: \" + i, msg);\n}\nsession.commit();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/798_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 388
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 49
                },
                {
                        "id": "pretrain_java_data_19770502",
                        "content": "//,temp,SpringBeanTest.java,34,67,temp,NameSpaceXmlLoadTest.java,34,57\n//,3\npublic class xxx {\n@Test\npublic void testModifiable() throws Exception {\nfinal String brokerConfig =  \"SpringBeanTest-broker\";\napplyNewConfig(brokerConfig, \"emptyUpdatableConfig1000-spring-bean\");\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\n// apply via jmx\nObjectName objectName =\nnew ObjectName(brokerService.getBrokerObjectName().toString() +\nRuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView =\n(RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,\nRuntimeConfigurationViewMBean.class, false);\nString propOfInterest = \"modified\";\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nassertNotEquals(\"unknown\", props.get(propOfInterest));\nString result = runtimeConfigurationView.updateNow();\nLOG.info(\"Result from update: \" + result);\nassertTrue(\"got sensible result\", result.contains(\"No material change\"));\nHashMap<String, String> propsAfter = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);\nLOG.info(\"mbean attributes after: \" + propsAfter);\nassertEquals(\"modified is same\", props.get(propOfInterest), propsAfter.get(propOfInterest));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/402_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2811
                },
                {
                        "id": "test_logbench-o_data_2812",
                        "content": "@Test\n@Ignore(\"This fail on Jenkins but works fine locally\")\npublic void testModifiable() throws Exception {\nfinal String brokerConfig = \"SpringBeanTest-broker\";\napplyNewConfig(brokerConfig, \"emptyUpdatableConfig1000-spring-bean\");\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\n// apply via jmx\nObjectName objectName = new ObjectName(brokerService.getBrokerObjectName().toString() + RuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView = (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName, RuntimeConfigurationViewMBean.class, false);\nString propOfInterest = \"modified\";\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nassertNotEquals(\"unknown\", props.get(propOfInterest));\nString result = runtimeConfigurationView.updateNow();\nLOG.info(\"Result from update: \" + result);\nassertTrue(\"got sensible result\", result.contains(\"No material change\"));\nHashMap<String, String> propsAfter = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);\nLOG.info(\"mbean attributes after: \" + propsAfter);\nassertEquals(\"modified is same\", props.get(propOfInterest), propsAfter.get(propOfInterest));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_SpringBeanTest_testModifiable.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2811
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 50
                },
                {
                        "id": "pretrain_java_data_19766488",
                        "content": "//,temp,CompositeQueueTest.java,56,94,temp,MirroredQueueTest.java,42,76\n//,3\npublic class xxx {\npublic void testSendingToQueueIsMirrored() throws Exception {\nif (connection == null) {\nconnection = createConnection();\n}\nconnection.start();\nConsumerBean messageList = new ConsumerBean();\nmessageList.setVerbose(true);\nDestination consumeDestination = createConsumeDestination();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nLOG.info(\"Consuming from: \" + consumeDestination);\nMessageConsumer c1 = session.createConsumer(consumeDestination);\nc1.setMessageListener(messageList);\n// create topic producer\nActiveMQQueue sendDestination = new ActiveMQQueue(getQueueName());\nLOG.info(\"Sending to: \" + sendDestination);\nMessageProducer producer = session.createProducer(sendDestination);\nassertNotNull(producer);\nint total = 10;\nfor (int i = 0; i < total; i++) {\nproducer.send(session.createTextMessage(\"message: \" + i));\n}\n///Thread.sleep(1000000);\nmessageList.assertMessagesArrived(total);\nLOG.info(\"Received: \" + messageList);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1001_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 765
                },
                {
                        "id": "test_logbench-o_data_766",
                        "content": "public void testSendingToQueueIsMirrored() throws Exception {\nif (connection == null) {\nconnection = createConnection();\n}\nconnection.start();\nConsumerBean messageList = new ConsumerBean();\nmessageList.setVerbose(true);\nDestination consumeDestination = createConsumeDestination();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nLOG.info(\"Consuming from: \" + consumeDestination);\nMessageConsumer c1 = session.createConsumer(consumeDestination);\nc1.setMessageListener(messageList);\n// create topic producer\nActiveMQQueue sendDestination = new ActiveMQQueue(getQueueName());\nLOG.info(\"Sending to: \" + sendDestination);\nMessageProducer producer = session.createProducer(sendDestination);\nassertNotNull(producer);\nint total = 10;\nfor (int i = 0; i < total; i++) {\nproducer.send(session.createTextMessage(\"message: \" + i));\n}\n// /Thread.sleep(1000000);\nmessageList.assertMessagesArrived(total);\nLOG.info(\"Received: \" + messageList);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_MirroredQueueTest_testSendingToQueueIsMirrored.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 765
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 51
                },
                {
                        "id": "test_logbench-o_data_2050",
                        "content": "@Test\npublic void testHungReceiveNoWait() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfinal MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = null;\nfinal CountDownLatch done = new CountDownLatch(1);\nfinal CountDownLatch started = new CountDownLatch(1);\nExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a Sync receiveNoWait call\");\nconsumer.receiveNoWait();\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await(10, TimeUnit.SECONDS));\nassertTrue(done.await(20, TimeUnit.SECONDS));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ3932Test_testHungReceiveNoWait.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 292
                },
                {
                        "id": "pretrain_java_data_6887044",
                        "content": "<filename>LACCPlus/ActiveMQ/325_1.java\n//,temp,AMQ3932Test.java,101,128,temp,AMQ3932Test.java,72,99\n//,3\npublic class xxx {\n@Test\npublic void testHungReceiveNoWait() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfinal MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = null;\nfinal CountDownLatch done = new CountDownLatch(1);\nfinal CountDownLatch started = new CountDownLatch(1);\nExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a Sync receiveNoWait call\");\nconsumer.receiveNoWait();\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await(10, TimeUnit.SECONDS));\nassertTrue(done.await(20, TimeUnit.SECONDS));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/325_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 292
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 52
                },
                {
                        "id": "test_logbench-o_data_293",
                        "content": "@Test\npublic void testHungReceiveTimed() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfinal MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = null;\nfinal CountDownLatch done = new CountDownLatch(1);\nfinal CountDownLatch started = new CountDownLatch(1);\nExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a timed Sync receive call\");\nconsumer.receive(10);\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await(10, TimeUnit.SECONDS));\nassertTrue(done.await(20, TimeUnit.SECONDS));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ3932Test_testHungReceiveTimed.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 292
                },
                {
                        "id": "pretrain_java_data_6887044",
                        "content": "<filename>LACCPlus/ActiveMQ/325_1.java\n//,temp,AMQ3932Test.java,101,128,temp,AMQ3932Test.java,72,99\n//,3\npublic class xxx {\n@Test\npublic void testHungReceiveNoWait() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfinal MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = null;\nfinal CountDownLatch done = new CountDownLatch(1);\nfinal CountDownLatch started = new CountDownLatch(1);\nExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a Sync receiveNoWait call\");\nconsumer.receiveNoWait();\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await(10, TimeUnit.SECONDS));\nassertTrue(done.await(20, TimeUnit.SECONDS));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/325_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 292
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 53
                },
                {
                        "id": "test_logbench-o_data_382",
                        "content": "@Test\npublic void testPlainReceiveBlocks() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfinal MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = null;\nfinal CountDownLatch done = new CountDownLatch(1);\nfinal CountDownLatch started = new CountDownLatch(1);\nExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a Sync receive call\");\nconsumer.receive();\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await(10, TimeUnit.SECONDS));\nassertFalse(done.await(20, TimeUnit.SECONDS));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ3932Test_testPlainReceiveBlocks.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 292
                },
                {
                        "id": "pretrain_java_data_6887044",
                        "content": "<filename>LACCPlus/ActiveMQ/325_1.java\n//,temp,AMQ3932Test.java,101,128,temp,AMQ3932Test.java,72,99\n//,3\npublic class xxx {\n@Test\npublic void testHungReceiveNoWait() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfinal MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = null;\nfinal CountDownLatch done = new CountDownLatch(1);\nfinal CountDownLatch started = new CountDownLatch(1);\nExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a Sync receiveNoWait call\");\nconsumer.receiveNoWait();\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await(10, TimeUnit.SECONDS));\nassertTrue(done.await(20, TimeUnit.SECONDS));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/325_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 292
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 54
                },
                {
                        "id": "test_logbench-o_data_1056",
                        "content": "private void sendMessageToQueueUsingAmqp() throws Exception {\nConnection connection = createAmqpConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getQueueName());\nMessageProducer producer = session.createProducer(queue);\ntry {\nTextMessage message = session.createTextMessage(\"test-message-amqp-source\");\nproducer.send(message);\nLOG.info(\"Send AMQP message with Message ID -> {}\", message.getJMSMessageID());\n} finally {\nconnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AmqpAndStompInteropTest_sendMessageToQueueUsingAmqp.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 814
                },
                {
                        "id": "pretrain_java_data_5313900",
                        "content": "//,temp,TransactedConsumeTest.java,62,76,temp,AmqpAndStompInteropTest.java,114,128\n//,3\npublic class xxx {\nprivate void sendMessageToQueueUsingAmqp() throws Exception {\nConnection connection = createAmqpConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getQueueName());\nMessageProducer producer = session.createProducer(queue);\ntry {\nTextMessage message = session.createTextMessage(\"test-message-amqp-source\");\nproducer.send(message);\nLOG.info(\"Send AMQP message with Message ID -> {}\", message.getJMSMessageID());\n} finally {\nconnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/266_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 814
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 55
                },
                {
                        "id": "test_logbench-o_data_106",
                        "content": "protected void stopBroker() {\n// we can no longer keep the lock so lets fail\nLOG.error(\"{}, no longer able to keep the exclusive lock so giving up being a master\", brokerService.getBrokerName());\ntry {\nif (brokerService.isRestartAllowed()) {\nbrokerService.requestRestart();\n}\nbrokerService.stop();\n} catch (Exception e) {\nLOG.warn(\"Failure occurred while stopping broker\");\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_LockableServiceSupport_stopBroker.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 105
                },
                {
                        "id": "pretrain_java_data_5360933",
                        "content": "<gh_stars>0\n//,temp,LockableServiceSupport.java,157,168,temp,DefaultIOExceptionHandler.java,181,192\n//,3\npublic class xxx {\nprotected void stopBroker() {\n// we can no longer keep the lock so lets fail\nLOG.error(\"{}, no longer able to keep the exclusive lock so giving up being a master\", brokerService.getBrokerName());\ntry {\nif( brokerService.isRestartAllowed() ) {\nbrokerService.requestRestart();\n}\nbrokerService.stop();\n} catch (Exception e) {\nLOG.warn(\"Failure occurred while stopping broker\");\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1462_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 105
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 56
                },
                {
                        "id": "test_logbench-o_data_1083",
                        "content": "protected Session createConsumer() throws JMSException {\nfinal String consumerText = \"Consumer: \" + (++consumerCounter);\nLOG.info(\"Creating consumer: \" + consumerText + \" on destination: \" + destination);\nSession answer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = answer.createConsumer(destination);\nconsumer.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\nLOG.info(\"Received message by: \" + consumerText + \" message: \" + message);\n}\n});\nreturn answer;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ConsumerListenerTest_createConsumer.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1082
                },
                {
                        "id": "pretrain_java_data_5293440",
                        "content": "//,temp,ConsumerListenerTest.java,132,144,temp,TempDestDeleteTest.java,130,141\n//,3\npublic class xxx {\nprotected Session createConsumer() throws JMSException {\nfinal String consumerText = \"Consumer: \" + (++consumerCounter);\nLOG.info(\"Creating consumer: \" + consumerText + \" on destination: \" + destination);\nSession answer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = answer.createConsumer(destination);\nconsumer.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\nLOG.info(\"Received message by: \" + consumerText + \" message: \" + message);\n}\n});\nreturn answer;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2199_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1082
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 57
                },
                {
                        "id": "pretrain_java_data_10139249",
                        "content": "<gh_stars>0\n//,temp,JDBCCommitExceptionTest.java,141,153,temp,JMSClientTest.java,608,629\n//,3\npublic class xxx {\nprotected void sendMessages(int messagesExpected) throws Exception {\njavax.jms.Connection connection = factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(\"TEST\");\nMessageProducer producer = session.createProducer(destination);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nfor (int i=0; i<messagesExpected; i++) {\nLOG.debug(\"Sending message \" + (i+1) + \" of \" + messagesExpected);\nproducer.send(session.createTextMessage(\"test message \" + (i+1)));\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/182_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3278
                },
                {
                        "id": "test_logbench-o_data_3279",
                        "content": "protected void sendMessages(int messagesExpected) throws Exception {\njavax.jms.Connection connection = factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(\"TEST\");\nMessageProducer producer = session.createProducer(destination);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nfor (int i = 0; i < messagesExpected; i++) {\nLOG.debug(\"Sending message \" + (i + 1) + \" of \" + messagesExpected);\nproducer.send(session.createTextMessage(\"test message \" + (i + 1)));\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JDBCCommitExceptionTest_sendMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3278
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 58
                },
                {
                        "id": "test_logbench-o_data_3706",
                        "content": "@Test(timeout = 60 * 1000)\npublic void testJMXCountersWithOfflineSubs() throws Exception {\n// create durable subscription 1\nConnection con = createConnection(\"cliId1\");\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nsession.close();\ncon.close();\n// restart broker\nbroker.stop();\ncreateBroker(false);\n// send messages\ncon = createConnection();\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(null);\nint sent = 0;\nfor (int i = 0; i < 10; i++) {\nsent++;\nMessage message = session.createMessage();\nproducer.send(topic, message);\n}\nsession.close();\ncon.close();\n// consume some messages\ncon = createConnection(\"cliId1\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createDurableSubscriber(topic, \"SubsId\", null, true);\nfor (int i = 0; i < sent / 2; i++) {\nMessage m = consumer.receive(4000);\nassertNotNull(\"got message: \" + i, m);\nLOG.info(\"Got :\" + i + \", \" + m);\n}\n// check some counters while active\nObjectName activeDurableSubName = broker.getAdminView().getDurableTopicSubscribers()[0];\nLOG.info(\"active durable sub name: \" + activeDurableSubName);\nfinal DurableSubscriptionViewMBean durableSubscriptionView = (DurableSubscriptionViewMBean) broker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"is active\", durableSubscriptionView.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? 10 : 0, durableSubscriptionView.getEnqueueCounter());\nassertTrue(\"correct waiting acks\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 5 == durableSubscriptionView.getMessageCountAwaitingAcknowledge();\n}\n}));\nassertEquals(\"correct dequeue\", 5, durableSubscriptionView.getDequeueCounter());\nObjectName destinationName = broker.getAdminView().getTopics()[0];\nTopicViewMBean topicView = (TopicViewMBean) broker.getManagementContext().newProxyInstance(destinationName, TopicViewMBean.class, true);\nassertEquals(\"correct enqueue\", 10, topicView.getEnqueueCount());\nassertEquals(\"topic view dequeue not updated\", 5, topicView.getDequeueCount());\nassertEquals(\"inflight\", 5, topicView.getInFlightCount());\nsession.close();\ncon.close();\n// check some counters when inactive\nObjectName inActiveDurableSubName = broker.getAdminView().getInactiveDurableTopicSubscribers()[0];\nLOG.info(\"inactive durable sub name: \" + inActiveDurableSubName);\nDurableSubscriptionViewMBean durableSubscriptionView1 = (DurableSubscriptionViewMBean) broker.getManagementContext().newProxyInstance(inActiveDurableSubName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"is not active\", !durableSubscriptionView1.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? 10 : 0, durableSubscriptionView1.getEnqueueCounter());\nassertEquals(\"correct awaiting ack\", 0, durableSubscriptionView1.getMessageCountAwaitingAcknowledge());\nassertEquals(\"correct dequeue\", keepDurableSubsActive ? 5 : 0, durableSubscriptionView1.getDequeueCounter());\n// destination view\nassertEquals(\"correct enqueue\", 10, topicView.getEnqueueCount());\nassertEquals(\"topic view dequeue not updated\", 5, topicView.getDequeueCount());\nassertEquals(\"inflight back to 0 after deactivate\", 0, topicView.getInFlightCount());\n// consume the rest\ncon = createConnection(\"cliId1\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumer = session.createDurableSubscriber(topic, \"SubsId\", null, true);\nfor (int i = 0; i < sent / 2; i++) {\nMessage m = consumer.receive(30000);\nassertNotNull(\"got message: \" + i, m);\nLOG.info(\"Got :\" + i + \", \" + m);\n}\nactiveDurableSubName = broker.getAdminView().getDurableTopicSubscribers()[0];\nLOG.info(\"durable sub name: \" + activeDurableSubName);\nfinal DurableSubscriptionViewMBean durableSubscriptionView2 = (DurableSubscriptionViewMBean) broker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"is active\", durableSubscriptionView2.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? 10 : 0, durableSubscriptionView2.getEnqueueCounter());\nassertTrue(\"correct dequeue\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nlong val = durableSubscriptionView2.getDequeueCounter();\nLOG.info(\"dequeue count:\" + val);\nreturn 10 == val;\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DurableSubscriptionOffline2Test_testJMXCountersWithOfflineSubs.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3705
                },
                {
                        "id": "pretrain_java_data_8589636",
                        "content": "<filename>LACCPlus/ActiveMQ/1769_2.java\n//,temp,AMQ4656Test.java,91,185,temp,DurableSubscriptionOffline2Test.java,64,170\n//,3\npublic class xxx {\n@Test(timeout = 60 * 1000)\npublic void testJMXCountersWithOfflineSubs() throws Exception {\n// create durable subscription 1\nConnection con = createConnection(\"cliId1\");\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nsession.close();\ncon.close();\n// restart broker\nbroker.stop();\ncreateBroker(false /*deleteAllMessages*/);\n// send messages\ncon = createConnection();\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(null);\nint sent = 0;\nfor (int i = 0; i < 10; i++) {\nsent++;\nMessage message = session.createMessage();\nproducer.send(topic, message);\n}\nsession.close();\ncon.close();\n// consume some messages\ncon = createConnection(\"cliId1\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createDurableSubscriber(topic, \"SubsId\", null, true);\nfor (int i=0; i<sent/2; i++) {\nMessage m =  consumer.receive(4000);\nassertNotNull(\"got message: \" + i, m);\nLOG.info(\"Got :\" + i + \", \" + m);\n}\n// check some counters while active\nObjectName activeDurableSubName = broker.getAdminView().getDurableTopicSubscribers()[0];\nLOG.info(\"active durable sub name: \" + activeDurableSubName);\nfinal DurableSubscriptionViewMBean durableSubscriptionView = (DurableSubscriptionViewMBean)\nbroker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"is active\", durableSubscriptionView.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? 10 : 0, durableSubscriptionView.getEnqueueCounter());\nassertTrue(\"correct waiting acks\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 5 == durableSubscriptionView.getMessageCountAwaitingAcknowledge();\n}\n}));\nassertEquals(\"correct dequeue\", 5, durableSubscriptionView.getDequeueCounter());\nObjectName destinationName = broker.getAdminView().getTopics()[0];\nTopicViewMBean topicView = (TopicViewMBean) broker.getManagementContext().newProxyInstance(destinationName, TopicViewMBean.class, true);\nassertEquals(\"correct enqueue\", 10, topicView.getEnqueueCount());\nassertEquals(\"topic view dequeue not updated\", 5, topicView.getDequeueCount());\nassertEquals(\"inflight\", 5, topicView.getInFlightCount());\nsession.close();\ncon.close();\n// check some counters when inactive\nObjectName inActiveDurableSubName = broker.getAdminView().getInactiveDurableTopicSubscribers()[0];\nLOG.info(\"inactive durable sub name: \" + inActiveDurableSubName);\nDurableSubscriptionViewMBean durableSubscriptionView1 = (DurableSubscriptionViewMBean)\nbroker.getManagementContext().newProxyInstance(inActiveDurableSubName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"is not active\", !durableSubscriptionView1.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? 10 : 0, durableSubscriptionView1.getEnqueueCounter());\nassertEquals(\"correct awaiting ack\", 0, durableSubscriptionView1.getMessageCountAwaitingAcknowledge());\nassertEquals(\"correct dequeue\", keepDurableSubsActive ? 5 : 0, durableSubscriptionView1.getDequeueCounter());\n// destination view\nassertEquals(\"correct enqueue\", 10, topicView.getEnqueueCount());\nassertEquals(\"topic view dequeue not updated\", 5, topicView.getDequeueCount());\nassertEquals(\"inflight back to 0 after deactivate\", 0, topicView.getInFlightCount());\n// consume the rest\ncon = createConnection(\"cliId1\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumer = session.createDurableSubscriber(topic, \"SubsId\", null, true);\nfor (int i=0; i<sent/2;i++) {\nMessage m =  consumer.receive(30000);\nassertNotNull(\"got message: \" + i, m);\nLOG.info(\"Got :\" + i + \", \" + m);\n}\nactiveDurableSubName = broker.getAdminView().getDurableTopicSubscribers()[0];\nLOG.info(\"durable sub name: \" + activeDurableSubName);\nfinal DurableSubscriptionViewMBean durableSubscriptionView2 = (DurableSubscriptionViewMBean)\nbroker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"is active\", durableSubscriptionView2.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? 10 : 0, durableSubscriptionView2.getEnqueueCounter());\nassertTrue(\"correct dequeue\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nlong val = durableSubscriptionView2.getDequeueCounter();\nLOG.info(\"dequeue count:\" + val);\nreturn 10 == val;\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1769_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3705
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 59
                },
                {
                        "id": "pretrain_java_data_11661820",
                        "content": "<gh_stars>0\n//,temp,PooledConnectionTempQueueTest.java,100,119,temp,PooledConnectionTempQueueTest.java,75,98\n//,3\npublic class xxx {\npublic void receiveAndRespondWithMessageIdAsCorrelationId(ConnectionFactory connectionFactory,\nString queueName) throws JMSException {\nConnection con = connectionFactory.createConnection();\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(session.createQueue(queueName));\nfinal javax.jms.Message inMessage = consumer.receive();\nString requestMessageId = inMessage.getJMSMessageID();\nLOG.debug(\"Received message \" + requestMessageId);\nfinal TextMessage replyMessage = session.createTextMessage(\"Result\");\nreplyMessage.setJMSCorrelationID(inMessage.getJMSMessageID());\nfinal MessageProducer producer = session.createProducer(inMessage.getJMSReplyTo());\nLOG.debug(\"Sending reply to \" + inMessage.getJMSReplyTo());\nproducer.send(replyMessage);\nproducer.close();\nconsumer.close();\nsession.close();\ncon.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/305_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3853
                },
                {
                        "id": "test_logbench-o_data_3854",
                        "content": "public void receiveAndRespondWithMessageIdAsCorrelationId(ConnectionFactory connectionFactory, String queueName) throws JMSException {\nConnection con = connectionFactory.createConnection();\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(session.createQueue(queueName));\nfinal javax.jms.Message inMessage = consumer.receive();\nString requestMessageId = inMessage.getJMSMessageID();\nLOG.debug(\"Received message \" + requestMessageId);\nfinal TextMessage replyMessage = session.createTextMessage(\"Result\");\nreplyMessage.setJMSCorrelationID(inMessage.getJMSMessageID());\nfinal MessageProducer producer = session.createProducer(inMessage.getJMSReplyTo());\nLOG.debug(\"Sending reply to \" + inMessage.getJMSReplyTo());\nproducer.send(replyMessage);\nproducer.close();\nconsumer.close();\nsession.close();\ncon.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_PooledConnectionTempQueueTest_receiveAndRespondWithMessageIdAsCorrelationId.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3853
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 60
                },
                {
                        "id": "pretrain_java_data_11728948",
                        "content": "<filename>LACCPlus/ActiveMQ/2295_2.java\n//,temp,JmsTopicRequestReplyTest.java,54,100,temp,JMSClientRequestResponseTest.java,128,152\n//,3\npublic class xxx {\nprivate void doTestRequestResponse() throws Exception {\nMessageProducer requestProducer = requestorSession.createProducer(requestDestination);\nMessageConsumer replyConsumer = requestorSession.createConsumer(replyDestination);\nTextMessage requestMessage = requestorSession.createTextMessage(\"SomeRequest\");\nrequestMessage.setJMSReplyTo(replyDestination);\nrequestProducer.send(requestMessage);\nLOG.info(\"Sent request to destination: {}\", requestDestination.toString());\nMessage msg = replyConsumer.receive(10000);\nif (msg instanceof TextMessage) {\nTextMessage replyMessage = (TextMessage)msg;\nLOG.info(\"Received reply.\");\nLOG.info(replyMessage.toString());\nassertTrue(\"Wrong message content\", replyMessage.getText().startsWith(\"response\"));\n} else {\nfail(\"Should have received a reply by now\");\n}\nreplyConsumer.close();\nassertEquals(\"Should not have had any failures: \" + failures, 0, failures.size());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2295_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 788
                },
                {
                        "id": "test_logbench-o_data_789",
                        "content": "private void doTestRequestResponse() throws Exception {\nMessageProducer requestProducer = requestorSession.createProducer(requestDestination);\nMessageConsumer replyConsumer = requestorSession.createConsumer(replyDestination);\nTextMessage requestMessage = requestorSession.createTextMessage(\"SomeRequest\");\nrequestMessage.setJMSReplyTo(replyDestination);\nrequestProducer.send(requestMessage);\nLOG.info(\"Sent request to destination: {}\", requestDestination.toString());\nMessage msg = replyConsumer.receive(10000);\nif (msg instanceof TextMessage) {\nTextMessage replyMessage = (TextMessage) msg;\nLOG.info(\"Received reply.\");\nLOG.info(replyMessage.toString());\nassertTrue(\"Wrong message content\", replyMessage.getText().startsWith(\"response\"));\n} else {\nfail(\"Should have received a reply by now\");\n}\nreplyConsumer.close();\nassertEquals(\"Should not have had any failures: \" + failures, 0, failures.size());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JMSClientRequestResponseTest_doTestRequestResponse.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 788
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 61
                },
                {
                        "id": "test_logbench-o_data_1874",
                        "content": "public void testVirtualTopicRouting() throws Exception {\nif (connection == null) {\nconnection = createConnection();\n}\nconnection.start();\nLOG.info(\"validate no other messages on queues\");\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQDestination destination1 = getConsumer1Destination();\nActiveMQDestination destination2 = getConsumer2Destination();\nMessageConsumer c1 = session.createConsumer(destination1, null);\nMessageConsumer c2 = session.createConsumer(destination2, null);\nLOG.info(\"send one simple message that should go to both consumers\");\nMessageProducer producer = session.createProducer(getProducerDestination());\nassertNotNull(producer);\nproducer.send(session.createTextMessage(\"Last Message\"));\n// check that c1 received the message as it should\nassertNotNull(c1.receive(3000));\n// check that c2 received the message as well - this breaks pre-patch,\n// when VirtualTopicInterceptor.shouldDispatch only returned true if the prefix\n// did not have \".*\", or the destination name started with the first part of the\n// prefix (i.e. in the case of \"*.*.\", the destination name would have had\n// to be \"*\").\nassertNotNull(c2.receive(3000));\n} catch (JMSException e) {\ne.printStackTrace();\nfail(\"unexpected ex while waiting for last messages: \" + e);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_CustomVirtualTopicInterceptorWithLeadingWildcardTest_testVirtualTopicRouting.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1873
                },
                {
                        "id": "pretrain_java_data_13283508",
                        "content": "//,temp,CustomVirtualTopicInterceptorWithLeadingWildcardTest.java,57,91,temp,VirtualTopicSelectorTest.java,52,85\n//,3\npublic class xxx {\npublic void testVirtualTopicRouting() throws Exception {\nif (connection == null) {\nconnection = createConnection();\n}\nconnection.start();\nLOG.info(\"validate no other messages on queues\");\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQDestination destination1 = getConsumer1Destination();\nActiveMQDestination destination2 = getConsumer2Destination();\nMessageConsumer c1 = session.createConsumer(destination1, null);\nMessageConsumer c2 = session.createConsumer(destination2, null);\nLOG.info(\"send one simple message that should go to both consumers\");\nMessageProducer producer = session.createProducer(getProducerDestination());\nassertNotNull(producer);\nproducer.send(session.createTextMessage(\"Last Message\"));\n//check that c1 received the message as it should\nassertNotNull(c1.receive(3000));\n//check that c2 received the message as well - this breaks pre-patch,\n//when VirtualTopicInterceptor.shouldDispatch only returned true if the prefix\n//did not have \".*\", or the destination name started with the first part of the\n//prefix (i.e. in the case of \"*.*.\", the destination name would have had\n//to be \"*\").\nassertNotNull(c2.receive(3000));\n} catch (JMSException e) {\ne.printStackTrace();\nfail(\"unexpected ex while waiting for last messages: \" + e);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/384_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1873
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 62
                },
                {
                        "id": "test_logbench-o_data_3776",
                        "content": "public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\nif (messageId != null) {\nQueueViewMBean queueView = getQueueView();\nif (queueView != null) {\nlog.info(\"Removing message \" + getJMSDestination() + \"(\" + messageId + \")\");\nqueueView.removeMessage(messageId);\n} else {\nlog.warn(\"No queue named: \" + getPhysicalDestinationName());\n}\n}\nreturn redirectToDestinationView();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DeleteMessage_handleRequest.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1930
                },
                {
                        "id": "pretrain_java_data_13359709",
                        "content": "//,temp,DeleteMessage.java,41,52,temp,MoveMessage.java,42,53\n//,3\npublic class xxx {\npublic ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\nif (messageId != null) {\nQueueViewMBean queueView = getQueueView();\nif (queueView != null) {\nlog.info(\"Removing message \" + getJMSDestination() + \"(\" + messageId + \")\");\nqueueView.removeMessage(messageId);\n} else {\nlog.warn(\"No queue named: \" + getPhysicalDestinationName());\n}\n}\nreturn redirectToDestinationView();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1554_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1930
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 63
                },
                {
                        "id": "pretrain_java_data_14833460",
                        "content": "<filename>LACCPlus/ActiveMQ/987_1.java\n//,temp,ConnectTest.java,139,178,temp,ConnectTest.java,92,137\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testInactivityMonitor() throws Exception {\nbrokerService.addConnector(\"stomp://0.0.0.0:0?transport.defaultHeartBeat=1000,0&transport.useKeepAlive=false\");\nbrokerService.start();\nThread t1 = new Thread() {\nStompConnection connection = new StompConnection();\n@Override\npublic void run() {\ntry {\nconnection.open(\"localhost\",  brokerService.getTransportConnectors().get(0).getConnectUri().getPort());\nconnection.connect(\"system\", \"manager\");\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 1 == brokerService.getTransportConnectors().get(0).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));\n// and it should be closed due to inactivity\nassertTrue(\"no dangling connections\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 0 == brokerService.getTransportConnectors().get(0).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/987_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 261
                },
                {
                        "id": "test_logbench-o_data_2519",
                        "content": "@Test(timeout = 60000)\npublic void testInactivityMonitor() throws Exception {\nbrokerService.addConnector(\"stomp://0.0.0.0:0?transport.defaultHeartBeat=1000,0&transport.useKeepAlive=false\");\nbrokerService.start();\nThread t1 = new Thread() {\nStompConnection connection = new StompConnection();\n@Override\npublic void run() {\ntry {\nconnection.open(\"localhost\", brokerService.getTransportConnectors().get(0).getConnectUri().getPort());\nconnection.connect(\"system\", \"manager\");\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 1 == brokerService.getTransportConnectors().get(0).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));\n// and it should be closed due to inactivity\nassertTrue(\"no dangling connections\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 0 == brokerService.getTransportConnectors().get(0).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ConnectTest_testInactivityMonitor.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 261
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 64
                },
                {
                        "id": "pretrain_java_data_14876543",
                        "content": "<filename>LACCPlus/ActiveMQ/2234_1.java\n//,temp,ReduceMemoryFootprintTest.java,110,140,temp,ReduceMemoryFootprintTest.java,79,108\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testPropertyLostScheduled() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionURI);\nConnection connection = connectionFactory.createConnection();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(new ActiveMQQueue(TEST_QUEUE_NAME));\nconnection.start();\nString messageText = createMessageText();\nActiveMQTextMessage message = new ActiveMQTextMessage();\n// Try with scheduled\nmessage.setStringProperty(PROP_NAME, PROP_VALUE);\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, 1000);\nmessage.setText(messageText);\nproducer.send(message);\nsession.commit();\nLOG.info(\"Attempting to receive scheduled message\");\nMessage receivedMessage = consumeMessages(connection);\nassertNotNull(receivedMessage);\nassertEquals(\"property should match\", PROP_VALUE, receivedMessage.getStringProperty(PROP_NAME));\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2234_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 575
                },
                {
                        "id": "test_logbench-o_data_3592",
                        "content": "@Test(timeout = 60000)\npublic void testPropertyLostScheduled() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionURI);\nConnection connection = connectionFactory.createConnection();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(new ActiveMQQueue(TEST_QUEUE_NAME));\nconnection.start();\nString messageText = createMessageText();\nActiveMQTextMessage message = new ActiveMQTextMessage();\n// Try with scheduled\nmessage.setStringProperty(PROP_NAME, PROP_VALUE);\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, 1000);\nmessage.setText(messageText);\nproducer.send(message);\nsession.commit();\nLOG.info(\"Attempting to receive scheduled message\");\nMessage receivedMessage = consumeMessages(connection);\nassertNotNull(receivedMessage);\nassertEquals(\"property should match\", PROP_VALUE, receivedMessage.getStringProperty(PROP_NAME));\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ReduceMemoryFootprintTest_testPropertyLostScheduled.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 575
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 65
                },
                {
                        "id": "pretrain_java_data_14876543",
                        "content": "<filename>LACCPlus/ActiveMQ/2234_1.java\n//,temp,ReduceMemoryFootprintTest.java,110,140,temp,ReduceMemoryFootprintTest.java,79,108\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testPropertyLostScheduled() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionURI);\nConnection connection = connectionFactory.createConnection();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(new ActiveMQQueue(TEST_QUEUE_NAME));\nconnection.start();\nString messageText = createMessageText();\nActiveMQTextMessage message = new ActiveMQTextMessage();\n// Try with scheduled\nmessage.setStringProperty(PROP_NAME, PROP_VALUE);\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, 1000);\nmessage.setText(messageText);\nproducer.send(message);\nsession.commit();\nLOG.info(\"Attempting to receive scheduled message\");\nMessage receivedMessage = consumeMessages(connection);\nassertNotNull(receivedMessage);\nassertEquals(\"property should match\", PROP_VALUE, receivedMessage.getStringProperty(PROP_NAME));\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2234_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 575
                },
                {
                        "id": "test_logbench-o_data_576",
                        "content": "@Test(timeout = 60000)\npublic void testPropertyLostNonScheduled() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionURI);\nConnection connection = connectionFactory.createConnection();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(new ActiveMQQueue(TEST_QUEUE_NAME));\nconnection.start();\nString messageText = createMessageText();\nActiveMQTextMessage message = new ActiveMQTextMessage();\n// Try with non-scheduled\nmessage.setStringProperty(PROP_NAME, PROP_VALUE);\nmessage.setText(messageText);\nproducer.send(message);\nsession.commit();\nLOG.info(\"Attempting to receive non-scheduled message\");\nMessage receivedMessage = consumeMessages(connection);\nassertNotNull(receivedMessage);\nassertEquals(\"property should match\", PROP_VALUE, receivedMessage.getStringProperty(PROP_NAME));\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ReduceMemoryFootprintTest_testPropertyLostNonScheduled.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 575
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 66
                },
                {
                        "id": "pretrain_java_data_617491",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,CompositeQueueTest.java,56,94,temp,MirroredQueueTest.java,42,76\n//,3\npublic class xxx {\n@Test\npublic void testVirtualTopicCreation() throws Exception {\nif (connection == null) {\nconnection = createConnection();\n}\nconnection.start();\nConsumerBean messageList1 = new ConsumerBean();\nConsumerBean messageList2 = new ConsumerBean();\nmessageList1.setVerbose(true);\nmessageList2.setVerbose(true);\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination producerDestination = getProducerDestination();\nDestination destination1 = getConsumer1Dsetination();\nDestination destination2 = getConsumer2Dsetination();\nLOG.info(\"Sending to: \" + producerDestination);\nLOG.info(\"Consuming from: \" + destination1 + \" and \" + destination2);\nMessageConsumer c1 = session.createConsumer(destination1, messageSelector1);\nMessageConsumer c2 = session.createConsumer(destination2, messageSelector2);\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\n// create topic producer\nMessageProducer producer = session.createProducer(producerDestination);\nassertNotNull(producer);\nfor (int i = 0; i < total; i++) {\nproducer.send(createMessage(session, i));\n}\nassertMessagesArrived(messageList1, messageList2);\nassertOriginalDestination(messageList1, messageList2);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1001_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2214
                },
                {
                        "id": "test_logbench-o_data_2215",
                        "content": "@Test\npublic void testVirtualTopicCreation() throws Exception {\nif (connection == null) {\nconnection = createConnection();\n}\nconnection.start();\nConsumerBean messageList1 = new ConsumerBean();\nConsumerBean messageList2 = new ConsumerBean();\nmessageList1.setVerbose(true);\nmessageList2.setVerbose(true);\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination producerDestination = getProducerDestination();\nDestination destination1 = getConsumer1Dsetination();\nDestination destination2 = getConsumer2Dsetination();\nLOG.info(\"Sending to: \" + producerDestination);\nLOG.info(\"Consuming from: \" + destination1 + \" and \" + destination2);\nMessageConsumer c1 = session.createConsumer(destination1, messageSelector1);\nMessageConsumer c2 = session.createConsumer(destination2, messageSelector2);\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\n// create topic producer\nMessageProducer producer = session.createProducer(producerDestination);\nassertNotNull(producer);\nfor (int i = 0; i < total; i++) {\nproducer.send(createMessage(session, i));\n}\nassertMessagesArrived(messageList1, messageList2);\nassertOriginalDestination(messageList1, messageList2);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_CompositeQueueTest_testVirtualTopicCreation.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2214
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 67
                },
                {
                        "id": "pretrain_java_data_731722",
                        "content": "//,temp,UnreliableUdpTransportTest.java,64,76,temp,UnreliableUdpTransportTest.java,49,62\n//,3\npublic class xxx {\n@Override\nprotected Transport createProducer() throws Exception {\nLOG.info(\"Producer using URI: \" + producerURI);\nOpenWireFormat wireFormat = createWireFormat();\nUnreliableUdpTransport transport = new UnreliableUdpTransport(wireFormat, new URI(producerURI));\ntransport.setDropCommandStrategy(dropStrategy);\nReliableTransport reliableTransport = new ReliableTransport(transport, transport);\nReplayer replayer = reliableTransport.getReplayer();\nreliableTransport.setReplayStrategy(createReplayStrategy(replayer));\nreturn new CommandJoiner(reliableTransport, wireFormat);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1574_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3125
                },
                {
                        "id": "test_logbench-o_data_3126",
                        "content": "@Override\nprotected Transport createProducer() throws Exception {\nLOG.info(\"Producer using URI: \" + producerURI);\nOpenWireFormat wireFormat = createWireFormat();\nUnreliableUdpTransport transport = new UnreliableUdpTransport(wireFormat, new URI(producerURI));\ntransport.setDropCommandStrategy(dropStrategy);\nReliableTransport reliableTransport = new ReliableTransport(transport, transport);\nReplayer replayer = reliableTransport.getReplayer();\nreliableTransport.setReplayStrategy(createReplayStrategy(replayer));\nreturn new CommandJoiner(reliableTransport, wireFormat);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_UnreliableUdpTransportTest_createProducer.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3125
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 68
                },
                {
                        "id": "pretrain_java_data_16715333",
                        "content": "<gh_stars>0\n//,temp,SpringBeanTest.java,34,67,temp,NameSpaceXmlLoadTest.java,34,57\n//,3\npublic class xxx {\n@Test\npublic void testCanLoad() throws Exception {\nfinal String brokerConfig =  \"namespace-prefix\";\nSystem.setProperty(\"data\", IOHelper.getDefaultDataDirectory());\nSystem.setProperty(\"broker-name\", brokerConfig);\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\nassertEquals(\"nameMatch\", brokerConfig, brokerService.getBrokerName());\n// verify runtimeConfig active\nObjectName objectName =\nnew ObjectName(brokerService.getBrokerObjectName().toString() +\nRuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView =\n(RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,\nRuntimeConfigurationViewMBean.class, false);\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nString propOfInterest = \"modified\";\nassertNotEquals(\"modified is valid\", \"unknown\", props.get(propOfInterest));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/402_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1901
                },
                {
                        "id": "test_logbench-o_data_1902",
                        "content": "@Test\npublic void testCanLoad() throws Exception {\nfinal String brokerConfig = \"namespace-prefix\";\nSystem.setProperty(\"data\", IOHelper.getDefaultDataDirectory());\nSystem.setProperty(\"broker-name\", brokerConfig);\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\nassertEquals(\"nameMatch\", brokerConfig, brokerService.getBrokerName());\n// verify runtimeConfig active\nObjectName objectName = new ObjectName(brokerService.getBrokerObjectName().toString() + RuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView = (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName, RuntimeConfigurationViewMBean.class, false);\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nString propOfInterest = \"modified\";\nassertNotEquals(\"modified is valid\", \"unknown\", props.get(propOfInterest));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_NameSpaceXmlLoadTest_testCanLoad.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1901
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 69
                },
                {
                        "id": "test_logbench-o_data_2035",
                        "content": "public void waitForMessagesToArrive(int messageCount) {\nLOG.info(\"Waiting for \" + messageCount + \" message(s) to arrive\");\nlong start = System.currentTimeMillis();\nfor (int i = 0; i < messageCount; i++) {\ntry {\nif (hasReceivedMessages(messageCount)) {\nbreak;\n}\nlong duration = System.currentTimeMillis() - start;\nif (duration >= maximumDuration) {\nbreak;\n}\nsynchronized (semaphore) {\nsemaphore.wait(maximumDuration - duration);\n}\n} catch (InterruptedException e) {\nLOG.info(\"Caught: \" + e);\n}\n}\nlong end = System.currentTimeMillis() - start;\nLOG.info(\"End of wait for \" + end + \" millis and received: \" + getMessageCount() + \" messages\");\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_MemMessageIdList_waitForMessagesToArrive.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2034
                },
                {
                        "id": "pretrain_java_data_16756416",
                        "content": "<gh_stars>0\n//,temp,MemMessageIdList.java,121,145,temp,MessageIdList.java,141,165\n//,3\npublic class xxx {\npublic void waitForMessagesToArrive(int messageCount, long maximumDuration) {\nLOG.info(\"Waiting for \" + messageCount + \" message(s) to arrive\");\nlong start = System.currentTimeMillis();\nfor (int i = 0; i < messageCount; i++) {\ntry {\nif (hasReceivedMessages(messageCount)) {\nbreak;\n}\nlong duration = System.currentTimeMillis() - start;\nif (duration >= maximumDuration) {\nbreak;\n}\nsynchronized (semaphore) {\nsemaphore.wait(maximumDuration - duration);\n}\n} catch (InterruptedException e) {\nLOG.info(\"Caught: \" + e);\n}\n}\nlong end = System.currentTimeMillis() - start;\nLOG.info(\"End of wait for \" + end + \" millis and received: \" + getMessageCount() + \" messages\");\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/867_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2034
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 70
                },
                {
                        "id": "test_logbench-o_data_3561",
                        "content": "private void validateQueueStats() throws Exception {\nfinal BrokerView brokerView = brokers.get(\"BrokerA\").broker.getAdminView();\nassertEquals(\"enequeue is correct\", 1000, brokerView.getTotalEnqueueCount());\nassertTrue(\"dequeue is correct\", Wait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nLOG.info(\"dequeue count (want 1000), is : \" + brokerView.getTotalDequeueCount());\nreturn 1000 == brokerView.getTotalDequeueCount();\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ2439Test_validateQueueStats.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3560
                },
                {
                        "id": "pretrain_java_data_18223952",
                        "content": "//,temp,TransactedConsumeTest.java,47,60,temp,AMQ2439Test.java,45,55\n//,3\npublic class xxx {\nprivate void validateQueueStats() throws Exception {\nfinal BrokerView brokerView = brokers.get(\"BrokerA\").broker.getAdminView();\nassertEquals(\"enequeue is correct\", 1000, brokerView.getTotalEnqueueCount());\nassertTrue(\"dequeue is correct\", Wait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nLOG.info(\"dequeue count (want 1000), is : \" + brokerView.getTotalDequeueCount());\nreturn 1000 == brokerView.getTotalDequeueCount();\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/907_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3560
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 71
                },
                {
                        "id": "test_logbench-o_data_1513",
                        "content": "private void createProducerAndSendMessages(int numToSend) throws Exception {\nqueue = session.createQueue(\"test1\");\nMessageProducer producer = session.createProducer(queue);\nfor (int i = 0; i < numToSend; i++) {\nTextMessage message = session.createTextMessage(MESSAGE_TEXT + i);\nif (i != 0 && i % 50000 == 0) {\nLOG.info(\"sent: \" + i);\n}\nproducer.send(message);\n}\nproducer.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ3145Test_createProducerAndSendMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1512
                },
                {
                        "id": "pretrain_java_data_18338260",
                        "content": "//,temp,ConsumeUncompressedCompressedMessageTest.java,155,166,temp,AMQ3145Test.java,111,122\n//,3\npublic class xxx {\nprivate void createProducerAndSendMessages(int numToSend) throws Exception {\nqueue = session.createQueue(\"test1\");\nMessageProducer producer = session.createProducer(queue);\nfor (int i = 0; i < numToSend; i++) {\nTextMessage message = session.createTextMessage(MESSAGE_TEXT + i);\nif (i  != 0 && i % 50000 == 0) {\nLOG.info(\"sent: \" + i);\n}\nproducer.send(message);\n}\nproducer.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/164_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1512
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 72
                },
                {
                        "id": "test_logbench-o_data_1634",
                        "content": "@Override\n@SuppressWarnings(\"rawtypes\")\nprotected void assertMessageValid(int index, Message message) throws JMSException {\nassertTrue(\"Should be a MapMessage: \" + message, message instanceof MapMessage);\nMapMessage mapMessage = (MapMessage) message;\nObject value = mapMessage.getObject(\"textField\");\nassertEquals(\"textField\", data[index], value);\nMap map = (Map) mapMessage.getObject(\"mapField\");\nassertNotNull(map);\nassertEquals(\"mapField.a\", \"foo\", map.get(\"a\"));\nassertEquals(\"mapField.b\", Integer.valueOf(23), map.get(\"b\"));\nassertEquals(\"mapField.c\", Long.valueOf(45), map.get(\"c\"));\nvalue = map.get(\"d\");\nassertTrue(\"mapField.d should be a Map\", value instanceof Map);\nmap = (Map) value;\nassertEquals(\"mapField.d.x\", \"abc\", map.get(\"x\"));\nvalue = map.get(\"y\");\nassertTrue(\"mapField.d.y is a List\", value instanceof List);\nList list = (List) value;\nLOG.debug(\"mapField.d.y: \" + list);\nassertEquals(\"listField.size\", 3, list.size());\nLOG.debug(\"Found map: \" + map);\nlist = (List) mapMessage.getObject(\"listField\");\nLOG.debug(\"listField: \" + list);\nassertEquals(\"listField.size\", 3, list.size());\nassertEquals(\"listField[0]\", \"a\", list.get(0));\nassertEquals(\"listField[1]\", \"b\", list.get(1));\nassertEquals(\"listField[2]\", \"c\", list.get(2));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_NestedMapMessageTest_assertMessageValid.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1633
                },
                {
                        "id": "pretrain_java_data_18350886",
                        "content": "//,temp,NestedMapAndListPropertyTest.java,39,71,temp,NestedMapMessageTest.java,39,74\n//,3\npublic class xxx {\n@Override\n@SuppressWarnings(\"rawtypes\")\nprotected void assertMessageValid(int index, Message message) throws JMSException {\nassertTrue(\"Should be a MapMessage: \" + message, message instanceof MapMessage);\nMapMessage mapMessage = (MapMessage)message;\nObject value = mapMessage.getObject(\"textField\");\nassertEquals(\"textField\", data[index], value);\nMap map = (Map)mapMessage.getObject(\"mapField\");\nassertNotNull(map);\nassertEquals(\"mapField.a\", \"foo\", map.get(\"a\"));\nassertEquals(\"mapField.b\", Integer.valueOf(23), map.get(\"b\"));\nassertEquals(\"mapField.c\", Long.valueOf(45), map.get(\"c\"));\nvalue = map.get(\"d\");\nassertTrue(\"mapField.d should be a Map\", value instanceof Map);\nmap = (Map)value;\nassertEquals(\"mapField.d.x\", \"abc\", map.get(\"x\"));\nvalue = map.get(\"y\");\nassertTrue(\"mapField.d.y is a List\", value instanceof List);\nList list = (List)value;\nLOG.debug(\"mapField.d.y: \" + list);\nassertEquals(\"listField.size\", 3, list.size());\nLOG.debug(\"Found map: \" + map);\nlist = (List)mapMessage.getObject(\"listField\");\nLOG.debug(\"listField: \" + list);\nassertEquals(\"listField.size\", 3, list.size());\nassertEquals(\"listField[0]\", \"a\", list.get(0));\nassertEquals(\"listField[1]\", \"b\", list.get(1));\nassertEquals(\"listField[2]\", \"c\", list.get(2));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1092_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1633
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 73
                },
                {
                        "id": "pretrain_java_data_18350886",
                        "content": "//,temp,NestedMapAndListPropertyTest.java,39,71,temp,NestedMapMessageTest.java,39,74\n//,3\npublic class xxx {\n@Override\n@SuppressWarnings(\"rawtypes\")\nprotected void assertMessageValid(int index, Message message) throws JMSException {\nassertTrue(\"Should be a MapMessage: \" + message, message instanceof MapMessage);\nMapMessage mapMessage = (MapMessage)message;\nObject value = mapMessage.getObject(\"textField\");\nassertEquals(\"textField\", data[index], value);\nMap map = (Map)mapMessage.getObject(\"mapField\");\nassertNotNull(map);\nassertEquals(\"mapField.a\", \"foo\", map.get(\"a\"));\nassertEquals(\"mapField.b\", Integer.valueOf(23), map.get(\"b\"));\nassertEquals(\"mapField.c\", Long.valueOf(45), map.get(\"c\"));\nvalue = map.get(\"d\");\nassertTrue(\"mapField.d should be a Map\", value instanceof Map);\nmap = (Map)value;\nassertEquals(\"mapField.d.x\", \"abc\", map.get(\"x\"));\nvalue = map.get(\"y\");\nassertTrue(\"mapField.d.y is a List\", value instanceof List);\nList list = (List)value;\nLOG.debug(\"mapField.d.y: \" + list);\nassertEquals(\"listField.size\", 3, list.size());\nLOG.debug(\"Found map: \" + map);\nlist = (List)mapMessage.getObject(\"listField\");\nLOG.debug(\"listField: \" + list);\nassertEquals(\"listField.size\", 3, list.size());\nassertEquals(\"listField[0]\", \"a\", list.get(0));\nassertEquals(\"listField[1]\", \"b\", list.get(1));\nassertEquals(\"listField[2]\", \"c\", list.get(2));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1092_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1633
                },
                {
                        "id": "test_logbench-o_data_3051",
                        "content": "@Override\n@SuppressWarnings(\"rawtypes\")\nprotected void assertMessageValid(int index, Message message) throws JMSException {\nObject value = message.getObjectProperty(\"textField\");\nassertEquals(\"textField\", data[index], value);\nMap map = (Map) message.getObjectProperty(\"mapField\");\nassertNotNull(map);\nassertEquals(\"mapField.a\", \"foo\", map.get(\"a\"));\nassertEquals(\"mapField.b\", Integer.valueOf(23), map.get(\"b\"));\nassertEquals(\"mapField.c\", Long.valueOf(45), map.get(\"c\"));\nvalue = map.get(\"d\");\nassertTrue(\"mapField.d should be a Map\", value instanceof Map);\nmap = (Map) value;\nassertEquals(\"mapField.d.x\", \"abc\", map.get(\"x\"));\nvalue = map.get(\"y\");\nassertTrue(\"mapField.d.y is a List\", value instanceof List);\nList list = (List) value;\nLOG.debug(\"mapField.d.y: \" + list);\nassertEquals(\"listField.size\", 3, list.size());\nLOG.debug(\"Found map: \" + map);\nlist = (List) message.getObjectProperty(\"listField\");\nLOG.debug(\"listField: \" + list);\nassertEquals(\"listField.size\", 3, list.size());\nassertEquals(\"listField[0]\", \"a\", list.get(0));\nassertEquals(\"listField[1]\", \"b\", list.get(1));\nassertEquals(\"listField[2]\", \"c\", list.get(2));\nassertEquals(\"JohnDoe\", message.getStringProperty(\"JMSXUserID\"));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_NestedMapAndListPropertyTest_assertMessageValid.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1633
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 74
                },
                {
                        "id": "test_logbench-o_data_818",
                        "content": "public void testSpoofedJMSXUserIdIsIgnoredAsObjectProperty() throws Exception {\nfor (int i = 0; i < data.length; i++) {\nMessage message = createMessage(i);\nconfigureMessage(message);\nmessage.setStringProperty(\"JMSXUserID\", \"spoofedId\");\nif (verbose) {\nLOG.info(\"About to send a message: \" + message + \" with text: \" + data[i]);\n}\nsendMessage(i, message);\n}\nassertMessagesAreReceived2();\nLOG.info(\"\" + data.length + \" messages(s) received, closing down connections\");\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest_testSpoofedJMSXUserIdIsIgnoredAsObjectProperty.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 277
                },
                {
                        "id": "pretrain_java_data_19889845",
                        "content": "//,temp,JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,90,102,temp,JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,76,88\n//,2\npublic class xxx {\npublic void testSpoofedJMSXUserIdIsIgnored() throws Exception {\nfor (int i = 0; i < data.length; i++) {\nMessage message = createMessage(i);\nconfigureMessage(message);\nmessage.setStringProperty(\"JMSXUserID\", \"spoofedId\");\nif (verbose) {\nLOG.info(\"About to send a message: \" + message + \" with text: \" + data[i]);\n}\nsendMessage(i, message);\n}\nassertMessagesAreReceived();\nLOG.info(\"\" + data.length + \" messages(s) received, closing down connections\");\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/597_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 277
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 75
                },
                {
                        "id": "test_logbench-o_data_278",
                        "content": "public void testSpoofedJMSXUserIdIsIgnored() throws Exception {\nfor (int i = 0; i < data.length; i++) {\nMessage message = createMessage(i);\nconfigureMessage(message);\nmessage.setStringProperty(\"JMSXUserID\", \"spoofedId\");\nif (verbose) {\nLOG.info(\"About to send a message: \" + message + \" with text: \" + data[i]);\n}\nsendMessage(i, message);\n}\nassertMessagesAreReceived();\nLOG.info(\"\" + data.length + \" messages(s) received, closing down connections\");\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest_testSpoofedJMSXUserIdIsIgnored.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 277
                },
                {
                        "id": "pretrain_java_data_19889845",
                        "content": "//,temp,JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,90,102,temp,JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,76,88\n//,2\npublic class xxx {\npublic void testSpoofedJMSXUserIdIsIgnored() throws Exception {\nfor (int i = 0; i < data.length; i++) {\nMessage message = createMessage(i);\nconfigureMessage(message);\nmessage.setStringProperty(\"JMSXUserID\", \"spoofedId\");\nif (verbose) {\nLOG.info(\"About to send a message: \" + message + \" with text: \" + data[i]);\n}\nsendMessage(i, message);\n}\nassertMessagesAreReceived();\nLOG.info(\"\" + data.length + \" messages(s) received, closing down connections\");\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/597_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 277
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 76
                },
                {
                        "id": "pretrain_java_data_19850535",
                        "content": "//,temp,JmsTopicSelectorTest.java,50,80,temp,CompositePublishTest.java,48,96\n//,3\npublic class xxx {\n@SuppressWarnings(\"unchecked\")\n@Override\nprotected void setUp() throws Exception {\nsuper.setUp();\nconnectionFactory = createConnectionFactory();\nsendConnection = createConnection();\nsendConnection.start();\nreceiveConnection = createConnection();\nreceiveConnection.start();\nLOG.info(\"Created sendConnection: \" + sendConnection);\nLOG.info(\"Created receiveConnection: \" + receiveConnection);\nsession = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nreceiveSession = receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nLOG.info(\"Created sendSession: \" + session);\nLOG.info(\"Created receiveSession: \" + receiveSession);\nproducer = session.createProducer(null);\nLOG.info(\"Created producer: \" + producer);\nif (topic) {\nconsumerDestination = session.createTopic(getConsumerSubject());\nproducerDestination = session.createTopic(getProducerSubject());\n} else {\nconsumerDestination = session.createQueue(getConsumerSubject());\nproducerDestination = session.createQueue(getProducerSubject());\n}\nLOG.info(\"Created  consumer destination: \" + consumerDestination + \" of type: \" + consumerDestination.getClass());\nLOG.info(\"Created  producer destination: \" + producerDestination + \" of type: \" + producerDestination.getClass());\nDestination[] destinations = getDestinations();\nconsumers = new MessageConsumer[destinations.length];\nmessageLists = new List[destinations.length];\nfor (int i = 0; i < destinations.length; i++) {\nDestination dest = destinations[i];\nmessageLists[i] = createConcurrentList();\nconsumers[i] = receiveSession.createConsumer(dest);\nconsumers[i].setMessageListener(createMessageListener(i, messageLists[i]));\n}\nLOG.info(\"Started connections\");\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/986_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2551
                },
                {
                        "id": "test_logbench-o_data_2552",
                        "content": "@SuppressWarnings(\"unchecked\")\n@Override\nprotected void setUp() throws Exception {\nsuper.setUp();\nconnectionFactory = createConnectionFactory();\nsendConnection = createConnection();\nsendConnection.start();\nreceiveConnection = createConnection();\nreceiveConnection.start();\nLOG.info(\"Created sendConnection: \" + sendConnection);\nLOG.info(\"Created receiveConnection: \" + receiveConnection);\nsession = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nreceiveSession = receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nLOG.info(\"Created sendSession: \" + session);\nLOG.info(\"Created receiveSession: \" + receiveSession);\nproducer = session.createProducer(null);\nLOG.info(\"Created producer: \" + producer);\nif (topic) {\nconsumerDestination = session.createTopic(getConsumerSubject());\nproducerDestination = session.createTopic(getProducerSubject());\n} else {\nconsumerDestination = session.createQueue(getConsumerSubject());\nproducerDestination = session.createQueue(getProducerSubject());\n}\nLOG.info(\"Created  consumer destination: \" + consumerDestination + \" of type: \" + consumerDestination.getClass());\nLOG.info(\"Created  producer destination: \" + producerDestination + \" of type: \" + producerDestination.getClass());\nDestination[] destinations = getDestinations();\nconsumers = new MessageConsumer[destinations.length];\nmessageLists = new List[destinations.length];\nfor (int i = 0; i < destinations.length; i++) {\nDestination dest = destinations[i];\nmessageLists[i] = createConcurrentList();\nconsumers[i] = receiveSession.createConsumer(dest);\nconsumers[i].setMessageListener(createMessageListener(i, messageLists[i]));\n}\nLOG.info(\"Started connections\");\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_CompositePublishTest_setUp.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2551
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 77
                },
                {
                        "id": "test_logbench-o_data_1618",
                        "content": "public void testLoadTempAdvisoryQueues() throws Exception {\nfor (int i = 0; i < MESSAGE_COUNT; i++) {\nTemporaryQueue tempQueue = session.createTemporaryQueue();\nMessageConsumer consumer = session.createConsumer(tempQueue);\nMessageProducer producer = session.createProducer(tempQueue);\nconsumer.close();\nproducer.close();\ntempQueue.delete();\n}\nAdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(AdvisoryBroker.class);\nassertTrue(ab.getAdvisoryDestinations().size() == 0);\nassertTrue(ab.getAdvisoryConsumers().size() == 0);\nassertTrue(ab.getAdvisoryProducers().size() == 0);\nRegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(RegionBroker.class);\nfor (Destination dest : rb.getDestinationMap().values()) {\nLOG.debug(\"Destination: {}\", dest);\n}\n// there should be at least 2 destinations - advisories -\n// 1 for the connection + 1 generic ones\nassertTrue(\"Should be at least 2 destinations\", rb.getDestinationMap().size() > 2);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_TempDestLoadTest_testLoadTempAdvisoryQueues.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1617
                },
                {
                        "id": "pretrain_java_data_18380325",
                        "content": "<gh_stars>0\n//,temp,TempDestLoadTest.java,73,98,temp,TempDestLoadTest.java,44,71\n//,2\npublic class xxx {\npublic void testLoadTempAdvisoryTopics() throws Exception {\nfor (int i = 0; i < MESSAGE_COUNT; i++) {\nTemporaryTopic tempTopic =  session.createTemporaryTopic();\nMessageConsumer consumer = session.createConsumer(tempTopic);\nMessageProducer producer = session.createProducer(tempTopic);\nconsumer.close();\nproducer.close();\ntempTopic.delete();\n}\nAdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(\nAdvisoryBroker.class);\nassertTrue(ab.getAdvisoryDestinations().size() == 0);\nassertTrue(ab.getAdvisoryConsumers().size() == 0);\nassertTrue(ab.getAdvisoryProducers().size() == 0);\nRegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(\nRegionBroker.class);\nfor (Destination dest : rb.getDestinationMap().values()) {\nLOG.debug(\"Destination: {}\", dest);\n}\n// there should be at least 2 destinations - advisories -\n// 1 for the connection + 1 generic ones\nassertTrue(\"Should be at least 2 destinations\", rb.getDestinationMap().size() > 2);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/608_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1617
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 78
                },
                {
                        "id": "test_logbench-o_data_2925",
                        "content": "public void testLoadTempAdvisoryTopics() throws Exception {\nfor (int i = 0; i < MESSAGE_COUNT; i++) {\nTemporaryTopic tempTopic = session.createTemporaryTopic();\nMessageConsumer consumer = session.createConsumer(tempTopic);\nMessageProducer producer = session.createProducer(tempTopic);\nconsumer.close();\nproducer.close();\ntempTopic.delete();\n}\nAdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(AdvisoryBroker.class);\nassertTrue(ab.getAdvisoryDestinations().size() == 0);\nassertTrue(ab.getAdvisoryConsumers().size() == 0);\nassertTrue(ab.getAdvisoryProducers().size() == 0);\nRegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(RegionBroker.class);\nfor (Destination dest : rb.getDestinationMap().values()) {\nLOG.debug(\"Destination: {}\", dest);\n}\n// there should be at least 2 destinations - advisories -\n// 1 for the connection + 1 generic ones\nassertTrue(\"Should be at least 2 destinations\", rb.getDestinationMap().size() > 2);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_TempDestLoadTest_testLoadTempAdvisoryTopics.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1617
                },
                {
                        "id": "pretrain_java_data_18380325",
                        "content": "<gh_stars>0\n//,temp,TempDestLoadTest.java,73,98,temp,TempDestLoadTest.java,44,71\n//,2\npublic class xxx {\npublic void testLoadTempAdvisoryTopics() throws Exception {\nfor (int i = 0; i < MESSAGE_COUNT; i++) {\nTemporaryTopic tempTopic =  session.createTemporaryTopic();\nMessageConsumer consumer = session.createConsumer(tempTopic);\nMessageProducer producer = session.createProducer(tempTopic);\nconsumer.close();\nproducer.close();\ntempTopic.delete();\n}\nAdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(\nAdvisoryBroker.class);\nassertTrue(ab.getAdvisoryDestinations().size() == 0);\nassertTrue(ab.getAdvisoryConsumers().size() == 0);\nassertTrue(ab.getAdvisoryProducers().size() == 0);\nRegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(\nRegionBroker.class);\nfor (Destination dest : rb.getDestinationMap().values()) {\nLOG.debug(\"Destination: {}\", dest);\n}\n// there should be at least 2 destinations - advisories -\n// 1 for the connection + 1 generic ones\nassertTrue(\"Should be at least 2 destinations\", rb.getDestinationMap().size() > 2);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/608_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1617
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 79
                },
                {
                        "id": "pretrain_java_data_3879919",
                        "content": "<filename>LACCPlus/ActiveMQ/1514_2.java\n//,temp,JmsTopicRequestReplyTest.java,110,142,temp,JMSClientRequestResponseTest.java,171,201\n//,3\npublic class xxx {\n@Override\npublic void onMessage(Message message) {\ntry {\nTextMessage requestMessage = (TextMessage)message;\nLOG.info(\"Received request.\");\nLOG.info(requestMessage.toString());\nDestination replyDestination = requestMessage.getJMSReplyTo();\nif (replyDestination instanceof Topic) {\nLOG.info(\"Reply destination is: {}\", ((Topic)replyDestination).getTopicName());\n} else {\nLOG.info(\"Reply destination is: {}\", ((Queue)replyDestination).getQueueName());\n}\nTextMessage replyMessage = responderSession.createTextMessage(\"response for: \" + requestMessage.getText());\nreplyMessage.setJMSCorrelationID(requestMessage.getJMSMessageID());\nif (dynamicallyCreateProducer) {\nresponseProducer = responderSession.createProducer(replyDestination);\nresponseProducer.send(replyMessage);\n} else {\nresponseProducer.send(replyDestination, replyMessage);\n}\nLOG.info(\"Sent reply.\");\nLOG.info(replyMessage.toString());\n} catch (JMSException e) {\nonException(e);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1514_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3076
                },
                {
                        "id": "test_logbench-o_data_3077",
                        "content": "@Override\npublic void onMessage(Message message) {\ntry {\nTextMessage requestMessage = (TextMessage) message;\nLOG.info(\"Received request.\");\nLOG.info(requestMessage.toString());\nDestination replyDestination = requestMessage.getJMSReplyTo();\nif (replyDestination instanceof Topic) {\nLOG.info(\"Reply destination is: {}\", ((Topic) replyDestination).getTopicName());\n} else {\nLOG.info(\"Reply destination is: {}\", ((Queue) replyDestination).getQueueName());\n}\nTextMessage replyMessage = responderSession.createTextMessage(\"response for: \" + requestMessage.getText());\nreplyMessage.setJMSCorrelationID(requestMessage.getJMSMessageID());\nif (dynamicallyCreateProducer) {\nresponseProducer = responderSession.createProducer(replyDestination);\nresponseProducer.send(replyMessage);\n} else {\nresponseProducer.send(replyDestination, replyMessage);\n}\nLOG.info(\"Sent reply.\");\nLOG.info(replyMessage.toString());\n} catch (JMSException e) {\nonException(e);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JMSClientRequestResponseTest_onMessage.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3076
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 80
                },
                {
                        "id": "pretrain_java_data_10271243",
                        "content": "<gh_stars>0\n//,temp,DurableSubInBrokerNetworkTest.java,118,165,temp,DurableSubInBrokerNetworkTest.java,81,116\n//,3\npublic class xxx {\npublic void testTwoDurableSubsInNetworkWithUnsubscribe() throws Exception{\n// create 1st durable sub to topic TEST.FOO\nActiveMQConnectionFactory fact = new ActiveMQConnectionFactory(connector.getConnectUri().toString());\nConnection conn = fact.createConnection();\nconn.setClientID(\"clientID1\");\nSession session = conn.createSession(false, 1);\nDestination dest = session.createTopic(topicName);\nTopicSubscriber sub = session.createDurableSubscriber((Topic)dest, subName);\nLOG.info(\"Durable subscription of name \" + subName + \"created.\");\nTopicSubscriber sub2 = session.createDurableSubscriber((Topic) dest, subName2);\nLOG.info(\"Durable subscription of name \" + subName2 + \"created.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\n// raise an error if not found\nassertTrue(foundSubInLocalBroker(subName));\nassertTrue(foundSubInLocalBroker(subName2));\nassertTrue(foundSubInRemoteBrokerByTopicName(topicName));\n// unsubscribe from durable sub\nsub.close();\nsession.unsubscribe(subName);\nLOG.info(\"Unsubscribed from durable subscription.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\nassertFalse(foundSubInLocalBroker(subName));\nassertTrue(foundSubInLocalBroker(subName2));\nassertTrue(\"Durable subscription should still be on remote broker\",\nfoundSubInRemoteBrokerByTopicName(topicName));\nsub2.close();\nsession.unsubscribe(subName2);\nThread.sleep(100);\nassertFalse(foundSubInLocalBroker(subName2));\nassertFalse(\"Durable subscription not unregistered on remote broker\",\nfoundSubInRemoteBrokerByTopicName(topicName));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/923_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2895
                },
                {
                        "id": "test_logbench-o_data_2896",
                        "content": "public void testTwoDurableSubsInNetworkWithUnsubscribe() throws Exception {\n// create 1st durable sub to topic TEST.FOO\nActiveMQConnectionFactory fact = new ActiveMQConnectionFactory(connector.getConnectUri().toString());\nConnection conn = fact.createConnection();\nconn.setClientID(\"clientID1\");\nSession session = conn.createSession(false, 1);\nDestination dest = session.createTopic(topicName);\nTopicSubscriber sub = session.createDurableSubscriber((Topic) dest, subName);\nLOG.info(\"Durable subscription of name \" + subName + \"created.\");\nTopicSubscriber sub2 = session.createDurableSubscriber((Topic) dest, subName2);\nLOG.info(\"Durable subscription of name \" + subName2 + \"created.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\n// raise an error if not found\nassertTrue(foundSubInLocalBroker(subName));\nassertTrue(foundSubInLocalBroker(subName2));\nassertTrue(foundSubInRemoteBrokerByTopicName(topicName));\n// unsubscribe from durable sub\nsub.close();\nsession.unsubscribe(subName);\nLOG.info(\"Unsubscribed from durable subscription.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\nassertFalse(foundSubInLocalBroker(subName));\nassertTrue(foundSubInLocalBroker(subName2));\nassertTrue(\"Durable subscription should still be on remote broker\", foundSubInRemoteBrokerByTopicName(topicName));\nsub2.close();\nsession.unsubscribe(subName2);\nThread.sleep(100);\nassertFalse(foundSubInLocalBroker(subName2));\nassertFalse(\"Durable subscription not unregistered on remote broker\", foundSubInRemoteBrokerByTopicName(topicName));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DurableSubInBrokerNetworkTest_testTwoDurableSubsInNetworkWithUnsubscribe.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2895
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 81
                },
                {
                        "id": "pretrain_java_data_8744927",
                        "content": "//,temp,JDBCCommitExceptionTest.java,79,96,temp,XACompletionTest.java,1146,1173\n//,3\npublic class xxx {\nprotected int dumpMessages() throws Exception {\nint count = 0;\nWireFormat wireFormat = new OpenWireFormat();\njava.sql.Connection conn = ((JDBCPersistenceAdapter) broker.getPersistenceAdapter()).getDataSource().getConnection();\nPreparedStatement statement = conn.prepareStatement(\"SELECT ID, XID, MSG FROM ACTIVEMQ_MSGS\");\nResultSet result = statement.executeQuery();\nLOG.info(\"Messages left in broker after test\");\nwhile(result.next()) {\nlong id = result.getLong(1);\nString xid = result.getString(2);\norg.apache.activemq.command.Message message = (org.apache.activemq.command.Message)wireFormat.unmarshal(new ByteSequence(result.getBytes(3)));\nLOG.info(\"id: \" + id + \", xid: \" + xid + \", message SeqId: \" + message.getMessageId().getBrokerSequenceId() + \", MSG: \" + message);\ncount++;\n}\nstatement.close();\nconn.close();\nreturn count;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1679_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1279
                },
                {
                        "id": "test_logbench-o_data_1280",
                        "content": "protected int dumpMessages() throws Exception {\nint count = 0;\nWireFormat wireFormat = new OpenWireFormat();\njava.sql.Connection conn = ((JDBCPersistenceAdapter) broker.getPersistenceAdapter()).getDataSource().getConnection();\nPreparedStatement statement = conn.prepareStatement(\"SELECT ID, XID, MSG FROM ACTIVEMQ_MSGS\");\nResultSet result = statement.executeQuery();\nLOG.info(\"Messages left in broker after test\");\nwhile (result.next()) {\nlong id = result.getLong(1);\nString xid = result.getString(2);\norg.apache.activemq.command.Message message = (org.apache.activemq.command.Message) wireFormat.unmarshal(new ByteSequence(result.getBytes(3)));\nLOG.info(\"id: \" + id + \", xid: \" + xid + \", message SeqId: \" + message.getMessageId().getBrokerSequenceId() + \", MSG: \" + message);\ncount++;\n}\nstatement.close();\nconn.close();\nreturn count;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JDBCCommitExceptionTest_dumpMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1279
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 82
                },
                {
                        "id": "pretrain_java_data_10304895",
                        "content": "<gh_stars>0\n//,temp,PublishOnTopicConsumedMessageTest.java,37,50,temp,FailoverTxSlowAckTest.java,102,120\n//,3\npublic class xxx {\npublic synchronized void onMessage(Message message) {\n// lets resend the message somewhere else\ntry {\nMessage msgCopy = (Message)((org.apache.activemq.command.Message)message).copy();\nreplyProducer.send(msgCopy);\n// log.info(\"Sending reply: \" + message);\nsuper.onMessage(message);\n} catch (JMSException e) {\nLOG.info(\"Failed to send message: \" + e);\ne.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/897_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2262
                },
                {
                        "id": "test_logbench-o_data_2263",
                        "content": "public synchronized void onMessage(Message message) {\n// lets resend the message somewhere else\ntry {\nMessage msgCopy = (Message) ((org.apache.activemq.command.Message) message).copy();\nreplyProducer.send(msgCopy);\n// log.info(\"Sending reply: \" + message);\nsuper.onMessage(message);\n} catch (JMSException e) {\nLOG.info(\"Failed to send message: \" + e);\ne.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_PublishOnTopicConsumedMessageTest_onMessage.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2262
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 83
                },
                {
                        "id": "pretrain_java_data_11872787",
                        "content": "<gh_stars>0\n//,temp,ListenerTest.java,74,85,temp,PooledSessionExhaustionBlockTimeoutTest.java,113,128\n//,3\npublic class xxx {\npublic void sendMessages(String destName, int msgNum) throws Exception {\nConnectionFactory factory = new org.apache.activemq.ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nConnection conn = factory.createConnection();\nSession sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination dest = sess.createQueue(destName);\nMessageProducer producer = sess.createProducer(dest);\nfor (int i = 0; i < msgNum; i++) {\nString messageText = i +\" test\";\nLOG.info(\"sending message '\" + messageText + \"'\");\nproducer.send(sess.createTextMessage(messageText));\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/899_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2213
                },
                {
                        "id": "test_logbench-o_data_2214",
                        "content": "public void sendMessages(String destName, int msgNum) throws Exception {\nConnectionFactory factory = new org.apache.activemq.ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nConnection conn = factory.createConnection();\nSession sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination dest = sess.createQueue(destName);\nMessageProducer producer = sess.createProducer(dest);\nfor (int i = 0; i < msgNum; i++) {\nString messageText = i + \" test\";\nLOG.info(\"sending message '\" + messageText + \"'\");\nproducer.send(sess.createTextMessage(messageText));\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ListenerTest_sendMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2213
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 84
                },
                {
                        "id": "test_logbench-o_data_2731",
                        "content": "public void testConnectorReAdd() throws Exception {\nMessageConsumer remoteConsumer = remoteSession.createConsumer(included);\nMessageProducer localProducer = localSession.createProducer(included);\nlocalProducer.send(localSession.createTextMessage(\"before\"));\nMessage before = remoteConsumer.receive(1000);\nassertNotNull(before);\nassertEquals(\"before\", ((TextMessage) before).getText());\n// restart connector\n// wait for ack back to localbroker with concurrent store and dispatch, dispatch occurs first\nThread.sleep(1000);\nNetworkConnector connector = localBroker.getNetworkConnectorByName(\"networkConnector\");\nLOG.info(\"Removing connector\");\nconnector.stop();\nlocalBroker.removeNetworkConnector(connector);\nThread.sleep(5000);\nLOG.info(\"Re-adding connector\");\nlocalBroker.addNetworkConnector(connector);\nconnector.start();\nThread.sleep(5000);\nlocalProducer.send(localSession.createTextMessage(\"after\"));\nMessage after = remoteConsumer.receive(3000);\nassertNotNull(after);\nassertEquals(\"after\", ((TextMessage) after).getText());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_NetworkRestartTest_testConnectorReAdd.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2730
                },
                {
                        "id": "pretrain_java_data_13522274",
                        "content": "<filename>LACCPlus/ActiveMQ/332_1.java\n//,temp,NetworkRestartTest.java,78,110,temp,NetworkRestartTest.java,45,76\n//,3\npublic class xxx {\npublic void testConnectorReAdd() throws Exception {\nMessageConsumer remoteConsumer = remoteSession.createConsumer(included);\nMessageProducer localProducer = localSession.createProducer(included);\nlocalProducer.send(localSession.createTextMessage(\"before\"));\nMessage before = remoteConsumer.receive(1000);\nassertNotNull(before);\nassertEquals(\"before\", ((TextMessage)before).getText());\n// restart connector\n// wait for ack back to localbroker with concurrent store and dispatch, dispatch occurs first\nThread.sleep(1000);\nNetworkConnector connector = localBroker.getNetworkConnectorByName(\"networkConnector\");\nLOG.info(\"Removing connector\");\nconnector.stop();\nlocalBroker.removeNetworkConnector(connector);\nThread.sleep(5000);\nLOG.info(\"Re-adding connector\");\nlocalBroker.addNetworkConnector(connector);\nconnector.start();\nThread.sleep(5000);\nlocalProducer.send(localSession.createTextMessage(\"after\"));\nMessage after = remoteConsumer.receive(3000);\nassertNotNull(after);\nassertEquals(\"after\", ((TextMessage)after).getText());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/332_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2730
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 85
                },
                {
                        "id": "pretrain_java_data_13466600",
                        "content": "//,temp,DestinationListenerTest.java,65,76,temp,ZeroPrefetchConsumerTest.java,52,63\n//,3\npublic class xxx {\npublic void testConsumerForcesNotificationOfNewDestination() throws Exception {\n// now lets cause a destination to be created\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQQueue newQueue = new ActiveMQQueue(\"Test.Cheese\");\nsession.createConsumer(newQueue);\nThread.sleep(3000);\nassertThat(newQueue, isIn(newDestinations));\nLOG.info(\"New destinations are: \" + newDestinations);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/183_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3157
                },
                {
                        "id": "test_logbench-o_data_3158",
                        "content": "public void testConsumerForcesNotificationOfNewDestination() throws Exception {\n// now lets cause a destination to be created\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQQueue newQueue = new ActiveMQQueue(\"Test.Cheese\");\nsession.createConsumer(newQueue);\nThread.sleep(3000);\nassertThat(newQueue, isIn(newDestinations));\nLOG.info(\"New destinations are: \" + newDestinations);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DestinationListenerTest_testConsumerForcesNotificationOfNewDestination.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3157
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 86
                },
                {
                        "id": "test_logbench-o_data_815",
                        "content": "private void sendMessageToQueueUsingStomp() throws Exception {\nConnection connection = createStompConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getQueueName());\nMessageProducer producer = session.createProducer(queue);\ntry {\nTextMessage message = session.createTextMessage(\"test-message-stomp-source\");\nproducer.send(message);\nLOG.info(\"Send STOMP message with Message ID -> {}\", message.getJMSMessageID());\n} finally {\nconnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AmqpAndStompInteropTest_sendMessageToQueueUsingStomp.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 814
                },
                {
                        "id": "pretrain_java_data_13473668",
                        "content": "<gh_stars>0\n//,temp,SlowConsumerTest.java,69,83,temp,AmqpAndStompInteropTest.java,130,144\n//,3\npublic class xxx {\nprivate void sendMessageToQueueUsingStomp() throws Exception {\nConnection connection = createStompConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getQueueName());\nMessageProducer producer = session.createProducer(queue);\ntry {\nTextMessage message = session.createTextMessage(\"test-message-stomp-source\");\nproducer.send(message);\nLOG.info(\"Send STOMP message with Message ID -> {}\", message.getJMSMessageID());\n} finally {\nconnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/168_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 814
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 87
                },
                {
                        "id": "test_logbench-o_data_1787",
                        "content": "@Override\npublic void handle(final RoutingContext ctx) {\nfinal Logger log = RequestLoggerFactory.getLogger(NullForwarder.class, ctx.request());\nif (handleHeadersFilter(ctx.request())) {\nreturn;\n}\nmonitoringHandler.updateRequestPerRuleMonitoring(ctx.request(), rule.getMetricName());\nfinal LoggingHandler loggingHandler = new LoggingHandler(loggingResourceManager, ctx.request(), eventBus);\nlog.debug(\"Not forwarding request: {} with rule {}\", ctx.request().uri(), rule.getRuleIdentifier());\nfinal HeadersMultiMap requestHeaders = new HeadersMultiMap();\nrequestHeaders.addAll(ctx.request().headers());\n// probably useless, as the request is discarded anyway\n// but we write the headers also to the request log - so juest to be complete:\n// Apply the header manipulation chain\nfinal HeaderFunctions.EvalScope evalScope = rule.getHeaderFunction().apply(requestHeaders);\nif (evalScope.getErrorMessage() != null) {\nlog.warn(\"Problem invoking Header functions: {}\", evalScope.getErrorMessage());\nfinal HttpServerResponse response = ctx.request().response();\nresponse.setStatusCode(StatusCode.BAD_REQUEST.getStatusCode());\nresponse.setStatusMessage(StatusCode.BAD_REQUEST.getStatusMessage());\nresponse.end(evalScope.getErrorMessage());\nreturn;\n}\nfinal Buffer header = Buffer.buffer(new HttpRequest(ctx.request().method(), ctx.request().uri(), requestHeaders, null).toJsonObject().encode());\nfinal Buffer requestBuffer = Buffer.buffer();\nrequestBuffer.setInt(0, header.length()).appendBuffer(header);\nint statusCode = StatusCode.OK.getStatusCode();\nString statusMessage = StatusCode.OK.getStatusMessage();\n/*\n* We create a response for the client,\n* but we discard the request and therefore\n* do not forward it.\n*/\nctx.response().setStatusCode(statusCode);\nctx.response().setStatusMessage(statusMessage);\nctx.response().headers().add(\"Content-Length\", \"0\");\nctx.request().handler(buffer -> {\nloggingHandler.appendRequestPayload(buffer, requestHeaders);\nrequestBuffer.appendBuffer(buffer);\nMultiMap responseHeaders = ctx.response().headers();\nloggingHandler.log(ctx.request().uri(), ctx.request().method(), statusCode, statusMessage, requestHeaders, responseHeaders != null ? responseHeaders : new HeadersMultiMap());\n});\nctx.response().end();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/gateleen_NullForwarder_handle.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1786
                },
                {
                        "id": "pretrain_java_data_15117441",
                        "content": "<gh_stars>10-100\npackage org.swisspush.gateleen.routing;\nimport io.vertx.core.Handler;\nimport io.vertx.core.MultiMap;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.eventbus.EventBus;\nimport io.vertx.core.http.HttpServerResponse;\nimport io.vertx.core.http.impl.headers.VertxHttpHeaders;\nimport io.vertx.ext.web.RoutingContext;\nimport org.slf4j.Logger;\nimport org.swisspush.gateleen.core.http.HeaderFunctions;\nimport org.swisspush.gateleen.core.http.HttpRequest;\nimport org.swisspush.gateleen.core.http.RequestLoggerFactory;\nimport org.swisspush.gateleen.core.util.StatusCode;\nimport org.swisspush.gateleen.logging.LoggingHandler;\nimport org.swisspush.gateleen.logging.LoggingResourceManager;\nimport org.swisspush.gateleen.monitoring.MonitoringHandler;\n/**\n* Consumes requests without forwarding them anywhere.\n*\n* @author https://github.com/ljucam [<NAME>]\n*/\npublic class NullForwarder implements Handler<RoutingContext> {\nprivate LoggingResourceManager loggingResourceManager;\nprivate MonitoringHandler monitoringHandler;\nprivate Rule rule;\nprivate EventBus eventBus;\npublic NullForwarder(Rule rule, LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler, EventBus eventBus){\nthis.rule = rule;\nthis.loggingResourceManager = loggingResourceManager;\nthis.monitoringHandler = monitoringHandler;\nthis.eventBus = eventBus;\n}\n@Override\npublic void handle(final RoutingContext ctx) {\nmonitoringHandler.updateRequestPerRuleMonitoring(ctx.request(), rule.getMetricName());\nfinal LoggingHandler loggingHandler = new LoggingHandler(loggingResourceManager, ctx.request(), eventBus);\nfinal Logger log = RequestLoggerFactory.getLogger(NullForwarder.class, ctx.request());\nlog.debug(\"Not forwarding request: {} with rule {}\", ctx.request().uri(), rule.getRuleIdentifier());\nfinal VertxHttpHeaders requestHeaders = new VertxHttpHeaders();\nrequestHeaders.addAll(ctx.request().headers());\n// probably useless, as the request is discarded anyway\n// but we write the headers also to the request log - so juest to be complete:\nfinal HeaderFunctions.EvalScope evalScope = rule.getHeaderFunction().apply(requestHeaders);// Apply the header manipulation chain\nif (evalScope.getErrorMessage() != null) {\nlog.warn(\"Problem invoking Header functions: {}\", evalScope.getErrorMessage());\nfinal HttpServerResponse response = ctx.request().response();\nresponse.setStatusCode(StatusCode.BAD_REQUEST.getStatusCode());\nresponse.setStatusMessage(StatusCode.BAD_REQUEST.getStatusMessage());\nresponse.end(evalScope.getErrorMessage());\nreturn;\n}\nfinal Buffer header = Buffer.buffer(new HttpRequest(ctx.request().method(), ctx.request().uri(), requestHeaders, null).toJsonObject().encode());\nfinal Buffer requestBuffer = Buffer.buffer();\nrequestBuffer.setInt(0, header.length()).appendBuffer(header);\nint statusCode = StatusCode.OK.getStatusCode();\nString statusMessage = StatusCode.OK.getStatusMessage();\n/*\n* We create a response for the client,\n* but we discard the request and therefore\n* do not forward it.\n*/\nctx.response().setStatusCode(statusCode);\nctx.response().setStatusMessage(statusMessage);\nctx.response().headers().add(\"Content-Length\", \"0\");\nctx.request().handler(buffer -> {\nloggingHandler.appendRequestPayload(buffer, requestHeaders);\nrequestBuffer.appendBuffer(buffer);\nMultiMap responseHeaders = ctx.response().headers();\nloggingHandler.log(ctx.request().uri(), ctx.request().method(), statusCode, statusMessage, requestHeaders, responseHeaders != null ? responseHeaders : new VertxHttpHeaders());\n});\nctx.response().end();\n}\n}",
                        "max_stars_repo_path": "gateleen-routing/src/main/java/org/swisspush/gateleen/routing/NullForwarder.java",
                        "max_stars_repo_name": "gedestroy/gateleen",
                        "max_stars_count": 79,
                        "__cluster__": 1786
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 88
                },
                {
                        "id": "test_logbench-o_data_3771",
                        "content": "@Test\npublic void testRemoveQueueAndProduceAfterNewConsumerAdded() throws Exception {\nMessageConsumer firstConsumer = registerConsumer();\nproduceMessage();\nMessage message = firstConsumer.receive(5000);\nLOG.info(\"Received message \" + message);\nassertEquals(1, numberOfMessages());\nfirstConsumer.close();\nsession.commit();\nThread.sleep(1000);\nremoveQueue();\nThread.sleep(1000);\nMessageConsumer secondConsumer = registerConsumer();\nproduceMessage();\nmessage = secondConsumer.receive(5000);\nLOG.debug(\"Received message \" + message);\nassertEquals(1, numberOfMessages());\nsecondConsumer.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JMXRemoveQueueThenSendIgnoredTest_testRemoveQueueAndProduceAfterNewConsumerAdded.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2081
                },
                {
                        "id": "pretrain_java_data_965603",
                        "content": "<gh_stars>0\n//,temp,JMXRemoveQueueThenSendIgnoredTest.java,99,121,temp,JMXRemoveQueueThenSendIgnoredTest.java,75,97\n//,2\npublic class xxx {\n@Test\npublic void testRemoveQueueAndProduceAfterNewConsumerAdded() throws Exception {\nMessageConsumer firstConsumer = registerConsumer();\nproduceMessage();\nMessage message = firstConsumer.receive(5000);\nLOG.info(\"Received message \" + message);\nassertEquals(1, numberOfMessages());\nfirstConsumer.close();\nsession.commit();\nThread.sleep(1000);\nremoveQueue();\nThread.sleep(1000);\nMessageConsumer secondConsumer = registerConsumer();\nproduceMessage();\nmessage = secondConsumer.receive(5000);\nLOG.debug(\"Received message \" + message);\nassertEquals(1, numberOfMessages());\nsecondConsumer.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1317_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2081
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 89
                },
                {
                        "id": "pretrain_java_data_16839678",
                        "content": "//,temp,MulticastTransportTest.java,40,52,temp,UdpTransportTest.java,52,58\n//,3\npublic class xxx {\nprotected Transport createProducer() throws Exception {\nLOG.info(\"Producer using URI: \" + multicastURI);\n// we are not using the TransportFactory as this assumes that\n// transports talk to a server using a WireFormat Negotiation step\n// rather than talking directly to each other\nOpenWireFormat wireFormat = createWireFormat();\nMulticastTransport transport = new MulticastTransport(wireFormat, new URI(multicastURI));\ntransport.setLoopBackMode(false);\ntransport.setSequenceGenerator(new IntSequenceGenerator());\nreturn new CommandJoiner(transport, wireFormat);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/217_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 565
                },
                {
                        "id": "test_logbench-o_data_566",
                        "content": "protected Transport createProducer() throws Exception {\nLOG.info(\"Producer using URI: \" + multicastURI);\n// we are not using the TransportFactory as this assumes that\n// transports talk to a server using a WireFormat Negotiation step\n// rather than talking directly to each other\nOpenWireFormat wireFormat = createWireFormat();\nMulticastTransport transport = new MulticastTransport(wireFormat, new URI(multicastURI));\ntransport.setLoopBackMode(false);\ntransport.setSequenceGenerator(new IntSequenceGenerator());\nreturn new CommandJoiner(transport, wireFormat);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_MulticastTransportTest_createProducer.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 565
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 90
                },
                {
                        "id": "test_logbench-o_data_2450",
                        "content": "@Test\npublic void testAddPropertyRefFromFileAsList() throws Exception {\nSystem.setProperty(\"network.uri\", \"static:(tcp://localhost:8888)\");\nSystem.setProperty(\"props.base\", \"classpath:\");\nfinal String brokerConfig = \"SpringPropertyTestFileList-broker\";\napplyNewConfig(brokerConfig, \"emptyUpdatableConfig1000-spring-property-file-list\");\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\nObjectName objectName = new ObjectName(brokerService.getBrokerObjectName().toString() + RuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView = (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName, RuntimeConfigurationViewMBean.class, false);\nString propOfInterest = \"modified\";\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nassertNotEquals(\"unknown\", props.get(propOfInterest));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_SpringBeanTest_testAddPropertyRefFromFileAsList.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1901
                },
                {
                        "id": "pretrain_java_data_2500231",
                        "content": "<filename>LACCPlus/ActiveMQ/1032_2.java\n//,temp,SpringBeanTest.java,146,183,temp,SpringBeanTest.java,119,144\n//,3\npublic class xxx {\n@Test\npublic void testAddPropertyRefFromFileAsList() throws Exception {\nSystem.setProperty(\"network.uri\", \"static:(tcp://localhost:8888)\");\nSystem.setProperty(\"props.base\", \"classpath:\");\nfinal String brokerConfig = \"SpringPropertyTestFileList-broker\";\napplyNewConfig(brokerConfig, \"emptyUpdatableConfig1000-spring-property-file-list\");\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\nObjectName objectName =\nnew ObjectName(brokerService.getBrokerObjectName().toString() +\nRuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView =\n(RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,\nRuntimeConfigurationViewMBean.class, false);\nString propOfInterest = \"modified\";\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nassertNotEquals(\"unknown\", props.get(propOfInterest));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1032_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1901
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 91
                },
                {
                        "id": "pretrain_java_data_2490520",
                        "content": "<gh_stars>0\n//,temp,CustomVirtualTopicInterceptorWithLeadingWildcardTest.java,57,91,temp,VirtualTopicSelectorTest.java,52,85\n//,3\npublic class xxx {\n@Override\nprotected void assertMessagesArrived(ConsumerBean messageList1, ConsumerBean messageList2) {\nmessageList1.assertMessagesArrived(total/2);\nmessageList2.assertMessagesArrived(total/2);\nmessageList1.flushMessages();\nmessageList2.flushMessages();\nLOG.info(\"validate no other messages on queues\");\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination1 = getConsumer1Dsetination();\nDestination destination2 = getConsumer2Dsetination();\nMessageConsumer c1 = session.createConsumer(destination1, null);\nMessageConsumer c2 = session.createConsumer(destination2, null);\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\nLOG.info(\"send one simple message that should go to both consumers\");\nMessageProducer producer = session.createProducer(getProducerDestination());\nassertNotNull(producer);\nproducer.send(session.createTextMessage(\"Last Message\"));\nmessageList1.assertMessagesArrived(1);\nmessageList2.assertMessagesArrived(1);\n} catch (JMSException e) {\ne.printStackTrace();\nfail(\"unexpeced ex while waiting for last messages: \" + e);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/384_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1814
                },
                {
                        "id": "test_logbench-o_data_1815",
                        "content": "@Override\nprotected void assertMessagesArrived(ConsumerBean messageList1, ConsumerBean messageList2) {\nmessageList1.assertMessagesArrived(total / 2);\nmessageList2.assertMessagesArrived(total / 2);\nmessageList1.flushMessages();\nmessageList2.flushMessages();\nLOG.info(\"validate no other messages on queues\");\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination1 = getConsumer1Dsetination();\nDestination destination2 = getConsumer2Dsetination();\nMessageConsumer c1 = session.createConsumer(destination1, null);\nMessageConsumer c2 = session.createConsumer(destination2, null);\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\nLOG.info(\"send one simple message that should go to both consumers\");\nMessageProducer producer = session.createProducer(getProducerDestination());\nassertNotNull(producer);\nproducer.send(session.createTextMessage(\"Last Message\"));\nmessageList1.assertMessagesArrived(1);\nmessageList2.assertMessagesArrived(1);\n} catch (JMSException e) {\ne.printStackTrace();\nfail(\"unexpeced ex while waiting for last messages: \" + e);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_VirtualTopicSelectorTest_assertMessagesArrived.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1814
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 92
                },
                {
                        "id": "pretrain_java_data_4197233",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,JmsTransactedMessageOrderTest.java,81,110,temp,JMSClientTransactionTest.java,294,319\n//,3\npublic class xxx {\n@Test\npublic void testMessageOrderAfterRollback() throws Exception {\nsendMessages(5);\nint counter = 0;\nwhile (counter++ < 20) {\nLOG.info(\"Creating connection using prefetch of: {}\", prefetch);\nJmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI(\"jms.prefetchPolicy.all=\" + prefetch));\nconnection = cf.createConnection();\nconnection.start();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nQueue queue = session.createQueue(getDestinationName());\nMessageConsumer consumer = session.createConsumer(queue);\nMessage message = consumer.receive(5000);\nassertNotNull(message);\nassertTrue(message instanceof TextMessage);\nLOG.info(\"Read message = {}\", ((TextMessage) message).getText());\nint sequenceID = message.getIntProperty(\"sequenceID\");\nassertEquals(0, sequenceID);\nsession.rollback();\nsession.close();\nconnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2345_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3734
                },
                {
                        "id": "test_logbench-o_data_3735",
                        "content": "@Test\npublic void testMessageOrderAfterRollback() throws Exception {\nsendMessages(5);\nint counter = 0;\nwhile (counter++ < 20) {\nLOG.info(\"Creating connection using prefetch of: {}\", prefetch);\nJmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI(\"jms.prefetchPolicy.all=\" + prefetch));\nconnection = cf.createConnection();\nconnection.start();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nQueue queue = session.createQueue(getDestinationName());\nMessageConsumer consumer = session.createConsumer(queue);\nMessage message = consumer.receive(5000);\nassertNotNull(message);\nassertTrue(message instanceof TextMessage);\nLOG.info(\"Read message = {}\", ((TextMessage) message).getText());\nint sequenceID = message.getIntProperty(\"sequenceID\");\nassertEquals(0, sequenceID);\nsession.rollback();\nsession.close();\nconnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JmsTransactedMessageOrderTest_testMessageOrderAfterRollback.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3734
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 93
                },
                {
                        "id": "test_logbench-o_data_1732",
                        "content": "public void sendMessages(int messageCount) throws JMSException {\nConnection connection = null;\ntry {\nconnection = createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getDestinationName());\nfor (int i = 0; i < messageCount; ++i) {\nMessageProducer messageProducer = session.createProducer(queue);\nTextMessage message = session.createTextMessage(\"(\" + i + \")\");\nmessage.setIntProperty(\"sequenceID\", i);\nmessageProducer.send(message);\nLOG.info(\"Sent message = {}\", message.getText());\n}\n} catch (Exception exp) {\nexp.printStackTrace(System.out);\n} finally {\nif (connection != null) {\nconnection.close();\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JmsTransactedMessageOrderTest_sendMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1731
                },
                {
                        "id": "pretrain_java_data_4075473",
                        "content": "//,temp,JmsTransactedMessageOrderTest.java,112,136,temp,PriorityRedeliveryOrderTest.java,103,140\n//,3\npublic class xxx {\npublic void sendMessages(int messageCount) throws JMSException {\nConnection connection = null;\ntry {\nconnection = createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getDestinationName());\nfor (int i = 0; i < messageCount; ++i) {\nMessageProducer messageProducer = session.createProducer(queue);\nTextMessage message = session.createTextMessage(\"(\" + i + \")\");\nmessage.setIntProperty(\"sequenceID\", i);\nmessageProducer.send(message);\nLOG.info(\"Sent message = {}\", message.getText());\n}\n} catch (Exception exp) {\nexp.printStackTrace(System.out);\n} finally {\nif (connection != null) {\nconnection.close();\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/370_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1731
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 94
                },
                {
                        "id": "pretrain_java_data_4080907",
                        "content": "//,temp,FailoverReadInactivityBlockWriteTimeoutClientTest.java,56,146,temp,SoWriteTimeoutClientTest.java,51,101\n//,3\npublic class xxx {\npublic void testSendWithClientWriteTimeout() throws Exception {\nfinal ActiveMQQueue dest = new ActiveMQQueue(\"testClientWriteTimeout\");\nmessageTextPrefix = initMessagePrefix(80*1024);\nURI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());\nLOG.info(\"consuming using uri: \" + tcpBrokerUri);\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);\nConnection c = factory.createConnection();\nc.start();\nSession session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(dest);\nSocketProxy proxy = new SocketProxy();\nproxy.setTarget(tcpBrokerUri);\nproxy.open();\nActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory(\"failover:(\" + proxy.getUrl() + \"?soWriteTimeout=4000&sleep=500)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400\");\nfinal Connection pc = pFactory.createConnection();\npc.start();\nproxy.pause();\nfinal int messageCount = 20;\nExecutorService executorService = Executors.newCachedThreadPool();\nexecutorService.execute(new Runnable() {\n@Override\npublic void run() {\ntry{\nsendMessages(pc, dest, messageCount);\n} catch (Exception ignored) {\nignored.printStackTrace();\n}\n}\n});\n// wait for timeout and reconnect\nTimeUnit.SECONDS.sleep(8);\nproxy.goOn();\nfor (int i=0; i<messageCount; i++) {\nassertNotNull(\"Got message \" + i  + \" after reconnect\", consumer.receive(5000));\n}\nassertTrue(\"no pending messages when done\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"current total message count: \" + broker.getAdminView().getTotalMessageCount());\nreturn broker.getAdminView().getTotalMessageCount() == 0;\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1841_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 423
                },
                {
                        "id": "test_logbench-o_data_424",
                        "content": "public void testSendWithClientWriteTimeout() throws Exception {\nfinal ActiveMQQueue dest = new ActiveMQQueue(\"testClientWriteTimeout\");\nmessageTextPrefix = initMessagePrefix(80 * 1024);\nURI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());\nLOG.info(\"consuming using uri: \" + tcpBrokerUri);\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);\nConnection c = factory.createConnection();\nc.start();\nSession session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(dest);\nSocketProxy proxy = new SocketProxy();\nproxy.setTarget(tcpBrokerUri);\nproxy.open();\nActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory(\"failover:(\" + proxy.getUrl() + \"?soWriteTimeout=4000&sleep=500)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400\");\nfinal Connection pc = pFactory.createConnection();\npc.start();\nproxy.pause();\nfinal int messageCount = 20;\nExecutorService executorService = Executors.newCachedThreadPool();\nexecutorService.execute(new Runnable() {\n@Override\npublic void run() {\ntry {\nsendMessages(pc, dest, messageCount);\n} catch (Exception ignored) {\nignored.printStackTrace();\n}\n}\n});\n// wait for timeout and reconnect\nTimeUnit.SECONDS.sleep(8);\nproxy.goOn();\nfor (int i = 0; i < messageCount; i++) {\nassertNotNull(\"Got message \" + i + \" after reconnect\", consumer.receive(5000));\n}\nassertTrue(\"no pending messages when done\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"current total message count: \" + broker.getAdminView().getTotalMessageCount());\nreturn broker.getAdminView().getTotalMessageCount() == 0;\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_SoWriteTimeoutClientTest_testSendWithClientWriteTimeout.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 423
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 95
                },
                {
                        "id": "pretrain_java_data_4109040",
                        "content": "//,temp,SimpleProducer.java,62,136,temp,SimpleQueueSender.java,59,134\n//,3\npublic class xxx {\npublic static void main(String[] args) {\nContext jndiContext = null;\nConnectionFactory connectionFactory = null;\nConnection connection = null;\nSession session = null;\nDestination destination = null;\nMessageProducer producer = null;\nString destinationName = null;\nfinal int numMsgs;\nif ((args.length < 1) || (args.length > 2)) {\nLOG.info(\"Usage: java SimpleProducer <destination-name> [<number-of-messages>]\");\nSystem.exit(1);\n}\ndestinationName = args[0];\nLOG.info(\"Destination name is \" + destinationName);\nif (args.length == 2) {\nnumMsgs = (new Integer(args[1])).intValue();\n} else {\nnumMsgs = 1;\n}\n/*\n* Create a JNDI API InitialContext object\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and destination.\n*/\ntry {\nconnectionFactory = (ConnectionFactory)jndiContext.lookup(\"ConnectionFactory\");\ndestination = (Destination)jndiContext.lookup(destinationName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e);\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create sender and text message. Send\n* messages, varying text slightly. Send end-of-messages message.\n* Finally, close connection.\n*/\ntry {\nconnection = connectionFactory.createConnection();\nsession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nproducer = session.createProducer(destination);\nTextMessage message = session.createTextMessage();\nfor (int i = 0; i < numMsgs; i++) {\nmessage.setText(\"This is message \" + (i + 1));\nLOG.info(\"Sending message: \" + message.getText());\nproducer.send(message);\n}\n/*\n* Send a non-text control message indicating end of messages.\n*/\nproducer.send(session.createMessage());\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e);\n} finally {\nif (connection != null) {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1090_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 22
                },
                {
                        "id": "test_logbench-o_data_3176",
                        "content": "/**\n* @param args the destination name to send to and optionally, the number of\n*                messages to send\n*/\npublic static void main(String[] args) {\nContext jndiContext = null;\nConnectionFactory connectionFactory = null;\nConnection connection = null;\nSession session = null;\nDestination destination = null;\nMessageProducer producer = null;\nString destinationName = null;\nfinal int numMsgs;\nif ((args.length < 1) || (args.length > 2)) {\nLOG.info(\"Usage: java SimpleProducer <destination-name> [<number-of-messages>]\");\nSystem.exit(1);\n}\ndestinationName = args[0];\nLOG.info(\"Destination name is \" + destinationName);\nif (args.length == 2) {\nnumMsgs = (Integer.valueOf(args[1])).intValue();\n} else {\nnumMsgs = 1;\n}\n/*\n* Create a JNDI API InitialContext object\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and destination.\n*/\ntry {\nconnectionFactory = (ConnectionFactory) jndiContext.lookup(\"ConnectionFactory\");\ndestination = (Destination) jndiContext.lookup(destinationName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e);\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create sender and text message. Send\n* messages, varying text slightly. Send end-of-messages message.\n* Finally, close connection.\n*/\ntry {\nconnection = connectionFactory.createConnection();\nsession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nproducer = session.createProducer(destination);\nTextMessage message = session.createTextMessage();\nfor (int i = 0; i < numMsgs; i++) {\nmessage.setText(\"This is message \" + (i + 1));\nLOG.info(\"Sending message: \" + message.getText());\nproducer.send(message);\n}\n/*\n* Send a non-text control message indicating end of messages.\n*/\nproducer.send(session.createMessage());\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e);\n} finally {\nif (connection != null) {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_SimpleProducer_main.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 22
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 96
                },
                {
                        "id": "test_logbench-o_data_1174",
                        "content": "@Test(timeout = 60000)\npublic void testTemporaryQueueLeakAfterConnectionCloseWithConsumer() throws Exception {\nConnection pooledConnection = null;\nSession session = null;\nQueue tempQueue = null;\nfor (int i = 0; i < 2; i++) {\npooledConnection = pooledFactory.createConnection();\nsession = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\ntempQueue = session.createTemporaryQueue();\nMessageConsumer consumer = session.createConsumer(tempQueue);\nconsumer.receiveNoWait();\nLOG.info(\"Created queue named: \" + tempQueue.getQueueName());\npooledConnection.close();\n}\nassertEquals(0, countBrokerTemporaryQueues());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_PooledConnectionFactoryWithTemporaryDestinationsTest_testTemporaryQueueLeakAfterConnectionCloseWithConsumer.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1173
                },
                {
                        "id": "pretrain_java_data_5702278",
                        "content": "//,temp,PooledConnectionFactoryWithTemporaryDestinationsTest.java,123,139,temp,PooledConnectionFactoryWithTemporaryDestinationsTest.java,107,121\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testTemporaryQueueLeakAfterConnectionCloseWithConsumer() throws Exception {\nConnection pooledConnection = null;\nSession session = null;\nQueue tempQueue = null;\nfor (int i = 0; i < 2; i++) {\npooledConnection = pooledFactory.createConnection();\nsession = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\ntempQueue = session.createTemporaryQueue();\nMessageConsumer consumer = session.createConsumer(tempQueue);\nconsumer.receiveNoWait();\nLOG.info(\"Created queue named: \" + tempQueue.getQueueName());\npooledConnection.close();\n}\nassertEquals(0, countBrokerTemporaryQueues());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/146_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1173
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 97
                },
                {
                        "id": "pretrain_java_data_7323714",
                        "content": "//,temp,FailoverReadInactivityBlockWriteTimeoutClientTest.java,56,146,temp,SoWriteTimeoutClientTest.java,51,101\n//,3\npublic class xxx {\npublic void testBlockedFailoverSendWillReactToReadInactivityTimeout() throws Exception {\nfinal ActiveMQQueue dest = new ActiveMQQueue(\"testClientWriteTimeout\");\nmessageTextPrefix = initMessagePrefix(80*1024);\nURI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());\nLOG.info(\"consuming using uri: \" + tcpBrokerUri);\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);\nConnection c = factory.createConnection();\nc.start();\nSession session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(dest);\nSocketProxy proxy = new SocketProxy();\nproxy.setTarget(tcpBrokerUri);\nproxy.open();\nActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory(\"failover:(\" + proxy.getUrl() + \"?wireFormat.maxInactivityDuration=5000&ignoreRemoteWireFormat=true)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400\");\nfinal ActiveMQConnection pc = (ActiveMQConnection) pFactory.createConnection();\nfinal AtomicInteger interruptCounter = new AtomicInteger(0);\npc.addTransportListener(new TransportListener() {\n@Override\npublic void onCommand(Object command) {\n}\n@Override\npublic void onException(IOException error) {\nLOG.info(\"Got: \" + error);\n}\n@Override\npublic void transportInterupted() {\ninterruptCounter.incrementAndGet();\n}\n@Override\npublic void transportResumed() {\n}\n});\npc.start();\nfinal int messageCount = 200;\nfinal CountDownLatch sentOne = new CountDownLatch(1);\nExecutorService executorService = Executors.newCachedThreadPool();\nexecutorService.execute(new Runnable() {\n@Override\npublic void run() {\ntry{\nSession session = pc.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(dest);\nfor (int i = 0; i < messageCount; i++) {\nproducer.send(session.createTextMessage(messageTextPrefix  + i));\nsentOne.countDown();\n}\nproducer.close();\nsession.close();\nLOG.info(\"Done with send of: \" + messageCount);\n} catch (Exception ignored) {\nignored.printStackTrace();\n}\n}\n});\nsentOne.await(5, TimeUnit.SECONDS);\nproxy.pause();\nassertTrue(\"Got interrupted\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn interruptCounter.get() > 0;\n}\n}));\nproxy.goOn();\nfor (int i=0; i<messageCount; i++) {\nassertNotNull(\"Got message \" + i  + \" after reconnect\", consumer.receive(5000));\n}\nassertTrue(\"no pending messages when done\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"current total message count: \" + broker.getAdminView().getTotalMessageCount());\nreturn broker.getAdminView().getTotalMessageCount() == 0;\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1841_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3750
                },
                {
                        "id": "test_logbench-o_data_3751",
                        "content": "public void testBlockedFailoverSendWillReactToReadInactivityTimeout() throws Exception {\nfinal ActiveMQQueue dest = new ActiveMQQueue(\"testClientWriteTimeout\");\nmessageTextPrefix = initMessagePrefix(80 * 1024);\nURI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());\nLOG.info(\"consuming using uri: \" + tcpBrokerUri);\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);\nConnection c = factory.createConnection();\nc.start();\nSession session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(dest);\nSocketProxy proxy = new SocketProxy();\nproxy.setTarget(tcpBrokerUri);\nproxy.open();\nActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory(\"failover:(\" + proxy.getUrl() + \"?wireFormat.maxInactivityDuration=5000&ignoreRemoteWireFormat=true)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400\");\nfinal ActiveMQConnection pc = (ActiveMQConnection) pFactory.createConnection();\nfinal AtomicInteger interruptCounter = new AtomicInteger(0);\npc.addTransportListener(new TransportListener() {\n@Override\npublic void onCommand(Object command) {\n}\n@Override\npublic void onException(IOException error) {\nLOG.info(\"Got: \" + error);\n}\n@Override\npublic void transportInterupted() {\ninterruptCounter.incrementAndGet();\n}\n@Override\npublic void transportResumed() {\n}\n});\npc.start();\nfinal int messageCount = 200;\nfinal CountDownLatch sentOne = new CountDownLatch(1);\nExecutorService executorService = Executors.newCachedThreadPool();\nexecutorService.execute(new Runnable() {\n@Override\npublic void run() {\ntry {\nSession session = pc.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(dest);\nfor (int i = 0; i < messageCount; i++) {\nproducer.send(session.createTextMessage(messageTextPrefix + i));\nsentOne.countDown();\n}\nproducer.close();\nsession.close();\nLOG.info(\"Done with send of: \" + messageCount);\n} catch (Exception ignored) {\nignored.printStackTrace();\n}\n}\n});\nsentOne.await(5, TimeUnit.SECONDS);\nproxy.pause();\nassertTrue(\"Got interrupted\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn interruptCounter.get() > 0;\n}\n}));\nproxy.goOn();\nfor (int i = 0; i < messageCount; i++) {\nassertNotNull(\"Got message \" + i + \" after reconnect\", consumer.receive(5000));\n}\nassertTrue(\"no pending messages when done\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"current total message count: \" + broker.getAdminView().getTotalMessageCount());\nreturn broker.getAdminView().getTotalMessageCount() == 0;\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_FailoverReadInactivityBlockWriteTimeoutClientTest_testBlockedFailoverSendWillReactToReadInactivityTimeout.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3750
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 98
                },
                {
                        "id": "test_logbench-o_data_1156",
                        "content": "@Test\npublic void testSlowConsumerIsAbortedViaJmx() throws Exception {\n// so jmx does the abort\nstrategy.setMaxSlowDuration(60 * 1000);\nAmqpClient client = createAmqpClient();\nAmqpConnection connection = trackConnection(client.connect());\nAmqpSession session = connection.createSession();\nfinal AmqpReceiver receiver = session.createReceiver(\"queue://\" + getTestName());\nreceiver.flow(100);\nsendMessages(getTestName(), 100, false);\nAmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);\nassertNotNull(message);\nmessage.accept();\nQueueViewMBean queue = getProxyToQueue(getTestName());\nObjectName slowConsumerPolicyMBeanName = queue.getSlowConsumerStrategy();\nassertNotNull(slowConsumerPolicyMBeanName);\nAbortSlowConsumerStrategyViewMBean abortPolicy = (AbortSlowConsumerStrategyViewMBean) brokerService.getManagementContext().newProxyInstance(slowConsumerPolicyMBeanName, AbortSlowConsumerStrategyViewMBean.class, true);\nTimeUnit.SECONDS.sleep(6);\nTabularData slowOnes = abortPolicy.getSlowConsumers();\nassertEquals(\"one slow consumers\", 1, slowOnes.size());\nLOG.info(\"slow ones:\" + slowOnes);\nCompositeData slowOne = (CompositeData) slowOnes.values().iterator().next();\nLOG.info(\"Slow one: \" + slowOne);\nassertTrue(\"we have an object name\", slowOne.get(\"subscription\") instanceof ObjectName);\nabortPolicy.abortConsumer((ObjectName) slowOne.get(\"subscription\"));\nassertTrue(\"Receiver should be closed\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn receiver.isClosed();\n}\n}));\nslowOnes = abortPolicy.getSlowConsumers();\nassertEquals(\"no slow consumers left\", 0, slowOnes.size());\n// verify mbean gone with destination\nbrokerService.getAdminView().removeQueue(getTestName());\ntry {\nabortPolicy.getSlowConsumers();\nfail(\"expect not found post destination removal\");\n} catch (UndeclaredThrowableException expected) {\nassertTrue(\"correct exception: \" + expected.getCause(), expected.getCause() instanceof InstanceNotFoundException);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AmqpSlowReceiverTest_testSlowConsumerIsAbortedViaJmx.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1155
                },
                {
                        "id": "pretrain_java_data_8809670",
                        "content": "//,temp,AbortSlowConsumer0Test.java,78,135,temp,AmqpSlowReceiverTest.java,85,142\n//,3\npublic class xxx {\n@Test\npublic void testSlowConsumerIsAbortedViaJmx() throws Exception {\nstrategy.setMaxSlowDuration(60*1000); // so jmx does the abort\nAmqpClient client = createAmqpClient();\nAmqpConnection connection = trackConnection(client.connect());\nAmqpSession session = connection.createSession();\nfinal AmqpReceiver receiver = session.createReceiver(\"queue://\" + getTestName());\nreceiver.flow(100);\nsendMessages(getTestName(), 100, false);\nAmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);\nassertNotNull(message);\nmessage.accept();\nQueueViewMBean queue = getProxyToQueue(getTestName());\nObjectName slowConsumerPolicyMBeanName = queue.getSlowConsumerStrategy();\nassertNotNull(slowConsumerPolicyMBeanName);\nAbortSlowConsumerStrategyViewMBean abortPolicy = (AbortSlowConsumerStrategyViewMBean)\nbrokerService.getManagementContext().newProxyInstance(slowConsumerPolicyMBeanName, AbortSlowConsumerStrategyViewMBean.class, true);\nTimeUnit.SECONDS.sleep(6);\nTabularData slowOnes = abortPolicy.getSlowConsumers();\nassertEquals(\"one slow consumers\", 1, slowOnes.size());\nLOG.info(\"slow ones:\"  + slowOnes);\nCompositeData slowOne = (CompositeData) slowOnes.values().iterator().next();\nLOG.info(\"Slow one: \" + slowOne);\nassertTrue(\"we have an object name\", slowOne.get(\"subscription\") instanceof ObjectName);\nabortPolicy.abortConsumer((ObjectName)slowOne.get(\"subscription\"));\nassertTrue(\"Receiver should be closed\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn receiver.isClosed();\n}\n}));\nslowOnes = abortPolicy.getSlowConsumers();\nassertEquals(\"no slow consumers left\", 0, slowOnes.size());\n// verify mbean gone with destination\nbrokerService.getAdminView().removeQueue(getTestName());\ntry {\nabortPolicy.getSlowConsumers();\nfail(\"expect not found post destination removal\");\n} catch(UndeclaredThrowableException expected) {\nassertTrue(\"correct exception: \" + expected.getCause(),\nexpected.getCause() instanceof InstanceNotFoundException);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/432_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1155
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 99
                },
                {
                        "id": "test_logbench-o_data_770",
                        "content": "@Test(timeout = 15000)\npublic void testInactivityMonitor() throws Exception {\nThread t1 = new Thread() {\n@Override\npublic void run() {\ntry {\nconnection = createSocket();\nconnection.getOutputStream().write('S');\nconnection.getOutputStream().flush();\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 1 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));\n// and it should be closed due to inactivity\nassertTrue(\"no dangling connections\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 0 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_StompConnectTimeoutTest_testInactivityMonitor.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 261
                },
                {
                        "id": "pretrain_java_data_8941681",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,OpenWireConnectionTimeoutTest.java,129,167,temp,AutoStompConnectTimeoutTest.java,85,123\n//,2\npublic class xxx {\n@Test(timeout = 15000)\npublic void testInactivityMonitor() throws Exception {\nThread t1 = new Thread() {\n@Override\npublic void run() {\ntry {\nconnection = createSocket();\nconnection.getOutputStream().write('C');\nconnection.getOutputStream().flush();\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nAutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();\nreturn 1 == server.getCurrentTransportCount().get();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));\n// and it should be closed due to inactivity\nassertTrue(\"no dangling connections\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nAutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();\nreturn 0 == server.getCurrentTransportCount().get();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/610_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 261
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 100
                },
                {
                        "id": "pretrain_java_data_8941681",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,OpenWireConnectionTimeoutTest.java,129,167,temp,AutoStompConnectTimeoutTest.java,85,123\n//,2\npublic class xxx {\n@Test(timeout = 15000)\npublic void testInactivityMonitor() throws Exception {\nThread t1 = new Thread() {\n@Override\npublic void run() {\ntry {\nconnection = createSocket();\nconnection.getOutputStream().write('C');\nconnection.getOutputStream().flush();\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nAutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();\nreturn 1 == server.getCurrentTransportCount().get();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));\n// and it should be closed due to inactivity\nassertTrue(\"no dangling connections\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nAutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();\nreturn 0 == server.getCurrentTransportCount().get();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/610_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 261
                },
                {
                        "id": "test_logbench-o_data_262",
                        "content": "@Test(timeout = 15000)\npublic void testInactivityMonitor() throws Exception {\nThread t1 = new Thread() {\n@Override\npublic void run() {\ntry {\nconnection = createSocket();\nconnection.getOutputStream().write('C');\nconnection.getOutputStream().flush();\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nAutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();\nreturn 1 == server.getCurrentTransportCount().get();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));\n// and it should be closed due to inactivity\nassertTrue(\"no dangling connections\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nAutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();\nreturn 0 == server.getCurrentTransportCount().get();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AutoStompConnectTimeoutTest_testInactivityMonitor.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 261
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 101
                },
                {
                        "id": "pretrain_java_data_10527111",
                        "content": "//,temp,CompositeDestinationSendWhenNotMatchedTest.java,278,314,temp,VirtualTopicWildcardTest.java,70,111\n//,3\npublic class xxx {\n@Test\npublic void testWildcardAndSimpleConsumerShareMessages() throws Exception {\nConsumerBean messageList1 = new ConsumerBean(\"1:\");\nConsumerBean messageList2 = new ConsumerBean(\"2:\");\nConsumerBean messageList3 = new ConsumerBean(\"3:\");\nmessageList1.setVerbose(true);\nmessageList2.setVerbose(true);\nmessageList3.setVerbose(true);\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination producerDestination = new ActiveMQTopic(\"VirtualTopic.TEST.A.IT\");\nDestination destination1 = new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.>\");\nDestination destination2 = new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.A.IT\");\nDestination destination3 = new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.B.IT\");\nLOG.info(\"Sending to: \" + producerDestination);\nLOG.info(\"Consuming from: \" + destination1 + \" and \" + destination2 + \", and \" + destination3);\nMessageConsumer c1 = session.createConsumer(destination1, null);\nMessageConsumer c2 = session.createConsumer(destination2, null);\n// this consumer should get no messages\nMessageConsumer c3 = session.createConsumer(destination3, null);\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\nc3.setMessageListener(messageList3);\n// create topic producer\nMessageProducer producer = session.createProducer(producerDestination);\nassertNotNull(producer);\nfor (int i = 0; i < total; i++) {\nproducer.send(createMessage(session, i));\n}\nassertMessagesArrived(messageList1, messageList2);\nassertEquals(0, messageList3.getMessages().size());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1026_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3701
                },
                {
                        "id": "test_logbench-o_data_3702",
                        "content": "@Test\npublic void testWildcardAndSimpleConsumerShareMessages() throws Exception {\nConsumerBean messageList1 = new ConsumerBean(\"1:\");\nConsumerBean messageList2 = new ConsumerBean(\"2:\");\nConsumerBean messageList3 = new ConsumerBean(\"3:\");\nmessageList1.setVerbose(true);\nmessageList2.setVerbose(true);\nmessageList3.setVerbose(true);\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination producerDestination = new ActiveMQTopic(\"VirtualTopic.TEST.A.IT\");\nDestination destination1 = new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.>\");\nDestination destination2 = new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.A.IT\");\nDestination destination3 = new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.B.IT\");\nLOG.info(\"Sending to: \" + producerDestination);\nLOG.info(\"Consuming from: \" + destination1 + \" and \" + destination2 + \", and \" + destination3);\nMessageConsumer c1 = session.createConsumer(destination1, null);\nMessageConsumer c2 = session.createConsumer(destination2, null);\n// this consumer should get no messages\nMessageConsumer c3 = session.createConsumer(destination3, null);\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\nc3.setMessageListener(messageList3);\n// create topic producer\nMessageProducer producer = session.createProducer(producerDestination);\nassertNotNull(producer);\nfor (int i = 0; i < total; i++) {\nproducer.send(createMessage(session, i));\n}\nassertMessagesArrived(messageList1, messageList2);\nassertEquals(0, messageList3.getMessages().size());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_VirtualTopicWildcardTest_testWildcardAndSimpleConsumerShareMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3701
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 102
                },
                {
                        "id": "pretrain_java_data_10553085",
                        "content": "//,temp,InMemoryJobSchedulerStore.java,85,102,temp,InMemoryJobSchedulerStore.java,66,83\n//,3\npublic class xxx {\n@Override\npublic JobScheduler getJobScheduler(String name) throws Exception {\nthis.lock.lock();\ntry {\nInMemoryJobScheduler result = this.schedulers.get(name);\nif (result == null) {\nLOG.debug(\"Creating new in-memory scheduler: {}\", name);\nresult = new InMemoryJobScheduler(name);\nthis.schedulers.put(name, result);\nif (isStarted()) {\nresult.start();\n}\n}\nreturn result;\n} finally {\nthis.lock.unlock();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1473_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2466
                },
                {
                        "id": "test_logbench-o_data_2467",
                        "content": "@Override\npublic JobScheduler getJobScheduler(String name) throws Exception {\nthis.lock.lock();\ntry {\nInMemoryJobScheduler result = this.schedulers.get(name);\nif (result == null) {\nLOG.debug(\"Creating new in-memory scheduler: {}\", name);\nresult = new InMemoryJobScheduler(name);\nthis.schedulers.put(name, result);\nif (isStarted()) {\nresult.start();\n}\n}\nreturn result;\n} finally {\nthis.lock.unlock();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_InMemoryJobSchedulerStore_getJobScheduler.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2466
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 103
                },
                {
                        "id": "test_logbench-o_data_3260",
                        "content": "public void testPublisherFailsOver() throws Exception {\n// Start a normal consumer on the local broker\nStubConnection connection1 = createConnection();\nConnectionInfo connectionInfo1 = createConnectionInfo();\nSessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);\nConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);\nconnection1.send(connectionInfo1);\nconnection1.send(sessionInfo1);\nconnection1.request(consumerInfo1);\n// Start a normal consumer on a remote broker\nStubConnection connection2 = createRemoteConnection();\nConnectionInfo connectionInfo2 = createConnectionInfo();\nSessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);\nConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);\nconnection2.send(connectionInfo2);\nconnection2.send(sessionInfo2);\nconnection2.request(consumerInfo2);\n// Start a failover publisher.\nLOG.info(\"Starting the failover connection.\");\nStubConnection connection3 = createFailoverConnection(null);\nConnectionInfo connectionInfo3 = createConnectionInfo();\nSessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);\nProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);\nconnection3.send(connectionInfo3);\nconnection3.send(sessionInfo3);\nconnection3.send(producerInfo3);\n// Send the message using the fail over publisher.\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\n// The message will be sent to one of the brokers.\nFailoverTransport ft = connection3.getTransport().narrow(FailoverTransport.class);\n// See which broker we were connected to.\nStubConnection connectionA;\nStubConnection connectionB;\nTransportConnector serverA;\nif (connector.getServer().getConnectURI().equals(ft.getConnectedTransportURI())) {\nconnectionA = connection1;\nconnectionB = connection2;\nserverA = connector;\n} else {\nconnectionA = connection2;\nconnectionB = connection1;\nserverA = remoteConnector;\n}\nassertNotNull(receiveMessage(connectionA));\nassertNoMessagesLeft(connectionB);\n// Dispose the server so that it fails over to the other server.\nLOG.info(\"Disconnecting the active connection\");\nserverA.stop();\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\nassertNotNull(receiveMessage(connectionB));\nassertNoMessagesLeft(connectionA);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_FailoverTransportBrokerTest_testPublisherFailsOver.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1909
                },
                {
                        "id": "pretrain_java_data_12003322",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,FanoutTransportBrokerTest.java,63,102,temp,DiscoveryTransportBrokerTest.java,53,117\n//,3\npublic class xxx {\npublic void testPublisherFailsOver() throws Exception {\nActiveMQDestination destination = new ActiveMQQueue(\"TEST\");\nint deliveryMode = DeliveryMode.NON_PERSISTENT;\n// Start a normal consumer on the local broker\nStubConnection connection1 = createConnection();\nConnectionInfo connectionInfo1 = createConnectionInfo();\nSessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);\nConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);\nconnection1.send(connectionInfo1);\nconnection1.send(sessionInfo1);\nconnection1.request(consumerInfo1);\n// Start a normal consumer on a remote broker\nStubConnection connection2 = createRemoteConnection();\nConnectionInfo connectionInfo2 = createConnectionInfo();\nSessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);\nConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);\nconnection2.send(connectionInfo2);\nconnection2.send(sessionInfo2);\nconnection2.request(consumerInfo2);\n// Start a failover publisher.\nStubConnection connection3 = createFailoverConnection();\nConnectionInfo connectionInfo3 = createConnectionInfo();\nSessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);\nProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);\nconnection3.send(connectionInfo3);\nconnection3.send(sessionInfo3);\nconnection3.send(producerInfo3);\n// Send the message using the fail over publisher.\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\n// The message will be sent to one of the brokers.\nFailoverTransport ft = (FailoverTransport)connection3.getTransport().narrow(FailoverTransport.class);\n// See which broker we were connected to.\nStubConnection connectionA;\nStubConnection connectionB;\nTransportConnector serverA;\nif (connector.getServer().getConnectURI().getPort() == ft.getConnectedTransportURI().getPort()) {\nconnectionA = connection1;\nconnectionB = connection2;\nserverA = connector;\n} else {\nconnectionA = connection2;\nconnectionB = connection1;\nserverA = remoteConnector;\n}\nassertNotNull(receiveMessage(connectionA));\nassertNoMessagesLeft(connectionB);\n// Dispose the server so that it fails over to the other server.\nLOG.info(\"Disconnecting active server\");\nserverA.stop();\nLOG.info(\"Sending request that should failover\");\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\nassertNotNull(receiveMessage(connectionB));\nassertNoMessagesLeft(connectionA);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/356_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1909
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 104
                },
                {
                        "id": "test_logbench-o_data_1910",
                        "content": "public void testPublisherFailsOver() throws Exception {\nActiveMQDestination destination = new ActiveMQQueue(\"TEST\");\nint deliveryMode = DeliveryMode.NON_PERSISTENT;\n// Start a normal consumer on the local broker\nStubConnection connection1 = createConnection();\nConnectionInfo connectionInfo1 = createConnectionInfo();\nSessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);\nConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);\nconnection1.send(connectionInfo1);\nconnection1.send(sessionInfo1);\nconnection1.request(consumerInfo1);\n// Start a normal consumer on a remote broker\nStubConnection connection2 = createRemoteConnection();\nConnectionInfo connectionInfo2 = createConnectionInfo();\nSessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);\nConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);\nconnection2.send(connectionInfo2);\nconnection2.send(sessionInfo2);\nconnection2.request(consumerInfo2);\n// Start a failover publisher.\nStubConnection connection3 = createFailoverConnection();\nConnectionInfo connectionInfo3 = createConnectionInfo();\nSessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);\nProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);\nconnection3.send(connectionInfo3);\nconnection3.send(sessionInfo3);\nconnection3.send(producerInfo3);\n// Send the message using the fail over publisher.\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\n// The message will be sent to one of the brokers.\nFailoverTransport ft = (FailoverTransport) connection3.getTransport().narrow(FailoverTransport.class);\n// See which broker we were connected to.\nStubConnection connectionA;\nStubConnection connectionB;\nTransportConnector serverA;\nif (connector.getServer().getConnectURI().getPort() == ft.getConnectedTransportURI().getPort()) {\nconnectionA = connection1;\nconnectionB = connection2;\nserverA = connector;\n} else {\nconnectionA = connection2;\nconnectionB = connection1;\nserverA = remoteConnector;\n}\nassertNotNull(receiveMessage(connectionA));\nassertNoMessagesLeft(connectionB);\n// Dispose the server so that it fails over to the other server.\nLOG.info(\"Disconnecting active server\");\nserverA.stop();\nLOG.info(\"Sending request that should failover\");\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\nassertNotNull(receiveMessage(connectionB));\nassertNoMessagesLeft(connectionA);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DiscoveryTransportBrokerTest_testPublisherFailsOver.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1909
                },
                {
                        "id": "pretrain_java_data_12003322",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,FanoutTransportBrokerTest.java,63,102,temp,DiscoveryTransportBrokerTest.java,53,117\n//,3\npublic class xxx {\npublic void testPublisherFailsOver() throws Exception {\nActiveMQDestination destination = new ActiveMQQueue(\"TEST\");\nint deliveryMode = DeliveryMode.NON_PERSISTENT;\n// Start a normal consumer on the local broker\nStubConnection connection1 = createConnection();\nConnectionInfo connectionInfo1 = createConnectionInfo();\nSessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);\nConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);\nconnection1.send(connectionInfo1);\nconnection1.send(sessionInfo1);\nconnection1.request(consumerInfo1);\n// Start a normal consumer on a remote broker\nStubConnection connection2 = createRemoteConnection();\nConnectionInfo connectionInfo2 = createConnectionInfo();\nSessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);\nConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);\nconnection2.send(connectionInfo2);\nconnection2.send(sessionInfo2);\nconnection2.request(consumerInfo2);\n// Start a failover publisher.\nStubConnection connection3 = createFailoverConnection();\nConnectionInfo connectionInfo3 = createConnectionInfo();\nSessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);\nProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);\nconnection3.send(connectionInfo3);\nconnection3.send(sessionInfo3);\nconnection3.send(producerInfo3);\n// Send the message using the fail over publisher.\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\n// The message will be sent to one of the brokers.\nFailoverTransport ft = (FailoverTransport)connection3.getTransport().narrow(FailoverTransport.class);\n// See which broker we were connected to.\nStubConnection connectionA;\nStubConnection connectionB;\nTransportConnector serverA;\nif (connector.getServer().getConnectURI().getPort() == ft.getConnectedTransportURI().getPort()) {\nconnectionA = connection1;\nconnectionB = connection2;\nserverA = connector;\n} else {\nconnectionA = connection2;\nconnectionB = connection1;\nserverA = remoteConnector;\n}\nassertNotNull(receiveMessage(connectionA));\nassertNoMessagesLeft(connectionB);\n// Dispose the server so that it fails over to the other server.\nLOG.info(\"Disconnecting active server\");\nserverA.stop();\nLOG.info(\"Sending request that should failover\");\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\nassertNotNull(receiveMessage(connectionB));\nassertNoMessagesLeft(connectionA);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/356_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1909
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 105
                },
                {
                        "id": "pretrain_java_data_12096037",
                        "content": "<filename>LACCPlus/ActiveMQ/176_2.java\n//,temp,AMQ4485Test.java,165,176,temp,AMQ5822Test.java,59,82\n//,3\npublic class xxx {\n@Test\npublic void testReadCounter() throws Exception {\nLOG.info(\"Connecting to: {}\", connectionUri);\nbyte[] payload = new byte[50 * 1024 * 1024];\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri + \"?useInactivityMonitor=false\");\nfinal ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();\nconnection.start();\nLOG.info(\"Connected to: {}\", connection.getTransport());\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(\"test\");\nMessageProducer producer = session.createProducer(queue);\nBytesMessage message = session.createBytesMessage();\nmessage.writeBytes(payload);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nproducer.send(message);\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/176_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1570
                },
                {
                        "id": "test_logbench-o_data_1571",
                        "content": "@Test\npublic void testReadCounter() throws Exception {\nLOG.info(\"Connecting to: {}\", connectionUri);\nbyte[] payload = new byte[50 * 1024 * 1024];\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri + \"?useInactivityMonitor=false\");\nfinal ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();\nconnection.start();\nLOG.info(\"Connected to: {}\", connection.getTransport());\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(\"test\");\nMessageProducer producer = session.createProducer(queue);\nBytesMessage message = session.createBytesMessage();\nmessage.writeBytes(payload);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nproducer.send(message);\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ5822Test_testReadCounter.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1570
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 106
                },
                {
                        "id": "test_logbench-o_data_1741",
                        "content": "@Test\npublic void testTablesHave() throws Exception {\nActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(\"vm://localhost?create=false\");\nActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(\"TEST.FOO\");\nMessageProducer producer = session.createProducer(destination);\nfor (int i = 0; i < 10; ++i) {\nproducer.send(session.createTextMessage(\"test\"));\n}\nproducer.close();\nconnection.close();\nList<Message> queuedMessages = null;\ntry {\nqueuedMessages = dumpMessages();\n} catch (Exception ex) {\nLOG.info(\"Caught ex: \", ex);\nfail(\"Should not have thrown an exception\");\n}\nassertNotNull(queuedMessages);\nassertEquals(\"Should have found 10 messages\", 10, queuedMessages.size());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JDBCTablePrefixAssignedTest_testTablesHave.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1740
                },
                {
                        "id": "pretrain_java_data_15211262",
                        "content": "<filename>LACCPlus/ActiveMQ/1732_2.java<gh_stars>0\n//,temp,QueueBrowsingLimitTest.java,80,112,temp,JDBCTablePrefixAssignedTest.java,66,92\n//,3\npublic class xxx {\n@Test\npublic void testTablesHave() throws Exception {\nActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(\"vm://localhost?create=false\");\nActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(\"TEST.FOO\");\nMessageProducer producer = session.createProducer(destination);\nfor (int i = 0; i < 10; ++i) {\nproducer.send(session.createTextMessage(\"test\"));\n}\nproducer.close();\nconnection.close();\nList<Message> queuedMessages = null;\ntry {\nqueuedMessages = dumpMessages();\n} catch (Exception ex) {\nLOG.info(\"Caught ex: \", ex);\nfail(\"Should not have thrown an exception\");\n}\nassertNotNull(queuedMessages);\nassertEquals(\"Should have found 10 messages\", 10, queuedMessages.size());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1732_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1740
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 107
                },
                {
                        "id": "test_logbench-o_data_701",
                        "content": "public void run() {\nint count = 0;\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(queue);\nBytesMessage message = session.createBytesMessage();\nmessage.writeBytes(new byte[8 * 1024]);\nfor (; count < 100; count++) {\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\nLOG.info(\"Got expected send time out on message: \" + count);\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ6240Test_run.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 700
                },
                {
                        "id": "pretrain_java_data_13643925",
                        "content": "//,temp,JmsTimeoutTest.java,58,79,temp,AMQ6240Test.java,50,72\n//,3\npublic class xxx {\npublic void run() {\nint count=0;\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(queue);\nBytesMessage message = session.createBytesMessage();\nmessage.writeBytes(new byte[8*1024]);\nfor(; count<100; count++){\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\nLOG.info(\"Got expected send time out on message: \" + count);\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/850_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 700
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 108
                },
                {
                        "id": "test_logbench-o_data_74",
                        "content": "public void listenQueue(final String queueName, final String selectors) {\ntry {\nProperties props = new Properties();\nprops.put(\"java.naming.factory.initial\", \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\nprops.put(\"java.naming.provider.url\", connectionUri);\nprops.put(\"queue.queueName\", queueName);\njavax.naming.Context ctx = new InitialContext(props);\nQueueConnectionFactory factory = (QueueConnectionFactory) ctx.lookup(\"ConnectionFactory\");\nQueueConnection conn = factory.createQueueConnection();\nfinal Queue queue = (Queue) ctx.lookup(\"queueName\");\nQueueSession session = conn.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\nQueueReceiver receiver = session.createReceiver(queue, selectors);\nSystem.out.println(\"Message Selector: \" + receiver.getMessageSelector());\nreceiver.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\ntry {\nif (message instanceof TextMessage) {\nTextMessage txtMsg = (TextMessage) message;\nString msg = txtMsg.getText();\nLOG.info(\"Queue Message Received: \" + queueName + \" - \" + msg);\nqreceived.countDown();\n}\nmessage.acknowledge();\n} catch (Throwable e) {\ne.printStackTrace();\n}\n}\n});\nconn.start();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ2084Test_listenQueue.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 73
                },
                {
                        "id": "pretrain_java_data_15280979",
                        "content": "//,temp,AMQ2084Test.java,110,142,temp,AMQ2084Test.java,74,108\n//,3\npublic class xxx {\npublic void listenQueue(final String queueName, final String selectors) {\ntry {\nProperties props = new Properties();\nprops.put(\"java.naming.factory.initial\", \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\nprops.put(\"java.naming.provider.url\", connectionUri);\nprops.put(\"queue.queueName\", queueName);\njavax.naming.Context ctx = new InitialContext(props);\nQueueConnectionFactory factory = (QueueConnectionFactory) ctx.lookup(\"ConnectionFactory\");\nQueueConnection conn = factory.createQueueConnection();\nfinal Queue queue = (Queue) ctx.lookup(\"queueName\");\nQueueSession session = conn.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\nQueueReceiver receiver = session.createReceiver(queue, selectors);\nSystem.out.println(\"Message Selector: \" + receiver.getMessageSelector());\nreceiver.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\ntry {\nif (message instanceof TextMessage) {\nTextMessage txtMsg = (TextMessage) message;\nString msg = txtMsg.getText();\nLOG.info(\"Queue Message Received: \" + queueName + \" - \" + msg);\nqreceived.countDown();\n}\nmessage.acknowledge();\n} catch (Throwable e) {\ne.printStackTrace();\n}\n}\n});\nconn.start();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2243_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 73
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 109
                },
                {
                        "id": "test_logbench-o_data_1673",
                        "content": "@Test\npublic void testGetNextScheduledJob() throws Exception {\nJobSchedulerViewMBean view = getJobSchedulerMBean();\nassertNotNull(view);\nassertTrue(view.getAllJobs().isEmpty());\nscheduleMessage(60000, 0, 0);\nassertFalse(view.getAllJobs().isEmpty());\nlong before = System.currentTimeMillis() + 57 * 1000;\nlong toLate = System.currentTimeMillis() + 63 * 1000;\nString next = view.getNextScheduleTime();\nlong nextTime = JobSupport.getDataTime(next);\nLOG.info(\"Next Scheduled Time: {} should be after: {}\", next, JobSupport.getDateTime(before));\nassertTrue(nextTime > before);\nassertTrue(nextTime < toLate);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JobSchedulerJmxManagementTests_testGetNextScheduledJob.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1672
                },
                {
                        "id": "pretrain_java_data_2625822",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,JobSchedulerJmxManagementTests.java,96,110,temp,JobSchedulerJmxManagementTests.java,66,81\n//,3\npublic class xxx {\n@Test\npublic void testGetNextScheduledJob() throws Exception {\nJobSchedulerViewMBean view = getJobSchedulerMBean();\nassertNotNull(view);\nassertTrue(view.getAllJobs().isEmpty());\nscheduleMessage(60000, 0, 0);\nassertFalse(view.getAllJobs().isEmpty());\nlong before = System.currentTimeMillis() + 57 * 1000;\nlong toLate = System.currentTimeMillis() + 63 * 1000;\nString next = view.getNextScheduleTime();\nlong nextTime = JobSupport.getDataTime(next);\nLOG.info(\"Next Scheduled Time: {} should be after: {}\", next, JobSupport.getDateTime(before));\nassertTrue(nextTime > before);\nassertTrue(nextTime < toLate);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1550_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1672
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 110
                },
                {
                        "id": "pretrain_java_data_18732685",
                        "content": "<reponame>ititi/camus<gh_stars>0\npackage com.linkedin.camus.etl.kafka.reporter;\nimport java.util.Map;\nimport java.io.IOException;\nimport java.text.NumberFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.apache.hadoop.mapreduce.CounterGroup;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapred.JobClient;\nimport org.apache.hadoop.mapred.JobConf;\nimport org.apache.hadoop.mapred.JobID;\nimport org.apache.hadoop.mapred.TaskReport;\nimport com.linkedin.camus.etl.kafka.reporter.BaseReporter;\npublic class TimeReporter extends BaseReporter {\npublic void report(Job job, Map<String, Long> timingMap) throws IOException {\nStringBuilder sb = new StringBuilder();\nsb.append(\"***********Timing Report*************\\n\");\nsb.append(\"Job time (seconds):\\n\");\ndouble preSetup = timingMap.get(\"pre-setup\") / 1000;\ndouble getSplits = timingMap.get(\"getSplits\") / 1000;\ndouble hadoop = timingMap.get(\"hadoop\") / 1000;\ndouble commit = timingMap.get(\"commit\") / 1000;\ndouble total = timingMap.get(\"total\") / 1000;\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"pre setup\", preSetup,\nNumberFormat.getPercentInstance().format(preSetup / total).toString()));\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"get splits\", getSplits,\nNumberFormat.getPercentInstance().format(getSplits / total).toString()));\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"hadoop job\", hadoop,\nNumberFormat.getPercentInstance().format(hadoop / total).toString()));\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"commit\", commit,\nNumberFormat.getPercentInstance().format(commit / total).toString()));\nint minutes = (int) total / 60;\nint seconds = (int) total % 60;\nsb.append(String.format(\"Total: %d minutes %d seconds\\n\", minutes, seconds));\nJobClient client = new JobClient(new JobConf(job.getConfiguration()));\nTaskReport[] tasks = client.getMapTaskReports(JobID.downgrade(job.getJobID()));\ndouble min = Long.MAX_VALUE, max = 0, mean = 0;\ndouble minRun = Long.MAX_VALUE, maxRun = 0, meanRun = 0;\nlong totalTaskTime = 0;\nTreeMap<Long, List<TaskReport>> taskMap = new TreeMap<Long, List<TaskReport>>();\nfor (TaskReport t : tasks) {\nlong wait = t.getStartTime() - timingMap.get(\"hadoop_start\");\nmin = wait < min ? wait : min;\nmax = wait > max ? wait : max;\nmean += wait;\nlong runTime = t.getFinishTime() - t.getStartTime();\ntotalTaskTime += runTime;\nminRun = runTime < minRun ? runTime : minRun;\nmaxRun = runTime > maxRun ? runTime : maxRun;\nmeanRun += runTime;\nif (!taskMap.containsKey(runTime)) {\ntaskMap.put(runTime, new ArrayList<TaskReport>());\n}\ntaskMap.get(runTime).add(t);\n}\nmean /= tasks.length;\nmeanRun /= tasks.length;\n// convert to seconds\nmin /= 1000;\nmax /= 1000;\nmean /= 1000;\nminRun /= 1000;\nmaxRun /= 1000;\nmeanRun /= 1000;\nsb.append(\"\\nHadoop job task times (seconds):\\n\");\nsb.append(String.format(\"    %12s %6.1f\\n\", \"min\", minRun));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"mean\", meanRun));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"max\", maxRun));\nsb.append(String.format(\"    %12s %6.1f/%.1f = %.2f\\n\", \"skew\", meanRun, maxRun, meanRun / maxRun));\nsb.append(\"\\nTask wait time (seconds):\\n\");\nsb.append(String.format(\"    %12s %6.1f\\n\", \"min\", min));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"mean\", mean));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"max\", max));\nCounterGroup totalGrp = job.getCounters().getGroup(\"total\");\nlong decode = totalGrp.findCounter(\"decode-time(ms)\").getValue();\nlong request = totalGrp.findCounter(\"request-time(ms)\").getValue();\nlong map = totalGrp.findCounter(\"mapper-time(ms)\").getValue();\nlong mb = totalGrp.findCounter(\"data-read\").getValue();\nlong other = totalTaskTime - map - request - decode;\nsb.append(\"\\nHadoop task breakdown:\\n\");\nsb.append(String.format(\"    %12s %s\\n\", \"kafka\",\nNumberFormat.getPercentInstance().format(request / (double) totalTaskTime)));\nsb.append(String.format(\"    %12s %s\\n\", \"decode\",\nNumberFormat.getPercentInstance().format(decode / (double) totalTaskTime)));\nsb.append(String.format(\"    %12s %s\\n\", \"map output\",\nNumberFormat.getPercentInstance().format(map / (double) totalTaskTime)));\nsb.append(String.format(\"    %12s %s\\n\", \"other\",\nNumberFormat.getPercentInstance().format(other / (double) totalTaskTime)));\nsb.append(String.format(\"\\n%16s %s\\n\", \"Total MB read:\", mb / 1024 / 1024));\nlog.info(sb.toString());\n}\n}",
                        "max_stars_repo_path": "camus-etl-kafka/src/main/java/com/linkedin/camus/etl/kafka/reporter/TimeReporter.java",
                        "max_stars_repo_name": "ititi/camus",
                        "max_stars_count": 0,
                        "__cluster__": 1709
                },
                {
                        "id": "test_logbench-o_data_1710",
                        "content": "public void report(Job job, Map<String, Long> timingMap) throws IOException {\nStringBuilder sb = new StringBuilder();\nsb.append(\"***********Timing Report*************\\n\");\nsb.append(\"Job time (seconds):\\n\");\ndouble preSetup = timingMap.get(\"pre-setup\") / 1000;\ndouble getSplits = timingMap.get(\"getSplits\") / 1000;\ndouble hadoop = timingMap.get(\"hadoop\") / 1000;\ndouble commit = timingMap.get(\"commit\") / 1000;\ndouble total = timingMap.get(\"total\") / 1000;\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"pre setup\", preSetup, NumberFormat.getPercentInstance().format(preSetup / total).toString()));\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"get splits\", getSplits, NumberFormat.getPercentInstance().format(getSplits / total).toString()));\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"hadoop job\", hadoop, NumberFormat.getPercentInstance().format(hadoop / total).toString()));\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"commit\", commit, NumberFormat.getPercentInstance().format(commit / total).toString()));\nint minutes = (int) total / 60;\nint seconds = (int) total % 60;\nsb.append(String.format(\"Total: %d minutes %d seconds\\n\", minutes, seconds));\nJobClient client = new JobClient(new JobConf(job.getConfiguration()));\nTaskReport[] tasks = client.getMapTaskReports(JobID.downgrade(job.getJobID()));\ndouble min = Long.MAX_VALUE, max = 0, mean = 0;\ndouble minRun = Long.MAX_VALUE, maxRun = 0, meanRun = 0;\nlong totalTaskTime = 0;\nTreeMap<Long, List<TaskReport>> taskMap = new TreeMap<Long, List<TaskReport>>();\nfor (TaskReport t : tasks) {\nlong wait = t.getStartTime() - timingMap.get(\"hadoop_start\");\nmin = wait < min ? wait : min;\nmax = wait > max ? wait : max;\nmean += wait;\nlong runTime = t.getFinishTime() - t.getStartTime();\ntotalTaskTime += runTime;\nminRun = runTime < minRun ? runTime : minRun;\nmaxRun = runTime > maxRun ? runTime : maxRun;\nmeanRun += runTime;\nif (!taskMap.containsKey(runTime)) {\ntaskMap.put(runTime, new ArrayList<TaskReport>());\n}\ntaskMap.get(runTime).add(t);\n}\nmean /= tasks.length;\nmeanRun /= tasks.length;\n// convert to seconds\nmin /= 1000;\nmax /= 1000;\nmean /= 1000;\nminRun /= 1000;\nmaxRun /= 1000;\nmeanRun /= 1000;\nsb.append(\"\\nHadoop job task times (seconds):\\n\");\nsb.append(String.format(\"    %12s %6.1f\\n\", \"min\", minRun));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"mean\", meanRun));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"max\", maxRun));\nsb.append(String.format(\"    %12s %6.1f/%.1f = %.2f\\n\", \"skew\", meanRun, maxRun, meanRun / maxRun));\nsb.append(\"\\nTask wait time (seconds):\\n\");\nsb.append(String.format(\"    %12s %6.1f\\n\", \"min\", min));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"mean\", mean));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"max\", max));\nCounterGroup totalGrp = job.getCounters().getGroup(\"total\");\nlong decode = totalGrp.findCounter(\"decode-time(ms)\").getValue();\nlong request = totalGrp.findCounter(\"request-time(ms)\").getValue();\nlong map = totalGrp.findCounter(\"mapper-time(ms)\").getValue();\nlong mb = totalGrp.findCounter(\"data-read\").getValue();\nlong other = totalTaskTime - map - request - decode;\nsb.append(\"\\nHadoop task breakdown:\\n\");\nsb.append(String.format(\"    %12s %s\\n\", \"kafka\", NumberFormat.getPercentInstance().format(request / (double) totalTaskTime)));\nsb.append(String.format(\"    %12s %s\\n\", \"decode\", NumberFormat.getPercentInstance().format(decode / (double) totalTaskTime)));\nsb.append(String.format(\"    %12s %s\\n\", \"map output\", NumberFormat.getPercentInstance().format(map / (double) totalTaskTime)));\nsb.append(String.format(\"    %12s %s\\n\", \"other\", NumberFormat.getPercentInstance().format(other / (double) totalTaskTime)));\nsb.append(String.format(\"\\n%16s %s\\n\", \"Total MB read:\", mb / 1024 / 1024));\nlog.info(sb.toString());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/camus_TimeReporter_report.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1709
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 111
                },
                {
                        "id": "test_logbench-o_data_627",
                        "content": "protected void exerciseCompositeQueue(String dest, String consumerQ) throws Exception {\nActiveMQConnection connection = new ActiveMQConnectionFactory(\"vm://localhost\").createActiveMQConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(consumerQ));\nLOG.info(\"new consumer for: \" + consumer.getDestination());\nMessageProducer producer = session.createProducer(session.createQueue(dest));\nfinal String body = \"To cq:\" + dest;\nMessage message = sendAndReceiveMessage(session, consumer, producer, body);\nassertNotNull(\"got message\", message);\nassertEquals(\"got expected message\", body, ((TextMessage) message).getText());\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AbstractVirtualDestTest_exerciseCompositeQueue.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 626
                },
                {
                        "id": "pretrain_java_data_17125355",
                        "content": "<gh_stars>0\n//,temp,AbstractVirtualDestTest.java,64,77,temp,PooledConnectionSecurityExceptionTest.java,256,277\n//,3\npublic class xxx {\nprotected void exerciseCompositeQueue(String dest, String consumerQ) throws Exception {\nActiveMQConnection connection = new ActiveMQConnectionFactory(\"vm://localhost\").createActiveMQConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(consumerQ));\nLOG.info(\"new consumer for: \" + consumer.getDestination());\nMessageProducer producer = session.createProducer(session.createQueue(dest));\nfinal String body = \"To cq:\" + dest;\nMessage message = sendAndReceiveMessage(session, consumer, producer, body);\nassertNotNull(\"got message\", message);\nassertEquals(\"got expected message\", body, ((TextMessage) message).getText());\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/350_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 626
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 112
                },
                {
                        "id": "test_logbench-o_data_1330",
                        "content": "@org.junit.Test\npublic void testValidateRedeliveryFlagAfterRestart() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString() + \"?jms.prefetchPolicy.all=0\");\nconnection = (ActiveMQConnection) connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nDestination destination = session.createQueue(queueName);\npopulateDestination(1, destination, connection);\nMessageConsumer consumer = session.createConsumer(destination);\nMessage msg = consumer.receive(5000);\nLOG.info(\"got: \" + msg);\nassertNotNull(\"got the message\", msg);\nassertFalse(\"got the message\", msg.getJMSRedelivered());\nconsumer.close();\nconnection.close();\nrestartBroker();\nconnectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString() + \"?jms.prefetchPolicy.all=0\");\nconnection = (ActiveMQConnection) connectionFactory.createConnection();\nconnection.start();\nsession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\ndestination = session.createQueue(queueName);\nconsumer = session.createConsumer(destination);\nmsg = consumer.receive(5000);\nLOG.info(\"got: \" + msg);\nassertNotNull(\"got the message\", msg);\nassertTrue(\"got the message has redelivered flag\", msg.getJMSRedelivered());\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_RedeliveryRecoveryTest_testValidateRedeliveryFlagAfterRestart.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1329
                },
                {
                        "id": "pretrain_java_data_18638007",
                        "content": "<filename>LACCPlus/ActiveMQ/381_1.java\n//,temp,RedeliveryRecoveryTest.java,76,112,temp,RedeliveryRestartTest.java,235,273\n//,3\npublic class xxx {\n@org.junit.Test\npublic void testValidateRedeliveryFlagAfterRestart() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()\n+ \"?jms.prefetchPolicy.all=0\");\nconnection = (ActiveMQConnection) connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nDestination destination = session.createQueue(queueName);\npopulateDestination(1, destination, connection);\nMessageConsumer consumer = session.createConsumer(destination);\nMessage msg = consumer.receive(5000);\nLOG.info(\"got: \" + msg);\nassertNotNull(\"got the message\", msg);\nassertFalse(\"got the message\", msg.getJMSRedelivered());\nconsumer.close();\nconnection.close();\nrestartBroker();\nconnectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()\n+ \"?jms.prefetchPolicy.all=0\");\nconnection = (ActiveMQConnection) connectionFactory.createConnection();\nconnection.start();\nsession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\ndestination = session.createQueue(queueName);\nconsumer = session.createConsumer(destination);\nmsg = consumer.receive(5000);\nLOG.info(\"got: \" + msg);\nassertNotNull(\"got the message\", msg);\nassertTrue(\"got the message has redelivered flag\", msg.getJMSRedelivered());\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/381_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1329
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 113
                },
                {
                        "id": "test_logbench-o_data_3569",
                        "content": "/**\n* Test the case where the broker is blocked due to a memory limit\n* with a fail timeout\n* @throws Exception\n*/\npublic void testBlockedProducerUsageSendFailTimeout() throws Exception {\nfinal ActiveMQConnection cx = (ActiveMQConnection) createConnection();\nfinal ActiveMQDestination queue = createDestination(\"testqueue\");\nbroker.getSystemUsage().setSendFailIfNoSpaceAfterTimeout(5000);\nRunnable r = new Runnable() {\npublic void run() {\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(false, 1);\nMessageProducer producer = session.createProducer(queue);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nTextMessage message = session.createTextMessage(createMessageText());\nfor (int count = 0; count < messageCount; count++) {\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e instanceof ResourceAllocationException || e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}\n};\ncx.start();\nThread producerThread = new Thread(r);\nproducerThread.start();\nproducerThread.join(30000);\ncx.close();\n// We should have a few timeout exceptions as memory store will fill up\nassertTrue(\"No exception from the broker\", exceptionCount.get() > 0);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JmsTimeoutTest_testBlockedProducerUsageSendFailTimeout.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 140
                },
                {
                        "id": "pretrain_java_data_18724236",
                        "content": "//,temp,JmsTimeoutTest.java,95,130,temp,AMQ6240Test.java,41,81\n//,3\npublic class xxx {\npublic void testBlockedProducerUsageSendFailTimeout() throws Exception {\nfinal ActiveMQConnection cx = (ActiveMQConnection)createConnection();\nfinal ActiveMQDestination queue = createDestination(\"testqueue\");\nbroker.getSystemUsage().setSendFailIfNoSpaceAfterTimeout(5000);\nRunnable r = new Runnable() {\npublic void run() {\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(false, 1);\nMessageProducer producer = session.createProducer(queue);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nTextMessage message = session.createTextMessage(createMessageText());\nfor(int count=0; count<messageCount; count++){\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e instanceof ResourceAllocationException || e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}\n};\ncx.start();\nThread producerThread = new Thread(r);\nproducerThread.start();\nproducerThread.join(30000);\ncx.close();\n// We should have a few timeout exceptions as memory store will fill up\nassertTrue(\"No exception from the broker\", exceptionCount.get() > 0);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/979_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 140
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 114
                },
                {
                        "id": "pretrain_java_data_17109718",
                        "content": "//,temp,DurableConsumerCloseAndReconnectTcpTest.java,176,188,temp,DurableConsumerCloseAndReconnectTcpTest.java,85,95\n//,3\npublic class xxx {\npublic void onException(IOException error) {\nLOG.info(\"Transport listener exception:\" + error);\nif (reconnectInTransportListener) {\ntry {\nTimeUnit.MILLISECONDS.sleep(500);\nmakeConsumer();\n} catch (Exception e) {\nreconnectException = e;\n}\ngotException.countDown();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/53_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 279
                },
                {
                        "id": "test_logbench-o_data_280",
                        "content": "public void onException(IOException error) {\nLOG.info(\"Transport listener exception:\" + error);\nif (reconnectInTransportListener) {\ntry {\nTimeUnit.MILLISECONDS.sleep(500);\nmakeConsumer();\n} catch (Exception e) {\nreconnectException = e;\n}\ngotException.countDown();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DurableConsumerCloseAndReconnectTcpTest_onException.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 279
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 115
                },
                {
                        "id": "test_logbench-o_data_2516",
                        "content": "public void testVmBrokerPropertiesFile() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?brokerConfig=properties:org/apache/activemq/config/broker.properties\");\nConnection connection = factory.createConnection();\nBrokerService broker = BrokerRegistry.getInstance().lookup(\"Cheese\");\nLOG.info(\"Found broker : \" + broker);\nassertNotNull(broker);\nassertEquals(\"isUseJmx()\", false, broker.isUseJmx());\nassertEquals(\"isPersistent()\", false, broker.isPersistent());\nassertEquals(\"getBrokerName()\", \"Cheese\", broker.getBrokerName());\nconnection.close();\nbroker.stop();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_BrokerPropertiesTest_testVmBrokerPropertiesFile.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2515
                },
                {
                        "id": "pretrain_java_data_4252141",
                        "content": "//,temp,BrokerPropertiesTest.java,47,59,temp,BrokerPropertiesTest.java,34,44\n//,3\npublic class xxx {\npublic void testVmBrokerPropertiesFile() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?brokerConfig=properties:org/apache/activemq/config/broker.properties\");\nConnection connection = factory.createConnection();\nBrokerService broker = BrokerRegistry.getInstance().lookup(\"Cheese\");\nLOG.info(\"Found broker : \" + broker);\nassertNotNull(broker);\nassertEquals(\"isUseJmx()\", false, broker.isUseJmx());\nassertEquals(\"isPersistent()\", false, broker.isPersistent());\nassertEquals(\"getBrokerName()\", \"Cheese\", broker.getBrokerName());\nconnection.close();\nbroker.stop();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1484_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2515
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 116
                },
                {
                        "id": "test_logbench-o_data_170",
                        "content": "public void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\nconnection = factory.createConnection();\nqueue = new ActiveMQQueue(getClass().getName() + \".\" + getName());\nproducerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumerSession = connection.createSession(true, 0);\nproducer = producerSession.createProducer(queue);\nconsumer = consumerSession.createConsumer(queue);\nconsumer.setMessageListener(new MessageListener() {\nint msgCount;\nint msgCommittedCount;\npublic void onMessage(Message m) {\ntry {\nmsgCount++;\nTextMessage tm = (TextMessage) m;\nreceivedText = tm.getText();\nif (tm.getJMSRedelivered()) {\nmsgRedelivered.add(receivedText);\n}\nLOG.info(\"consumer received message: \" + receivedText + (tm.getJMSRedelivered() ? \" ** Redelivered **\" : \"\"));\nif (msgCount == 3) {\nmsgRolledBack.add(receivedText);\nconsumerSession.rollback();\nLOG.info(\"[msg: \" + receivedText + \"] ** rolled back **\");\n} else {\nmsgCommittedCount++;\nmsgCommitted.add(receivedText);\nconsumerSession.commit();\nLOG.info(\"[msg: \" + receivedText + \"] committed transaction \");\n}\nif (msgCommittedCount == numMessages) {\nlatch.countDown();\n}\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nconnection.start();\nTextMessage tm = null;\ntry {\nfor (int i = 1; i <= numMessages; i++) {\ntm = producerSession.createTextMessage();\ntm.setText(\"Hello \" + i);\nmsgSent.add(tm.getText());\nproducer.send(tm);\nLOG.info(\"producer sent message: \" + tm.getText());\n}\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nlatch.await();\nassertEquals(1, msgRolledBack.size());\nassertEquals(1, msgRedelivered.size());\nLOG.info(\"msg RolledBack = \" + msgRolledBack.get(0));\nLOG.info(\"msg Redelivered = \" + msgRedelivered.get(0));\nassertEquals(msgRolledBack.get(0), msgRedelivered.get(0));\nassertEquals(numMessages, msgSent.size());\nassertEquals(numMessages, msgCommitted.size());\nassertEquals(msgSent, msgCommitted);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_TransactionRollbackOrderTest_testTransaction.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 169
                },
                {
                        "id": "pretrain_java_data_4268574",
                        "content": "<reponame>sgholamian/log-aware-clone-detection<gh_stars>0\n//,temp,TransactionTest.java,59,113,temp,TransactionRollbackOrderTest.java,64,150\n//,3\npublic class xxx {\npublic void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\nconnection = factory.createConnection();\nqueue = new ActiveMQQueue(getClass().getName() + \".\" + getName());\nproducerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumerSession = connection.createSession(true, 0);\nproducer = producerSession.createProducer(queue);\nconsumer = consumerSession.createConsumer(queue);\nconsumer.setMessageListener(new MessageListener() {\nint msgCount;\nint msgCommittedCount;\npublic void onMessage(Message m) {\ntry {\nmsgCount++;\nTextMessage tm = (TextMessage)m;\nreceivedText = tm.getText();\nif (tm.getJMSRedelivered()) {\nmsgRedelivered.add(receivedText);\n}\nLOG.info(\"consumer received message: \" + receivedText + (tm.getJMSRedelivered() ? \" ** Redelivered **\" : \"\"));\nif (msgCount == 3) {\nmsgRolledBack.add(receivedText);\nconsumerSession.rollback();\nLOG.info(\"[msg: \" + receivedText + \"] ** rolled back **\");\n} else {\nmsgCommittedCount++;\nmsgCommitted.add(receivedText);\nconsumerSession.commit();\nLOG.info(\"[msg: \" + receivedText + \"] committed transaction \");\n}\nif (msgCommittedCount == numMessages) {\nlatch.countDown();\n}\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nconnection.start();\nTextMessage tm = null;\ntry {\nfor (int i = 1; i <= numMessages; i++) {\ntm = producerSession.createTextMessage();\ntm.setText(\"Hello \" + i);\nmsgSent.add(tm.getText());\nproducer.send(tm);\nLOG.info(\"producer sent message: \" + tm.getText());\n}\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nlatch.await();\nassertEquals(1, msgRolledBack.size());\nassertEquals(1, msgRedelivered.size());\nLOG.info(\"msg RolledBack = \" + msgRolledBack.get(0));\nLOG.info(\"msg Redelivered = \" + msgRedelivered.get(0));\nassertEquals(msgRolledBack.get(0), msgRedelivered.get(0));\nassertEquals(numMessages, msgSent.size());\nassertEquals(numMessages, msgCommitted.size());\nassertEquals(msgSent, msgCommitted);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/449_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 169
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 117
                },
                {
                        "id": "test_logbench-o_data_1865",
                        "content": "@Test(timeout = 90000)\npublic void testDurableConsumerEnqueueCountWithZeroPrefetch() throws Exception {\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);\nConnection connection = connectionFactory.createConnection();\nconnection.setClientID(getClass().getName());\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createTopic(\"DurableTopic\");\nMessageConsumer consumer = session.createDurableSubscriber((Topic) destination, \"EnqueueSub\");\nfinal BrokerViewMBean brokerView = brokerService.getAdminView();\nObjectName subName = brokerView.getDurableTopicSubscribers()[0];\nfinal DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean) brokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);\nassertEquals(0, sub.getEnqueueCounter());\nassertEquals(0, sub.getDequeueCounter());\nassertEquals(0, sub.getPendingQueueSize());\nassertEquals(0, sub.getDispatchedCounter());\nassertEquals(0, sub.getDispatchedQueueSize());\nconsumer.close();\nMessageProducer producer = session.createProducer(destination);\nfor (int i = 0; i < 20; i++) {\nproducer.send(session.createMessage());\n}\nproducer.close();\nconsumer = session.createDurableSubscriber((Topic) destination, \"EnqueueSub\");\nassertTrue(\"Should be an Active Subscription\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn brokerView.getDurableTopicSubscribers().length == 1;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nassertTrue(\"Should all be dispatched\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn sub.getDispatchedCounter() == 20;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nassertEquals(20, sub.getEnqueueCounter());\nassertEquals(0, sub.getDequeueCounter());\nassertEquals(0, sub.getPendingQueueSize());\nassertEquals(20, sub.getDispatchedCounter());\nassertEquals(20, sub.getDispatchedQueueSize());\nLOG.info(\"Pending Queue Size with no receives: {}\", sub.getPendingQueueSize());\nassertNotNull(consumer.receive(1000));\nassertNotNull(consumer.receive(1000));\nconsumer.close();\nLOG.info(\"Pending Queue Size with two receives: {}\", sub.getPendingQueueSize());\nassertTrue(\"Should be an Active Subscription\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn brokerView.getInactiveDurableTopicSubscribers().length == 1;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nfinal DurableSubscriptionViewMBean inactive = (DurableSubscriptionViewMBean) brokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"Should all be dispatched\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn inactive.getDequeueCounter() == 2;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nassertEquals(20, inactive.getEnqueueCounter());\nassertEquals(2, inactive.getDequeueCounter());\nassertEquals(18, inactive.getPendingQueueSize());\nassertEquals(20, inactive.getDispatchedCounter());\nassertEquals(0, inactive.getDispatchedQueueSize());\nsession.close();\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ4656Test_testDurableConsumerEnqueueCountWithZeroPrefetch.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1864
                },
                {
                        "id": "pretrain_java_data_5972982",
                        "content": "//,temp,AMQ4656Test.java,91,185,temp,DurableSubscriptionOffline2Test.java,64,170\n//,3\npublic class xxx {\n@Test(timeout = 90000)\npublic void testDurableConsumerEnqueueCountWithZeroPrefetch() throws Exception {\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);\nConnection connection = connectionFactory.createConnection();\nconnection.setClientID(getClass().getName());\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createTopic(\"DurableTopic\");\nMessageConsumer consumer = session.createDurableSubscriber((Topic) destination, \"EnqueueSub\");\nfinal BrokerViewMBean brokerView = brokerService.getAdminView();\nObjectName subName = brokerView.getDurableTopicSubscribers()[0];\nfinal DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)\nbrokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);\nassertEquals(0, sub.getEnqueueCounter());\nassertEquals(0, sub.getDequeueCounter());\nassertEquals(0, sub.getPendingQueueSize());\nassertEquals(0, sub.getDispatchedCounter());\nassertEquals(0, sub.getDispatchedQueueSize());\nconsumer.close();\nMessageProducer producer = session.createProducer(destination);\nfor (int i = 0; i < 20; i++) {\nproducer.send(session.createMessage());\n}\nproducer.close();\nconsumer = session.createDurableSubscriber((Topic) destination, \"EnqueueSub\");\nassertTrue(\"Should be an Active Subscription\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn brokerView.getDurableTopicSubscribers().length == 1;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nassertTrue(\"Should all be dispatched\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn sub.getDispatchedCounter() == 20;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nassertEquals(20, sub.getEnqueueCounter());\nassertEquals(0, sub.getDequeueCounter());\nassertEquals(0, sub.getPendingQueueSize());\nassertEquals(20, sub.getDispatchedCounter());\nassertEquals(20, sub.getDispatchedQueueSize());\nLOG.info(\"Pending Queue Size with no receives: {}\", sub.getPendingQueueSize());\nassertNotNull(consumer.receive(1000));\nassertNotNull(consumer.receive(1000));\nconsumer.close();\nLOG.info(\"Pending Queue Size with two receives: {}\", sub.getPendingQueueSize());\nassertTrue(\"Should be an Active Subscription\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn brokerView.getInactiveDurableTopicSubscribers().length == 1;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nfinal DurableSubscriptionViewMBean inactive = (DurableSubscriptionViewMBean)\nbrokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"Should all be dispatched\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn inactive.getDequeueCounter() == 2;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nassertEquals(20, inactive.getEnqueueCounter());\nassertEquals(2, inactive.getDequeueCounter());\nassertEquals(18, inactive.getPendingQueueSize());\nassertEquals(20, inactive.getDispatchedCounter());\nassertEquals(0, inactive.getDispatchedQueueSize());\nsession.close();\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1769_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1864
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 118
                },
                {
                        "id": "test_logbench-o_data_1945",
                        "content": "@Test\npublic void testAddPropertyRefFromFileAndBeanFactory() throws Exception {\nSystem.setProperty(\"network.uri\", \"static:(tcp://localhost:8888)\");\nSystem.setProperty(\"props.base\", \"classpath:\");\nfinal String brokerConfig = \"SpringPropertyTestFileListBeanFactory-broker\";\napplyNewConfig(brokerConfig, \"emptyUpdatableConfig1000-spring-property-file-list-and-beanFactory\");\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\nObjectName objectName = new ObjectName(brokerService.getBrokerObjectName().toString() + RuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView = (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName, RuntimeConfigurationViewMBean.class, false);\nString propOfInterest = \"modified\";\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nassertNotEquals(\"unknown\", props.get(propOfInterest));\nassertEquals(\"our custom prop is applied\", \"isKing\", brokerService.getBrokerName());\napplyNewConfig(brokerConfig, \"spring-property-file-list-and-beanFactory-new-nc\", SLEEP);\nassertTrue(\"new network connectors\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 1 == brokerService.getNetworkConnectors().size();\n}\n}));\nassertEquals(\"our custom prop is applied\", \"isKing\", brokerService.getNetworkConnectors().get(0).getName());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_SpringBeanTest_testAddPropertyRefFromFileAndBeanFactory.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1944
                },
                {
                        "id": "pretrain_java_data_5927430",
                        "content": "//,temp,SpringBeanTest.java,146,183,temp,SpringBeanTest.java,119,144\n//,3\npublic class xxx {\n@Test\npublic void testAddPropertyRefFromFileAndBeanFactory() throws Exception {\nSystem.setProperty(\"network.uri\", \"static:(tcp://localhost:8888)\");\nSystem.setProperty(\"props.base\", \"classpath:\");\nfinal String brokerConfig = \"SpringPropertyTestFileListBeanFactory-broker\";\napplyNewConfig(brokerConfig, \"emptyUpdatableConfig1000-spring-property-file-list-and-beanFactory\");\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\nObjectName objectName =\nnew ObjectName(brokerService.getBrokerObjectName().toString() +\nRuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView =\n(RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,\nRuntimeConfigurationViewMBean.class, false);\nString propOfInterest = \"modified\";\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nassertNotEquals(\"unknown\", props.get(propOfInterest));\nassertEquals(\"our custom prop is applied\", \"isKing\", brokerService.getBrokerName());\napplyNewConfig(brokerConfig, \"spring-property-file-list-and-beanFactory-new-nc\", SLEEP);\nassertTrue(\"new network connectors\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 1 == brokerService.getNetworkConnectors().size();\n}\n}));\nassertEquals(\"our custom prop is applied\", \"isKing\", brokerService.getNetworkConnectors().get(0).getName());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1032_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1944
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 119
                },
                {
                        "id": "pretrain_java_data_5992233",
                        "content": "//,temp,MultipleTestsWithEmbeddedBrokerTest.java,39,47,temp,FilesystemBlobTest.java,44,56\n//,3\npublic class xxx {\n@Override\npublic void setUp() throws Exception {\nsuper.setUp();\n// replace \\ with / to let it work on windows too\nString fileUrl = \"file:///\" +tmpDir.replaceAll(\"\\\\\\\\\", \"/\");\nLOG.info(\"Using file: \" + fileUrl);\nbindAddress = \"vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=\" + fileUrl;\nconnectionFactory = createConnectionFactory();\nconnection = createConnection();\nconnection.start();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/625_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2911
                },
                {
                        "id": "test_logbench-o_data_2912",
                        "content": "@Override\npublic void setUp() throws Exception {\nsuper.setUp();\n// replace \\ with / to let it work on windows too\nString fileUrl = \"file:///\" + tmpDir.replaceAll(\"\\\\\\\\\", \"/\");\nLOG.info(\"Using file: \" + fileUrl);\nbindAddress = \"vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=\" + fileUrl;\nconnectionFactory = createConnectionFactory();\nconnection = createConnection();\nconnection.start();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_FilesystemBlobTest_setUp.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2911
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 120
                },
                {
                        "id": "pretrain_java_data_7405320",
                        "content": "<gh_stars>0\n//,temp,ConnectTest.java,139,178,temp,ConnectTest.java,92,137\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testJaasDualStopWithOpenConnection() throws Exception {\nbrokerService.setPlugins(new BrokerPlugin[]{new JaasDualAuthenticationPlugin()});\nbrokerService.addConnector(\"stomp://0.0.0.0:0?transport.closeAsync=false\");\nbrokerService.start();\nfinal CountDownLatch doneConnect = new CountDownLatch(1);\nfinal int listenPort = brokerService.getTransportConnectors().get(0).getConnectUri().getPort();\nThread t1 = new Thread() {\nStompConnection connection = new StompConnection();\n@Override\npublic void run() {\ntry {\nconnection.open(\"localhost\", listenPort);\nconnection.connect(\"system\", \"manager\");\ndoneConnect.countDown();\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 1 == brokerService.getTransportConnectors().get(0).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));\nassertTrue(\"connected on time\", doneConnect.await(5, TimeUnit.SECONDS));\nbrokerService.stop();\n// server socket should be available after stop\nServerSocket socket = ServerSocketFactory.getDefault().createServerSocket();\nsocket.setReuseAddress(true);\nInetAddress address = InetAddress.getLocalHost();\nsocket.bind(new InetSocketAddress(address, listenPort));\nLOG.info(\"bound address: \" + socket);\nsocket.close();\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/987_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1254
                },
                {
                        "id": "test_logbench-o_data_1255",
                        "content": "@Test(timeout = 60000)\npublic void testJaasDualStopWithOpenConnection() throws Exception {\nbrokerService.setPlugins(new BrokerPlugin[] { new JaasDualAuthenticationPlugin() });\nbrokerService.addConnector(\"stomp://0.0.0.0:0?transport.closeAsync=false\");\nbrokerService.start();\nfinal CountDownLatch doneConnect = new CountDownLatch(1);\nfinal int listenPort = brokerService.getTransportConnectors().get(0).getConnectUri().getPort();\nThread t1 = new Thread() {\nStompConnection connection = new StompConnection();\n@Override\npublic void run() {\ntry {\nconnection.open(\"localhost\", listenPort);\nconnection.connect(\"system\", \"manager\");\ndoneConnect.countDown();\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 1 == brokerService.getTransportConnectors().get(0).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));\nassertTrue(\"connected on time\", doneConnect.await(5, TimeUnit.SECONDS));\nbrokerService.stop();\n// server socket should be available after stop\nServerSocket socket = ServerSocketFactory.getDefault().createServerSocket();\nsocket.setReuseAddress(true);\nInetAddress address = InetAddress.getLocalHost();\nsocket.bind(new InetSocketAddress(address, listenPort));\nLOG.info(\"bound address: \" + socket);\nsocket.close();\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ConnectTest_testJaasDualStopWithOpenConnection.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1254
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 121
                },
                {
                        "id": "pretrain_java_data_7501451",
                        "content": "<gh_stars>0\n//,temp,AMQ4887Test.java,123,163,temp,AMQ4887Test.java,64,104\n//,2\npublic class xxx {\npublic void doTestBytesMessageSetPropertyBeforeCopy(Connection connection) throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(name.toString());\nMessageConsumer consumer = session.createConsumer(destination);\nMessageProducer producer = session.createProducer(destination);\nBytesMessage message = session.createBytesMessage();\nfor (int i=0; i < ITERATIONS; i++) {\nlong sendTime = System.currentTimeMillis();\nmessage.setLongProperty(\"sendTime\", sendTime);\nproducer.send(message);\nLOG.debug(\"Receiving message \" + i);\nMessage receivedMessage =  consumer.receive(5000);\nassertNotNull(\"On message \" + i, receivedMessage);\nassertTrue(\"On message \" + i, receivedMessage instanceof BytesMessage);\nBytesMessage receivedBytesMessage = (BytesMessage) receivedMessage;\nint numElements = 0;\ntry {\nwhile (true) {\nreceivedBytesMessage.readBoolean();\nnumElements++;\n}\n} catch (Exception ex) {\n}\nLOG.info(\"Iteration [{}]: Received Message contained {} boolean values.\", i, numElements);\nassertEquals(i, numElements);\nlong receivedSendTime = receivedBytesMessage.getLongProperty(\"sendTime\");\nassertEquals(\"On message \" + i, receivedSendTime, sendTime);\n// Add a new bool value on each iteration.\nmessage.writeBoolean(true);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1203_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1444
                },
                {
                        "id": "test_logbench-o_data_1445",
                        "content": "public void doTestBytesMessageSetPropertyBeforeCopy(Connection connection) throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(name.toString());\nMessageConsumer consumer = session.createConsumer(destination);\nMessageProducer producer = session.createProducer(destination);\nBytesMessage message = session.createBytesMessage();\nfor (int i = 0; i < ITERATIONS; i++) {\nlong sendTime = System.currentTimeMillis();\nmessage.setLongProperty(\"sendTime\", sendTime);\nproducer.send(message);\nLOG.debug(\"Receiving message \" + i);\nMessage receivedMessage = consumer.receive(5000);\nassertNotNull(\"On message \" + i, receivedMessage);\nassertTrue(\"On message \" + i, receivedMessage instanceof BytesMessage);\nBytesMessage receivedBytesMessage = (BytesMessage) receivedMessage;\nint numElements = 0;\ntry {\nwhile (true) {\nreceivedBytesMessage.readBoolean();\nnumElements++;\n}\n} catch (Exception ex) {\n}\nLOG.info(\"Iteration [{}]: Received Message contained {} boolean values.\", i, numElements);\nassertEquals(i, numElements);\nlong receivedSendTime = receivedBytesMessage.getLongProperty(\"sendTime\");\nassertEquals(\"On message \" + i, receivedSendTime, sendTime);\n// Add a new bool value on each iteration.\nmessage.writeBoolean(true);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ4887Test_doTestBytesMessageSetPropertyBeforeCopy.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1444
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 122
                },
                {
                        "id": "pretrain_java_data_7501451",
                        "content": "<gh_stars>0\n//,temp,AMQ4887Test.java,123,163,temp,AMQ4887Test.java,64,104\n//,2\npublic class xxx {\npublic void doTestBytesMessageSetPropertyBeforeCopy(Connection connection) throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(name.toString());\nMessageConsumer consumer = session.createConsumer(destination);\nMessageProducer producer = session.createProducer(destination);\nBytesMessage message = session.createBytesMessage();\nfor (int i=0; i < ITERATIONS; i++) {\nlong sendTime = System.currentTimeMillis();\nmessage.setLongProperty(\"sendTime\", sendTime);\nproducer.send(message);\nLOG.debug(\"Receiving message \" + i);\nMessage receivedMessage =  consumer.receive(5000);\nassertNotNull(\"On message \" + i, receivedMessage);\nassertTrue(\"On message \" + i, receivedMessage instanceof BytesMessage);\nBytesMessage receivedBytesMessage = (BytesMessage) receivedMessage;\nint numElements = 0;\ntry {\nwhile (true) {\nreceivedBytesMessage.readBoolean();\nnumElements++;\n}\n} catch (Exception ex) {\n}\nLOG.info(\"Iteration [{}]: Received Message contained {} boolean values.\", i, numElements);\nassertEquals(i, numElements);\nlong receivedSendTime = receivedBytesMessage.getLongProperty(\"sendTime\");\nassertEquals(\"On message \" + i, receivedSendTime, sendTime);\n// Add a new bool value on each iteration.\nmessage.writeBoolean(true);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1203_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1444
                },
                {
                        "id": "test_logbench-o_data_2213",
                        "content": "public void doTestStreamMessageSetPropertyBeforeCopy(Connection connection) throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(name.toString());\nMessageConsumer consumer = session.createConsumer(destination);\nMessageProducer producer = session.createProducer(destination);\nStreamMessage message = session.createStreamMessage();\nfor (int i = 0; i < ITERATIONS; i++) {\nlong sendTime = System.currentTimeMillis();\nmessage.setLongProperty(\"sendTime\", sendTime);\nproducer.send(message);\nLOG.debug(\"Receiving message \" + i);\nMessage receivedMessage = consumer.receive(5000);\nassertNotNull(\"On message \" + i, receivedMessage);\nassertTrue(\"On message \" + i, receivedMessage instanceof StreamMessage);\nStreamMessage receivedStreamMessage = (StreamMessage) receivedMessage;\nint numElements = 0;\ntry {\nwhile (true) {\nreceivedStreamMessage.readBoolean();\nnumElements++;\n}\n} catch (Exception ex) {\n}\nLOG.info(\"Iteration [{}]: Received Message contained {} boolean values.\", i, numElements);\nassertEquals(i, numElements);\nlong receivedSendTime = receivedStreamMessage.getLongProperty(\"sendTime\");\nassertEquals(\"On message \" + i, receivedSendTime, sendTime);\n// Add a new bool value on each iteration.\nmessage.writeBoolean(true);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ4887Test_doTestStreamMessageSetPropertyBeforeCopy.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1444
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 123
                },
                {
                        "id": "pretrain_java_data_7449500",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,ConfigTest.java,297,318,temp,JDBCConfigTest.java,47,73\n//,3\npublic class xxx {\n@Test\npublic void testJdbcConfig() throws Exception {\nFile journalFile = new File(JOURNAL_ROOT + \"testJDBCConfig/journal\");\nrecursiveDelete(journalFile);\nFile derbyFile = new File(DERBY_ROOT + \"testJDBCConfig/derbydb\"); // Default\nrecursiveDelete(derbyFile);\nBrokerService broker;\nbroker = createBroker(new FileSystemResource(CONF_ROOT + \"jdbc-example.xml\"));\ntry {\nassertEquals(\"Broker Config Error (brokerName)\", \"brokerJdbcConfigTest\", broker.getBrokerName());\nPersistenceAdapter adapter = broker.getPersistenceAdapter();\nassertTrue(\"Should have created a jdbc persistence adapter\", adapter instanceof JDBCPersistenceAdapter);\nassertEquals(\"JDBC Adapter Config Error (cleanupPeriod)\", 60000, ((JDBCPersistenceAdapter) adapter).getCleanupPeriod());\nassertTrue(\"Should have created an EmbeddedDataSource\", ((JDBCPersistenceAdapter) adapter).getDataSource() instanceof EmbeddedDataSource);\nassertTrue(\"Should have created a DefaultWireFormat\", ((JDBCPersistenceAdapter) adapter).getWireFormat() instanceof ObjectStreamWireFormat);\nLOG.info(\"Success\");\n} finally {\nif (broker != null) {\nbroker.stop();\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/797_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2100
                },
                {
                        "id": "test_logbench-o_data_2101",
                        "content": "/*\n* This tests creating a jdbc persistence adapter using xbeans-spring\n*/\n@Test\npublic void testJdbcConfig() throws Exception {\nFile journalFile = new File(JOURNAL_ROOT + \"testJDBCConfig/journal\");\nrecursiveDelete(journalFile);\n// Default\nFile derbyFile = new File(DERBY_ROOT + \"testJDBCConfig/derbydb\");\nrecursiveDelete(derbyFile);\nBrokerService broker;\nbroker = createBroker(new FileSystemResource(CONF_ROOT + \"jdbc-example.xml\"));\ntry {\nassertEquals(\"Broker Config Error (brokerName)\", \"brokerJdbcConfigTest\", broker.getBrokerName());\nPersistenceAdapter adapter = broker.getPersistenceAdapter();\nassertTrue(\"Should have created a jdbc persistence adapter\", adapter instanceof JDBCPersistenceAdapter);\nassertEquals(\"JDBC Adapter Config Error (cleanupPeriod)\", 60000, ((JDBCPersistenceAdapter) adapter).getCleanupPeriod());\nassertTrue(\"Should have created an EmbeddedDataSource\", ((JDBCPersistenceAdapter) adapter).getDataSource() instanceof EmbeddedDataSource);\nassertTrue(\"Should have created a DefaultWireFormat\", ((JDBCPersistenceAdapter) adapter).getWireFormat() instanceof ObjectStreamWireFormat);\nLOG.info(\"Success\");\n} finally {\nif (broker != null) {\nbroker.stop();\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JDBCConfigTest_testJdbcConfig.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2100
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 124
                },
                {
                        "id": "test_logbench-o_data_2864",
                        "content": "@Override\npublic int prepareTransaction(final ConnectionContext context, TransactionId xid) throws Exception {\nint result = super.prepareTransaction(context, xid);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\nreturn result;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_FailoverXATransactionTest_prepareTransaction.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2863
                },
                {
                        "id": "pretrain_java_data_9000158",
                        "content": "//,temp,FailoverConsumerUnconsumedTest.java,246,263,temp,FailoverXATransactionTest.java,102,121\n//,3\npublic class xxx {\n@Override\npublic int prepareTransaction(final ConnectionContext context,\nTransactionId xid) throws Exception {\nint result = super.prepareTransaction(context, xid);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\nreturn result;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/882_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2863
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 125
                },
                {
                        "id": "pretrain_java_data_9083869",
                        "content": "package org.jivesoftware.openfire.net;\nimport org.jivesoftware.openfire.server.RemoteServerManager;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.AbstractMap;\nimport java.util.List;\nimport java.util.Map;\n/**\n* Utility class to generate Socket instances.\n*\n* @author <NAME>, <EMAIL>\n*/\npublic class SocketUtil\n{\nprivate final static Logger Log = LoggerFactory.getLogger( SocketUtil.class );\n/**\n* Creates a socket connection to an XMPP domain.\n*\n* This implementation uses DNS SRV records to find a list of remote hosts for the XMPP domain (as implemented by\n* {@link DNSUtil#resolveXMPPDomain(String, int)}. It then iteratively tries to create a socket connection to each\n* of them, until one socket connection succeeds.\n*\n* Either the connected Socket instance is returned, or null if no connection could be established.\n*\n* Note that this method blocks while performing network IO. The timeout as defined by\n* {@link RemoteServerManager#getSocketTimeout()} is observed.\n*\n* @param xmppDomain The XMPP domain to connect to.\n* @param port The port to connect to when DNS resolution fails.\n* @return a Socket instance that is connected, or null.\n* @see DNSUtil#resolveXMPPDomain(String, int)\n*/\npublic static Map.Entry<Socket, Boolean> createSocketToXmppDomain( String xmppDomain, int port )\n{\nLog.debug( \"Creating a socket connection to XMPP domain '{}' ...\", xmppDomain );\nLog.debug( \"Use DNS to resolve remote hosts for the provided XMPP domain '{}' (default port: {}) ...\", xmppDomain, port );\nfinal List<DNSUtil.HostAddress> remoteHosts = DNSUtil.resolveXMPPDomain( xmppDomain, port );\nLog.debug( \"Found {} host(s) for XMPP domain '{}'.\", remoteHosts.size(), xmppDomain );\nremoteHosts.forEach( remoteHost -> Log.debug( \"- {} ({})\", remoteHost.toString(), (remoteHost.isDirectTLS() ? \"direct TLS\" : \"no direct TLS\" ) ) );\nSocket socket = null;\nfinal int socketTimeout = RemoteServerManager.getSocketTimeout();\nfor ( DNSUtil.HostAddress remoteHost : remoteHosts )\n{\nfinal String realHostname = remoteHost.getHost();\nfinal int realPort = remoteHost.getPort();\nfinal boolean directTLS = remoteHost.isDirectTLS();\ntry\n{\n// (re)initialize the socket.\nsocket = new Socket();\nLog.debug( \"Trying to create socket connection to XMPP domain '{}' using remote host: {}:{} (blocks up to {} ms) ...\", xmppDomain, realHostname, realPort, socketTimeout );\nsocket.connect( new InetSocketAddress( realHostname, realPort ), socketTimeout );\nLog.debug( \"Successfully created socket connection to XMPP domain '{}' using remote host: {}:{}!\", xmppDomain, realHostname, realPort );\nreturn new AbstractMap.SimpleEntry<>(socket, directTLS);\n}\ncatch ( Exception e )\n{\nLog.debug( \"An exception occurred while trying to create a socket connection to XMPP domain '{}' using remote host {}:{}\", xmppDomain, realHostname, realPort, e );\nLog.warn( \"Unable to create a socket connection to XMPP domain '{}' using remote host: {}:{}. Cause: {} (a full stacktrace is logged on debug level)\", xmppDomain, realHostname, realPort, e.getMessage() );\ntry\n{\nif ( socket != null )\n{\nsocket.close();\nsocket = null;\n}\n}\ncatch ( IOException ex )\n{\nLog.debug( \"An additional exception occurred while trying to close a socket when creating a connection to {}:{} failed.\", realHostname, realPort, ex );\n}\n}\n}\nLog.warn( \"Unable to create a socket connection to XMPP domain '{}': Unable to connect to any of its remote hosts.\", xmppDomain );\nreturn null;\n}\n}",
                        "max_stars_repo_path": "xmppserver/src/main/java/org/jivesoftware/openfire/net/SocketUtil.java",
                        "max_stars_repo_name": "tenaciousRas/Openfire",
                        "max_stars_count": 2496,
                        "__cluster__": 478
                },
                {
                        "id": "test_logbench-o_data_479",
                        "content": "/**\n* Creates a socket connection to an XMPP domain.\n*\n* This implementation uses DNS SRV records to find a list of remote hosts for the XMPP domain (as implemented by\n* {@link DNSUtil#resolveXMPPDomain(String, int)}. It then iteratively tries to create a socket connection to each\n* of them, until one socket connection succeeds.\n*\n* Either the connected Socket instance is returned, or null if no connection could be established.\n*\n* Note that this method blocks while performing network IO. The timeout as defined by\n* {@link RemoteServerManager#getSocketTimeout()} is observed.\n*\n* @param xmppDomain The XMPP domain to connect to.\n* @param port The port to connect to when DNS resolution fails.\n* @return a Socket instance that is connected, or null.\n* @see DNSUtil#resolveXMPPDomain(String, int)\n*/\npublic static Map.Entry<Socket, Boolean> createSocketToXmppDomain(String xmppDomain, int port) {\nLog.debug(\"Creating a socket connection to XMPP domain '{}' ...\", xmppDomain);\nLog.debug(\"Use DNS to resolve remote hosts for the provided XMPP domain '{}' (default port: {}) ...\", xmppDomain, port);\nfinal List<DNSUtil.HostAddress> remoteHosts = DNSUtil.resolveXMPPDomain(xmppDomain, port);\nLog.debug(\"Found {} host(s) for XMPP domain '{}'.\", remoteHosts.size(), xmppDomain);\nremoteHosts.forEach(remoteHost -> Log.debug(\"- {} ({})\", remoteHost.toString(), (remoteHost.isDirectTLS() ? \"direct TLS\" : \"no direct TLS\")));\nSocket socket = null;\nfinal int socketTimeout = RemoteServerManager.getSocketTimeout();\nfor (DNSUtil.HostAddress remoteHost : remoteHosts) {\nfinal String realHostname = remoteHost.getHost();\nfinal int realPort = remoteHost.getPort();\nfinal boolean directTLS = remoteHost.isDirectTLS();\nif (!JiveGlobals.getBooleanProperty(ConnectionSettings.Server.ENABLE_OLD_SSLPORT, true) && directTLS) {\nLog.debug(\"Skipping directTLS host, as we're ourselves not accepting directTLS S2S\");\ncontinue;\n}\nif (!JiveGlobals.getBooleanProperty(ConnectionSettings.Server.SOCKET_ACTIVE, true) && !directTLS) {\nLog.debug(\"Skipping non direct TLS host, as we're ourselves not accepting non direct S2S\");\ncontinue;\n}\ntry {\n// (re)initialize the socket.\nsocket = new Socket();\nLog.debug(\"Trying to create socket connection to XMPP domain '{}' using remote host: {}:{} (blocks up to {} ms) ...\", xmppDomain, realHostname, realPort, socketTimeout);\nsocket.connect(new InetSocketAddress(realHostname, realPort), socketTimeout);\nLog.debug(\"Successfully created socket connection to XMPP domain '{}' using remote host: {}:{}!\", xmppDomain, realHostname, realPort);\nreturn new AbstractMap.SimpleEntry<>(socket, directTLS);\n} catch (Exception e) {\nLog.debug(\"An exception occurred while trying to create a socket connection to XMPP domain '{}' using remote host {}:{}\", xmppDomain, realHostname, realPort, e);\nLog.warn(\"Unable to create a socket connection to XMPP domain '{}' using remote host: {}:{}. Cause: {} (a full stacktrace is logged on debug level)\", xmppDomain, realHostname, realPort, e.getMessage());\ntry {\nif (socket != null) {\nsocket.close();\nsocket = null;\n}\n} catch (IOException ex) {\nLog.debug(\"An additional exception occurred while trying to close a socket when creating a connection to {}:{} failed.\", realHostname, realPort, ex);\n}\n}\n}\nLog.warn(\"Unable to create a socket connection to XMPP domain '{}': Unable to connect to any of its remote hosts.\", xmppDomain);\nreturn null;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/openfire_SocketUtil_createSocketToXmppDomain.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 478
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 126
                },
                {
                        "id": "test_logbench-o_data_2795",
                        "content": "@SuppressWarnings(\"rawtypes\")\nprivate void doTestBrowsing(int messagesToSend) throws Exception {\nConnection connection = factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(destinationName);\nsendMessages(messagesToSend);\nQueueBrowser browser = session.createBrowser(queue);\nEnumeration enumeration = browser.getEnumeration();\nint received = 0;\nwhile (enumeration.hasMoreElements()) {\nMessage m = (Message) enumeration.nextElement();\nassertNotNull(m);\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"Browsed Message: {}\", m.getJMSMessageID());\n}\nreceived++;\nif (received > messagesToSend) {\nbreak;\n}\n}\nbrowser.close();\nassertEquals(messagesToSend, received);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ4487Test_doTestBrowsing.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2794
                },
                {
                        "id": "pretrain_java_data_9104285",
                        "content": "//,temp,AMQ4487Test.java,104,134,temp,JmsQueueBrowserTest.java,303,337\n//,3\npublic class xxx {\n@SuppressWarnings(\"rawtypes\")\nprivate void doTestBrowsing(int messagesToSend) throws Exception {\nConnection connection = factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(destinationName);\nsendMessages(messagesToSend);\nQueueBrowser browser = session.createBrowser(queue);\nEnumeration enumeration = browser.getEnumeration();\nint received = 0;\nwhile (enumeration.hasMoreElements()) {\nMessage m = (Message) enumeration.nextElement();\nassertNotNull(m);\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"Browsed Message: {}\", m.getJMSMessageID());\n}\nreceived++;\nif (received > messagesToSend) {\nbreak;\n}\n}\nbrowser.close();\nassertEquals(messagesToSend, received);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/295_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2794
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 127
                },
                {
                        "id": "test_logbench-o_data_2781",
                        "content": "@Test\npublic void test() throws Exception {\nActiveMQQueue compositeSendTo = new ActiveMQQueue(\"one,two,three\");\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);\nconnectionFactory.setWatchTopicAdvisories(false);\nConnection connection = connectionFactory.createConnection();\nconnection.start();\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createProducer(compositeSendTo).send(session.createTextMessage(\"Bing\"));\nfor (ActiveMQDestination dest : compositeSendTo.getCompositeDestinations()) {\nMessage message = session.createConsumer(dest).receive(5000);\nLOG.info(\"From: \" + dest + \", \" + message.getJMSDestination());\nassertNotNull(\"got message from: \" + dest, message);\n}\n} finally {\nconnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ5863CompositePublishTest_test.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2780
                },
                {
                        "id": "pretrain_java_data_15566070",
                        "content": "//,temp,AMQ5863CompositePublishTest.java,86,110,temp,JmsSendReceiveStressTest.java,124,140\n//,3\npublic class xxx {\n@Test\npublic void test() throws Exception {\nActiveMQQueue compositeSendTo = new ActiveMQQueue(\"one,two,three\");\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);\nconnectionFactory.setWatchTopicAdvisories(false);\nConnection connection = connectionFactory.createConnection();\nconnection.start();\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createProducer(compositeSendTo).send(session.createTextMessage(\"Bing\"));\nfor (ActiveMQDestination dest : compositeSendTo.getCompositeDestinations()) {\nMessage message = session.createConsumer(dest).receive(5000);\nLOG.info(\"From: \" + dest + \", \" + message.getJMSDestination());\nassertNotNull(\"got message from: \" + dest, message);\n}\n} finally {\nconnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/399_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2780
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 128
                },
                {
                        "id": "pretrain_java_data_1229539",
                        "content": "package org.gluu.oxauth.model.util;\nimport org.gluu.oxauth.model.crypto.signature.SignatureAlgorithm;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n/**\n* @author <NAME>\n*/\npublic class HashUtil {\nprivate final static Logger log = LoggerFactory.getLogger(HashUtil.class);\nprivate HashUtil() {\n}\npublic static String getHash(String input, SignatureAlgorithm signatureAlgorithm) {\ntry {\nfinal byte[] digest;\nif (signatureAlgorithm == SignatureAlgorithm.HS256 ||\nsignatureAlgorithm == SignatureAlgorithm.RS256 ||\nsignatureAlgorithm == SignatureAlgorithm.PS256 ||\nsignatureAlgorithm == SignatureAlgorithm.ES256) {\ndigest = JwtUtil.getMessageDigestSHA256(input);\n} else if (signatureAlgorithm == SignatureAlgorithm.HS384 ||\nsignatureAlgorithm == SignatureAlgorithm.RS384 ||\nsignatureAlgorithm == SignatureAlgorithm.PS384 ||\nsignatureAlgorithm == SignatureAlgorithm.ES384) {\ndigest = JwtUtil.getMessageDigestSHA384(input);\n} else if (signatureAlgorithm == SignatureAlgorithm.HS512 ||\nsignatureAlgorithm == SignatureAlgorithm.RS512 ||\nsignatureAlgorithm == SignatureAlgorithm.PS512 ||\nsignatureAlgorithm == SignatureAlgorithm.ES512) {\ndigest = JwtUtil.getMessageDigestSHA512(input);\n} else { // Default\ndigest = JwtUtil.getMessageDigestSHA256(input);\n}\nif (digest != null) {\nbyte[] lefMostHalf = new byte[digest.length / 2];\nSystem.arraycopy(digest, 0, lefMostHalf, 0, lefMostHalf.length);\nreturn Base64Util.base64urlencode(lefMostHalf);\n}\n} catch (Exception e) {\nlog.error(\"Failed to calculate hash.\", e);\n}\nreturn null;\n}\n}",
                        "max_stars_repo_path": "Model/src/main/java/org/gluu/oxauth/model/util/HashUtil.java",
                        "max_stars_repo_name": "uprightech/oxAuth",
                        "max_stars_count": 380,
                        "__cluster__": 3551
                },
                {
                        "id": "test_logbench-o_data_3552",
                        "content": "public static String getHash(String input, SignatureAlgorithm signatureAlgorithm) {\ntry {\nfinal byte[] digest;\nif (signatureAlgorithm == SignatureAlgorithm.HS256 || signatureAlgorithm == SignatureAlgorithm.RS256 || signatureAlgorithm == SignatureAlgorithm.PS256 || signatureAlgorithm == SignatureAlgorithm.ES256) {\ndigest = JwtUtil.getMessageDigestSHA256(input);\n} else if (signatureAlgorithm == SignatureAlgorithm.HS384 || signatureAlgorithm == SignatureAlgorithm.RS384 || signatureAlgorithm == SignatureAlgorithm.PS384 || signatureAlgorithm == SignatureAlgorithm.ES384) {\ndigest = JwtUtil.getMessageDigestSHA384(input);\n} else if (signatureAlgorithm == SignatureAlgorithm.HS512 || signatureAlgorithm == SignatureAlgorithm.RS512 || signatureAlgorithm == SignatureAlgorithm.PS512 || signatureAlgorithm == SignatureAlgorithm.ES512) {\ndigest = JwtUtil.getMessageDigestSHA512(input);\n} else {\n// Default\ndigest = JwtUtil.getMessageDigestSHA256(input);\n}\nif (digest != null) {\nbyte[] lefMostHalf = new byte[digest.length / 2];\nSystem.arraycopy(digest, 0, lefMostHalf, 0, lefMostHalf.length);\nreturn Base64Util.base64urlencode(lefMostHalf);\n}\n} catch (Exception e) {\nlog.error(\"Failed to calculate hash.\", e);\n}\nreturn null;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/oxauth_HashUtil_getHash.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3551
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 129
                },
                {
                        "id": "test_logbench-o_data_1217",
                        "content": "/**\n* Sends and consumes the messages.\n*\n* @throws Exception\n*/\npublic void testRedeliverNewSession() throws Exception {\nString text = \"TEST: \" + System.currentTimeMillis();\nMessage sendMessage = session.createTextMessage(text);\nif (verbose) {\nLOG.info(\"About to send a message: \" + sendMessage + \" with text: \" + text);\n}\nproducer.send(producerDestination, sendMessage);\n// receive but don't acknowledge\nMessage unackMessage = consumer.receive(1000);\nassertNotNull(unackMessage);\nString unackId = unackMessage.getJMSMessageID();\nassertEquals(((TextMessage) unackMessage).getText(), text);\nassertFalse(unackMessage.getJMSRedelivered());\nassertEquals(unackMessage.getIntProperty(\"JMSXDeliveryCount\"), 1);\nconsumeSession.close();\nconsumer.close();\n// receive then acknowledge\nconsumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nconsumer = createConsumer();\nMessage ackMessage = consumer.receive(1000);\nassertNotNull(ackMessage);\nackMessage.acknowledge();\nString ackId = ackMessage.getJMSMessageID();\nassertEquals(((TextMessage) ackMessage).getText(), text);\nassertTrue(ackMessage.getJMSRedelivered());\nassertEquals(ackMessage.getIntProperty(\"JMSXDeliveryCount\"), 2);\nassertEquals(unackId, ackId);\nconsumeSession.close();\nconsumer.close();\nconsumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nconsumer = createConsumer();\nassertNull(consumer.receive(1000));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JMSDurableTopicRedeliverTest_testRedeliverNewSession.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1216
                },
                {
                        "id": "pretrain_java_data_2929776",
                        "content": "//,temp,JMSDurableTopicRedeliverTest.java,43,79,temp,JmsTopicRedeliverTest.java,122,151\n//,3\npublic class xxx {\npublic void testRedeliverNewSession() throws Exception {\nString text = \"TEST: \" + System.currentTimeMillis();\nMessage sendMessage = session.createTextMessage(text);\nif (verbose) {\nLOG.info(\"About to send a message: \" + sendMessage + \" with text: \" + text);\n}\nproducer.send(producerDestination, sendMessage);\n// receive but don't acknowledge\nMessage unackMessage = consumer.receive(1000);\nassertNotNull(unackMessage);\nString unackId = unackMessage.getJMSMessageID();\nassertEquals(((TextMessage)unackMessage).getText(), text);\nassertFalse(unackMessage.getJMSRedelivered());\nassertEquals(unackMessage.getIntProperty(\"JMSXDeliveryCount\"), 1);\nconsumeSession.close();\nconsumer.close();\n// receive then acknowledge\nconsumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nconsumer = createConsumer();\nMessage ackMessage = consumer.receive(1000);\nassertNotNull(ackMessage);\nackMessage.acknowledge();\nString ackId = ackMessage.getJMSMessageID();\nassertEquals(((TextMessage)ackMessage).getText(), text);\nassertTrue(ackMessage.getJMSRedelivered());\nassertEquals(ackMessage.getIntProperty(\"JMSXDeliveryCount\"), 2);\nassertEquals(unackId, ackId);\nconsumeSession.close();\nconsumer.close();\nconsumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nconsumer = createConsumer();\nassertNull(consumer.receive(1000));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1682_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1216
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 130
                },
                {
                        "id": "test_logbench-o_data_676",
                        "content": "private void sendTestMessages(int numMessages) throws JMSException {\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(queue);\nfinal TextMessage textMessage = session.createTextMessage();\ntextMessage.setText(\"Message\");\nfor (int i = 1; i <= numMessages; i++) {\nproducer.send(textMessage);\nif (i % 1000 == 0) {\nLOG.info(\"Sent {} messages\", i);\nsession.commit();\n}\n}\nsession.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ6293Test_sendTestMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 675
                },
                {
                        "id": "pretrain_java_data_17333433",
                        "content": "<gh_stars>0\n//,temp,NumberOfDestinationsTest.java,48,67,temp,AMQ6293Test.java,134,149\n//,3\npublic class xxx {\nprivate void sendTestMessages(int numMessages) throws JMSException {\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(queue);\nfinal TextMessage textMessage = session.createTextMessage();\ntextMessage.setText(\"Message\");\nfor (int i = 1; i <= numMessages; i++) {\nproducer.send(textMessage);\nif (i % 1000 == 0) {\nLOG.info(\"Sent {} messages\", i);\nsession.commit();\n}\n}\nsession.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/374_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 675
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 131
                },
                {
                        "id": "test_logbench-o_data_1198",
                        "content": "@Test(timeout = 60000)\npublic void testTemporaryTopicLeakAfterConnectionClose() throws Exception {\nConnection pooledConnection = null;\nSession session = null;\nTopic tempTopic = null;\nfor (int i = 0; i < 2; i++) {\npooledConnection = pooledFactory.createConnection();\nsession = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\ntempTopic = session.createTemporaryTopic();\nLOG.info(\"Created topic named: \" + tempTopic.getTopicName());\npooledConnection.close();\n}\nassertEquals(0, countBrokerTemporaryTopics());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_PooledConnectionFactoryWithTemporaryDestinationsTest_testTemporaryTopicLeakAfterConnectionClose.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1173
                },
                {
                        "id": "pretrain_java_data_18967552",
                        "content": "<gh_stars>0\n//,temp,PooledConnectionFactoryWithTemporaryDestinationsTest.java,123,139,temp,PooledConnectionFactoryWithTemporaryDestinationsTest.java,107,121\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testTemporaryTopicLeakAfterConnectionClose() throws Exception {\nConnection pooledConnection = null;\nSession session = null;\nTopic tempTopic = null;\nfor (int i = 0; i < 2; i++) {\npooledConnection = pooledFactory.createConnection();\nsession = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\ntempTopic = session.createTemporaryTopic();\nLOG.info(\"Created topic named: \" + tempTopic.getTopicName());\npooledConnection.close();\n}\nassertEquals(0, countBrokerTemporaryTopics());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/146_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1173
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 132
                },
                {
                        "id": "test_logbench-o_data_2596",
                        "content": "/**\n* Creates a durable topic subscription, checks that it is propagated\n* in the broker network, removes the subscription and checks that\n* the subscription is removed from remote broker as well.\n*\n* @throws Exception\n*/\npublic void testDurableSubNetwork() throws Exception {\nLOG.info(\"testDurableSubNetwork started.\");\n// create durable sub\nActiveMQConnectionFactory fact = new ActiveMQConnectionFactory(connector.getConnectUri().toString());\nConnection conn = fact.createConnection();\nconn.setClientID(\"clientID1\");\nSession session = conn.createSession(false, 1);\nDestination dest = session.createTopic(topicName);\nTopicSubscriber sub = session.createDurableSubscriber((Topic) dest, subName);\nLOG.info(\"Durable subscription of name \" + subName + \"created.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\n// raise an error if not found\nassertTrue(foundSubInLocalBroker(subName));\nassertTrue(foundSubInRemoteBrokerByTopicName(topicName));\n// unsubscribe from durable sub\nsub.close();\nsession.unsubscribe(subName);\nLOG.info(\"Unsubscribed from durable subscription.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\n// raise an error if its not removed from both brokers\nassertFalse(foundSubInLocalBroker(subName));\nassertFalse(\"Durable subscription not unregistered on remote broker\", foundSubInRemoteBrokerByTopicName(topicName));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DurableSubInBrokerNetworkTest_testDurableSubNetwork.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2595
                },
                {
                        "id": "pretrain_java_data_4449714",
                        "content": "//,temp,DurableSubInBrokerNetworkTest.java,118,165,temp,DurableSubInBrokerNetworkTest.java,81,116\n//,3\npublic class xxx {\npublic void testDurableSubNetwork() throws Exception {\nLOG.info(\"testDurableSubNetwork started.\");\n// create durable sub\nActiveMQConnectionFactory fact = new ActiveMQConnectionFactory(connector.getConnectUri().toString());\nConnection conn = fact.createConnection();\nconn.setClientID(\"clientID1\");\nSession session = conn.createSession(false, 1);\nDestination dest = session.createTopic(topicName);\nTopicSubscriber sub = session.createDurableSubscriber((Topic)dest, subName);\nLOG.info(\"Durable subscription of name \" + subName + \"created.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\n// raise an error if not found\nassertTrue(foundSubInLocalBroker(subName));\nassertTrue(foundSubInRemoteBrokerByTopicName(topicName));\n// unsubscribe from durable sub\nsub.close();\nsession.unsubscribe(subName);\nLOG.info(\"Unsubscribed from durable subscription.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\n// raise an error if its not removed from both brokers\nassertFalse(foundSubInLocalBroker(subName));\nassertFalse(\"Durable subscription not unregistered on remote broker\",\nfoundSubInRemoteBrokerByTopicName(topicName));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/923_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2595
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 133
                },
                {
                        "id": "test_logbench-o_data_1449",
                        "content": "protected int extractProducerCountFromMessage(Message message, int count) {\ntry {\nObject value = message.getObjectProperty(\"producerCount\");\nif (value instanceof Number) {\nNumber n = (Number) value;\nreturn n.intValue();\n}\nLOG.warn(\"No producerCount header available on the message: \" + message);\n} catch (Exception e) {\nLOG.warn(\"Failed to extract producerCount from message: \" + message + \".Reason: \" + e, e);\n}\nreturn count;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ProducerEventSource_extractProducerCountFromMessage.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1448
                },
                {
                        "id": "pretrain_java_data_6174118",
                        "content": "//,temp,ProducerEventSource.java,107,119,temp,ConsumerEventSource.java,116,128\n//,2\npublic class xxx {\nprotected int extractProducerCountFromMessage(Message message, int count) {\ntry {\nObject value = message.getObjectProperty(\"producerCount\");\nif (value instanceof Number) {\nNumber n = (Number)value;\nreturn n.intValue();\n}\nLOG.warn(\"No producerCount header available on the message: \" + message);\n} catch (Exception e) {\nLOG.warn(\"Failed to extract producerCount from message: \" + message + \".Reason: \" + e, e);\n}\nreturn count;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1944_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1448
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 134
                },
                {
                        "id": "test_logbench-o_data_99",
                        "content": "@Override\npublic void run() {\ntry {\nSession session = pc.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(dest);\nfor (int i = 0; i < messageCount; i++) {\nproducer.send(session.createTextMessage(messageTextPrefix + i));\nsentOne.countDown();\n}\nproducer.close();\nsession.close();\nLOG.info(\"Done with send of: \" + messageCount);\n} catch (Exception ignored) {\nignored.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_FailoverReadInactivityBlockWriteTimeoutClientTest_run.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 98
                },
                {
                        "id": "pretrain_java_data_9234115",
                        "content": "<filename>LACCPlus/ActiveMQ/277_1.java\n//,temp,FailoverReadInactivityBlockWriteTimeoutClientTest.java,105,120,temp,JMSConcurrentConsumersTest.java,131,146\n//,3\npublic class xxx {\n@Override\npublic void run() {\ntry{\nSession session = pc.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(dest);\nfor (int i = 0; i < messageCount; i++) {\nproducer.send(session.createTextMessage(messageTextPrefix  + i));\nsentOne.countDown();\n}\nproducer.close();\nsession.close();\nLOG.info(\"Done with send of: \" + messageCount);\n} catch (Exception ignored) {\nignored.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/277_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 98
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 135
                },
                {
                        "id": "pretrain_java_data_12505284",
                        "content": "//,temp,MemoryMessageStoreQueueCursorTest.java,67,131,temp,StoreQueueCursorNoDuplicateTest.java,70,118\n//,3\npublic class xxx {\n@Test(timeout = 10000)\npublic void testRecoverNextMessages2() throws Exception {\nfinal MemoryMessageStore queueMessageStore = new MemoryMessageStore(destination);\nfinal DestinationStatistics destinationStatistics = new DestinationStatistics();\nfinal Queue queue = new Queue(brokerService, destination, queueMessageStore, destinationStatistics, null);\nqueueMessageStore.start();\nqueueMessageStore.registerIndexListener(null);\nQueueStorePrefetch myCursor = new QueueStorePrefetch(queue, brokerService.getBroker());\nSystemUsage systemUsage = new SystemUsage();\n// ensure memory limit is reached\nsystemUsage.getMemoryUsage().setLimit(messageBytesSize * 5);\nmyCursor.setSystemUsage(systemUsage);\nmyCursor.setEnableAudit(false);\nmyCursor.start();\nassertTrue(\"cache enabled\", myCursor.isUseCache() && myCursor.isCacheEnabled());\nActiveMQTextMessage msg0 = getMessage(0);\nmsg0.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(null, msg0);\nmyCursor.addMessageLast(msg0);\nmsg0.decrementReferenceCount();\nif(myCursor.hasNext()) {\nMessageReference ref = myCursor.next();\nLOG.info(\"Received message: {} with body: ({})\", ref.getMessageId(), ((ActiveMQTextMessage)ref.getMessage()).getText());\n//simulate send ack to store to remove message\nmyCursor.remove();\ntry {\nqueueMessageStore.removeMessage(ref.getMessageId());\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n// simulate full memory (from other resources) such that caching stops\nsystemUsage.getMemoryUsage().increaseUsage(messageBytesSize * 10);\nActiveMQTextMessage msg1 = getMessage(1);\nmsg1.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(null, msg1);\nmyCursor.addMessageLast(msg1);\nmsg1.decrementReferenceCount();\nboolean b = true;\nwhile (b) {\nif(myCursor.hasNext()) {\nMessageReference ref = myCursor.next();\nLOG.info(\"Received message: {} with body: ({})\", ref.getMessageId(), ((ActiveMQTextMessage)ref.getMessage()).getText());\n//simulate send ack to store to remove message\nmyCursor.remove();\ntry {\nqueueMessageStore.removeMessage(ref.getMessageId());\n} catch (IOException e) {\ne.printStackTrace();\n}\nb = false;\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2411_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2253
                },
                {
                        "id": "test_logbench-o_data_2254",
                        "content": "@Test(timeout = 10000)\npublic void testRecoverNextMessages2() throws Exception {\nfinal MemoryMessageStore queueMessageStore = new MemoryMessageStore(destination);\nfinal DestinationStatistics destinationStatistics = new DestinationStatistics();\nfinal Queue queue = new Queue(brokerService, destination, queueMessageStore, destinationStatistics, null);\nqueueMessageStore.start();\nqueueMessageStore.registerIndexListener(null);\nQueueStorePrefetch myCursor = new QueueStorePrefetch(queue, brokerService.getBroker());\nSystemUsage systemUsage = new SystemUsage();\n// ensure memory limit is reached\nsystemUsage.getMemoryUsage().setLimit(messageBytesSize * 5);\nmyCursor.setSystemUsage(systemUsage);\nmyCursor.setEnableAudit(false);\nmyCursor.start();\nassertTrue(\"cache enabled\", myCursor.isUseCache() && myCursor.isCacheEnabled());\nActiveMQTextMessage msg0 = getMessage(0);\nmsg0.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(null, msg0);\nmyCursor.addMessageLast(msg0);\nmsg0.decrementReferenceCount();\nif (myCursor.hasNext()) {\nMessageReference ref = myCursor.next();\nLOG.info(\"Received message: {} with body: ({})\", ref.getMessageId(), ((ActiveMQTextMessage) ref.getMessage()).getText());\n// simulate send ack to store to remove message\nmyCursor.remove();\ntry {\nqueueMessageStore.removeMessage(ref.getMessageId());\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n// simulate full memory (from other resources) such that caching stops\nsystemUsage.getMemoryUsage().increaseUsage(messageBytesSize * 10);\nActiveMQTextMessage msg1 = getMessage(1);\nmsg1.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(null, msg1);\nmyCursor.addMessageLast(msg1);\nmsg1.decrementReferenceCount();\nboolean b = true;\nwhile (b) {\nif (myCursor.hasNext()) {\nMessageReference ref = myCursor.next();\nLOG.info(\"Received message: {} with body: ({})\", ref.getMessageId(), ((ActiveMQTextMessage) ref.getMessage()).getText());\n// simulate send ack to store to remove message\nmyCursor.remove();\ntry {\nqueueMessageStore.removeMessage(ref.getMessageId());\n} catch (IOException e) {\ne.printStackTrace();\n}\nb = false;\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_MemoryMessageStoreQueueCursorTest_testRecoverNextMessages2.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2253
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 136
                },
                {
                        "id": "pretrain_java_data_14024858",
                        "content": "//,temp,JMSClientTest.java,480,500,temp,RetroactiveConsumerWithMessageQueryTest.java,47,69\n//,3\npublic class xxx {\npublic void testConsumeAndReceiveInitialQueryBeforeUpdates() throws Exception {\n// lets some messages\nconnection = createConnection();\nsession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconnection.start();\nMessageConsumer consumer = session.createConsumer(destination);\nMessageIdList listener = new MessageIdList();\nlistener.setVerbose(true);\nconsumer.setMessageListener(listener);\nMessageProducer producer = session.createProducer(destination);\nint updateMessageCount = messageCount - DummyMessageQuery.MESSAGE_COUNT;\nfor (int i = 0; i < updateMessageCount; i++) {\nTextMessage message = session.createTextMessage(\"Update Message: \" + i + \" sent at: \" + new Date());\nproducer.send(message);\n}\nproducer.close();\nLOG.info(\"Sent: \" + updateMessageCount + \" update messages\");\nlistener.assertMessagesReceived(messageCount);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/172_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2614
                },
                {
                        "id": "test_logbench-o_data_2615",
                        "content": "public void testConsumeAndReceiveInitialQueryBeforeUpdates() throws Exception {\n// lets some messages\nconnection = createConnection();\nsession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconnection.start();\nMessageConsumer consumer = session.createConsumer(destination);\nMessageIdList listener = new MessageIdList();\nlistener.setVerbose(true);\nconsumer.setMessageListener(listener);\nMessageProducer producer = session.createProducer(destination);\nint updateMessageCount = messageCount - DummyMessageQuery.MESSAGE_COUNT;\nfor (int i = 0; i < updateMessageCount; i++) {\nTextMessage message = session.createTextMessage(\"Update Message: \" + i + \" sent at: \" + new Date());\nproducer.send(message);\n}\nproducer.close();\nLOG.info(\"Sent: \" + updateMessageCount + \" update messages\");\nlistener.assertMessagesReceived(messageCount);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_RetroactiveConsumerWithMessageQueryTest_testConsumeAndReceiveInitialQueryBeforeUpdates.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2614
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 137
                },
                {
                        "id": "test_logbench-o_data_1588",
                        "content": "public String doTestProducerDurableConsumer(int index) throws Exception {\nString message = null;\nassertEquals(\"Should not be any consumers\", 0, brokerService.getAdminView().getTopicSubscribers().length);\nStompConnection producer = stompConnect();\nStompConnection consumer = stompConnect(\"test\");\nsubscribe(consumer, Integer.toString(index), true);\nsendMessage(producer, index);\ntry {\nStompFrame frame = consumer.receive();\nLOG.debug(\"Consumer got frame: \" + message);\nassertEquals(index, (int) Integer.valueOf(frame.getBody()));\nmessage = frame.getBody();\n} catch (Exception e) {\nfail(\"Consumer[\" + index + \"] got error while consuming: \" + e.getMessage());\n}\nunsubscribe(consumer, Integer.toString(index));\nstompDisconnect(consumer);\nstompDisconnect(producer);\nreturn message;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_StompMissingMessageTest_doTestProducerDurableConsumer.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1587
                },
                {
                        "id": "pretrain_java_data_15626095",
                        "content": "//,temp,StompMissingMessageTest.java,98,125,temp,StompMissingMessageTest.java,55,82\n//,3\npublic class xxx {\npublic String doTestProducerDurableConsumer(int index) throws Exception {\nString message = null;\nassertEquals(\"Should not be any consumers\", 0, brokerService.getAdminView().getTopicSubscribers().length);\nStompConnection producer = stompConnect();\nStompConnection consumer = stompConnect(\"test\");\nsubscribe(consumer, Integer.toString(index), true);\nsendMessage(producer, index);\ntry {\nStompFrame frame = consumer.receive();\nLOG.debug(\"Consumer got frame: \" + message);\nassertEquals(index, (int) Integer.valueOf(frame.getBody()));\nmessage = frame.getBody();\n} catch(Exception e) {\nfail(\"Consumer[\"+index+\"] got error while consuming: \" + e.getMessage());\n}\nunsubscribe(consumer, Integer.toString(index));\nstompDisconnect(consumer);\nstompDisconnect(producer);\nreturn message;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2248_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1587
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 138
                },
                {
                        "id": "test_logbench-o_data_2941",
                        "content": "public String doTestProducerConsumer(int index) throws Exception {\nString message = null;\nassertEquals(\"Should not be any consumers\", 0, brokerService.getAdminView().getTopicSubscribers().length);\nStompConnection producer = stompConnect();\nStompConnection consumer = stompConnect();\nsubscribe(consumer, Integer.toString(index));\nsendMessage(producer, index);\ntry {\nStompFrame frame = consumer.receive();\nLOG.debug(\"Consumer got frame: \" + message);\nassertEquals(index, (int) Integer.valueOf(frame.getBody()));\nmessage = frame.getBody();\n} catch (Exception e) {\nfail(\"Consumer[\" + index + \"] got error while consuming: \" + e.getMessage());\n}\nunsubscribe(consumer, Integer.toString(index));\nstompDisconnect(consumer);\nstompDisconnect(producer);\nreturn message;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_StompMissingMessageTest_doTestProducerConsumer.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1587
                },
                {
                        "id": "pretrain_java_data_15626095",
                        "content": "//,temp,StompMissingMessageTest.java,98,125,temp,StompMissingMessageTest.java,55,82\n//,3\npublic class xxx {\npublic String doTestProducerDurableConsumer(int index) throws Exception {\nString message = null;\nassertEquals(\"Should not be any consumers\", 0, brokerService.getAdminView().getTopicSubscribers().length);\nStompConnection producer = stompConnect();\nStompConnection consumer = stompConnect(\"test\");\nsubscribe(consumer, Integer.toString(index), true);\nsendMessage(producer, index);\ntry {\nStompFrame frame = consumer.receive();\nLOG.debug(\"Consumer got frame: \" + message);\nassertEquals(index, (int) Integer.valueOf(frame.getBody()));\nmessage = frame.getBody();\n} catch(Exception e) {\nfail(\"Consumer[\"+index+\"] got error while consuming: \" + e.getMessage());\n}\nunsubscribe(consumer, Integer.toString(index));\nstompDisconnect(consumer);\nstompDisconnect(producer);\nreturn message;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2248_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1587
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 139
                },
                {
                        "id": "pretrain_java_data_14083016",
                        "content": "//,temp,ConsumerCommand.java,47,91,temp,ProducerCommand.java,49,94\n//,3\npublic class xxx {\n@Override\nprotected void runTask(List<String> tokens) throws Exception {\nLOG.info(\"Connecting to URL: \" + brokerUrl + \" as user: \" + user);\nLOG.info(\"Consuming \" + destination);\nLOG.info(\"Sleeping between receives \" + sleep + \" ms\");\nLOG.info(\"Running \" + parallelThreads + \" parallel threads\");\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);\nConnection conn = null;\ntry {\nconn = factory.createConnection(user, password);\nif (durable && clientId != null && clientId.length() > 0 && !\"null\".equals(clientId)) {\nconn.setClientID(clientId);\n}\nconn.start();\nCountDownLatch active = new CountDownLatch(parallelThreads);\nfor (int i = 1; i <= parallelThreads; i++) {\nSession sess;\nif (transacted) {\nsess = conn.createSession(true, Session.SESSION_TRANSACTED);\n} else {\nsess = conn.createSession(false, ackMode);\n}\nConsumerThread consumer = new ConsumerThread(sess, ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE));\nconsumer.setName(\"consumer-\" + i);\nconsumer.setDurable(durable);\nconsumer.setBreakOnNull(false);\nconsumer.setMessageCount(messageCount);\nconsumer.setSleep(sleep);\nconsumer.setBatchSize(batchSize);\nconsumer.setFinished(active);\nconsumer.setBytesAsText(bytesAsText);\nconsumer.start();\n}\nactive.await();\n} finally {\nif (conn != null) {\nconn.close();\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1057_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 311
                },
                {
                        "id": "test_logbench-o_data_312",
                        "content": "@Override\nprotected void runTask(List<String> tokens) throws Exception {\nLOG.info(\"Connecting to URL: \" + brokerUrl + \" as user: \" + user);\nLOG.info(\"Consuming \" + destination);\nLOG.info(\"Sleeping between receives \" + sleep + \" ms\");\nLOG.info(\"Running \" + parallelThreads + \" parallel threads\");\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);\nConnection conn = null;\ntry {\nconn = factory.createConnection(user, password);\nif (durable && clientId != null && clientId.length() > 0 && !\"null\".equals(clientId)) {\nconn.setClientID(clientId);\n}\nconn.start();\nCountDownLatch active = new CountDownLatch(parallelThreads);\nfor (int i = 1; i <= parallelThreads; i++) {\nSession sess;\nif (transacted) {\nsess = conn.createSession(true, Session.SESSION_TRANSACTED);\n} else {\nsess = conn.createSession(false, ackMode);\n}\nConsumerThread consumer = new ConsumerThread(sess, ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE));\nconsumer.setName(\"consumer-\" + i);\nconsumer.setDurable(durable);\nconsumer.setBreakOnNull(false);\nconsumer.setMessageCount(messageCount);\nconsumer.setSleep(sleep);\nconsumer.setBatchSize(batchSize);\nconsumer.setFinished(active);\nconsumer.setBytesAsText(bytesAsText);\nconsumer.start();\n}\nactive.await();\n} finally {\nif (conn != null) {\nconn.close();\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ConsumerCommand_runTask.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 311
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 140
                },
                {
                        "id": "test_logbench-o_data_1811",
                        "content": "@Test\npublic void testIndexDirExists() throws Exception {\nLOG.info(\"Index dir is configured as: {}\", kahaIndexDir);\nassertTrue(kahaDataDir.exists());\nassertTrue(kahaIndexDir.exists());\nString[] index = kahaIndexDir.list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing filename: {}\", name);\nreturn name.endsWith(\"data\") || name.endsWith(\"redo\");\n}\n});\nString[] journal = kahaDataDir.list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing filename: {}\", name);\nreturn name.endsWith(\"log\") || name.equals(\"lock\");\n}\n});\nproduceMessages();\n// Should be db.data and db.redo and nothing else.\nassertNotNull(index);\nassertEquals(2, index.length);\n// Should contain the initial log for the journal and the lock.\nassertNotNull(journal);\nassertEquals(2, journal.length);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_KahaDBIndexLocationTest_testIndexDirExists.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1810
                },
                {
                        "id": "pretrain_java_data_14104059",
                        "content": "<reponame>sgholamian/log-aware-clone-detection<filename>LACCPlus/ActiveMQ/308_1.java\n//,temp,KahaDBIndexLocationTest.java,108,141,temp,MKahaDBIndexLocationTest.java,94,138\n//,3\npublic class xxx {\n@Test\npublic void testIndexDirExists() throws Exception {\nLOG.info(\"Index dir is configured as: {}\", kahaIndexDir);\nassertTrue(kahaDataDir.exists());\nassertTrue(kahaIndexDir.exists());\nString[] index = kahaIndexDir.list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing filename: {}\", name);\nreturn name.endsWith(\"data\") || name.endsWith(\"redo\");\n}\n});\nString[] journal = kahaDataDir.list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing filename: {}\", name);\nreturn name.endsWith(\"log\") || name.equals(\"lock\");\n}\n});\nproduceMessages();\n// Should be db.data and db.redo and nothing else.\nassertNotNull(index);\nassertEquals(2, index.length);\n// Should contain the initial log for the journal and the lock.\nassertNotNull(journal);\nassertEquals(2, journal.length);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/308_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1810
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 141
                },
                {
                        "id": "pretrain_java_data_1409287",
                        "content": "//,temp,SimpleProducer.java,62,136,temp,SimpleQueueSender.java,59,134\n//,3\npublic class xxx {\npublic static void main(String[] args) {\nString queueName = null;\nContext jndiContext = null;\nQueueConnectionFactory queueConnectionFactory = null;\nQueueConnection queueConnection = null;\nQueueSession queueSession = null;\nQueue queue = null;\nQueueSender queueSender = null;\nTextMessage message = null;\nfinal int numMsgs;\nif ((args.length < 1) || (args.length > 2)) {\nLOG.info(\"Usage: java SimpleQueueSender \" + \"<queue-name> [<number-of-messages>]\");\nSystem.exit(1);\n}\nqueueName = args[0];\nLOG.info(\"Queue name is \" + queueName);\nif (args.length == 2) {\nnumMsgs = (new Integer(args[1])).intValue();\n} else {\nnumMsgs = 1;\n}\n/*\n* Create a JNDI API InitialContext object if none exists yet.\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and queue. If either does not exist, exit.\n*/\ntry {\nqueueConnectionFactory = (QueueConnectionFactory)jndiContext.lookup(\"QueueConnectionFactory\");\nqueue = (Queue)jndiContext.lookup(queueName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e);\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create sender and text message. Send\n* messages, varying text slightly. Send end-of-messages message.\n* Finally, close connection.\n*/\ntry {\nqueueConnection = queueConnectionFactory.createQueueConnection();\nqueueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\nqueueSender = queueSession.createSender(queue);\nmessage = queueSession.createTextMessage();\nfor (int i = 0; i < numMsgs; i++) {\nmessage.setText(\"This is message \" + (i + 1));\nLOG.info(\"Sending message: \" + message.getText());\nqueueSender.send(message);\n}\n/*\n* Send a non-text control message indicating end of messages.\n*/\nqueueSender.send(queueSession.createMessage());\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e.toString());\n} finally {\nif (queueConnection != null) {\ntry {\nqueueConnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1090_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 22
                },
                {
                        "id": "test_logbench-o_data_3315",
                        "content": "/**\n* Main method.\n*\n* @param args the queue used by the example and, optionally, the number of\n*                messages to send\n*/\npublic static void main(String[] args) {\nString queueName = null;\nContext jndiContext = null;\nQueueConnectionFactory queueConnectionFactory = null;\nQueueConnection queueConnection = null;\nQueueSession queueSession = null;\nQueue queue = null;\nQueueSender queueSender = null;\nTextMessage message = null;\nfinal int numMsgs;\nif ((args.length < 1) || (args.length > 2)) {\nLOG.info(\"Usage: java SimpleQueueSender \" + \"<queue-name> [<number-of-messages>]\");\nSystem.exit(1);\n}\nqueueName = args[0];\nLOG.info(\"Queue name is \" + queueName);\nif (args.length == 2) {\nnumMsgs = (Integer.valueOf(args[1])).intValue();\n} else {\nnumMsgs = 1;\n}\n/*\n* Create a JNDI API InitialContext object if none exists yet.\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and queue. If either does not exist, exit.\n*/\ntry {\nqueueConnectionFactory = (QueueConnectionFactory) jndiContext.lookup(\"QueueConnectionFactory\");\nqueue = (Queue) jndiContext.lookup(queueName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e);\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create sender and text message. Send\n* messages, varying text slightly. Send end-of-messages message.\n* Finally, close connection.\n*/\ntry {\nqueueConnection = queueConnectionFactory.createQueueConnection();\nqueueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\nqueueSender = queueSession.createSender(queue);\nmessage = queueSession.createTextMessage();\nfor (int i = 0; i < numMsgs; i++) {\nmessage.setText(\"This is message \" + (i + 1));\nLOG.info(\"Sending message: \" + message.getText());\nqueueSender.send(message);\n}\n/*\n* Send a non-text control message indicating end of messages.\n*/\nqueueSender.send(queueSession.createMessage());\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e.toString());\n} finally {\nif (queueConnection != null) {\ntry {\nqueueConnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_SimpleQueueSender_main.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 22
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 142
                },
                {
                        "id": "pretrain_java_data_3038284",
                        "content": "//,temp,AMQ2314Test.java,67,149,temp,TempStorageBlockedBrokerTest.java,65,168\n//,3\npublic class xxx {\npublic void runProducerWithHungConsumer() throws Exception {\nfinal CountDownLatch consumerContinue = new CountDownLatch(1);\nfinal CountDownLatch consumerReady = new CountDownLatch(1);\nfinal long origTempUsage = broker.getSystemUsage().getTempUsage().getUsage();\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);\nfactory.setAlwaysSyncSend(true);\n// ensure messages are spooled to disk for this consumer\nActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();\nprefetch.setTopicPrefetch(500);\nfactory.setPrefetchPolicy(prefetch);\nfinal Connection connection = factory.createConnection();\nconnection.start();\nThread producingThread = new Thread(\"Producing thread\") {\npublic void run() {\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(destination);\nproducer.setDeliveryMode(deliveryMode);\nfor (int idx = 0; idx < MESSAGES_COUNT; ++idx) {\nMessage message = session.createTextMessage(new String(buf) + idx);\nproducer.send(message);\n}\nproducer.close();\nsession.close();\n} catch (Throwable ex) {\nex.printStackTrace();\n}\n}\n};\nThread consumingThread = new Thread(\"Consuming thread\") {\npublic void run() {\ntry {\nint count = 0;\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(destination);\nwhile (consumer.receive(messageReceiveTimeout) == null) {\nconsumerReady.countDown();\n}\ncount++;\nLOG.info(\"Received one... waiting\");\nconsumerContinue.await();\nif (consumeAll) {\nLOG.info(\"Consuming the rest of the messages...\");\nwhile (consumer.receive(messageReceiveTimeout) != null) {\ncount++;\n}\n}\nLOG.info(\"consumer session closing: consumed count: \" + count);\nsession.close();\n} catch (Throwable ex) {\nex.printStackTrace();\n}\n}\n};\nconsumingThread.start();\nconsumerReady.await();\nproducingThread.start();\nproducingThread.join();\nfinal long tempUsageBySubscription = broker.getSystemUsage().getTempUsage().getUsage();\nLOG.info(\"Orig Usage: \" + origTempUsage + \", currentUsage: \" + tempUsageBySubscription);\nassertTrue(\"some temp store has been used\", tempUsageBySubscription != origTempUsage);\nconsumerContinue.countDown();\nconsumingThread.join();\nconnection.close();\nLOG.info(\"Subscription Usage: \" + tempUsageBySubscription + \", endUsage: \"\n+ broker.getSystemUsage().getTempUsage().getUsage());\nassertTrue(\"temp usage decreased with removed sub\", Wait.waitFor(new Wait.Condition(){\npublic boolean isSatisified() throws Exception {\nreturn broker.getSystemUsage().getTempUsage().getUsage()  < tempUsageBySubscription;\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1812_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2138
                },
                {
                        "id": "test_logbench-o_data_2139",
                        "content": "public void runProducerWithHungConsumer() throws Exception {\nfinal CountDownLatch consumerContinue = new CountDownLatch(1);\nfinal CountDownLatch consumerReady = new CountDownLatch(1);\nfinal long origTempUsage = broker.getSystemUsage().getTempUsage().getUsage();\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);\nfactory.setAlwaysSyncSend(true);\n// ensure messages are spooled to disk for this consumer\nActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();\nprefetch.setTopicPrefetch(500);\nfactory.setPrefetchPolicy(prefetch);\nfinal Connection connection = factory.createConnection();\nconnection.start();\nThread producingThread = new Thread(\"Producing thread\") {\npublic void run() {\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(destination);\nproducer.setDeliveryMode(deliveryMode);\nfor (int idx = 0; idx < MESSAGES_COUNT; ++idx) {\nMessage message = session.createTextMessage(new String(buf) + idx);\nproducer.send(message);\n}\nproducer.close();\nsession.close();\n} catch (Throwable ex) {\nex.printStackTrace();\n}\n}\n};\nThread consumingThread = new Thread(\"Consuming thread\") {\npublic void run() {\ntry {\nint count = 0;\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(destination);\nwhile (consumer.receive(messageReceiveTimeout) == null) {\nconsumerReady.countDown();\n}\ncount++;\nLOG.info(\"Received one... waiting\");\nconsumerContinue.await();\nif (consumeAll) {\nLOG.info(\"Consuming the rest of the messages...\");\nwhile (consumer.receive(messageReceiveTimeout) != null) {\ncount++;\n}\n}\nLOG.info(\"consumer session closing: consumed count: \" + count);\nsession.close();\n} catch (Throwable ex) {\nex.printStackTrace();\n}\n}\n};\nconsumingThread.start();\nconsumerReady.await();\nproducingThread.start();\nproducingThread.join();\nfinal long tempUsageBySubscription = broker.getSystemUsage().getTempUsage().getUsage();\nLOG.info(\"Orig Usage: \" + origTempUsage + \", currentUsage: \" + tempUsageBySubscription);\nassertTrue(\"some temp store has been used\", tempUsageBySubscription != origTempUsage);\nconsumerContinue.countDown();\nconsumingThread.join();\nconnection.close();\nLOG.info(\"Subscription Usage: \" + tempUsageBySubscription + \", endUsage: \" + broker.getSystemUsage().getTempUsage().getUsage());\nassertTrue(\"temp usage decreased with removed sub\", Wait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nreturn broker.getSystemUsage().getTempUsage().getUsage() < tempUsageBySubscription;\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ2314Test_runProducerWithHungConsumer.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2138
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 143
                },
                {
                        "id": "pretrain_java_data_1503824",
                        "content": "//,temp,TemporaryDestinationToFromNameTest.java,43,53,temp,TemporaryDestinationToFromNameTest.java,31,41\n//,2\npublic class xxx {\npublic void testCreateTemporaryTopicThenCreateATopicFromItsName() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nTopic tempTopic = session.createTemporaryTopic();\nString name = tempTopic.getTopicName();\nLOG.info(\"Created topic named: \" + name);\nTopic createdTopic = session.createTopic(name);\nassertEquals(\"created topic not equal to temporary topic\", tempTopic, createdTopic);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/588_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1478
                },
                {
                        "id": "test_logbench-o_data_1479",
                        "content": "public void testCreateTemporaryTopicThenCreateATopicFromItsName() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nTopic tempTopic = session.createTemporaryTopic();\nString name = tempTopic.getTopicName();\nLOG.info(\"Created topic named: \" + name);\nTopic createdTopic = session.createTopic(name);\nassertEquals(\"created topic not equal to temporary topic\", tempTopic, createdTopic);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_TemporaryDestinationToFromNameTest_testCreateTemporaryTopicThenCreateATopicFromItsName.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1478
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 144
                },
                {
                        "id": "test_logbench-o_data_1901",
                        "content": "public void testRestartSend() throws Exception {\nThread.sleep(1000);\nLOG.info(\"restarting broker\");\nrestartBroker(\"BrokerA\");\nThread.sleep(5000);\nLOG.info(\"sending message\");\nsendMessages(\"BrokerA\", queue, 1);\nThread.sleep(3000);\nLOG.info(\"consuming message\");\nMessageConsumer consumerA = createConsumer(\"BrokerA\", queue);\nMessageConsumer consumerB = createConsumer(\"BrokerB\", queue);\nThread.sleep(1000);\nMessageIdList messagesA = getConsumerMessages(\"BrokerA\", consumerA);\nMessageIdList messagesB = getConsumerMessages(\"BrokerB\", consumerB);\nLOG.info(\"consumerA = \" + messagesA);\nLOG.info(\"consumerB = \" + messagesB);\nmessagesA.assertMessagesReceived(0);\nmessagesB.assertMessagesReceived(1);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ2927Test_testRestartSend.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 487
                },
                {
                        "id": "pretrain_java_data_19073829",
                        "content": "//,temp,AMQ2927Test.java,91,122,temp,AMQ2927Test.java,56,88\n//,2\npublic class xxx {\npublic void testRestartSend() throws Exception {\nThread.sleep(1000);\nLOG.info(\"restarting broker\");\nrestartBroker(\"BrokerA\");\nThread.sleep(5000);\nLOG.info(\"sending message\");\nsendMessages(\"BrokerA\", queue, 1);\nThread.sleep(3000);\nLOG.info(\"consuming message\");\nMessageConsumer consumerA = createConsumer(\"BrokerA\", queue);\nMessageConsumer consumerB = createConsumer(\"BrokerB\", queue);\nThread.sleep(1000);\nMessageIdList messagesA = getConsumerMessages(\"BrokerA\", consumerA);\nMessageIdList messagesB = getConsumerMessages(\"BrokerB\", consumerB);\nLOG.info(\"consumerA = \" + messagesA);\nLOG.info(\"consumerB = \" + messagesB);\nmessagesA.assertMessagesReceived(0);\nmessagesB.assertMessagesReceived(1);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/618_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 487
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 145
                },
                {
                        "id": "test_logbench-o_data_488",
                        "content": "public void testSendRestart() throws Exception {\nThread.sleep(1000);\nLOG.info(\"sending message\");\nsendMessages(\"BrokerA\", queue, 1);\nThread.sleep(3000);\nLOG.info(\"restarting broker\");\nrestartBroker(\"BrokerA\");\nThread.sleep(5000);\nLOG.info(\"consuming message\");\nMessageConsumer consumerA = createConsumer(\"BrokerA\", queue);\nMessageConsumer consumerB = createConsumer(\"BrokerB\", queue);\nThread.sleep(1000);\nMessageIdList messagesA = getConsumerMessages(\"BrokerA\", consumerA);\nMessageIdList messagesB = getConsumerMessages(\"BrokerB\", consumerB);\nLOG.info(\"consumerA = \" + messagesA);\nLOG.info(\"consumerB = \" + messagesB);\nmessagesA.assertMessagesReceived(0);\nmessagesB.assertMessagesReceived(1);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ2927Test_testSendRestart.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 487
                },
                {
                        "id": "pretrain_java_data_19073829",
                        "content": "//,temp,AMQ2927Test.java,91,122,temp,AMQ2927Test.java,56,88\n//,2\npublic class xxx {\npublic void testRestartSend() throws Exception {\nThread.sleep(1000);\nLOG.info(\"restarting broker\");\nrestartBroker(\"BrokerA\");\nThread.sleep(5000);\nLOG.info(\"sending message\");\nsendMessages(\"BrokerA\", queue, 1);\nThread.sleep(3000);\nLOG.info(\"consuming message\");\nMessageConsumer consumerA = createConsumer(\"BrokerA\", queue);\nMessageConsumer consumerB = createConsumer(\"BrokerB\", queue);\nThread.sleep(1000);\nMessageIdList messagesA = getConsumerMessages(\"BrokerA\", consumerA);\nMessageIdList messagesB = getConsumerMessages(\"BrokerB\", consumerB);\nLOG.info(\"consumerA = \" + messagesA);\nLOG.info(\"consumerB = \" + messagesB);\nmessagesA.assertMessagesReceived(0);\nmessagesB.assertMessagesReceived(1);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/618_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 487
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 146
                },
                {
                        "id": "pretrain_java_data_19028089",
                        "content": "//,temp,PooledConnectionTempQueueTest.java,100,119,temp,PooledConnectionTempQueueTest.java,75,98\n//,3\npublic class xxx {\nprivate void sendWithReplyToTemp(ConnectionFactory cf, String serviceQueue) throws JMSException,\nInterruptedException {\nConnection con = cf.createConnection();\ncon.start();\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nTemporaryQueue tempQueue = session.createTemporaryQueue();\nTextMessage msg = session.createTextMessage(\"Request\");\nmsg.setJMSReplyTo(tempQueue);\nMessageProducer producer = session.createProducer(session.createQueue(serviceQueue));\nproducer.send(msg);\n// This sleep also seems to matter\nThread.sleep(3000);\nMessageConsumer consumer = session.createConsumer(tempQueue);\nMessage replyMsg = consumer.receive();\nLOG.debug(\"Reply message: {}\", replyMsg);\nconsumer.close();\nproducer.close();\nsession.close();\ncon.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/305_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3652
                },
                {
                        "id": "test_logbench-o_data_3653",
                        "content": "private void sendWithReplyToTemp(ConnectionFactory cf, String serviceQueue) throws JMSException, InterruptedException {\nConnection con = cf.createConnection();\ncon.start();\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nTemporaryQueue tempQueue = session.createTemporaryQueue();\nTextMessage msg = session.createTextMessage(\"Request\");\nmsg.setJMSReplyTo(tempQueue);\nMessageProducer producer = session.createProducer(session.createQueue(serviceQueue));\nproducer.send(msg);\n// This sleep also seems to matter\nThread.sleep(3000);\nMessageConsumer consumer = session.createConsumer(tempQueue);\nMessage replyMsg = consumer.receive();\nLOG.debug(\"Reply message: {}\", replyMsg);\nconsumer.close();\nproducer.close();\nsession.close();\ncon.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_PooledConnectionTempQueueTest_sendWithReplyToTemp.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3652
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 147
                },
                {
                        "id": "pretrain_java_data_19025738",
                        "content": "//,temp,InitialContextTest.java,49,59,temp,InitialContextTest.java,37,47\n//,2\npublic class xxx {\npublic void testInitialContext() throws Exception {\nInitialContext context = new InitialContext();\nassertTrue(\"Created context\", context != null);\nActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory)context.lookup(\"ConnectionFactory\");\nassertTrue(\"Should have created a ConnectionFactory\", connectionFactory != null);\nLOG.info(\"Created with brokerURL: \" + connectionFactory.getBrokerURL());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/501_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1691
                },
                {
                        "id": "test_logbench-o_data_1692",
                        "content": "public void testInitialContext() throws Exception {\nInitialContext context = new InitialContext();\nassertTrue(\"Created context\", context != null);\nActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory) context.lookup(\"ConnectionFactory\");\nassertTrue(\"Should have created a ConnectionFactory\", connectionFactory != null);\nLOG.info(\"Created with brokerURL: \" + connectionFactory.getBrokerURL());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_InitialContextTest_testInitialContext.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1691
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 148
                },
                {
                        "id": "pretrain_java_data_4610809",
                        "content": "//,temp,AbstractVirtualDestTest.java,49,62,temp,KahaDBStoreOpenWireVersionTest.java,226,250\n//,3\npublic class xxx {\nprotected void exerciseVirtualTopic(String prefix, String topic) throws Exception {\nActiveMQConnection connection = new ActiveMQConnectionFactory(\"vm://localhost\").createActiveMQConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(prefix + topic));\nLOG.info(\"new consumer for: \" + consumer.getDestination());\nMessageProducer producer = session.createProducer(session.createTopic(topic));\nfinal String body = \"To vt:\" + topic;\nMessage message = sendAndReceiveMessage(session, consumer, producer, body);\nassertNotNull(\"got message\", message);\nassertEquals(\"got expected message\", body, ((TextMessage) message).getText());\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/349_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 626
                },
                {
                        "id": "test_logbench-o_data_2350",
                        "content": "protected void exerciseVirtualTopic(String prefix, String topic) throws Exception {\nActiveMQConnection connection = new ActiveMQConnectionFactory(\"vm://localhost\").createActiveMQConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(prefix + topic));\nLOG.info(\"new consumer for: \" + consumer.getDestination());\nMessageProducer producer = session.createProducer(session.createTopic(topic));\nfinal String body = \"To vt:\" + topic;\nMessage message = sendAndReceiveMessage(session, consumer, producer, body);\nassertNotNull(\"got message\", message);\nassertEquals(\"got expected message\", body, ((TextMessage) message).getText());\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AbstractVirtualDestTest_exerciseVirtualTopic.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 626
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 149
                },
                {
                        "id": "pretrain_java_data_4674101",
                        "content": "//,temp,AMQ4636Test.java,65,72,temp,ActiveMQConnectionExecutorThreadCleanUpTest.java,51,62\n//,3\npublic class xxx {\n@Before\npublic void setUp() throws Exception {\nLOG.info(\"Configuring broker programmatically.\");\nbroker = new BrokerService();\nbroker.setPersistent(false);\n// explicitly limiting to 0 connections so that test is unable\n// to connect\nbroker.addConnector(\"tcp://localhost:0?maximumConnections=0\");\nbroker.start();\nbroker.waitUntilStarted(5000);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/31_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2562
                },
                {
                        "id": "test_logbench-o_data_2563",
                        "content": "@Before\npublic void setUp() throws Exception {\nLOG.info(\"Configuring broker programmatically.\");\nbroker = new BrokerService();\nbroker.setPersistent(false);\n// explicitly limiting to 0 connections so that test is unable\n// to connect\nbroker.addConnector(\"tcp://localhost:0?maximumConnections=0\");\nbroker.start();\nbroker.waitUntilStarted(5000);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_ActiveMQConnectionExecutorThreadCleanUpTest_setUp.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2562
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 150
                },
                {
                        "id": "pretrain_java_data_6285212",
                        "content": "//,temp,DurableSubscriptionOffline4Test.java,63,129,temp,DurableSubscriptionOffline3Test.java,243,327\n//,3\npublic class xxx {\n@Test(timeout = 60 * 1000)\n// https://issues.apache.org/jira/browse/AMQ-3206\npublic void testCleanupDeletedSubAfterRestart() throws Exception {\nConnection con = createConnection(\"cli1\");\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nsession.close();\ncon.close();\ncon = createConnection(\"cli2\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nsession.close();\ncon.close();\ncon = createConnection();\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(null);\nfinal int toSend = 500;\nfinal String payload = new byte[40*1024].toString();\nint sent = 0;\nfor (int i = sent; i < toSend; i++) {\nMessage message = session.createTextMessage(payload);\nmessage.setStringProperty(\"filter\", \"false\");\nmessage.setIntProperty(\"ID\", i);\nproducer.send(topic, message);\nsent++;\n}\ncon.close();\nLOG.info(\"sent: \" + sent);\n// kill off cli1\ncon = createConnection(\"cli1\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.unsubscribe(\"SubsId\");\ndestroyBroker();\ncreateBroker(false);\ncon = createConnection(\"cli2\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createDurableSubscriber(topic, \"SubsId\", null, true);\nfinal DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();\nconsumer.setMessageListener(listener);\nassertTrue(\"got all sent\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"Want: \" + toSend  + \", current: \" + listener.count);\nreturn listener.count == toSend;\n}\n}));\nsession.close();\ncon.close();\ndestroyBroker();\ncreateBroker(false);\nfinal KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();\nassertTrue(\"Should have less than three journal files left but was: \" +\npa.getStore().getJournal().getFileMap().size(), Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn pa.getStore().getJournal().getFileMap().size() <= 3;\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1766_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1124
                },
                {
                        "id": "test_logbench-o_data_1125",
                        "content": "@Test(timeout = 60 * 1000)\npublic // https://issues.apache.org/jira/browse/AMQ-3206\nvoid testCleanupDeletedSubAfterRestart() throws Exception {\nConnection con = createConnection(\"cli1\");\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nsession.close();\ncon.close();\ncon = createConnection(\"cli2\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nsession.close();\ncon.close();\ncon = createConnection();\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(null);\nfinal int toSend = 500;\nfinal String payload = new byte[40 * 1024].toString();\nint sent = 0;\nfor (int i = sent; i < toSend; i++) {\nMessage message = session.createTextMessage(payload);\nmessage.setStringProperty(\"filter\", \"false\");\nmessage.setIntProperty(\"ID\", i);\nproducer.send(topic, message);\nsent++;\n}\ncon.close();\nLOG.info(\"sent: \" + sent);\n// kill off cli1\ncon = createConnection(\"cli1\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.unsubscribe(\"SubsId\");\ndestroyBroker();\ncreateBroker(false);\ncon = createConnection(\"cli2\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createDurableSubscriber(topic, \"SubsId\", null, true);\nfinal DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();\nconsumer.setMessageListener(listener);\nassertTrue(\"got all sent\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"Want: \" + toSend + \", current: \" + listener.count);\nreturn listener.count == toSend;\n}\n}));\nsession.close();\ncon.close();\ndestroyBroker();\ncreateBroker(false);\nfinal KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();\nassertTrue(\"Should have less than three journal files left but was: \" + pa.getStore().getJournal().getFileMap().size(), Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn pa.getStore().getJournal().getFileMap().size() <= 3;\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_DurableSubscriptionOffline4Test_testCleanupDeletedSubAfterRestart.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1124
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 151
                },
                {
                        "id": "test_logbench-o_data_747",
                        "content": "public void consume() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getConnectUri().toString());\nfinal int totalMessageCount = MESSAGE_COUNT_OF_ONE_GROUP * PRIORITIES.length;\nfinal AtomicInteger counter = new AtomicInteger();\nfinal MessageListener listener = new MessageListener() {\npublic void onMessage(Message message) {\nif (debug) {\ntry {\nlog.info(((TextMessage) message).getText());\n} catch (JMSException e) {\ne.printStackTrace();\n}\n}\nif (counter.incrementAndGet() == totalMessageCount) {\nfinishLatch.countDown();\n}\n}\n};\nint consumerCount = PRIORITIES.length;\nConnection[] connections = new Connection[consumerCount];\nSession[] sessions = new Session[consumerCount];\nMessageConsumer[] consumers = new MessageConsumer[consumerCount];\nfor (int i = 0; i < consumerCount; i++) {\nString selector = \"priority = \" + PRIORITIES[i];\nconnections[i] = connectionFactory.createConnection();\nsessions[i] = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumers[i] = sessions[i].createConsumer(destination, selector);\nconsumers[i].setMessageListener(listener);\n}\nfor (Connection connection : connections) {\nconnection.start();\n}\nlog.info(\"received \" + counter.get() + \" messages\");\nassertTrue(\"got all messages in time\", finishLatch.await(60, TimeUnit.SECONDS));\nlog.info(\"received \" + counter.get() + \" messages\");\nfor (MessageConsumer consumer : consumers) {\nconsumer.close();\n}\nfor (Session session : sessions) {\nsession.close();\n}\nfor (Connection connection : connections) {\nconnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ1893Test_consume.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 746
                },
                {
                        "id": "pretrain_java_data_6270936",
                        "content": "//,temp,AMQ1893Test.java,129,192,temp,AMQ4092Test.java,156,225\n//,3\npublic class xxx {\npublic void consume() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\nbrokerService.getTransportConnectors().get(0).getConnectUri().toString()\n);\nfinal int totalMessageCount = MESSAGE_COUNT_OF_ONE_GROUP * PRIORITIES.length;\nfinal AtomicInteger counter = new AtomicInteger();\nfinal MessageListener listener = new MessageListener() {\npublic void onMessage(Message message) {\nif (debug) {\ntry {\nlog.info(((TextMessage) message).getText());\n} catch (JMSException e) {\ne.printStackTrace();\n}\n}\nif (counter.incrementAndGet() == totalMessageCount) {\nfinishLatch.countDown();\n}\n}\n};\nint consumerCount = PRIORITIES.length;\nConnection[] connections = new Connection[consumerCount];\nSession[] sessions = new Session[consumerCount];\nMessageConsumer[] consumers = new MessageConsumer[consumerCount];\nfor (int i = 0; i < consumerCount; i++) {\nString selector = \"priority = \" + PRIORITIES[i];\nconnections[i] = connectionFactory.createConnection();\nsessions[i] = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumers[i] = sessions[i].createConsumer(destination, selector);\nconsumers[i].setMessageListener(listener);\n}\nfor (Connection connection : connections) {\nconnection.start();\n}\nlog.info(\"received \" + counter.get() + \" messages\");\nassertTrue(\"got all messages in time\", finishLatch.await(60, TimeUnit.SECONDS));\nlog.info(\"received \" + counter.get() + \" messages\");\nfor (MessageConsumer consumer : consumers) {\nconsumer.close();\n}\nfor (Session session : sessions) {\nsession.close();\n}\nfor (Connection connection : connections) {\nconnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1768_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 746
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 152
                },
                {
                        "id": "test_logbench-o_data_1417",
                        "content": "/*\nSend X message with a sequence number held in \"appID\"\n*/\nprivate Long sendMessages(int messageCount) throws Exception {\nlong numberOfMessageSent = 0;\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"admin\", \"admin\", TRANSPORT_URL);\nConnection connection = (ActiveMQConnection) connectionFactory.createConnection();\nconnection.start();\nfinal String blob = new String(new byte[4 * 1024]);\ntry {\nSession producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer jmsProducer = producerSession.createProducer(producerSession.createTopic(DESTINATION));\nMessage sendMessage = producerSession.createTextMessage(blob);\nfor (int i = 0; i < messageCount; i++) {\njmsProducer.send(sendMessage);\nproducerSession.commit();\nnumberOfMessageSent++;\n}\nLOG.info(\" Finished after producing : \" + numberOfMessageSent);\nreturn numberOfMessageSent;\n} catch (Exception ex) {\nLOG.info(\"Exception received producing \", ex);\nLOG.info(\"finishing after exception :\" + numberOfMessageSent);\nreturn numberOfMessageSent;\n} finally {\nif (connection != null) {\nconnection.close();\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_AMQ6459Test_sendMessages.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1416
                },
                {
                        "id": "pretrain_java_data_11057979",
                        "content": "//,temp,AMQ6459Test.java,163,203,temp,JDBCConcurrentDLQTest.java,182,209\n//,3\npublic class xxx {\nprivate Long sendMessages(int messageCount) throws Exception {\nlong numberOfMessageSent = 0;\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"admin\", \"admin\", TRANSPORT_URL);\nConnection connection = (ActiveMQConnection) connectionFactory.createConnection();\nconnection.start();\nfinal String blob = new String(new byte[4 * 1024]);\ntry {\nSession producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer jmsProducer = producerSession.createProducer(producerSession.createTopic(DESTINATION));\nMessage sendMessage = producerSession.createTextMessage(blob);\nfor (int i = 0; i < messageCount; i++) {\njmsProducer.send(sendMessage);\nproducerSession.commit();\nnumberOfMessageSent++;\n}\nLOG.info(\" Finished after producing : \" + numberOfMessageSent);\nreturn numberOfMessageSent;\n} catch (Exception ex) {\nLOG.info(\"Exception received producing \", ex);\nLOG.info(\"finishing after exception :\" + numberOfMessageSent);\nreturn numberOfMessageSent;\n} finally {\nif (connection != null) {\nconnection.close();\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/289_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1416
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 153
                },
                {
                        "id": "test_logbench-o_data_2102",
                        "content": "public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {\n// Only consumers on the same connection can consume from\n// the temporary destination\n// However, we could have failed over - and we do this\n// check client side anyways ....\nif (!context.isFaultTolerant() && (!context.isNetworkConnection() && !tempDest.getConnectionId().equals(sub.getConsumerInfo().getConsumerId().getConnectionId()))) {\ntempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());\nif (LOG.isDebugEnabled()) {\nLOG.debug(\" changed ownership of \" + this + \" to \" + tempDest.getConnectionId());\n}\n}\nsuper.addSubscription(context, sub);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_TempTopic_addSubscription.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 639
                },
                {
                        "id": "pretrain_java_data_9492061",
                        "content": "//,temp,TempQueue.java,66,82,temp,TempTopic.java,52,69\n//,3\npublic class xxx {\npublic void addSubscription(ConnectionContext context, Subscription sub) throws Exception {\n// Only consumers on the same connection can consume from\n// the temporary destination\n// However, we could have failed over - and we do this\n// check client side anyways ....\nif (!context.isFaultTolerant()\n&& (!context.isNetworkConnection() && !tempDest\n.getConnectionId().equals(\nsub.getConsumerInfo().getConsumerId()\n.getConnectionId()))) {\ntempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());\nif (LOG.isDebugEnabled()) {\nLOG.debug(\" changed ownership of \" + this + \" to \"+ tempDest.getConnectionId());\n}\n}\nsuper.addSubscription(context, sub);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2123_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 639
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 154
                },
                {
                        "id": "test_logbench-o_data_640",
                        "content": "@Override\npublic void addSubscription(ConnectionContext context, Subscription sub) throws Exception {\n// Only consumers on the same connection can consume from\n// the temporary destination\n// However, we could have failed over - and we do this\n// check client side anyways ....\nif (!context.isFaultTolerant() && (!context.isNetworkConnection() && !tempDest.getConnectionId().equals(sub.getConsumerInfo().getConsumerId().getConnectionId()))) {\ntempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());\nLOG.debug(\"changed ownership of {} to {}\", this, tempDest.getConnectionId());\n}\nsuper.addSubscription(context, sub);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_TempQueue_addSubscription.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 639
                },
                {
                        "id": "pretrain_java_data_9492061",
                        "content": "//,temp,TempQueue.java,66,82,temp,TempTopic.java,52,69\n//,3\npublic class xxx {\npublic void addSubscription(ConnectionContext context, Subscription sub) throws Exception {\n// Only consumers on the same connection can consume from\n// the temporary destination\n// However, we could have failed over - and we do this\n// check client side anyways ....\nif (!context.isFaultTolerant()\n&& (!context.isNetworkConnection() && !tempDest\n.getConnectionId().equals(\nsub.getConsumerInfo().getConsumerId()\n.getConnectionId()))) {\ntempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());\nif (LOG.isDebugEnabled()) {\nLOG.debug(\" changed ownership of \" + this + \" to \"+ tempDest.getConnectionId());\n}\n}\nsuper.addSubscription(context, sub);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2123_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 639
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 155
                },
                {
                        "id": "test_logbench-o_data_2075",
                        "content": "private void startBroker() throws Exception {\nbroker = new BrokerService();\n// broker.setDeleteAllMessagesOnStartup(true);\nbroker.setPersistent(true);\nbroker.setUseJmx(true);\nKahaDBStore kaha = new KahaDBStore();\nkaha.setDirectory(new File(\"target/activemq-data/kahadb\"));\n// The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified\n// what happens if the index is updated but a journal update is lost.\n// Index is going to be in consistent, but can it be repaired?\nkaha.setEnableJournalDiskSyncs(false);\n// Using a bigger journal file size makes he take fewer spikes as it is not switching files as often.\nkaha.setJournalMaxFileLength(1024 * 1024 * 100);\n// small batch means more frequent and smaller writes\nkaha.setIndexWriteBatchSize(100);\n// do the index write in a separate thread\nkaha.setEnableIndexWriteAsync(true);\nbroker.setPersistenceAdapter(kaha);\nbroker.addConnector(\"tcp://localhost:0\").setName(\"Default\");\nbroker.start();\nLOG.info(\"Starting broker..\");\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_VerifySteadyEnqueueRate_startBroker.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2074
                },
                {
                        "id": "pretrain_java_data_9482828",
                        "content": "<filename>LACCPlus/ActiveMQ/780_2.java\n//,temp,MissingDataFileTest.java,89,108,temp,VerifySteadyEnqueueRate.java,127,152\n//,3\npublic class xxx {\nprivate void startBroker() throws Exception {\nbroker = new BrokerService();\n//broker.setDeleteAllMessagesOnStartup(true);\nbroker.setPersistent(true);\nbroker.setUseJmx(true);\nKahaDBStore kaha = new KahaDBStore();\nkaha.setDirectory(new File(\"target/activemq-data/kahadb\"));\n// The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified\n// what happens if the index is updated but a journal update is lost.\n// Index is going to be in consistent, but can it be repaired?\nkaha.setEnableJournalDiskSyncs(false);\n// Using a bigger journal file size makes he take fewer spikes as it is not switching files as often.\nkaha.setJournalMaxFileLength(1024*1024*100);\n// small batch means more frequent and smaller writes\nkaha.setIndexWriteBatchSize(100);\n// do the index write in a separate thread\nkaha.setEnableIndexWriteAsync(true);\nbroker.setPersistenceAdapter(kaha);\nbroker.addConnector(\"tcp://localhost:0\").setName(\"Default\");\nbroker.start();\nLOG.info(\"Starting broker..\");\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/780_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 2074
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 156
                },
                {
                        "id": "test_logbench-o_data_1793",
                        "content": "public void afterPropertiesSet() throws Exception {\n// get common context\nApplicationContext common = (ApplicationContext) applicationContext.getBean(\"red5.common\");\nServer server = (Server) common.getBean(\"red5.server\");\n// server should be up and running at this point so load any plug-ins now\n// get the plugins dir\nFile pluginsDir = new File(System.getProperty(\"red5.root\"), \"plugins\");\n// get installed plugins (the jars in the plugins directory)\nFile[] plugins = pluginsDir.listFiles(new FilenameFilter() {\npublic boolean accept(File dir, String name) {\n// lower the case\nString tmp = name.toLowerCase();\n// accept jars and zips\nreturn tmp.endsWith(\".jar\") || tmp.endsWith(\".zip\");\n}\n});\nif (plugins != null) {\nIRed5Plugin red5Plugin = null;\nlog.debug(\"{} plugins to launch\", plugins.length);\nfor (File plugin : plugins) {\nJarFile jar = null;\nManifest manifest = null;\ntry {\njar = new JarFile(plugin, false);\nmanifest = jar.getManifest();\n} catch (Exception e1) {\nlog.warn(\"Error loading plugin manifest: {}\", plugin);\n} finally {\nif (jar != null) {\njar.close();\n}\n}\nif (manifest == null) {\ncontinue;\n}\nAttributes attributes = manifest.getMainAttributes();\nif (attributes == null) {\ncontinue;\n}\nString pluginMainClass = attributes.getValue(\"Red5-Plugin-Main-Class\");\nif (pluginMainClass == null || pluginMainClass.length() <= 0) {\ncontinue;\n}\n// attempt to load the class; since it's in the plugins directory this should work\nClassLoader loader = common.getClassLoader();\nClass<?> pluginClass;\nString pluginMainMethod = null;\ntry {\npluginClass = Class.forName(pluginMainClass, true, loader);\n} catch (ClassNotFoundException e) {\ncontinue;\n}\ntry {\n// handle plug-ins without \"main\" methods\npluginMainMethod = attributes.getValue(\"Red5-Plugin-Main-Method\");\nif (pluginMainMethod == null || pluginMainMethod.length() <= 0) {\n// just get an instance of the class\nred5Plugin = (IRed5Plugin) pluginClass.getDeclaredConstructor().newInstance();\n} else {\nMethod method = pluginClass.getMethod(pluginMainMethod, (Class<?>[]) null);\nObject o = method.invoke(null, (Object[]) null);\nif (o != null && o instanceof IRed5Plugin) {\nred5Plugin = (IRed5Plugin) o;\n}\n}\n// register and start\nif (red5Plugin != null) {\n// set top-level context\nred5Plugin.setApplicationContext(applicationContext);\n// set server reference\nred5Plugin.setServer(server);\n// register the plug-in to make it available for lookups\nPluginRegistry.register(red5Plugin);\n// start the plugin\nred5Plugin.doStart();\n}\nlog.info(\"Loaded plugin: {}\", pluginMainClass);\n} catch (Throwable t) {\nlog.warn(\"Error loading plugin: {}; Method: {}\", pluginMainClass, pluginMainMethod);\nlog.error(\"\", t);\n}\n}\n} else {\nlog.info(\"Plugins directory cannot be accessed or doesnt exist\");\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/red5-server_PluginLauncher_afterPropertiesSet.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1792
                },
                {
                        "id": "pretrain_java_data_9585512",
                        "content": "<reponame>vmflzja/sms\npackage com.sms.server.plugin;\nimport java.io.File;\nimport java.io.FilenameFilter;\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.jar.Attributes;\nimport java.util.jar.JarFile;\nimport java.util.jar.Manifest;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.sms.server.Server;\nimport com.sms.server.api.plugin.IPlugin;\npublic class PluginLauncher {\nprotected static Logger log = LoggerFactory.getLogger(PluginLauncher.class);\npublic PluginLauncher() {\n}\npublic void start() {\nServer server = Server.getInstance();\n//server should be up and running at this point so load any plug-ins now\n//get the plugins dir\nFile pluginsDir = new File(System.getProperty(\"sms.root\"), \"plugins\");\nFile[] plugins = pluginsDir.listFiles(new FilenameFilter() {\npublic boolean accept(File dir, String name) {\n//lower the case\nString tmp = name.toLowerCase();\n//accept jars and zips\nreturn tmp.endsWith(\".jar\") || tmp.endsWith(\".zip\");\n}\n});\nif (plugins != null) {\nIPlugin red5Plugin = null;\nlog.debug(\"{} plugins to launch\", plugins.length);\nfor (File plugin : plugins) {\nJarFile jar;\nManifest manifest = null;\ntry {\njar = new JarFile(plugin, false);\nmanifest = jar.getManifest();\n} catch (IOException e1) {\ne1.printStackTrace();\n}\nif (manifest == null) {\ncontinue;\n}\nAttributes attributes = manifest.getMainAttributes();\nif (attributes == null) {\ncontinue;\n}\nString pluginMainClass = attributes.getValue(\"SMS-Plugin-Main-Class\");\nif (pluginMainClass == null || pluginMainClass.length() <= 0) {\ncontinue;\n}\n// attempt to load the class; since it's in the plugins directory this should work\n//ClassLoader loader = common.getClassLoader();\nClass<?> pluginClass;\nString pluginMainMethod = null;\ntry {\npluginClass = Class.forName(pluginMainClass);\n} catch (ClassNotFoundException e) {\ncontinue;\n}\ntry {\n//handle plug-ins without \"main\" methods\npluginMainMethod = attributes.getValue(\"SMS-Plugin-Main-Method\");\nif (pluginMainMethod == null || pluginMainMethod.length() <= 0) {\n//just get an instance of the class\nred5Plugin = (IPlugin) pluginClass.newInstance();\n} else {\nMethod method = pluginClass.getMethod(pluginMainMethod, (Class<?>[]) null);\nObject o = method.invoke(null, (Object[]) null);\nif (o != null && o instanceof IPlugin) {\nred5Plugin = (IPlugin) o;\n}\n}\n//register and start\nif (red5Plugin != null) {\n//set top-level context\n//red5Plugin.setApplicationContext(applicationContext);\n//set server reference\nred5Plugin.setServer(server);\n//register the plug-in to make it available for lookups\nPluginRegistry.register(red5Plugin);\n//start the plugin\nred5Plugin.doStart();\n}\nlog.info(\"Loaded plugin: {}\", pluginMainClass);\n} catch (Throwable t) {\nlog.warn(\"Error loading plugin: {}; Method: {}\", pluginMainClass, pluginMainMethod);\nlog.error(\"\", t);\n}\n}\n} else {\nlog.info(\"Plugins directory cannot be accessed or doesnt exist\");\n}\n}\npublic void destroy() throws Exception {\nPluginRegistry.shutdown();\n}\n}",
                        "max_stars_repo_path": "src/com/sms/server/plugin/PluginLauncher.java",
                        "max_stars_repo_name": "vmflzja/sms",
                        "max_stars_count": 19,
                        "__cluster__": 1792
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 157
                },
                {
                        "id": "pretrain_java_data_11078427",
                        "content": "//,temp,QueueBrowsingLimitTest.java,80,112,temp,JDBCTablePrefixAssignedTest.java,66,92\n//,3\npublic class xxx {\n@Test\npublic void testBrowsingLimited() throws Exception {\nint messageToSend = 470;\nActiveMQQueue queue = new ActiveMQQueue(\"TEST\");\nConnection connection = factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(queue);\nString data = \"\";\nfor( int i=0; i < 1024*2; i++ ) {\ndata += \"x\";\n}\nfor( int i=0; i < messageToSend; i++ ) {\nproducer.send(session.createTextMessage(data));\n}\nQueueBrowser browser = session.createBrowser(queue);\nEnumeration<?> enumeration = browser.getEnumeration();\nint received = 0;\nwhile (enumeration.hasMoreElements()) {\nMessage m = (Message) enumeration.nextElement();\nreceived++;\nLOG.info(\"Browsed message \" + received + \": \" + m.getJMSMessageID());\n}\nbrowser.close();\nassertEquals(browserLimit, received);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1732_1.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 3293
                },
                {
                        "id": "test_logbench-o_data_3294",
                        "content": "@Test\npublic void testBrowsingLimited() throws Exception {\nint messageToSend = 470;\nActiveMQQueue queue = new ActiveMQQueue(\"TEST\");\nConnection connection = factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(queue);\nString data = \"\";\nfor (int i = 0; i < 1024 * 2; i++) {\ndata += \"x\";\n}\nfor (int i = 0; i < messageToSend; i++) {\nproducer.send(session.createTextMessage(data));\n}\nQueueBrowser browser = session.createBrowser(queue);\nEnumeration<?> enumeration = browser.getEnumeration();\nint received = 0;\nwhile (enumeration.hasMoreElements()) {\nMessage m = (Message) enumeration.nextElement();\nreceived++;\nLOG.info(\"Browsed message \" + received + \": \" + m.getJMSMessageID());\n}\nbrowser.close();\nassertEquals(browserLimit, received);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_QueueBrowsingLimitTest_testBrowsingLimited.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 3293
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 158
                },
                {
                        "id": "test_logbench-o_data_599",
                        "content": "@BeforeClass\npublic static void startServers() {\nif (started) {\nreturn;\n}\nstarted = true;\nquotesServer = new MockWebServer();\nhistQuotesServer = new MockWebServer();\ntry {\nquotesServer.start();\nhistQuotesServer.start();\n} catch (IOException e) {\nlog.error(\"Unable to start mock web server\", e);\n}\nString quotesBaseUrl = \"http://localhost:\" + quotesServer.getPort() + \"/d/quotes.csv\";\nString histQuotesBaseUrl = \"http://localhost:\" + histQuotesServer.getPort() + \"/table.csv\";\nSystem.setProperty(\"yahoofinance.baseurl.quotes\", quotesBaseUrl);\nSystem.setProperty(\"yahoofinance.baseurl.histquotes\", histQuotesBaseUrl);\nSystem.setProperty(\"yahoofinance.histquotes2.enabled\", \"false\");\nSystem.setProperty(\"yahoofinance.quotesquery1v7.enabled\", \"false\");\nfinal Dispatcher dispatcher = new YahooFinanceDispatcher();\nquotesServer.setDispatcher(dispatcher);\nhistQuotesServer.setDispatcher(dispatcher);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/yahoofinance-api_MockedServersTest_startServers.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 598
                },
                {
                        "id": "pretrain_java_data_11088302",
                        "content": "package yahoofinance.mock;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport org.junit.BeforeClass;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport yahoofinance.YahooFinance;\nimport java.io.IOException;\n/**\n*\n* @author <NAME>\n*/\npublic class MockedServersTest {\nprivate static final Logger log = LoggerFactory.getLogger(MockedServersTest.class);\nprivate static boolean started = false;\npublic static MockWebServer quotesServer;\npublic static MockWebServer histQuotesServer;\n@BeforeClass\npublic static void startServers() {\nif(started) {\nreturn;\n}\nstarted = true;\nquotesServer = new MockWebServer();\nhistQuotesServer = new MockWebServer();\ntry {\nquotesServer.start();\nhistQuotesServer.start();\n} catch (IOException e) {\nlog.error(\"Unable to start mock web server\", e);\n}\nString quotesBaseUrl = \"http://localhost:\" + quotesServer.getPort() + \"/d/quotes.csv\";\nString histQuotesBaseUrl = \"http://localhost:\" + histQuotesServer.getPort() + \"/table.csv\";\nSystem.setProperty(\"yahoofinance.baseurl.quotes\", quotesBaseUrl);\nSystem.setProperty(\"yahoofinance.baseurl.histquotes\", histQuotesBaseUrl);\nSystem.setProperty(\"yahoofinance.histquotes2.enabled\", \"false\");\nSystem.setProperty(\"yahoofinance.quotesquery1v7.enabled\", \"false\");\nfinal Dispatcher dispatcher = new YahooFinanceDispatcher();\nquotesServer.setDispatcher(dispatcher);\nhistQuotesServer.setDispatcher(dispatcher);\n}\n}",
                        "max_stars_repo_path": "src/test/java/yahoofinance/mock/MockedServersTest.java",
                        "max_stars_repo_name": "joelwembo/yahoofinance-api",
                        "max_stars_count": 446,
                        "__cluster__": 598
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 159
                },
                {
                        "id": "pretrain_java_data_11190334",
                        "content": "//,temp,JmsSchedulerTest.java,54,94,temp,JmsCronSchedulerTest.java,49,97\n//,3\npublic class xxx {\n@Test\npublic void testSimulatenousCron() throws Exception {\nfinal int COUNT = 10;\nfinal AtomicInteger count = new AtomicInteger();\nConnection connection = createConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(destination);\nfinal CountDownLatch latch = new CountDownLatch(COUNT);\nconsumer.setMessageListener(new MessageListener() {\n@Override\npublic void onMessage(Message message) {\ncount.incrementAndGet();\nlatch.countDown();\nassertTrue(message instanceof TextMessage);\nTextMessage tm = (TextMessage) message;\ntry {\nLOG.info(\"Received [{}] count: {} \", tm.getText(), count.get());\n} catch (JMSException e) {\nLOG.error(\"Unexpected exception in onMessage\", e);\nfail(\"Unexpected exception in onMessage: \" + e.getMessage());\n}\n}\n});\nconnection.start();\nfor (int i = 0; i < COUNT; i++) {\nMessageProducer producer = session.createProducer(destination);\nTextMessage message = session.createTextMessage(\"test msg \"+ i);\nmessage.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, \"* * * * *\");\nproducer.send(message);\nLOG.info(\"Message {} sent at {}\", i, new Date().toString());\nproducer.close();\n// wait a couple sec so cron start time is different for next message\nThread.sleep(2000);\n}\nSchedulerBroker sb = (SchedulerBroker) this.broker.getBroker().getAdaptor(SchedulerBroker.class);\nJobScheduler js = sb.getJobScheduler();\nList<Job> list = js.getAllJobs();\nassertEquals(COUNT, list.size());\nlatch.await(2, TimeUnit.MINUTES);\n// All should messages should have been received by now\nassertEquals(COUNT, count.get());\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1807_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1626
                },
                {
                        "id": "test_logbench-o_data_1627",
                        "content": "@Test\npublic void testSimulatenousCron() throws Exception {\nfinal int COUNT = 10;\nfinal AtomicInteger count = new AtomicInteger();\nConnection connection = createConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(destination);\nfinal CountDownLatch latch = new CountDownLatch(COUNT);\nconsumer.setMessageListener(new MessageListener() {\n@Override\npublic void onMessage(Message message) {\ncount.incrementAndGet();\nlatch.countDown();\nassertTrue(message instanceof TextMessage);\nTextMessage tm = (TextMessage) message;\ntry {\nLOG.info(\"Received [{}] count: {} \", tm.getText(), count.get());\n} catch (JMSException e) {\nLOG.error(\"Unexpected exception in onMessage\", e);\nfail(\"Unexpected exception in onMessage: \" + e.getMessage());\n}\n}\n});\nconnection.start();\nfor (int i = 0; i < COUNT; i++) {\nMessageProducer producer = session.createProducer(destination);\nTextMessage message = session.createTextMessage(\"test msg \" + i);\nmessage.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, \"* * * * *\");\nproducer.send(message);\nLOG.info(\"Message {} sent at {}\", i, new Date().toString());\nproducer.close();\n// wait a couple sec so cron start time is different for next message\nThread.sleep(2000);\n}\nSchedulerBroker sb = (SchedulerBroker) this.broker.getBroker().getAdaptor(SchedulerBroker.class);\nJobScheduler js = sb.getJobScheduler();\nList<Job> list = js.getAllJobs();\nassertEquals(COUNT, list.size());\nlatch.await(2, TimeUnit.MINUTES);\n// All should messages should have been received by now\nassertEquals(COUNT, count.get());\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_JmsCronSchedulerTest_testSimulatenousCron.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1626
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 160
                },
                {
                        "id": "test_logbench-o_data_1249",
                        "content": "@Test(timeout = 120 * 1000)\npublic void testMissingLogsCausesBrokerToFail() throws Exception {\nfillUpSomeLogFiles();\nint jobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();\nLOG.info(\"There are {} jobs in the store.\", jobCount);\nList<File> toDelete = new ArrayList<File>();\nMap<Integer, DataFile> files = schedulerStore.getJournal().getFileMap();\nfor (int i = files.size(); i > files.size() / 2; i--) {\ntoDelete.add(files.get(i).getFile());\n}\nbroker.stop();\nbroker.waitUntilStopped();\nfor (File file : toDelete) {\nLOG.info(\"File to delete: {}\", file);\nIOHelper.delete(file);\n}\ntry {\ncreateBroker();\nbroker.start();\nfail(\"Should not start when logs are missing.\");\n} catch (Exception e) {\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-O_prefix_1point/activemq_KahaDBSchedulerMissingJournalLogsTest_testMissingLogsCausesBrokerToFail.java",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1248
                },
                {
                        "id": "pretrain_java_data_14286572",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,KahaDBSchedulerMissingJournalLogsTest.java,128,159,temp,KahaDBSchedulerMissingJournalLogsTest.java,99,126\n//,3\npublic class xxx {\n@Test(timeout=120 * 1000)\npublic void testMissingLogsCausesBrokerToFail() throws Exception {\nfillUpSomeLogFiles();\nint jobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();\nLOG.info(\"There are {} jobs in the store.\", jobCount);\nList<File> toDelete = new ArrayList<File>();\nMap<Integer, DataFile> files = schedulerStore.getJournal().getFileMap();\nfor (int i = files.size(); i > files.size() / 2; i--) {\ntoDelete.add(files.get(i).getFile());\n}\nbroker.stop();\nbroker.waitUntilStopped();\nfor (File file : toDelete) {\nLOG.info(\"File to delete: {}\", file);\nIOHelper.delete(file);\n}\ntry {\ncreateBroker();\nbroker.start();\nfail(\"Should not start when logs are missing.\");\n} catch (Exception e) {\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/932_2.java",
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "max_stars_count": 0,
                        "__cluster__": 1248
                },
                {
                        "real_dup": "2"
                }
        ]
]