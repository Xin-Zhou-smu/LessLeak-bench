[
        {
                "data_len": 205
        },
        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "id": "pretrain_python_data_20460",
                        "content": "A, B = map(int, input().split())\nprint((A - 1) * (B - 1))",
                        "max_stars_repo_path": "contest/abc106/A.py",
                        "max_stars_repo_name": "mola1129/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1098",
                        "content": "a, b, c = map(int, input().split())\nif (a + c) // 2 == b:\nprint('Yes')\nelse:\nprint('No')\na, b, c = map(int, input().split())\nif a <= b <= c or c <= b <= a:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc253_a/Python/45510646",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "id": "pretrain_python_data_187501",
                        "content": "a, b, c = map(int, input().split())\nif (a == b and a != c) or (a ==c and a != b) or (b == c and b != a):\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "atcoder/AtCoder_Beginner_Contest_155/abc155A.py",
                        "max_stars_repo_name": "juseongkr/BOJ",
                        "max_stars_count": 7,
                        "__cluster__": 1097
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_183541",
                        "content": "<gh_stars>0\nn, m = map(int, input().split())\nprint(n - 1 + n * (m - 1))",
                        "max_stars_repo_path": "baekjoon/2163.py",
                        "max_stars_repo_name": "phillip5094/algorithm-practice",
                        "max_stars_count": 0,
                        "__cluster__": 350
                },
                {
                        "id": "test_condefects-python_data_351",
                        "content": "n, m, p = map(int, input().split())\nprint((n - m + 1) // p)\nn, m, p = map(int, input().split())\nprint(((n - m + 1) + p - 1) // p)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc318_a/Python/46036999",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 350
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_98467",
                        "content": "n,m=map(int,input().split())\nprint((n-1)*(m-1))",
                        "max_stars_repo_path": "code/abc069_a_01.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 341
                },
                {
                        "id": "test_condefects-python_data_342",
                        "content": "n,m,p=map(int,input().split())\nprint((n-m)//p)\nn,m,p=map(int,input().split())\nprint((n-m)//p+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc318_a/Python/45804770",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 341
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_104700",
                        "content": "t = int(input())\nfor i in range(t):\nn = input()\nrev_n = int(n[::-1])\nprint(rev_n)",
                        "max_stars_repo_path": "src/Codechef/Beginner/FLOW007.py",
                        "max_stars_repo_name": "phungj/MSOE_Comp_Prog_Py",
                        "max_stars_count": 0,
                        "__cluster__": 991
                },
                {
                        "id": "test_condefects-python_data_992",
                        "content": "n = input()\nn = int(n)\nfor i in range(10,-1,-1):\nprint(i)\nn = input()\nn = int(n)\nfor i in range(n,-1,-1):\nprint(i)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc281_a/Python/45244769",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 991
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_1632998",
                        "content": "A, B = map(int, input().split())\nprint((1 - B / A) * 100)",
                        "max_stars_repo_path": "atcoder/abc/a193.py",
                        "max_stars_repo_name": "tomato-300yen/coding",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_1653726",
                        "content": "A, B = map(int, input().split())\nprint(A * B - (A + B - 1))",
                        "max_stars_repo_path": "abc/abc106/abc106a.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1632998",
                        "content": "A, B = map(int, input().split())\nprint((1 - B / A) * 100)",
                        "max_stars_repo_path": "atcoder/abc/a193.py",
                        "max_stars_repo_name": "tomato-300yen/coding",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1632998",
                        "content": "A, B = map(int, input().split())\nprint((1 - B / A) * 100)",
                        "max_stars_repo_path": "atcoder/abc/a193.py",
                        "max_stars_repo_name": "tomato-300yen/coding",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_1409",
                        "content": "A,B = map(int,input().split())\nprint(A//B+1)\nA,B = map(int,input().split())\nprint((A-1)//B+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/46001200",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_1653726",
                        "content": "A, B = map(int, input().split())\nprint(A * B - (A + B - 1))",
                        "max_stars_repo_path": "abc/abc106/abc106a.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1653726",
                        "content": "A, B = map(int, input().split())\nprint(A * B - (A + B - 1))",
                        "max_stars_repo_path": "abc/abc106/abc106a.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_1409",
                        "content": "A,B = map(int,input().split())\nprint(A//B+1)\nA,B = map(int,input().split())\nprint((A-1)//B+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/46001200",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1653726",
                        "content": "A, B = map(int, input().split())\nprint(A * B - (A + B - 1))",
                        "max_stars_repo_path": "abc/abc106/abc106a.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_1412",
                        "content": "A,B = map(int,input().split())\nif A%B == 0:\nprint(int(A/B))\nelse:\nprint(int(A//B)+1)\nA,B = map(int,input().split())\nif A%B == 0:\nprint(int((A+B-1)//B))\nelse:\nprint(int(A//B)+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45783782",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_788",
                        "content": "N=int(input())\nprint(\"Yes\" if -2**31<=N<=2**31 else \"No\")\nN=int(input())\nprint(\"Yes\" if -2**31<=N<2**31 else \"No\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc237_a/Python/46166262",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 586
                },
                {
                        "id": "pretrain_python_data_1656398",
                        "content": "N = input()\nprint(\"Yes\" if N[0] == N[2] else \"No\")",
                        "max_stars_repo_path": "code/abc070_a_04.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 586
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1656398",
                        "content": "N = input()\nprint(\"Yes\" if N[0] == N[2] else \"No\")",
                        "max_stars_repo_path": "code/abc070_a_04.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 586
                },
                {
                        "id": "test_condefects-python_data_786",
                        "content": "N=int(input())\nif -2**31<N<2**31:\nprint(\"Yes\")\nelse:\nprint(\"No\")\nN=int(input())\nif -2**31<=N<2**31:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc237_a/Python/45710805",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 586
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1656398",
                        "content": "N = input()\nprint(\"Yes\" if N[0] == N[2] else \"No\")",
                        "max_stars_repo_path": "code/abc070_a_04.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 586
                },
                {
                        "id": "test_condefects-python_data_587",
                        "content": "N = int(input())\nif 2**N>N:\nprint(\"Yes\")\nelse:\nprint(\"No\")\nN = int(input())\nif 2**N>N**2:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc238_a/Python/45742740",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 586
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1851",
                        "content": "a=[*map(int, input().split())]\na[a[a[0]]]\na=[*map(int, input().split())]\nprint(a[a[a[0]]])",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc241_a/Python/46045206",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1154
                },
                {
                        "id": "pretrain_python_data_6484496",
                        "content": "W, a, b = map(int, input().split())\nprint(max(0, max(b - (a + W), a - (b + W))))",
                        "max_stars_repo_path": "abc/056/B.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1154
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_8013686",
                        "content": "# \ube44\ud2b8\ub2e8\uc704\ub85c AND \ud558\uc5ec \ucd9c\ub825\ud558\uae30\na, b = map(int, input().split())\nprint(a&b)",
                        "max_stars_repo_path": "CodeUp/6060.py",
                        "max_stars_repo_name": "chae-heechan/Algorithm_Study",
                        "max_stars_count": 0,
                        "__cluster__": 1154
                },
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1154
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_8013686",
                        "content": "# \ube44\ud2b8\ub2e8\uc704\ub85c AND \ud558\uc5ec \ucd9c\ub825\ud558\uae30\na, b = map(int, input().split())\nprint(a&b)",
                        "max_stars_repo_path": "CodeUp/6060.py",
                        "max_stars_repo_name": "chae-heechan/Algorithm_Study",
                        "max_stars_count": 0,
                        "__cluster__": 1154
                },
                {
                        "id": "test_condefects-python_data_1155",
                        "content": "a,b = map(int,input().split())\nans = a ^ b\nprint(ans)\na,b = map(int,input().split())\nans = a | b\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc270_a/Python/44921373",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1154
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1419",
                        "content": "A,B=map(int, input().split())\nif A%3==0 and B==A+1:\nprint('No')\nelif A==B-1 or A==B-3:\nprint('Yes')\nelse:\nprint('No')\nA,B=map(int, input().split())\nif A%3==0 and B==A+1:\nprint('No')\nelif A==B-1:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc309_a/Python/46161633",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1418
                },
                {
                        "id": "pretrain_python_data_6581166",
                        "content": "<gh_stars>1-10\nA, B = map(int, input().split())\nif A%2 != 0 and B%2 != 0:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "AtCoder/ABC109/A.py",
                        "max_stars_repo_name": "takaaki82/Java-Lessons",
                        "max_stars_count": 1,
                        "__cluster__": 1418
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_6489034",
                        "content": "n = int(input())\ns = input()\ncnt = 0\nans = ''\nfor i in range(n):\nif s[i] == '(':\ncnt += 1\nelse:\ncnt -= 1\nif cnt < 0:\nans += '('\ncnt = 0\nans += s\nif cnt > 0:\nfor i in range(cnt):\nans += ')'\nprint(ans)",
                        "max_stars_repo_path": "contest/abc064/D.py",
                        "max_stars_repo_name": "mola1129/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 1380
                },
                {
                        "id": "test_condefects-python_data_1863",
                        "content": "n=int(input())\ns=input()\ns=list(s)\ncnt=0\nfor i in range(n):\nif s[i]=='\"':\ncnt+=1\nif s[i]==\",\":\nif cnt%2==1:\ns[i]=\".\"\nans=\"\"\nfor i in range(n):\nans+=s[i]\nprint(ans)\nn=int(input())\ns=input()\ns=list(s)\ncnt=0\nfor i in range(n):\nif s[i]=='\"':\ncnt+=1\nif s[i]==\",\":\nif cnt%2==0:\ns[i]=\".\"\nans=\"\"\nfor i in range(n):\nans+=s[i]\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc282_c/Python/44818334",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1380
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_6489034",
                        "content": "n = int(input())\ns = input()\ncnt = 0\nans = ''\nfor i in range(n):\nif s[i] == '(':\ncnt += 1\nelse:\ncnt -= 1\nif cnt < 0:\nans += '('\ncnt = 0\nans += s\nif cnt > 0:\nfor i in range(cnt):\nans += ')'\nprint(ans)",
                        "max_stars_repo_path": "contest/abc064/D.py",
                        "max_stars_repo_name": "mola1129/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 1380
                },
                {
                        "id": "test_condefects-python_data_1381",
                        "content": "n=int(input())\ns=input()\nt=input()\ncnt=0\nans=''\nfor i in range(n):\nif(s[i]!=t[i]):\ncnt+=1\nif(cnt%2==1):\nans='-1'\nelse:\nhum_s=0\nhum_t=0\nfor i in range(n):\nif(s[i]==t[i]):\nans+='0'\nelif(s[i]==0):\nif(hum_t<cnt//2):\nans+='0'\nhum_t+=1\nelse:\nans+='1'\nhum_s+=1\nelse:\nif(hum_s<cnt//2):\nans+='0'\nhum_s+=1\nelse:\nans+='1'\nhum_t+=1\nprint(ans)\nn=int(input())\ns=input()\nt=input()\ncnt=0\nans=''\nfor i in range(n):\nif(s[i]!=t[i]):\ncnt+=1\nif(cnt%2==1):\nans='-1'\nelse:\nhum_s=0\nhum_t=0\nfor i in range(n):\nif(s[i]==t[i]):\nans+='0'\nelif(s[i]=='0'):\nif(hum_t<cnt//2):\nans+='0'\nhum_t+=1\nelse:\nans+='1'\nhum_s+=1\nelse:\nif(hum_s<cnt//2):\nans+='0'\nhum_s+=1\nelse:\nans+='1'\nhum_t+=1\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/arc151_a/Python/44901492",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1380
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_6514502",
                        "content": "A, B, C = map(int, input().split())\nprint(A if B == C else B if A == C else C)",
                        "max_stars_repo_path": "code/answer_3-1-20.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder-Python-Introduction",
                        "max_stars_count": 1,
                        "__cluster__": 2174
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2174
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 422
                },
                {
                        "id": "pretrain_python_data_9609660",
                        "content": "a, b = map(int, input().split())\nprint(a * b, a * 2 + b * 2)",
                        "max_stars_repo_path": "contests/aizu/itp1/1c.py",
                        "max_stars_repo_name": "conao3/coder",
                        "max_stars_count": 0,
                        "__cluster__": 422
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 422
                },
                {
                        "id": "pretrain_python_data_9653813",
                        "content": "a, b = map(int, input().split())\nprint(a * b, 2 * a + 2 * b)",
                        "max_stars_repo_path": "ITP1/ITP1_1_C.py",
                        "max_stars_repo_name": "c-yan/aoj",
                        "max_stars_count": 0,
                        "__cluster__": 422
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_9755098",
                        "content": "<gh_stars>0\n# \u30d1\u30c3\u30af\u304b\u3089\u30ad\u30e3\u30f3\u30c7\u30a3\u30fc\u306f\u53d6\u308a\u51fa\u305b\u306a\u3044\u306e\u3067\u3001\u5fc5\u305a\u30d1\u30c3\u30af\u306f2-1\u306b\u306a\u308b\u3002\n# \u306a\u306e\u3067\u3001\u30d1\u30c3\u30af1\u3064\u306e\u30ad\u30e3\u30f3\u30c7\u30a3\u30fc\u306e\u6570 = \u30d1\u30c3\u30af2\u3064\u306e\u30ad\u30e3\u30f3\u30c7\u30a3\u30fc\u306e\u6570\na, b, c = map(int, input().split())\nif a == b + c or b == c + a or c == a + b:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "AtCoder/ABC/A/page-1/047A.py",
                        "max_stars_repo_name": "Nishi05/Competitive-programming",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "id": "test_condefects-python_data_1098",
                        "content": "a, b, c = map(int, input().split())\nif (a + c) // 2 == b:\nprint('Yes')\nelse:\nprint('No')\na, b, c = map(int, input().split())\nif a <= b <= c or c <= b <= a:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc253_a/Python/45510646",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1732",
                        "content": "S = input() + input()\nif S == '.#.#' or S == '#.#.' :\nprint('No')\nelse:\nprint('Yes')\nS = input() + input()\nif S == '.##.' or S == '#..#' :\nprint('No')\nelse:\nprint('Yes')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc229_a/Python/44625287",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 461
                },
                {
                        "id": "pretrain_python_data_11287683",
                        "content": "S = input()\nT = input()\nprint('Yes' if S[:] == T[:-1] else 'No')",
                        "max_stars_repo_path": "AtCoder/ABC/160-169/ABC167_A.py",
                        "max_stars_repo_name": "sireline/PyCode",
                        "max_stars_count": 0,
                        "__cluster__": 461
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2153",
                        "content": "print(int(input())%100)\nprint(input()[1:])",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc254_a/Python/45547154",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2152
                },
                {
                        "id": "pretrain_python_data_9727769",
                        "content": "print(int(input())^1)",
                        "max_stars_repo_path": "AtCoder/AtCoder_Beginner_Contest_178/A_Not/A.py",
                        "max_stars_repo_name": "sungmen/Acmicpc_Solve",
                        "max_stars_count": 1,
                        "__cluster__": 2152
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1098",
                        "content": "a, b, c = map(int, input().split())\nif (a + c) // 2 == b:\nprint('Yes')\nelse:\nprint('No')\na, b, c = map(int, input().split())\nif a <= b <= c or c <= b <= a:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc253_a/Python/45510646",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 283
                },
                {
                        "id": "pretrain_python_data_11382747",
                        "content": "a, b, c = list(map(int, input().split(' ')))\nif a**2 + b**2 < c**2:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "abc199/a.py",
                        "max_stars_repo_name": "ysmtegsr/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 283
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1850
                },
                {
                        "id": "pretrain_python_data_12851167",
                        "content": "a, b = map(int, input().split())\nprint((a%b)*(b%a)+1)",
                        "max_stars_repo_path": "pindividual.py",
                        "max_stars_repo_name": "IsSveshuD/lab_3",
                        "max_stars_count": 0,
                        "__cluster__": 1850
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2697",
                        "content": "S = input()\nfor i in range(len(S)-1):\nif S[i-1] != S[i] and S[i] != S[i+1]:\nprint(i+1)\nS = input()\nfor i in range(len(S)-1):\nif S[i-1] != S[i] and S[i] != S[i+1]:\nprint(i+1)\nexit()\nprint(len(S))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc342_a/Python/54672989",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2696
                },
                {
                        "id": "pretrain_python_data_227577",
                        "content": "S = input()\nfor i in range(len(S)):\nprint(i + 1)",
                        "max_stars_repo_path": "AtCoder/Tenaka12019exhibition/A.py",
                        "max_stars_repo_name": "takaaki82/Java-Lessons",
                        "max_stars_count": 1,
                        "__cluster__": 2696
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_336852",
                        "content": "# [a, b] = map(int, input().split())\n[a,b] = map(int, raw_input().split())\nprint a**2 + b**2",
                        "max_stars_repo_path": "rosalind/ini2.py",
                        "max_stars_repo_name": "sowmyamanojna/BT3051-Data-Structures-and-Algorithms",
                        "max_stars_count": 1,
                        "__cluster__": 2173
                },
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2173
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1843123",
                        "content": "N, A, B = map(int, input().split())\nprint(min(B, A * N))",
                        "max_stars_repo_path": "atcoder/abc/a133.py",
                        "max_stars_repo_name": "tomato-300yen/coding",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1843123",
                        "content": "N, A, B = map(int, input().split())\nprint(min(B, A * N))",
                        "max_stars_repo_path": "atcoder/abc/a133.py",
                        "max_stars_repo_name": "tomato-300yen/coding",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1922031",
                        "content": "S = input()\nprint(\"Yes\" if S.startswith(\"MUJIN\") else \"No\")",
                        "max_stars_repo_path": "atcoder/corp/mujin2018_a.py",
                        "max_stars_repo_name": "knuu/competitive-programming",
                        "max_stars_count": 1,
                        "__cluster__": 461
                },
                {
                        "id": "test_condefects-python_data_1732",
                        "content": "S = input() + input()\nif S == '.#.#' or S == '#.#.' :\nprint('No')\nelse:\nprint('Yes')\nS = input() + input()\nif S == '.##.' or S == '#..#' :\nprint('No')\nelse:\nprint('Yes')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc229_a/Python/44625287",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 461
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1197",
                        "content": "x = int(input())\nif x % 10 == 0:\nprint(x)\nelse:\nprint(x // 10 + 1)\nx = int(input())\nif x % 10 == 0:\nprint(x // 10)\nelse:\nprint(x // 10 + 1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc345_b/Python/54913953",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1196
                },
                {
                        "id": "pretrain_python_data_1922940",
                        "content": "x=int(input())\nif x&(x-1): print(0)\nelse: print(1)",
                        "max_stars_repo_path": "problem/10000~19999/11966/11966.py3.py",
                        "max_stars_repo_name": "njw1204/BOJ-AC",
                        "max_stars_count": 1,
                        "__cluster__": 1196
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1922940",
                        "content": "x=int(input())\nif x&(x-1): print(0)\nelse: print(1)",
                        "max_stars_repo_path": "problem/10000~19999/11966/11966.py3.py",
                        "max_stars_repo_name": "njw1204/BOJ-AC",
                        "max_stars_count": 1,
                        "__cluster__": 1196
                },
                {
                        "id": "test_condefects-python_data_1200",
                        "content": "x = int(input())\nif x % 10 == 0:\nprint(int(x / 10))\nelse:\nprint(int(x // 10 + 1))\nx = int(input())\nif x % 10 == 0:\nprint(int(x // 10))\nelse:\nprint(int(x // 10 + 1))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc345_b/Python/54787477",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1196
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_3489840",
                        "content": "A, B = map(int, input().split())\nprint(100*(A-B)/A)",
                        "max_stars_repo_path": "code/answer_2-1-23.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder-Python-Introduction",
                        "max_stars_count": 1,
                        "__cluster__": 1411
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1411
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1411
                },
                {
                        "id": "pretrain_python_data_1923993",
                        "content": "N, A, B = map(int, input().split())\nans = min(N * A, B)\nprint(ans)",
                        "max_stars_repo_path": "abc/133/a.py",
                        "max_stars_repo_name": "wotsushi/competitive-programming",
                        "max_stars_count": 3,
                        "__cluster__": 1411
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_585",
                        "content": "n = int(input())\nif n**2 > 2**n:\nprint(\"Yes\")\nelse:\nprint(\"No\")\nn = int(input())\nif 2**n > n**2:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc238_a/Python/45742753",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 582
                },
                {
                        "id": "pretrain_python_data_5028836",
                        "content": "n = int(input())\nif n %2:\nprint(n//2+1)\nelse:\nprint(n//2)",
                        "max_stars_repo_path": "src/abc/157/a.py",
                        "max_stars_repo_name": "ryuichi1208/atcoder_stack",
                        "max_stars_count": 0,
                        "__cluster__": 582
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_730",
                        "content": "a, b, c, x = map(int, input().split())\nif x <= a:\nprint(1)\nelif a < x <= b:\nprint(c/(b-a+1))\nelse:\nprint(0)\na, b, c, x = map(int, input().split())\nif x <= a:\nprint(1)\nelif a < x <= b:\nprint(c/(b-a))\nelse:\nprint(0)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc242_a/Python/45690151",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 729
                },
                {
                        "id": "pretrain_python_data_3581071",
                        "content": "a, b, c, x = map(int, input().split())\nif x <= a:\nprint(1)\nelif x <= b:\nprint(c / (b-a))\nelse:\nprint(0)",
                        "max_stars_repo_path": "AtCoder/ABC242/A/abc242_a.py",
                        "max_stars_repo_name": "object-oriented-human/competitive",
                        "max_stars_count": 1,
                        "__cluster__": 729
                },
                {
                        "real_dup": 2
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1512",
                        "content": "n,d=map(int,input().split())\nt=list(map(int,input().split()))\nfor i in range(n-1):\nif t[i+1]-t[i]<=d:\nprint(t[i])\nbreak\nelse:\nprint(-1)\nn,d=map(int,input().split())\nt=list(map(int,input().split()))\nfor i in range(n-1):\nif t[i+1]-t[i]<=d:\nprint(t[i+1])\nbreak\nelse:\nprint(-1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc297_a/Python/45496094",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1502
                },
                {
                        "id": "pretrain_python_data_5015242",
                        "content": "n = int(input())\na = list(map(int, input().split()))\na.sort()\nfor i in range(n):\nif i+1 != a[i]:\nprint(\"No\")\nbreak\nelse:\nprint(\"Yes\")",
                        "max_stars_repo_path": "ABC200-250/ABC205/abc205_b.py",
                        "max_stars_repo_name": "billyio/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 1502
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_162",
                        "content": "n = int(input())\na = list(map(int, input().split()))\nl = [0]*(n)\nr = [0]*(n)\nl[0] = 1\nr[0] = 1\nfor i in range(1, n):\nl[i] = min(l[i - 1] + 1, a[i])\nfor i in range(1, n):\nr[i] = min(r[i - 1] + 1, a[n - i])\nans = 1\nfor i in range(n):\nif ans < min(l[i], r[n - i - 1]):\nans = min(l[i], r[n - i - 1])\nprint(ans)\nn = int(input())\na = list(map(int, input().split()))\nl = [0]*(n)\nr = [0]*(n)\nl[0] = 1\nr[0] = 1\nfor i in range(1, n):\nl[i] = min(l[i - 1] + 1, a[i])\nfor i in range(1, n):\nr[i] = min(r[i - 1] + 1, a[n - i - 1])\nans = 1\nfor i in range(n):\nif ans < min(l[i], r[n - i - 1]):\nans = min(l[i], r[n - i - 1])\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc336_d/Python/53237033",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 161
                },
                {
                        "id": "pretrain_python_data_6622166",
                        "content": "n, x = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n - 1):\nans += (a[i + 1] - a[i] - 1) // x\nprint(ans)",
                        "max_stars_repo_path": "stairs/solutions/stairs_ns_ok1.py",
                        "max_stars_repo_name": "upmltech/hmopen2019",
                        "max_stars_count": 0,
                        "__cluster__": 161
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_8323877",
                        "content": "x, y = map(int, input().split())\nprint('Yes' if abs(x - y) <= 2 else 'No')",
                        "max_stars_repo_path": "atcoder/contests/abc188/A.py",
                        "max_stars_repo_name": "wingkwong/competitive-programming",
                        "max_stars_count": 18,
                        "__cluster__": 1097
                },
                {
                        "id": "test_condefects-python_data_1680",
                        "content": "x, y = map(int, input().split())\nprint(\"Yes\" if y - x == 2 or x - y == 3 else \"No\")\nx, y = map(int, input().split())\nprint(\"Yes\" if 0 < y - x <= 2 or 0 < x - y <= 3 else \"No\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc326_a/Python/54729093",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_8323877",
                        "content": "x, y = map(int, input().split())\nprint('Yes' if abs(x - y) <= 2 else 'No')",
                        "max_stars_repo_path": "atcoder/contests/abc188/A.py",
                        "max_stars_repo_name": "wingkwong/competitive-programming",
                        "max_stars_count": 18,
                        "__cluster__": 1097
                },
                {
                        "id": "test_condefects-python_data_1684",
                        "content": "x,y = map(int,input().split())\nif y-x == 2 or x-y == 3:\nprint(\"Yes\")\nelse:\nprint(\"No\")\nx,y = map(int,input().split())\nif 0 <= y-x <= 2 or 0 <= x-y <= 3:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc326_a/Python/54933438",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1075",
                        "content": "s=input()\nfor i in range(len(s)):\nif s[-i-1]==\"a\":\nprint((len(s))-i)\nbreak\nprint(-1)\nbreak\ns=input()\nfor i in range(len(s)):\nif s[-i-1]==\"a\":\nprint((len(s))-i)\nbreak\nelse:\nprint(-1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc276_a/Python/45481761",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1074
                },
                {
                        "id": "pretrain_python_data_6795111",
                        "content": "s = input()\nfor i in range(len(s) - 1):\nif s[i] == s[i+1]:\nprint(\"Bad\")\nbreak\nelse:\nprint(\"Good\")",
                        "max_stars_repo_path": "recommendations/abc131_a.py",
                        "max_stars_repo_name": "takelifetime/competitive-programming",
                        "max_stars_count": 0,
                        "__cluster__": 1074
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1409",
                        "content": "A,B = map(int,input().split())\nprint(A//B+1)\nA,B = map(int,input().split())\nprint((A-1)//B+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/46001200",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_8316265",
                        "content": "A, B, C = map(int, input().split())\nprint(A+B+C-min(A, B, C))",
                        "max_stars_repo_path": "code/answer_5-4-11.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder-Python-Introduction",
                        "max_stars_count": 1,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_8316265",
                        "content": "A, B, C = map(int, input().split())\nprint(A+B+C-min(A, B, C))",
                        "max_stars_repo_path": "code/answer_5-4-11.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder-Python-Introduction",
                        "max_stars_count": 1,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_9822860",
                        "content": "N = int(input())\nA = set(list(map(int, input().split())))\nif len(A) == N:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "abc/abc205/b/main.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1414
                },
                {
                        "id": "test_condefects-python_data_1415",
                        "content": "N=int(input())\nA = set(map(int, input().split()))\nprint('Yes' if len(A) else 'No')\nN=int(input())\nA = set(map(int, input().split()))\nprint('Yes' if len(A)==1 else 'No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc324_a/Python/54455002",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1414
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_83",
                        "content": "N = int(input())\nH = list(map(int, input().split()))\nans = 0\nfor i in range(N -1):\nif H[i] < H[i + 1] :\nans = H[i + 1]\nif H[0] >= H[1]:\nans = H[0]\nelse: break\nprint(ans)\nN = int(input())\nH = list(map(int, input().split()))\nans = 0\nfor i in range(N -1):\nif H[i] < H[i + 1] :\nans = H[i + 1]\nelif H[0] >= H[1]:\nans = H[0]\nelse: break\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc235_b/Python/45931351",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 81
                },
                {
                        "id": "pretrain_python_data_11577678",
                        "content": "<gh_stars>0\nN = int(input())\nA = list(map(int, input().split()))\nmx = A[0]\nans = 0\nfor i in range(1, N):\nif A[i] < mx:\nans += mx-A[i]\nelif A[i] > mx:\nmx = A[i]\nprint(ans)",
                        "max_stars_repo_path": "ABC_C/ABC176_C.py",
                        "max_stars_repo_name": "ryosuke0825/atcoder_python",
                        "max_stars_count": 0,
                        "__cluster__": 81
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_965",
                        "content": "N = int(input())\nA = input()\ncount = 0\nfor i in range(2*N-2):\nif A[i] == A[i+2]:\ncount += 1\nprint(count)\nN = int(input())\nA = list(map(int,input().split()))\ncount = 0\nfor i in range(2*N-2):\nif A[i] == A[i+2]:\ncount += 1\nprint(count)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc359_b/Python/55032387",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 81
                },
                {
                        "id": "pretrain_python_data_11577678",
                        "content": "<gh_stars>0\nN = int(input())\nA = list(map(int, input().split()))\nmx = A[0]\nans = 0\nfor i in range(1, N):\nif A[i] < mx:\nans += mx-A[i]\nelif A[i] > mx:\nmx = A[i]\nprint(ans)",
                        "max_stars_repo_path": "ABC_C/ABC176_C.py",
                        "max_stars_repo_name": "ryosuke0825/atcoder_python",
                        "max_stars_count": 0,
                        "__cluster__": 81
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 729
                },
                {
                        "id": "pretrain_python_data_11541944",
                        "content": "n,a,b = map(int, input().split())\nprint(min(n*a, b))",
                        "max_stars_repo_path": "atcoder/abc080/a.py",
                        "max_stars_repo_name": "sugitanishi/competitive-programming",
                        "max_stars_count": 0,
                        "__cluster__": 729
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "id": "pretrain_python_data_11525228",
                        "content": "A, B, C = map(int, input().split())\ntemp = A\nA = B\nB = temp\nA *= C\nB += C\nprint(A, B)",
                        "max_stars_repo_path": "Codes/Python/13_Reasons_Why.py",
                        "max_stars_repo_name": "ayushchauhan09/My-Codes",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "id": "pretrain_python_data_11586768",
                        "content": "A, B, C = map(int, input().split())\nans = B\nans += min(A + B + 1, C)\nprint(ans)",
                        "max_stars_repo_path": "Atcoder/AGC030/Q1.py",
                        "max_stars_repo_name": "taiki-okano/Competitive-Programming",
                        "max_stars_count": 1,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_11525228",
                        "content": "A, B, C = map(int, input().split())\ntemp = A\nA = B\nB = temp\nA *= C\nB += C\nprint(A, B)",
                        "max_stars_repo_path": "Codes/Python/13_Reasons_Why.py",
                        "max_stars_repo_name": "ayushchauhan09/My-Codes",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1098",
                        "content": "a, b, c = map(int, input().split())\nif (a + c) // 2 == b:\nprint('Yes')\nelse:\nprint('No')\na, b, c = map(int, input().split())\nif a <= b <= c or c <= b <= a:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc253_a/Python/45510646",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "id": "pretrain_python_data_11460500",
                        "content": "# coding: utf-8\na, b, c = map(int, input().split())\nif (a + b >= c):\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "atcoder/abc/abc_091/a_.py",
                        "max_stars_repo_name": "hsmtknj/programming-contest",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "id": "pretrain_python_data_9999468",
                        "content": "N = int(input())\na,b = map(int,(input().split()))\nc = a | b\nprint(c)",
                        "max_stars_repo_path": "or.py",
                        "max_stars_repo_name": "abishak-cit/Python_Abi",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_435450",
                        "content": "n = int(input())\nfor i in range(1, n+1):\nif n%i == 0:\nprint(i)",
                        "max_stars_repo_path": "1157.py",
                        "max_stars_repo_name": "Valarr/Uri",
                        "max_stars_count": 0,
                        "__cluster__": 2036
                },
                {
                        "id": "test_condefects-python_data_2255",
                        "content": "n = int(input())\nfor i in range(n+1):\nif i**i > n: break\nif i**i == n:\nprint(i)\nexit()\nprint(-1)\nn = int(input())\nfor i in range(1,n+1):\nif i**i > n: break\nif i**i == n:\nprint(i)\nexit()\nprint(-1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc327_b/Python/55112756",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2036
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2036",
                        "content": "H = int(input())\na = 0\ni = 1\nwhile True:\na = a + 2 ** i\ni += 1\nif a > H:\nprint(i)\nbreak\nH = int(input())\na = 0\ni = 1\nwhile True:\na = a + 2 ** i\ni += 1\nif a >= H:\nprint(i)\nbreak",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc354_a/Python/55041411",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2035
                },
                {
                        "id": "pretrain_python_data_598532",
                        "content": "a = int(input())\ni = 2\nwhile i <= a:\nif a % i == 0:\nprint(i)\nbreak\ni += 1",
                        "max_stars_repo_path": "Week 2: Conditional statement and while loop/2 (26).py",
                        "max_stars_repo_name": "MLunov/Python-programming-basics-HSE",
                        "max_stars_count": 0,
                        "__cluster__": 2035
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_2157189",
                        "content": "s = input()\nprint(s[1:] + s[:1])",
                        "max_stars_repo_path": "abc197/a.py",
                        "max_stars_repo_name": "ysmtegsr/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 2438
                },
                {
                        "id": "test_condefects-python_data_2439",
                        "content": "s = input()\ns[:-1]\nprint(s + \"4\")\ns = input()\ns = s[:-1]\nprint(s + \"4\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc335_a/Python/54743914",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2438
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_733",
                        "content": "A, B, C, X = map(int, input().split())\nif X < A:\nprint(1)\nelif X > B:\nprint(0)\nelse:\nanswer = C / (B - A)\nprint(answer)\nA, B, C, X = map(int, input().split())\nif X <= A:\nprint(1)\nelif X > B:\nprint(0)\nelse:\nanswer = C / (B - A)\nprint(answer)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc242_a/Python/45439791",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 732
                },
                {
                        "id": "pretrain_python_data_5219476",
                        "content": "<reponame>Egiiegii/atcoder\nA, B, C, X =map(int, input().split())\nif X <=A:\nprint(1)\nelif X<= B:\nprint(C/(B-A))\nelse:\nprint(0)\n",
                        "max_stars_repo_path": "b242/A.py",
                        "max_stars_repo_name": "Egiiegii/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 732
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_3712271",
                        "content": "T = int(input())\nfor _ in range(T):\nN, K = map(int, input().split())\narr = list(map(int, input().split()))\nsum = 0\nfor i in arr:\nsum += i\nif sum%K == 0:\nprint(0)\nelse:\nprint(1)",
                        "max_stars_repo_path": "Practice-Problems/Sed-Sequences.py",
                        "max_stars_repo_name": "ayushchauhan09/CodeChef-Solutions",
                        "max_stars_count": 0,
                        "__cluster__": 1780
                },
                {
                        "id": "test_condefects-python_data_1781",
                        "content": "T = int(input())\nfor _ in range(T):\nN, K = map(int, input().split())\nif N % 2 == 0:\nN //= 2\ni = K\nif i % 2 == 1:\ni += 1\ni //= 2\nif (N - 1) & (i - 1) == i - 1:\nif K % 2 == 0:\nprint(K - 1)\nelse:\nprint(K + 1)\nelse:\nprint(K)\nelse:\nif K == 1:\nprint(2)\nelse:\nN -= 1\nN //= 2\ni = K\nif i % 2 == 1:\ni += 1\ni //= 2\nif (N - 1) & (i - 1) == i - 1:\nif K % 2 == 0:\nif (N - 1) & ((K + 2) // 2 - 1) == (K + 2) // 2 - 1:\nprint(K + 2)\nelse:\nprint(K + 1)\nelse:\nif (N - 1) & ((K - 1) // 2) == (K - 1) // 2:\nprint(K - 2)\nelse:\nprint(K + 1)\nelse:\nif (N - 1) & (K // 2 - 1) == K // 2 - 1:\nif K % 2 == 0:\nif (N - 1) & ((K + 2) // 2 - 1) == (K + 2) // 2 - 1:\nprint(K + 2)\nelse:\nprint(K + 1)\nelse:\nif (N - 1) & ((K - 1) // 2 - 1) == (K - 1) // 2 - 1:\nprint(K - 2)\nelse:\nprint(K + 1)\nelse:\nprint(K)\nT = int(input())\nfor _ in range(T):\nN, K = map(int, input().split())\nif N % 2 == 0:\nN //= 2\ni = K\nif i % 2 == 1:\ni += 1\ni //= 2\nif (N - 1) & (i - 1) == i - 1:\nif K % 2 == 0:\nprint(K - 1)\nelse:\nprint(K + 1)\nelse:\nprint(K)\nelse:\nif K == 1:\nprint(2)\nelse:\nN -= 1\nN //= 2\ni = K\nif i % 2 == 1:\ni += 1\ni //= 2\nif (N - 1) & (i - 1) == i - 1:\nif K % 2 == 0:\nif (N - 1) & ((K + 2) // 2 - 1) == (K + 2) // 2 - 1:\nprint(K + 2)\nelse:\nprint(K + 1)\nelse:\nif (N - 1) & ((K - 1) // 2 - 1) == (K - 1) // 2 - 1:\nprint(K - 2)\nelse:\nprint(K + 1)\nelse:\nif (N - 1) & (K // 2 - 1) == K // 2 - 1:\nif K % 2 == 0:\nif (N - 1) & ((K + 2) // 2 - 1) == (K + 2) // 2 - 1:\nprint(K + 2)\nelse:\nprint(K + 1)\nelse:\nif (N - 1) & ((K - 1) // 2 - 1) == (K - 1) // 2 - 1:\nprint(K - 2)\nelse:\nprint(K + 1)\nelse:\nprint(K)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/agc061_a/Python/38852158",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1780
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_5282738",
                        "content": "A, B = map(int, input().split())\nprint(max(A + B, A - B, A * B))",
                        "max_stars_repo_path": "abc/abc137/a/main.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_5282738",
                        "content": "A, B = map(int, input().split())\nprint(max(A + B, A - B, A * B))",
                        "max_stars_repo_path": "abc/abc137/a/main.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_1409",
                        "content": "A,B = map(int,input().split())\nprint(A//B+1)\nA,B = map(int,input().split())\nprint((A-1)//B+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/46001200",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_5282738",
                        "content": "A, B = map(int, input().split())\nprint(max(A + B, A - B, A * B))",
                        "max_stars_repo_path": "abc/abc137/a/main.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_5365930",
                        "content": "A, B = map(int, input().split())\nprint((B-A), B)",
                        "max_stars_repo_path": "acmicpc/16430/16430.py",
                        "max_stars_repo_name": "love-adela/algorithm",
                        "max_stars_count": 3,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_5365930",
                        "content": "A, B = map(int, input().split())\nprint((B-A), B)",
                        "max_stars_repo_path": "acmicpc/16430/16430.py",
                        "max_stars_repo_name": "love-adela/algorithm",
                        "max_stars_count": 3,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_1409",
                        "content": "A,B = map(int,input().split())\nprint(A//B+1)\nA,B = map(int,input().split())\nprint((A-1)//B+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/46001200",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_5365930",
                        "content": "A, B = map(int, input().split())\nprint((B-A), B)",
                        "max_stars_repo_path": "acmicpc/16430/16430.py",
                        "max_stars_repo_name": "love-adela/algorithm",
                        "max_stars_count": 3,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_8434107",
                        "content": "x = float(input())\nif (-100 <= x <= 100) and x != 0:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "FirstStepsInPython/Basics/Lab3 Conditional Statements Advanced/06.NumberInRange.py",
                        "max_stars_repo_name": "Pittor052/SoftUni-Studies",
                        "max_stars_count": 0,
                        "__cluster__": 1726
                },
                {
                        "id": "test_condefects-python_data_2593",
                        "content": "x = int(input())\nprint('Yes' if x%100==0 else 'No')\nx = int(input())\nprint('Yes' if x%100==0 and x!=0 else 'No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc223_a/Python/45714918",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1726
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "id": "pretrain_python_data_6978910",
                        "content": "a, b, c= map(int, input().split())\nprint(\"%d\\n%d\\n%d\\n%d\"%((a+b)%c, ((a%c) + (b%c))%c, (a * b)%c, ((a%c) * (b%c))%c))",
                        "max_stars_repo_path": "01_IO_Operation/Step10/gamjapark.py",
                        "max_stars_repo_name": "StudyForCoding/BEAKJOON",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1095
                },
                {
                        "id": "pretrain_python_data_10009366",
                        "content": "A, B = map(int, input('').split())\nprint('%d %d' %(B - 1, A - 1))",
                        "max_stars_repo_path": "Timus1409.py",
                        "max_stars_repo_name": "rashidulhasanhridoy/Timus-Problem-Solving-with-Python-3",
                        "max_stars_count": 1,
                        "__cluster__": 1095
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1095
                },
                {
                        "id": "pretrain_python_data_10009366",
                        "content": "A, B = map(int, input('').split())\nprint('%d %d' %(B - 1, A - 1))",
                        "max_stars_repo_path": "Timus1409.py",
                        "max_stars_repo_name": "rashidulhasanhridoy/Timus-Problem-Solving-with-Python-3",
                        "max_stars_count": 1,
                        "__cluster__": 1095
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1197",
                        "content": "x = int(input())\nif x % 10 == 0:\nprint(x)\nelse:\nprint(x // 10 + 1)\nx = int(input())\nif x % 10 == 0:\nprint(x // 10)\nelse:\nprint(x // 10 + 1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc345_b/Python/54913953",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1196
                },
                {
                        "id": "pretrain_python_data_10070215",
                        "content": "x = int(input())\nif x > 0:\nprint(1)\nelif x == 0:\nprint(0)\nelse:\nprint(-1)",
                        "max_stars_repo_path": "D_number_of_sign.py",
                        "max_stars_repo_name": "nikitadragaa/informatics_second_module",
                        "max_stars_count": 0,
                        "__cluster__": 1196
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1200",
                        "content": "x = int(input())\nif x % 10 == 0:\nprint(int(x / 10))\nelse:\nprint(int(x // 10 + 1))\nx = int(input())\nif x % 10 == 0:\nprint(int(x // 10))\nelse:\nprint(int(x // 10 + 1))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc345_b/Python/54787477",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1196
                },
                {
                        "id": "pretrain_python_data_10070215",
                        "content": "x = int(input())\nif x > 0:\nprint(1)\nelif x == 0:\nprint(0)\nelse:\nprint(-1)",
                        "max_stars_repo_path": "D_number_of_sign.py",
                        "max_stars_repo_name": "nikitadragaa/informatics_second_module",
                        "max_stars_count": 0,
                        "__cluster__": 1196
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_10058581",
                        "content": "n, m, c = map(int, input().split())\nb = list(map(int, input().split()))\nans = 0\nfor _ in range(n):\na = list(map(int, input().split()))\ntotal = 0\nfor i in range(m):\ntotal += a[i] * b[i]\ntotal += c\nif total > 0:\nans += 1\nprint(ans)",
                        "max_stars_repo_path": "contest/abc121/B.py",
                        "max_stars_repo_name": "mola1129/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 131
                },
                {
                        "id": "test_condefects-python_data_132",
                        "content": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [(i, 0) for i in a] + [(i, 1) for i in b]\nc.sort()\nans = \"No\"\nfor i in range(n + m - 1):\nif c[i][1] == c[i + 1][1]:\nans = \"Yes\"\nprint(ans)\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [(i, 0) for i in a] + [(i, 1) for i in b]\nc.sort()\nans = \"No\"\nfor i in range(n + m - 1):\nif c[i][1] == c[i + 1][1] == 0:\nans = \"Yes\"\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc355_b/Python/55005403",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 131
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1412",
                        "content": "A,B = map(int,input().split())\nif A%B == 0:\nprint(int(A/B))\nelse:\nprint(int(A//B)+1)\nA,B = map(int,input().split())\nif A%B == 0:\nprint(int((A+B-1)//B))\nelse:\nprint(int(A//B)+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45783782",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1323
                },
                {
                        "id": "pretrain_python_data_8594214",
                        "content": "while 1:\nA,B=map(int,input().split())\nif A==0: exit()\nprint(A//B,A%B,'/',B)",
                        "max_stars_repo_path": "problem/10000~19999/10474/10474.py3.py",
                        "max_stars_repo_name": "njw1204/BOJ-AC",
                        "max_stars_count": 1,
                        "__cluster__": 1323
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1155",
                        "content": "a,b = map(int,input().split())\nans = a ^ b\nprint(ans)\na,b = map(int,input().split())\nans = a | b\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc270_a/Python/44921373",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "id": "pretrain_python_data_11766021",
                        "content": "n, a, b = map(int,input().split())\nprint(n - a + b)",
                        "max_stars_repo_path": "abc180_a.py",
                        "max_stars_repo_name": "Lockdef/kyopro-code",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1155",
                        "content": "a,b = map(int,input().split())\nans = a ^ b\nprint(ans)\na,b = map(int,input().split())\nans = a | b\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc270_a/Python/44921373",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "id": "pretrain_python_data_11757117",
                        "content": "a,b=map(int, input().split())\nprint(a//b)",
                        "max_stars_repo_path": "CodeUP/Python basic 100/6040.py",
                        "max_stars_repo_name": "cmsong111/NJ_code",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_11766021",
                        "content": "n, a, b = map(int,input().split())\nprint(n - a + b)",
                        "max_stars_repo_path": "abc180_a.py",
                        "max_stars_repo_name": "Lockdef/kyopro-code",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1851",
                        "content": "a=[*map(int, input().split())]\na[a[a[0]]]\na=[*map(int, input().split())]\nprint(a[a[a[0]]])",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc241_a/Python/46045206",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "id": "pretrain_python_data_11757117",
                        "content": "a,b=map(int, input().split())\nprint(a//b)",
                        "max_stars_repo_path": "CodeUP/Python basic 100/6040.py",
                        "max_stars_repo_name": "cmsong111/NJ_code",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "id": "pretrain_python_data_11757117",
                        "content": "a,b=map(int, input().split())\nprint(a//b)",
                        "max_stars_repo_path": "CodeUP/Python basic 100/6040.py",
                        "max_stars_repo_name": "cmsong111/NJ_code",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1339
                },
                {
                        "id": "pretrain_python_data_700161",
                        "content": "A, B = map(int, input().split())\nprint(100 - B / A * 100)",
                        "max_stars_repo_path": "abc/193/A.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1339
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1339
                },
                {
                        "id": "pretrain_python_data_700161",
                        "content": "A, B = map(int, input().split())\nprint(100 - B / A * 100)",
                        "max_stars_repo_path": "abc/193/A.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1339
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1930",
                        "content": "n, a, b, c, d = map(int, input().split())\nif abs(b-c) >= 2:\nprint(\"No\")\nelif b + c == 0 and a*b != 0:\nprint(\"No\")\nelse:\nprint(\"Yes\")\nn, a, b, c, d = map(int, input().split())\nif abs(b-c) >= 2:\nprint(\"No\")\nelif b + c == 0 and a*d != 0:\nprint(\"No\")\nelse:\nprint(\"Yes\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/arc157_a/Python/42873423",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "id": "pretrain_python_data_672045",
                        "content": "<gh_stars>0\na, b, c = map(int, input().split(' '))\nif a * b == c:\nprint('Yes')\nprint(a, b, c)\nelif b * c == a:\nprint('Yes')\nprint(b, c, a)\nelif a * c == b:\nprint('Yes')\nprint(a, c, b)\nelse:\nprint('No')\n",
                        "max_stars_repo_path": "three-numbers.py",
                        "max_stars_repo_name": "webkadiz/olympiad-problems",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1098",
                        "content": "a, b, c = map(int, input().split())\nif (a + c) // 2 == b:\nprint('Yes')\nelse:\nprint('No')\na, b, c = map(int, input().split())\nif a <= b <= c or c <= b <= a:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc253_a/Python/45510646",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "id": "pretrain_python_data_672045",
                        "content": "<gh_stars>0\na, b, c = map(int, input().split(' '))\nif a * b == c:\nprint('Yes')\nprint(a, b, c)\nelif b * c == a:\nprint('Yes')\nprint(b, c, a)\nelif a * c == b:\nprint('Yes')\nprint(a, c, b)\nelse:\nprint('No')\n",
                        "max_stars_repo_path": "three-numbers.py",
                        "max_stars_repo_name": "webkadiz/olympiad-problems",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2591",
                        "content": "X = int(input())\nif X == 0:\nprint(\"No\")\nelif X < 100:\nprint(\"No\")\nelif X%100 == 0:\nprint(\"Yes\")\nX = int(input())\nif X == 0:\nprint(\"No\")\nelif X < 100:\nprint(\"No\")\nelif X%100 != 0:\nprint(\"No\")\nelif X%100 == 0:\nprint(\"Yes\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc223_a/Python/45815037",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2590
                },
                {
                        "id": "pretrain_python_data_714656",
                        "content": "X = int(input())\nif X == 0:\nprint('No')\nelif X % 100 == 0:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "abc/223/A.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 2590
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_2247559",
                        "content": "n = int(input())\nl = [list(map(int, input().split())) for i in range(n)]\nans=0\nfor i in range(n):\nans += max(l[i])\nprint(ans)",
                        "max_stars_repo_path": "src/s002.py",
                        "max_stars_repo_name": "ryuichi1208/circleci_sample",
                        "max_stars_count": 0,
                        "__cluster__": 1695
                },
                {
                        "id": "test_condefects-python_data_1696",
                        "content": "n = int(input())\ns = list(map(int,input().split()))\nfor i in range(n):\nans = 0\nfor l in range(7):\nans += s[l+i]\nprint(str(ans),\"\",end = \"\")\nn = int(input())\ns = list(map(int,input().split()))\nfor i in range(n):\nans = 0\nfor l in range(7):\nans += s[l+i*7]\nprint(str(ans),\"\",end = \"\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc307_a/Python/45989937",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1695
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1873",
                        "content": "a = int(input())\nb = int(input())\nprint(str(a)+str(b*5))\na = int(input())\nb = int(input())\nprint(str(a)+\"0\"+str(b*5))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/arc131_a/Python/44093333",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1872
                },
                {
                        "id": "pretrain_python_data_752551",
                        "content": "a = int(input(\"\"))\nb = int(input(\"\"))\na = a + b\nb = a - b\na = a - b\nprint(str(a) + \" \" + str(b))",
                        "max_stars_repo_path": "GeeksForGeeks/Swap two numbers/PythonSol.py",
                        "max_stars_repo_name": "Pandz18/C-Programs",
                        "max_stars_count": 0,
                        "__cluster__": 1872
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2699",
                        "content": "s= input()\nif s.count(s[0])==1:\nprint(0)\nelse:\nfor i in range(1,len(s)):\nif s[0] != s[i]:\nprint(i+1)\ns= input()\nif s.count(s[0])==1:\nprint(1)\nelse:\nfor i in range(1,len(s)):\nif s[0] != s[i]:\nprint(i+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc342_a/Python/54911256",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2698
                },
                {
                        "id": "pretrain_python_data_2271221",
                        "content": "s = input()\nfc = s[0]\nnc = \"\"\ncount = 0\nif fc == \"0\":\nnc = \"1\"\nelse:\nnc = \"0\"\nfor i in range(1,len(s)):\nif s[i] != nc :\ncount += 1\nnc = s[i]\nelse:\nif nc == \"0\":\nnc = \"1\"\nelse:\nnc = \"0\"\nprint(count)",
                        "max_stars_repo_path": "contest/abc124/C_ColoringColorfully.py",
                        "max_stars_repo_name": "mola1129/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 2698
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1197",
                        "content": "x = int(input())\nif x % 10 == 0:\nprint(x)\nelse:\nprint(x // 10 + 1)\nx = int(input())\nif x % 10 == 0:\nprint(x // 10)\nelse:\nprint(x // 10 + 1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc345_b/Python/54913953",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1196
                },
                {
                        "id": "pretrain_python_data_2241532",
                        "content": "x = int(input())\nif x%2 == 0:\nprint(x+2)\nelse:\nprint(x+1)",
                        "max_stars_repo_path": "2679.py",
                        "max_stars_repo_name": "ShawonBarman/URI-Online-judge-Ad-Hoc-level-problem-solution-in-python",
                        "max_stars_count": 1,
                        "__cluster__": 1196
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_2241532",
                        "content": "x = int(input())\nif x%2 == 0:\nprint(x+2)\nelse:\nprint(x+1)",
                        "max_stars_repo_path": "2679.py",
                        "max_stars_repo_name": "ShawonBarman/URI-Online-judge-Ad-Hoc-level-problem-solution-in-python",
                        "max_stars_count": 1,
                        "__cluster__": 1196
                },
                {
                        "id": "test_condefects-python_data_1200",
                        "content": "x = int(input())\nif x % 10 == 0:\nprint(int(x / 10))\nelse:\nprint(int(x // 10 + 1))\nx = int(input())\nif x % 10 == 0:\nprint(int(x // 10))\nelse:\nprint(int(x // 10 + 1))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc345_b/Python/54787477",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1196
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_762427",
                        "content": "n=int(input(\"\u8bf7\u8f93\u5165n:\"))\n# lst=['\u5f20\u4e09','\u674e\u56db','\u738b\u4e94']\nfor i in range(n):\nprint(i)",
                        "max_stars_repo_path": "Chap02Loops/1-3-1.\u6570\u5217.py",
                        "max_stars_repo_name": "royqh1979/programming_with_python",
                        "max_stars_count": 5,
                        "__cluster__": 990
                },
                {
                        "id": "test_condefects-python_data_991",
                        "content": "n=int(input())\nfor i in range(n):\nprint(n-1)\nprint(0)\nn=int(input())\nfor i in range(n):\nprint(n-i)\nprint(0)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc281_a/Python/45998040",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 990
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_2289864",
                        "content": "a, b = map(int, input().split())\nprint((a+b)*(a-b))",
                        "max_stars_repo_path": "baekjoon/15964/source.py",
                        "max_stars_repo_name": "qilip/ACMStudy",
                        "max_stars_count": 4,
                        "__cluster__": 2161
                },
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_3875603",
                        "content": "k = int(input())\na = list(map(int, input().split()))\ncur = 0\nans = 0\nfor i in a:\ncur += i\nif cur > ans:\nans = cur\nelif cur < 0:\ncur = 0\nprint(ans)",
                        "max_stars_repo_path": "PTA/DataStructure/7-1.py",
                        "max_stars_repo_name": "cnsteven/online-judge",
                        "max_stars_count": 1,
                        "__cluster__": 848
                },
                {
                        "id": "test_condefects-python_data_2533",
                        "content": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\nif a[i] % k == 0:\nans.append(a[i]//2)\nprint(*ans)\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\nif a[i] % k == 0:\nans.append(a[i]//k)\nprint(*ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc347_a/Python/54768582",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 848
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "id": "pretrain_python_data_2379213",
                        "content": "a, b, c = map(int, input().split())\nprint(a*b//2)",
                        "max_stars_repo_path": "code/abc116_a_03.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 2161
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_2379213",
                        "content": "a, b, c = map(int, input().split())\nprint(a*b//2)",
                        "max_stars_repo_path": "code/abc116_a_03.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 2161
                },
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_585",
                        "content": "n = int(input())\nif n**2 > 2**n:\nprint(\"Yes\")\nelse:\nprint(\"No\")\nn = int(input())\nif 2**n > n**2:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc238_a/Python/45742753",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 582
                },
                {
                        "id": "pretrain_python_data_5482653",
                        "content": "n = int(input())\ns = list(input())\nif n % 2 != 0:\nprint(\"No\")\nelse:\nif s[n//2:] == s[:n//2]:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "ABC_B/ABC145_B.py",
                        "max_stars_repo_name": "ryosuke0825/atcoder_python",
                        "max_stars_count": 0,
                        "__cluster__": 582
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_5521967",
                        "content": "n = int(input())\nst = set()\nfor i in range(n):\nst.add(input())\nprint(len(st))",
                        "max_stars_repo_path": "Python/Sets/Set_add.py",
                        "max_stars_repo_name": "jaswal72/hacker-rank",
                        "max_stars_count": 1,
                        "__cluster__": 710
                },
                {
                        "id": "test_condefects-python_data_711",
                        "content": "n = int(input())\nl = set()\nfor i in range(n):\nl.add(input().replace(\" \", \"\"))\nprint(len(l))\nn = int(input())\nl = set()\nfor i in range(n):\nl.add(input())\nprint(len(l))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc226_b/Python/46010276",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 710
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_7192485",
                        "content": "def f(x):\nreturn x*x + 2*x + 3\nt = int(input())\nprint(f(f(f(t)+t)+f(f(t))))",
                        "max_stars_repo_path": "abc/234/A.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 91
                },
                {
                        "id": "test_condefects-python_data_92",
                        "content": "def f(x):\nreturn x**2+2*x+3\nt = int(input())\nprint((f(f(t)+t)+f(f(t))))\ndef f(x):\nreturn x**2+2*x+3\nt = int(input())\nprint(f(f(f(t)+t)+f(f(t))))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc234_a/Python/44890153",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 91
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_7138129",
                        "content": "T = int(input())\nfor i in range(T):\nN = int(input())\nS = list(map(int, input().split()[:N]))\nsuma = 0\nfor j in range(N - 1):\nsuma += abs(S[j + 1] - S[j]) - 1\nprint(suma)",
                        "max_stars_repo_path": "Beginner/Chef and Strings (CHEFSTR1)/CHEFSTR1.py",
                        "max_stars_repo_name": "anishsingh42/CodeChef",
                        "max_stars_count": 127,
                        "__cluster__": 2795
                },
                {
                        "id": "test_condefects-python_data_2796",
                        "content": "N = int(input())\nS = list(map(int, input().split()))\nans = [S[0]]\nfor i in range(1,N):\nans.append(S[i]-S[i-1])\nprint(ans)\nN = int(input())\nS = list(map(int, input().split()))\nans = [S[0]]\nfor i in range(1,N):\nans.append(S[i]-S[i-1])\nprint(*ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc280_b/Python/45270301",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2795
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_8774311",
                        "content": "import math\nA, B = map(int, input().split())\nprint(1+math.ceil((B-A)/(A-1)))",
                        "max_stars_repo_path": "code/abc139_b_04.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_8693162",
                        "content": "A, B = map(int, input().split())\nm = 1000000007\nprint(A * B % m)",
                        "max_stars_repo_path": "yc187/666.py",
                        "max_stars_repo_name": "c-yan/yukicoder",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_8643956",
                        "content": "A, B, C = map(int, input().split())\nprint((A+B)%C)\nprint(((A%C) + (B%C))%C)\nprint((A*B)%C)\nprint(((A%C) * (B%C))%C)",
                        "max_stars_repo_path": "baekjoon/10430.py",
                        "max_stars_repo_name": "phillip5094/algorithm-practice",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_8774311",
                        "content": "import math\nA, B = map(int, input().split())\nprint(1+math.ceil((B-A)/(A-1)))",
                        "max_stars_repo_path": "code/abc139_b_04.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_1409",
                        "content": "A,B = map(int,input().split())\nprint(A//B+1)\nA,B = map(int,input().split())\nprint((A-1)//B+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/46001200",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_8693162",
                        "content": "A, B = map(int, input().split())\nm = 1000000007\nprint(A * B % m)",
                        "max_stars_repo_path": "yc187/666.py",
                        "max_stars_repo_name": "c-yan/yukicoder",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_8693162",
                        "content": "A, B = map(int, input().split())\nm = 1000000007\nprint(A * B % m)",
                        "max_stars_repo_path": "yc187/666.py",
                        "max_stars_repo_name": "c-yan/yukicoder",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_1409",
                        "content": "A,B = map(int,input().split())\nprint(A//B+1)\nA,B = map(int,input().split())\nprint((A-1)//B+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/46001200",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_8643956",
                        "content": "A, B, C = map(int, input().split())\nprint((A+B)%C)\nprint(((A%C) + (B%C))%C)\nprint((A*B)%C)\nprint(((A%C) * (B%C))%C)",
                        "max_stars_repo_path": "baekjoon/10430.py",
                        "max_stars_repo_name": "phillip5094/algorithm-practice",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_8643956",
                        "content": "A, B, C = map(int, input().split())\nprint((A+B)%C)\nprint(((A%C) + (B%C))%C)\nprint((A*B)%C)\nprint(((A%C) * (B%C))%C)",
                        "max_stars_repo_path": "baekjoon/10430.py",
                        "max_stars_repo_name": "phillip5094/algorithm-practice",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_1409",
                        "content": "A,B = map(int,input().split())\nprint(A//B+1)\nA,B = map(int,input().split())\nprint((A-1)//B+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/46001200",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1921",
                        "content": "n,a,b,c,d = map(int, input().split())\nprint(\"No\" if abs(b - c) > 1 or (b == c == 0 and (a != 0 and b != 0)) else \"Yes\")\nn,a,b,c,d = map(int, input().split())\nprint(\"No\" if abs(b - c) > 1 or (b == c == 0 and (a != 0 and d != 0)) else \"Yes\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/arc157_a/Python/42091625",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1920
                },
                {
                        "id": "pretrain_python_data_8634149",
                        "content": "a, b, c = map(int, input().split())\nif c - a - b > 0 and (c - a - b) * (c - a - b) > 4 * a * b:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "others/panasonic2020/panasonic2020c.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 1920
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1930",
                        "content": "n, a, b, c, d = map(int, input().split())\nif abs(b-c) >= 2:\nprint(\"No\")\nelif b + c == 0 and a*b != 0:\nprint(\"No\")\nelse:\nprint(\"Yes\")\nn, a, b, c, d = map(int, input().split())\nif abs(b-c) >= 2:\nprint(\"No\")\nelif b + c == 0 and a*d != 0:\nprint(\"No\")\nelse:\nprint(\"Yes\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/arc157_a/Python/42873423",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1920
                },
                {
                        "id": "pretrain_python_data_8634149",
                        "content": "a, b, c = map(int, input().split())\nif c - a - b > 0 and (c - a - b) * (c - a - b) > 4 * a * b:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "others/panasonic2020/panasonic2020c.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 1920
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_586",
                        "content": "n = int(input())\nif n == 2 or n == 3:\nprint(\"No\")\nelse:\nprint(\"Yes\")\nn = int(input())\nif n == 2 or n == 3 or n == 4:\nprint(\"No\")\nelse:\nprint(\"Yes\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc238_a/Python/45663153",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 585
                },
                {
                        "id": "pretrain_python_data_10257117",
                        "content": "n = int(input())\nif n % 4 == 0 or n % 4 == 3:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "OCC/occ19b3.py",
                        "max_stars_repo_name": "crackersamdjam/DMOJ-Solutions",
                        "max_stars_count": 0,
                        "__cluster__": 585
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_82",
                        "content": "N = int(input())\nH = list(map(int, input().split()))\nans = 0\nfor i in range(1, N):\nif H[i] > H[i-1]:\nans = H[i]\nelse:\nbreak\nprint(ans)\nN = int(input())\nH = list(map(int, input().split()))\nans = H[0]\nfor i in range(1, N):\nif H[i] > H[i-1]:\nans = H[i]\nelse:\nbreak\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc235_b/Python/44832943",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 81
                },
                {
                        "id": "pretrain_python_data_11867592",
                        "content": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(1, n):\nif a[i]<a[i-1]:\nans+=a[i-1]-a[i]\na[i]+=a[i-1]-a[i]\nprint(ans)",
                        "max_stars_repo_path": "cses/Increasing_Array.py",
                        "max_stars_repo_name": "Stealth-py/CP",
                        "max_stars_count": 1,
                        "__cluster__": 81
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_85",
                        "content": "N = int(input())\nH = list(map(int,input().split()))\nans=0\nfor n in range(N-1):\nif H[n+1]>H[n]:\nans=H[n+1]\nelse:\nbreak\nprint(ans)\nN = int(input())\nH = list(map(int,input().split()))\nans=H[0]\nfor n in range(N-1):\nif H[n+1]>H[n]:\nans=H[n+1]\nelse:\nbreak\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc235_b/Python/44433073",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 81
                },
                {
                        "id": "pretrain_python_data_11867592",
                        "content": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(1, n):\nif a[i]<a[i-1]:\nans+=a[i-1]-a[i]\na[i]+=a[i-1]-a[i]\nprint(ans)",
                        "max_stars_repo_path": "cses/Increasing_Array.py",
                        "max_stars_repo_name": "Stealth-py/CP",
                        "max_stars_count": 1,
                        "__cluster__": 81
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_162",
                        "content": "n = int(input())\na = list(map(int, input().split()))\nl = [0]*(n)\nr = [0]*(n)\nl[0] = 1\nr[0] = 1\nfor i in range(1, n):\nl[i] = min(l[i - 1] + 1, a[i])\nfor i in range(1, n):\nr[i] = min(r[i - 1] + 1, a[n - i])\nans = 1\nfor i in range(n):\nif ans < min(l[i], r[n - i - 1]):\nans = min(l[i], r[n - i - 1])\nprint(ans)\nn = int(input())\na = list(map(int, input().split()))\nl = [0]*(n)\nr = [0]*(n)\nl[0] = 1\nr[0] = 1\nfor i in range(1, n):\nl[i] = min(l[i - 1] + 1, a[i])\nfor i in range(1, n):\nr[i] = min(r[i - 1] + 1, a[n - i - 1])\nans = 1\nfor i in range(n):\nif ans < min(l[i], r[n - i - 1]):\nans = min(l[i], r[n - i - 1])\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc336_d/Python/53237033",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 81
                },
                {
                        "id": "pretrain_python_data_11867592",
                        "content": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(1, n):\nif a[i]<a[i-1]:\nans+=a[i-1]-a[i]\na[i]+=a[i-1]-a[i]\nprint(ans)",
                        "max_stars_repo_path": "cses/Increasing_Array.py",
                        "max_stars_repo_name": "Stealth-py/CP",
                        "max_stars_count": 1,
                        "__cluster__": 81
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1920
                },
                {
                        "id": "pretrain_python_data_11985126",
                        "content": "a, b, c = map(int, input().split())\nprint((a+b)%c)\nprint(((a%c)+(b%c))%c)\nprint((a*b)%c)\nprint(((a%c)*(b%c))%c)",
                        "max_stars_repo_path": "10430.py",
                        "max_stars_repo_name": "XITO404/Baekjoon",
                        "max_stars_count": 0,
                        "__cluster__": 1920
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2037",
                        "content": "H = int(input())\nfor i in range(H):\nn = (2 ** i) - 1\nif H < n:\nprint(i)\nbreak\nH = int(input())\nfor i in range(10 ** 9):\nn = (2 ** i) - 1\nif H < n:\nprint(i)\nbreak",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc354_a/Python/54981924",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2036
                },
                {
                        "id": "pretrain_python_data_830379",
                        "content": "for i in range(1, int(input()) + 1):\nprint((10 ** i // 9) ** 2)",
                        "max_stars_repo_path": "Practice/Python/Math/Triangle_Quest_2.py",
                        "max_stars_repo_name": "alexanderbauer89/HackerRank",
                        "max_stars_count": 1,
                        "__cluster__": 2036
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_11893686",
                        "content": "s = set()\nn = int(input())\nfor i in range(n):\nx = int(input())\ns.add(x)\nl = list(s)\nl.sort()\nfor i in range(len(l)):\nprint l[i], ',',",
                        "max_stars_repo_path": "by-session/ta-922/j5/ds3.py",
                        "max_stars_repo_name": "amiraliakbari/sharif-mabani-python",
                        "max_stars_count": 2,
                        "__cluster__": 710
                },
                {
                        "id": "test_condefects-python_data_711",
                        "content": "n = int(input())\nl = set()\nfor i in range(n):\nl.add(input().replace(\" \", \"\"))\nprint(len(l))\nn = int(input())\nl = set()\nfor i in range(n):\nl.add(input())\nprint(len(l))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc226_b/Python/46010276",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 710
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_652",
                        "content": "s, t = input().split()\nif s == 'AtCoder ' and t == 'Land':\nprint('Yes')\nelse:\nprint('No')\ns, t = input().split()\nif s == 'AtCoder' and t == 'Land':\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc358_a/Python/55148090",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 647
                },
                {
                        "id": "pretrain_python_data_11992352",
                        "content": "s, t = input().split()\nprint('Yes' if s < t else 'No')",
                        "max_stars_repo_path": "abc/abc217/a.py",
                        "max_stars_repo_name": "takanori536/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 647
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2035",
                        "content": "N = int(input())\nP = 0\ni = 0\nwhile (N > P):\nP += 2 ** i\ni += 1\nprint(i)\nN = int(input())\nP = 0\ni = 0\nwhile (N >= P):\nP += 2 ** i\ni += 1\nprint(i)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc354_a/Python/54982154",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2034
                },
                {
                        "id": "pretrain_python_data_11948520",
                        "content": "N = int(input())\ni = 2\nwhile N % i != 0:\ni = i + 1\nprint(i)",
                        "max_stars_repo_path": "week2/26.py",
                        "max_stars_repo_name": "kamorozov/coursera_python",
                        "max_stars_count": 2,
                        "__cluster__": 2034
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1409",
                        "content": "A,B = map(int,input().split())\nprint(A//B+1)\nA,B = map(int,input().split())\nprint((A-1)//B+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/46001200",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 340
                },
                {
                        "id": "pretrain_python_data_2491147",
                        "content": "A,B = map(int,input().split())\nprint(f'{A+B}\\n{A-B}\\n{A*B}\\n{A//B}\\n{A%B}')",
                        "max_stars_repo_path": "solution/10869(\uc0ac\uce59\uc5f0\uc0b0).py",
                        "max_stars_repo_name": "OMEGA-Y/Baekjoon-sol",
                        "max_stars_count": 0,
                        "__cluster__": 340
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 340
                },
                {
                        "id": "pretrain_python_data_2491147",
                        "content": "A,B = map(int,input().split())\nprint(f'{A+B}\\n{A-B}\\n{A*B}\\n{A//B}\\n{A%B}')",
                        "max_stars_repo_path": "solution/10869(\uc0ac\uce59\uc5f0\uc0b0).py",
                        "max_stars_repo_name": "OMEGA-Y/Baekjoon-sol",
                        "max_stars_count": 0,
                        "__cluster__": 340
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 340
                },
                {
                        "id": "pretrain_python_data_2491147",
                        "content": "A,B = map(int,input().split())\nprint(f'{A+B}\\n{A-B}\\n{A*B}\\n{A//B}\\n{A%B}')",
                        "max_stars_repo_path": "solution/10869(\uc0ac\uce59\uc5f0\uc0b0).py",
                        "max_stars_repo_name": "OMEGA-Y/Baekjoon-sol",
                        "max_stars_count": 0,
                        "__cluster__": 340
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2037",
                        "content": "H = int(input())\nfor i in range(H):\nn = (2 ** i) - 1\nif H < n:\nprint(i)\nbreak\nH = int(input())\nfor i in range(10 ** 9):\nn = (2 ** i) - 1\nif H < n:\nprint(i)\nbreak",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc354_a/Python/54981924",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2036
                },
                {
                        "id": "pretrain_python_data_2465996",
                        "content": "n = int(input())\nfor i in range(10 ** 5, 0, -1):\nif n % (i * i) == 0:\nprint(i, n // (i * i))\nbreak",
                        "max_stars_repo_path": "yc250/1063.py",
                        "max_stars_repo_name": "c-yan/yukicoder",
                        "max_stars_count": 0,
                        "__cluster__": 2036
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2606",
                        "content": "s = input()\nt = input()\nfor i in range(len(s)):\nif s[i] != t[i]:\nprint(i + 1)\nexit()\nprint(1)\ns = input()\nt = input()\nfor i in range(len(s)):\nif s[i] != t[i]:\nprint(i + 1)\nexit()\nprint(len(t))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc280_c/Python/46198348",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2605
                },
                {
                        "id": "pretrain_python_data_2454984",
                        "content": "s=input()\nt=input()\nans=\"\"\nfor i in range(len(s)):\nif s[i] == t[i]:\nans+=\"0\"\nelse:\nans+=\"1\"\nprint(ans)",
                        "max_stars_repo_path": "Codeforces Problems/Ultra-Fast Mathematician/Ultra-Fast Mathematician.py",
                        "max_stars_repo_name": "Social-CodePlat/Comptt-Coding-Solutions",
                        "max_stars_count": 0,
                        "__cluster__": 2605
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2607",
                        "content": "s, t = input(), input()\nfor i in range(len(s)):\nif s[i] != t[i]:\nprint(i+1)\nbreak\ns, t = input() + \"0\", input()\nfor i in range(len(s)):\nif s[i] != t[i]:\nprint(i+1)\nbreak",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc280_c/Python/45414208",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2605
                },
                {
                        "id": "pretrain_python_data_2454984",
                        "content": "s=input()\nt=input()\nans=\"\"\nfor i in range(len(s)):\nif s[i] == t[i]:\nans+=\"0\"\nelse:\nans+=\"1\"\nprint(ans)",
                        "max_stars_repo_path": "Codeforces Problems/Ultra-Fast Mathematician/Ultra-Fast Mathematician.py",
                        "max_stars_repo_name": "Social-CodePlat/Comptt-Coding-Solutions",
                        "max_stars_count": 0,
                        "__cluster__": 2605
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_132",
                        "content": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [(i, 0) for i in a] + [(i, 1) for i in b]\nc.sort()\nans = \"No\"\nfor i in range(n + m - 1):\nif c[i][1] == c[i + 1][1]:\nans = \"Yes\"\nprint(ans)\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [(i, 0) for i in a] + [(i, 1) for i in b]\nc.sort()\nans = \"No\"\nfor i in range(n + m - 1):\nif c[i][1] == c[i + 1][1] == 0:\nans = \"Yes\"\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc355_b/Python/55005403",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 131
                },
                {
                        "id": "pretrain_python_data_4009510",
                        "content": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = sum(a) / (4 * m)\nc = 0\nfor i in a:\nif i >= b:\nc += 1\nif c >= m:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "abc161/b.py",
                        "max_stars_repo_name": "Lockdef/kyopro-code",
                        "max_stars_count": 0,
                        "__cluster__": 131
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_4086716",
                        "content": "a, b, v = map(int, input().split())\nprint((v - b - 1) // (a - b) + 1)",
                        "max_stars_repo_path": "baekjoon/2869/climbing_snail.py",
                        "max_stars_repo_name": "ucyang/AlgoEx",
                        "max_stars_count": 0,
                        "__cluster__": 957
                },
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 957
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_2581180",
                        "content": "a, b, c = map(int, input().split())\nprint(2 * a / b * c)",
                        "max_stars_repo_path": "Python/VariablesAndTypes/begin07.py",
                        "max_stars_repo_name": "YoshlikMedia/Data-Science",
                        "max_stars_count": 4,
                        "__cluster__": 957
                },
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 957
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_2581180",
                        "content": "a, b, c = map(int, input().split())\nprint(2 * a / b * c)",
                        "max_stars_repo_path": "Python/VariablesAndTypes/begin07.py",
                        "max_stars_repo_name": "YoshlikMedia/Data-Science",
                        "max_stars_count": 4,
                        "__cluster__": 957
                },
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 957
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_2546923",
                        "content": "n = int(input())\nfor i in range(1,n+1):\nif (i %2 == 0):\nprint(\"{}^2 = {}\".format(i,i**2))",
                        "max_stars_repo_path": "Iniciante-Begginer/Python/#1051 - #1100/#1073-QuadradoDePares.py",
                        "max_stars_repo_name": "jocelinoFG017/Beecrowd-judge-solutions",
                        "max_stars_count": 2,
                        "__cluster__": 1990
                },
                {
                        "id": "test_condefects-python_data_1991",
                        "content": "n = int(input())\nans = 0\nfor i in range(1, int(n**0.5)+1):\nans += n//i\nans = ans*2 - n\nprint(ans)\nn = int(input())\nans = 0\nfor i in range(1, int(n**0.5)+1):\nans += n//i\nans = ans*2 - (int(n**0.5))**2\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc230_e/Python/45074707",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1990
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_4068851",
                        "content": "A, B = map(int, input().split())\nprint(f'{B} {A}')",
                        "max_stars_repo_path": "abc/012/A.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1409
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_4068851",
                        "content": "A, B = map(int, input().split())\nprint(f'{B} {A}')",
                        "max_stars_repo_path": "abc/012/A.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1409
                },
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_4115645",
                        "content": "A, B = map(int, input().split())\nprint(A / B)",
                        "max_stars_repo_path": "Python/S1008.py",
                        "max_stars_repo_name": "irostub/Beakjoon-Problem-Solving",
                        "max_stars_count": 0,
                        "__cluster__": 2174
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2174
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_4151239",
                        "content": "<gh_stars>0\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\nd = 0\nfor i in range(n):\nif i <= n - k:\nd += 1\nif i >= k:\nd -= 1\nans += d * a[i]\nprint(ans)",
                        "max_stars_repo_path": "contests_atcoder/abc037/abc037_c.py",
                        "max_stars_repo_name": "takelifetime/competitive-programming",
                        "max_stars_count": 0,
                        "__cluster__": 208
                },
                {
                        "id": "test_condefects-python_data_2533",
                        "content": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\nif a[i] % k == 0:\nans.append(a[i]//2)\nprint(*ans)\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\nif a[i] % k == 0:\nans.append(a[i]//k)\nprint(*ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc347_a/Python/54768582",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 208
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_7363569",
                        "content": "# 50 500 100 1\nA, B, C, X = map(int, input().split())\nif X<= A:\nprint(1.0)\nelif X > B:\nprint(0.0)\nelse:\nprint(C/(B-A))",
                        "max_stars_repo_path": "sites/atcoder/abc242/a.py",
                        "max_stars_repo_name": "NoelBird/chocochip",
                        "max_stars_count": 0,
                        "__cluster__": 732
                },
                {
                        "id": "test_condefects-python_data_733",
                        "content": "A, B, C, X = map(int, input().split())\nif X < A:\nprint(1)\nelif X > B:\nprint(0)\nelse:\nanswer = C / (B - A)\nprint(answer)\nA, B, C, X = map(int, input().split())\nif X <= A:\nprint(1)\nelif X > B:\nprint(0)\nelse:\nanswer = C / (B - A)\nprint(answer)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc242_a/Python/45439791",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 732
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "id": "pretrain_python_data_8941913",
                        "content": "a, b, c = map(int, input().split())\nprint(21 - (a + b + c))",
                        "max_stars_repo_path": "abc202/a.py",
                        "max_stars_repo_name": "ysmtegsr/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_10462364",
                        "content": "a, b, x = map(int, input().split())\nif x > b:\nans = 0\nelif a <= x:\nans = b // x\nelse:\nans = b // x - (a - 1) // x\nif a == 0:\nans += 1\nprint(ans)",
                        "max_stars_repo_path": "jp.atcoder/abc048/abc048_b/8188454.py",
                        "max_stars_repo_name": "kagemeka/atcoder-submissions",
                        "max_stars_count": 1,
                        "__cluster__": 729
                },
                {
                        "id": "test_condefects-python_data_730",
                        "content": "a, b, c, x = map(int, input().split())\nif x <= a:\nprint(1)\nelif a < x <= b:\nprint(c/(b-a+1))\nelse:\nprint(0)\na, b, c, x = map(int, input().split())\nif x <= a:\nprint(1)\nelif a < x <= b:\nprint(c/(b-a))\nelse:\nprint(0)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc242_a/Python/45690151",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 729
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_82",
                        "content": "N = int(input())\nH = list(map(int, input().split()))\nans = 0\nfor i in range(1, N):\nif H[i] > H[i-1]:\nans = H[i]\nelse:\nbreak\nprint(ans)\nN = int(input())\nH = list(map(int, input().split()))\nans = H[0]\nfor i in range(1, N):\nif H[i] > H[i-1]:\nans = H[i]\nelse:\nbreak\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc235_b/Python/44832943",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 81
                },
                {
                        "id": "pretrain_python_data_10539953",
                        "content": "N = int(input())\nH = list(map(int, input().split()))\nans = 0\nb = 0\nfor i in range(N):\nif H[i] >= b:\nans += 1\nb = H[i]\nprint(ans)",
                        "max_stars_repo_path": "submissions/abc124/b.py",
                        "max_stars_repo_name": "m-star18/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 81
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_83",
                        "content": "N = int(input())\nH = list(map(int, input().split()))\nans = 0\nfor i in range(N -1):\nif H[i] < H[i + 1] :\nans = H[i + 1]\nif H[0] >= H[1]:\nans = H[0]\nelse: break\nprint(ans)\nN = int(input())\nH = list(map(int, input().split()))\nans = 0\nfor i in range(N -1):\nif H[i] < H[i + 1] :\nans = H[i + 1]\nelif H[0] >= H[1]:\nans = H[0]\nelse: break\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc235_b/Python/45931351",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 81
                },
                {
                        "id": "pretrain_python_data_10539953",
                        "content": "N = int(input())\nH = list(map(int, input().split()))\nans = 0\nb = 0\nfor i in range(N):\nif H[i] >= b:\nans += 1\nb = H[i]\nprint(ans)",
                        "max_stars_repo_path": "submissions/abc124/b.py",
                        "max_stars_repo_name": "m-star18/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 81
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1165498",
                        "content": "n = int(input())\nfor i in range(n):\nprint('  '*(n-i-1)+'* '*(i+1))\nfor i in range(n-1):\nprint('  '*(i+1)+'* '*(n-i-1))",
                        "max_stars_repo_path": "Patterns/Star2.py",
                        "max_stars_repo_name": "sad786/Python",
                        "max_stars_count": 0,
                        "__cluster__": 2254
                },
                {
                        "id": "test_condefects-python_data_2255",
                        "content": "n = int(input())\nfor i in range(n+1):\nif i**i > n: break\nif i**i == n:\nprint(i)\nexit()\nprint(-1)\nn = int(input())\nfor i in range(1,n+1):\nif i**i > n: break\nif i**i == n:\nprint(i)\nexit()\nprint(-1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc327_b/Python/55112756",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2254
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_2619653",
                        "content": "A, B, C = map(int, input().split())\nprint(A * (C / B))",
                        "max_stars_repo_path": "yc231/926.py",
                        "max_stars_repo_name": "c-yan/yukicoder",
                        "max_stars_count": 0,
                        "__cluster__": 2174
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2174
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2298",
                        "content": "n = int(input())\na = \"\"\nfor i in range(2*n):\na += \"1\" if i%2 ==0 else \"0\"\nprint(a)\nn = int(input())\na = \"\"\nfor i in range(2*n+1):\na += \"1\" if i%2 ==0 else \"0\"\nprint(a)\n",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc341_a/Python/54737422",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2297
                },
                {
                        "id": "pretrain_python_data_1142485",
                        "content": "n = int(input())\nfor i in range(0,n,1):\nprint(i**2)",
                        "max_stars_repo_path": "loops.py",
                        "max_stars_repo_name": "rishavpramanik/hackerrankpers",
                        "max_stars_count": 1,
                        "__cluster__": 2297
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1323
                },
                {
                        "id": "pretrain_python_data_2629287",
                        "content": "N, A, B = map(int, input().split())\nprint(min(N * A, B))",
                        "max_stars_repo_path": "abc/abc133/a/main.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1323
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1323
                },
                {
                        "id": "pretrain_python_data_2629287",
                        "content": "N, A, B = map(int, input().split())\nprint(min(N * A, B))",
                        "max_stars_repo_path": "abc/abc133/a/main.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1323
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1098",
                        "content": "a, b, c = map(int, input().split())\nif (a + c) // 2 == b:\nprint('Yes')\nelse:\nprint('No')\na, b, c = map(int, input().split())\nif a <= b <= c or c <= b <= a:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc253_a/Python/45510646",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1097
                },
                {
                        "id": "pretrain_python_data_2796766",
                        "content": "a, b, c = map(int, input().split())\nleft = a * a + b * b\nif left < c * c:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "online_judges/atcoder/contests/abc199/abc199_a.py",
                        "max_stars_repo_name": "miaortizma/competitive-programming",
                        "max_stars_count": 2,
                        "__cluster__": 1097
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_9025968",
                        "content": "N = int(input())\nd = list(map(int, input().split()))\nans = 0\nfor i in range(N-1):\nfor j in range(i+1, N):\nans += d[i] * d[j]\nprint(ans)",
                        "max_stars_repo_path": "ABC/143/b.py",
                        "max_stars_repo_name": "fumiyanll23/AtCoder",
                        "max_stars_count": 0,
                        "__cluster__": 2144
                },
                {
                        "id": "test_condefects-python_data_2796",
                        "content": "N = int(input())\nS = list(map(int, input().split()))\nans = [S[0]]\nfor i in range(1,N):\nans.append(S[i]-S[i-1])\nprint(ans)\nN = int(input())\nS = list(map(int, input().split()))\nans = [S[0]]\nfor i in range(1,N):\nans.append(S[i]-S[i-1])\nprint(*ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc280_b/Python/45270301",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2144
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_9014746",
                        "content": "a, b = map(int, input().split())\nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(int(a/b))\nprint(a%b)",
                        "max_stars_repo_path": "baekjoon/10869/Python.py",
                        "max_stars_repo_name": "rjs1197/iceamericano",
                        "max_stars_count": 0,
                        "__cluster__": 730
                },
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 730
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_9014746",
                        "content": "a, b = map(int, input().split())\nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(int(a/b))\nprint(a%b)",
                        "max_stars_repo_path": "baekjoon/10869/Python.py",
                        "max_stars_repo_name": "rjs1197/iceamericano",
                        "max_stars_count": 0,
                        "__cluster__": 730
                },
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 730
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_7490408",
                        "content": "n = int(input())\nfatorial = 1\nfor i in range(1, n+1):\nfatorial *= i\nprint(fatorial)",
                        "max_stars_repo_path": "1153.py",
                        "max_stars_repo_name": "barroslipe/urionlinejudge",
                        "max_stars_count": 0,
                        "__cluster__": 991
                },
                {
                        "id": "test_condefects-python_data_992",
                        "content": "n = input()\nn = int(n)\nfor i in range(10,-1,-1):\nprint(i)\nn = input()\nn = int(n)\nfor i in range(n,-1,-1):\nprint(i)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc281_a/Python/45244769",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 991
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_10776593",
                        "content": "n = int(input())\nfor i in range(n-1,-1,-1):\nprint(i)\n",
                        "max_stars_repo_path": "Codeup/6073.py",
                        "max_stars_repo_name": "lkc263/Algorithm_Study_Python",
                        "max_stars_count": 0,
                        "__cluster__": 991
                },
                {
                        "id": "test_condefects-python_data_992",
                        "content": "n = input()\nn = int(n)\nfor i in range(10,-1,-1):\nprint(i)\nn = input()\nn = int(n)\nfor i in range(n,-1,-1):\nprint(i)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc281_a/Python/45244769",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 991
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_992",
                        "content": "n = input()\nn = int(n)\nfor i in range(10,-1,-1):\nprint(i)\nn = input()\nn = int(n)\nfor i in range(n,-1,-1):\nprint(i)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc281_a/Python/45244769",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 991
                },
                {
                        "id": "pretrain_python_data_10769623",
                        "content": "fat,mat = int, 1\nn = int(input())\nfor i in range(n-1):\nmat *= (n-i)\nprint(mat)",
                        "max_stars_repo_path": "1153.py",
                        "max_stars_repo_name": "Valarr/Uri",
                        "max_stars_count": 0,
                        "__cluster__": 991
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1155",
                        "content": "a,b = map(int,input().split())\nans = a ^ b\nprint(ans)\na,b = map(int,input().split())\nans = a | b\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc270_a/Python/44921373",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1154
                },
                {
                        "id": "pretrain_python_data_12242537",
                        "content": "a,b = map(int,input().split())\nans = 0\nif a>b:\nans += int(a//b)\na = a%b\nwhile b!=0:\nans += int(a//b)\na,b = b,a%b\nprint(ans)",
                        "max_stars_repo_path": "Codeforces/A_Rational_Resistance.py",
                        "max_stars_repo_name": "anubhab-code/Competitive-Programming",
                        "max_stars_count": 0,
                        "__cluster__": 1154
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1285579",
                        "content": "a, b, c = map(int, input().split())\nprint(min(a + b, b + c, c + a))",
                        "max_stars_repo_path": "contest/abc066/A.py",
                        "max_stars_repo_name": "mola1129/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 2173
                },
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2173
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1261623",
                        "content": "A, B = map(int, input().split())\nif A >= B:\nprint(0)\nelse:\nprint(B - A + 1)",
                        "max_stars_repo_path": "abc/abc209/a/main.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 324
                },
                {
                        "id": "test_condefects-python_data_1412",
                        "content": "A,B = map(int,input().split())\nif A%B == 0:\nprint(int(A/B))\nelse:\nprint(int(A//B)+1)\nA,B = map(int,input().split())\nif A%B == 0:\nprint(int((A+B-1)//B))\nelse:\nprint(int(A//B)+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45783782",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 324
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1261623",
                        "content": "A, B = map(int, input().split())\nif A >= B:\nprint(0)\nelse:\nprint(B - A + 1)",
                        "max_stars_repo_path": "abc/abc209/a/main.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 324
                },
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 324
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1267756",
                        "content": "a = list(map(int, input().split()))\nfor i in range(len(a)-1, -1, -1):\nprint(a[i])",
                        "max_stars_repo_path": "TSIS_3/3840.py",
                        "max_stars_repo_name": "GMKanat/PP2_spring",
                        "max_stars_count": 0,
                        "__cluster__": 1502
                },
                {
                        "id": "test_condefects-python_data_1503",
                        "content": "n = int(input())\na = list(map(int,input().split()))\nfor i in range(n-1):\ns,t = map(int,input().split())\na[i+1] = t*(a[i]//s)\nprint(a[-1])\nn = int(input())\na = list(map(int,input().split()))\nfor i in range(n-1):\ns,t = map(int,input().split())\na[i+1] += t*(a[i]//s)\nprint(a[-1])",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc341_b/Python/54862743",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1502
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1365941",
                        "content": "# https://github.com/tatyam-prime/SortedSet/blob/main/SortedMultiset.py\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nQ = int(input())\nSS = SortedMultiset()\nfor _ in range(Q):\nL = list(map(int, input().split()))\nif L[0]==1:\nSS.add(L[1])\nelif L[0]==2:\nx,k = L[1],L[2]\ni = SS.index_right(x)\nif i<k:\nprint(-1)\nelse:\nprint(SS[i-k])\nelse:\nx,k = L[1],L[2]\ni = SS.index(x)\nif i+k>len(SS):\nprint(-1)\nelse:\nprint(SS[i+k-1])",
                        "max_stars_repo_path": "abc241/d/test.py",
                        "max_stars_repo_name": "seigot/atcoder",
                        "max_stars_count": 2,
                        "__cluster__": 501
                },
                {
                        "id": "test_condefects-python_data_1149",
                        "content": "def ip():return int(input())\ndef mp():return map(int, input().split())\ndef lmp():return list(map(int, input().split()))\n# ABC241 D 1177 - Sequence Query\n# \u7a7a\u306e\u6570\u5217 A \u304c\u3042\u308a\u307e\u3059\u3002\n# \u30af\u30a8\u30ea\u304c Q \u500b\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u3001\u4e0e\u3048\u3089\u308c\u305f\u9806\u756a\u306b\u51e6\u7406\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# \u30af\u30a8\u30ea\u306f\u6b21\u306e 3 \u7a2e\u985e\u306e\u3044\u305a\u308c\u304b\u3067\u3059\u3002\n# \u30fb1 x : A \u306b x \u3092\u8ffd\u52a0\u3059\u308b\u3002\n# \u30fb2 x k : A \u306e x \u4ee5\u4e0b\u306e\u8981\u7d20\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089 k \u756a\u76ee\u306e\u5024\u3092\u51fa\u529b\u3059\u308b\u3002(k \u306f 5 \u4ee5\u4e0b)\n#   \u305f\u3060\u3057\u3001A \u306b x \u4ee5\u4e0b\u306e\u8981\u7d20\u304c k \u500b\u4ee5\u4e0a\u5b58\u5728\u3057\u306a\u3044\u3068\u304d\u306f -1 \u3068\u51fa\u529b\u3059\u308b\u3002\n# \u30fb3 x k : A \u306e x \u4ee5\u4e0a\u306e\u8981\u7d20\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089 k \u756a\u76ee\u306e\u5024\u3092\u51fa\u529b\u3059\u308b\u3002(k \u306f 5 \u4ee5\u4e0b)\n#   \u305f\u3060\u3057\u3001A \u306b x \u4ee5\u4e0a\u306e\u8981\u7d20\u304c k \u500b\u4ee5\u4e0a\u5b58\u5728\u3057\u306a\u3044\u3068\u304d\u306f -1 \u3068\u51fa\u529b\u3059\u308b\u3002\n# \u30fb1 \u2264 Q \u2264 2\u00d710^5\n# \u30fb1 \u2264 x \u2264 10^18\n# \u30fb1 \u2264 k \u2264 5\ndef main():\nQ = ip()\nA = SortedMultiset()\nfor _ in range(Q):\nq = lmp()\nif q[0] == 1:\nx = q[1]\nA.add(x)\nelif q[0] == 2:\nx, k = q[1:]\nidx = A.index_right(x) - k\nprint(A[idx] if idx >= 0 else -1)\n# print(2, A, x, k, idx)\nelse:\nx, k = q[1:]\nidx = A.index_right(x) + k - 1\nprint(A[idx] if idx < len(A) else -1)\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Optional, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Optional[T]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Optional[T]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Optional[T]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Optional[T]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nif __name__ == '__main__':\nmain()\ndef ip():return int(input())\ndef mp():return map(int, input().split())\ndef lmp():return list(map(int, input().split()))\n# ABC241 D 1177 - Sequence Query\n# \u7a7a\u306e\u6570\u5217 A \u304c\u3042\u308a\u307e\u3059\u3002\n# \u30af\u30a8\u30ea\u304c Q \u500b\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u3001\u4e0e\u3048\u3089\u308c\u305f\u9806\u756a\u306b\u51e6\u7406\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# \u30af\u30a8\u30ea\u306f\u6b21\u306e 3 \u7a2e\u985e\u306e\u3044\u305a\u308c\u304b\u3067\u3059\u3002\n# \u30fb1 x : A \u306b x \u3092\u8ffd\u52a0\u3059\u308b\u3002\n# \u30fb2 x k : A \u306e x \u4ee5\u4e0b\u306e\u8981\u7d20\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u65b9\u304b\u3089 k \u756a\u76ee\u306e\u5024\u3092\u51fa\u529b\u3059\u308b\u3002(k \u306f 5 \u4ee5\u4e0b)\n#   \u305f\u3060\u3057\u3001A \u306b x \u4ee5\u4e0b\u306e\u8981\u7d20\u304c k \u500b\u4ee5\u4e0a\u5b58\u5728\u3057\u306a\u3044\u3068\u304d\u306f -1 \u3068\u51fa\u529b\u3059\u308b\u3002\n# \u30fb3 x k : A \u306e x \u4ee5\u4e0a\u306e\u8981\u7d20\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089 k \u756a\u76ee\u306e\u5024\u3092\u51fa\u529b\u3059\u308b\u3002(k \u306f 5 \u4ee5\u4e0b)\n#   \u305f\u3060\u3057\u3001A \u306b x \u4ee5\u4e0a\u306e\u8981\u7d20\u304c k \u500b\u4ee5\u4e0a\u5b58\u5728\u3057\u306a\u3044\u3068\u304d\u306f -1 \u3068\u51fa\u529b\u3059\u308b\u3002\n# \u30fb1 \u2264 Q \u2264 2\u00d710^5\n# \u30fb1 \u2264 x \u2264 10^18\n# \u30fb1 \u2264 k \u2264 5\ndef main():\nQ = ip()\nA = SortedMultiset()\nfor _ in range(Q):\nq = lmp()\nif q[0] == 1:\nx = q[1]\nA.add(x)\nelif q[0] == 2:\nx, k = q[1:]\nidx = A.index_right(x) - k\nprint(A[idx] if idx >= 0 else -1)\n# print(2, A, x, k, idx)\nelse:\nx, k = q[1:]\nidx = A.index(x) + k - 1\nprint(A[idx] if idx < len(A) else -1)\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Optional, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Optional[T]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Optional[T]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Optional[T]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Optional[T]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nif __name__ == '__main__':\nmain()",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc241_d/Python/45806316",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 501
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1365941",
                        "content": "# https://github.com/tatyam-prime/SortedSet/blob/main/SortedMultiset.py\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nQ = int(input())\nSS = SortedMultiset()\nfor _ in range(Q):\nL = list(map(int, input().split()))\nif L[0]==1:\nSS.add(L[1])\nelif L[0]==2:\nx,k = L[1],L[2]\ni = SS.index_right(x)\nif i<k:\nprint(-1)\nelse:\nprint(SS[i-k])\nelse:\nx,k = L[1],L[2]\ni = SS.index(x)\nif i+k>len(SS):\nprint(-1)\nelse:\nprint(SS[i+k-1])",
                        "max_stars_repo_path": "abc241/d/test.py",
                        "max_stars_repo_name": "seigot/atcoder",
                        "max_stars_count": 2,
                        "__cluster__": 501
                },
                {
                        "id": "test_condefects-python_data_1150",
                        "content": "import math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size: size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1: len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nq = int(input())\ns = SortedMultiset()\nfor i in range(q):\n#print(s)\nt = list(map(int, input().split()))\nif t[0] == 1:\nx = t[1]\ns.add(x)\nelif t[0] == 2:\nx = t[1]\nk = t[2]\np = s.index_right(x)\nif p < k:\nprint(-1)\nelse:\nprint(s[p-k])\nelse:\nx = t[1]\nk = t[2]\np = s.index_right(x)\ncnt = len(s) - p\nif cnt < k:\nprint(-1)\nelse:\nprint(s[p+k-1])\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size: size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1: len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nq = int(input())\ns = SortedMultiset()\nfor i in range(q):\n#print(s)\nt = list(map(int, input().split()))\nif t[0] == 1:\nx = t[1]\ns.add(x)\nelif t[0] == 2:\nx = t[1]\nk = t[2]\np = s.index_right(x)\nif p < k:\nprint(-1)\nelse:\nprint(s[p-k])\nelse:\nx = t[1]\nk = t[2]\np = s.index(x)\ncnt = len(s) - p\nif cnt < k:\nprint(-1)\nelse:\nprint(s[p+k-1])",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc241_d/Python/45777353",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 501
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1365941",
                        "content": "# https://github.com/tatyam-prime/SortedSet/blob/main/SortedMultiset.py\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nQ = int(input())\nSS = SortedMultiset()\nfor _ in range(Q):\nL = list(map(int, input().split()))\nif L[0]==1:\nSS.add(L[1])\nelif L[0]==2:\nx,k = L[1],L[2]\ni = SS.index_right(x)\nif i<k:\nprint(-1)\nelse:\nprint(SS[i-k])\nelse:\nx,k = L[1],L[2]\ni = SS.index(x)\nif i+k>len(SS):\nprint(-1)\nelse:\nprint(SS[i+k-1])",
                        "max_stars_repo_path": "abc241/d/test.py",
                        "max_stars_repo_name": "seigot/atcoder",
                        "max_stars_count": 2,
                        "__cluster__": 501
                },
                {
                        "id": "test_condefects-python_data_1172",
                        "content": "import math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\ndef dfs(x):\nvisited[x] = True\nfor to_x in to[x]:\nif not visited[to_x]:\ndfs(to_x)\nfor i in S[to_x]:\nif len(S[x]) < 20:\nS[x].add(i)\nelse:\nm = min(S[to_x])\nif i > m:\nS[x].discard(m)\nS[x].add(i)\n################################################################\nimport sys; sys.setrecursionlimit(10**8)\nN,Q = map(int,input().split())\nX = [\"\"] + list(map(int,input().split()))\nto = [[] for _ in range(N+1)]\nfor _ in range(N-1):\nA,B = map(int,input().split())\nto[B].append(A); to[A].append(B)\nS = [SortedMultiset([X[i]]) for i in range(N+1)]\nvisited = [False for _ in range(N+1)]\ndfs(1)\nfor _ in range(Q):\nV,K = map(int,input().split())\nprint(S[V][len(S[V])-K])\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\ndef dfs(x):\nvisited[x] = True\nfor to_x in to[x]:\nif not visited[to_x]:\ndfs(to_x)\nfor i in S[to_x]:\nif len(S[x]) < 20:\nS[x].add(i)\nelse:\nm = min(S[x])\nif i > m:\nS[x].discard(m)\nS[x].add(i)\n################################################################\nimport sys; sys.setrecursionlimit(10**8)\nN,Q = map(int,input().split())\nX = [\"\"] + list(map(int,input().split()))\nto = [[] for _ in range(N+1)]\nfor _ in range(N-1):\nA,B = map(int,input().split())\nto[B].append(A); to[A].append(B)\nS = [SortedMultiset([X[i]]) for i in range(N+1)]\nvisited = [False for _ in range(N+1)]\ndfs(1)\nfor _ in range(Q):\nV,K = map(int,input().split())\nprint(S[V][len(S[V])-K])",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc239_e/Python/45522067",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 501
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1365941",
                        "content": "# https://github.com/tatyam-prime/SortedSet/blob/main/SortedMultiset.py\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nQ = int(input())\nSS = SortedMultiset()\nfor _ in range(Q):\nL = list(map(int, input().split()))\nif L[0]==1:\nSS.add(L[1])\nelif L[0]==2:\nx,k = L[1],L[2]\ni = SS.index_right(x)\nif i<k:\nprint(-1)\nelse:\nprint(SS[i-k])\nelse:\nx,k = L[1],L[2]\ni = SS.index(x)\nif i+k>len(SS):\nprint(-1)\nelse:\nprint(SS[i+k-1])",
                        "max_stars_repo_path": "abc241/d/test.py",
                        "max_stars_repo_name": "seigot/atcoder",
                        "max_stars_count": 2,
                        "__cluster__": 501
                },
                {
                        "id": "test_condefects-python_data_502",
                        "content": "'''\ntatyam\u3055\u3093\u4f5c\u306e\u3001SortedSet\u3067\u3059\u3002\n\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304d\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\nhttps://github.com/tatyam-prime/SortedSet/blob/main/SortedSet.py\n\u30fb\u4f7f\u3044\u65b9(\u500b\u4eba\u7684\u307e\u3068\u3081)\ns=SortedSet()\ns.a: SortedSet\u306e\u4e2d\u8eab\u3092\u8fd4\u3059\u3002\nlen(s), x in s, x not in s: \u30ea\u30b9\u30c8\u3068\u540c\u3058\u8981\u9818\u3067\u4f7f\u3048\u308b\u3002\ns.add(x): x\u3092\u8ffd\u52a0\u3057\u3066True\u3092\u8fd4\u3059\u3002\u305f\u3060\u3057x\u304c\u3059\u3067\u306bs\u5185\u306b\u3042\u308b\u5834\u5408\u3001x\u306f\u8ffd\u52a0\u305b\u305a\u306bFalse\u3092\u8fd4\u3059\u3002\ns.discard(x): x\u3092\u524a\u9664\u3057\u3066True\u3092\u8fd4\u3059\u3002\u305f\u3060\u3057x\u304cs\u5185\u306b\u306a\u3044\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306bFalse\u3092\u8fd4\u3059\u3002\ns.lt(x): x\u3088\u308a\u5c0f\u3055\u3044\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3002\u3082\u3057\u5b58\u5728\u3057\u306a\u3044\u306a\u3089\u3001None\u3092\u8fd4\u3059\u3002\ns.le(x): x\u3000\u4ee5\u4e0b\u306e\u3000\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3002\u3082\u3057\u5b58\u5728\u3057\u306a\u3044\u306a\u3089\u3001None\u3092\u8fd4\u3059\u3002\ns.gt(x): x\u3088\u308a\u5927\u304d\u3044\u6700\u5c0f\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3002\u3082\u3057\u5b58\u5728\u3057\u306a\u3044\u306a\u3089\u3001None\u3092\u8fd4\u3059\u3002\ns.ge(x): x\u3000\u4ee5\u4e0a\u306e\u3000\u6700\u5c0f\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3002\u3082\u3057\u5b58\u5728\u3057\u306a\u3044\u306a\u3089\u3001None\u3092\u8fd4\u3059\u3002\ns.index(x): x\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059\u3002\ns.index_right(x): x\u4ee5\u4e0b\u306e\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059\u3002\n\u30fb\u4f7f\u3044\u65b9URL\nhttps://github.com/tatyam-prime/SortedSet\n'''\n# https://github.com/tatyam-prime/SortedSet/blob/main/SortedSet.py\nimport math\nfrom bisect import bisect_left, bisect_right\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedSet(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size: size * (i + 1) // bucket_size] for\ni in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedSet from iterable. / O(N) if sorted and unique / O(N log N)\"\na = list(a)\nif not all(a[i] < a[i + 1] for i in range(len(a) - 1)):\na = sorted(set(a))\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedSet\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1: len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef add(self, x: T) -> bool:\n\"Add an element and return True if added. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn True\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i != len(a) and a[i] == x: return False\na.insert(i, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\nreturn True\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nA.append(1 << 50)\n# print(f'{A=}')\nss = SortedSet()\ntotal_value = 0\nfor a in A:\nif total_value < a:\n# \u51fa\u529b\u304c\u78ba\u5b9a\u3057\u305f\u3088\u3002\nif len(ss) + (a - total_value - 1) >= K:\nwhile len(ss) < K:\ntotal_value += 1\nss.add(total_value)\ncnt = 0\nfor el in ss:\nprint(el, end=' ')\ncnt += 1\nif cnt == K:\nexit()\n# \u51fa\u529b\u306f\u304a\u3042\u305a\u3051\u3067\u3059\u3002\nfor v in range(total_value + 1, a):\nss.add(v)\nfor v in ss:\nx = v + a\nif a <= x < total_value + a:\nss.add(x)\nelse:\ndefinition_cnt = ss.index(a)\n# \u51fa\u529b\u304c\u78ba\u5b9a\u3057\u305f\u3088\u3002\nif definition_cnt >= K:\ncnt = 0\nfor el in ss:\nprint(el, end=' ')\ncnt += 1\nif cnt == K:\nexit()\n# \u51fa\u529b\u306f\u304a\u3042\u305a\u3051\u3067\u3059\u3002\nnss = SortedSet()\nfor el in ss:\nif el < a:\nnss.add(el)\nelif el <= total_value:\nif el - a in ss:\nnss.add(el)\nfor el in ss:\nx = el + a\nif total_value < x <= total_value + a:\nnss.add(x)\nss = nss\ntotal_value += a\n# print(*ss)\n'''\ntatyam\u3055\u3093\u4f5c\u306e\u3001SortedSet\u3067\u3059\u3002\n\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304d\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\nhttps://github.com/tatyam-prime/SortedSet/blob/main/SortedSet.py\n\u30fb\u4f7f\u3044\u65b9(\u500b\u4eba\u7684\u307e\u3068\u3081)\ns=SortedSet()\ns.a: SortedSet\u306e\u4e2d\u8eab\u3092\u8fd4\u3059\u3002\nlen(s), x in s, x not in s: \u30ea\u30b9\u30c8\u3068\u540c\u3058\u8981\u9818\u3067\u4f7f\u3048\u308b\u3002\ns.add(x): x\u3092\u8ffd\u52a0\u3057\u3066True\u3092\u8fd4\u3059\u3002\u305f\u3060\u3057x\u304c\u3059\u3067\u306bs\u5185\u306b\u3042\u308b\u5834\u5408\u3001x\u306f\u8ffd\u52a0\u305b\u305a\u306bFalse\u3092\u8fd4\u3059\u3002\ns.discard(x): x\u3092\u524a\u9664\u3057\u3066True\u3092\u8fd4\u3059\u3002\u305f\u3060\u3057x\u304cs\u5185\u306b\u306a\u3044\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306bFalse\u3092\u8fd4\u3059\u3002\ns.lt(x): x\u3088\u308a\u5c0f\u3055\u3044\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3002\u3082\u3057\u5b58\u5728\u3057\u306a\u3044\u306a\u3089\u3001None\u3092\u8fd4\u3059\u3002\ns.le(x): x\u3000\u4ee5\u4e0b\u306e\u3000\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3002\u3082\u3057\u5b58\u5728\u3057\u306a\u3044\u306a\u3089\u3001None\u3092\u8fd4\u3059\u3002\ns.gt(x): x\u3088\u308a\u5927\u304d\u3044\u6700\u5c0f\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3002\u3082\u3057\u5b58\u5728\u3057\u306a\u3044\u306a\u3089\u3001None\u3092\u8fd4\u3059\u3002\ns.ge(x): x\u3000\u4ee5\u4e0a\u306e\u3000\u6700\u5c0f\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3002\u3082\u3057\u5b58\u5728\u3057\u306a\u3044\u306a\u3089\u3001None\u3092\u8fd4\u3059\u3002\ns.index(x): x\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059\u3002\ns.index_right(x): x\u4ee5\u4e0b\u306e\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059\u3002\n\u30fb\u4f7f\u3044\u65b9URL\nhttps://github.com/tatyam-prime/SortedSet\n'''\n# https://github.com/tatyam-prime/SortedSet/blob/main/SortedSet.py\nimport math\nfrom bisect import bisect_left, bisect_right\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedSet(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size: size * (i + 1) // bucket_size] for\ni in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedSet from iterable. / O(N) if sorted and unique / O(N log N)\"\na = list(a)\nif not all(a[i] < a[i + 1] for i in range(len(a) - 1)):\na = sorted(set(a))\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedSet\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1: len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef add(self, x: T) -> bool:\n\"Add an element and return True if added. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn True\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i != len(a) and a[i] == x: return False\na.insert(i, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\nreturn True\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nA.append(1 << 80)\n# print(f'{A=}')\nss = SortedSet()\ntotal_value = 0\nfor a in A:\nif total_value < a:\n# \u51fa\u529b\u304c\u78ba\u5b9a\u3057\u305f\u3088\u3002\nif len(ss) + (a - total_value - 1) >= K:\nwhile len(ss) < K:\ntotal_value += 1\nss.add(total_value)\ncnt = 0\nfor el in ss:\nprint(el, end=' ')\ncnt += 1\nif cnt == K:\nexit()\n# \u51fa\u529b\u306f\u304a\u3042\u305a\u3051\u3067\u3059\u3002\nfor v in range(total_value + 1, a):\nss.add(v)\nfor v in ss:\nx = v + a\nif a <= x < total_value + a:\nss.add(x)\nelse:\ndefinition_cnt = ss.index(a)\n# \u51fa\u529b\u304c\u78ba\u5b9a\u3057\u305f\u3088\u3002\nif definition_cnt >= K:\ncnt = 0\nfor el in ss:\nprint(el, end=' ')\ncnt += 1\nif cnt == K:\nexit()\n# \u51fa\u529b\u306f\u304a\u3042\u305a\u3051\u3067\u3059\u3002\nnss = SortedSet()\nfor el in ss:\nif el < a:\nnss.add(el)\nelif el <= total_value:\nif el - a in ss:\nnss.add(el)\nfor el in ss:\nx = el + a\nif total_value < x <= total_value + a:\nnss.add(x)\nss = nss\ntotal_value += a\n# print(*ss)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/agc062_c/Python/41651640",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 501
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1365941",
                        "content": "# https://github.com/tatyam-prime/SortedSet/blob/main/SortedMultiset.py\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Union, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Union[T, None]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Union[T, None]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Union[T, None]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Union[T, None]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nQ = int(input())\nSS = SortedMultiset()\nfor _ in range(Q):\nL = list(map(int, input().split()))\nif L[0]==1:\nSS.add(L[1])\nelif L[0]==2:\nx,k = L[1],L[2]\ni = SS.index_right(x)\nif i<k:\nprint(-1)\nelse:\nprint(SS[i-k])\nelse:\nx,k = L[1],L[2]\ni = SS.index(x)\nif i+k>len(SS):\nprint(-1)\nelse:\nprint(SS[i+k-1])",
                        "max_stars_repo_path": "abc241/d/test.py",
                        "max_stars_repo_name": "seigot/atcoder",
                        "max_stars_count": 2,
                        "__cluster__": 501
                },
                {
                        "id": "test_condefects-python_data_2383",
                        "content": "# https://github.com/tatyam-prime/SortedSet/blob/main/SortedMultiset.py\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Optional, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Optional[T]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Optional[T]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Optional[T]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Optional[T]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nN = int(input())\nS = input()\nM = SortedMultiset()\nfor i in range(1, N-1):\nif S[i-1:i+2] == 'ARC':\nl,r = i-1, i+1\nwhile l-1 > 0 and S[l-1] == 'A':\nl -= 1\nwhile r+1 < N and S[r+1] == 'C':\nr += 1\nm = min(i-l, r-i)\nM.add(m)\ncnt = 1\nwhile M:\nif cnt % 2 != 0:\nv = M[-1]\nM.discard(v)\nif v - 1 > 0:\nM.add(v-1)\nelse:\nv = M[0]\nM.discard(v)\ncnt += 1\nprint(cnt-1)\n# https://github.com/tatyam-prime/SortedSet/blob/main/SortedMultiset.py\nimport math\nfrom bisect import bisect_left, bisect_right, insort\nfrom typing import Generic, Iterable, Iterator, TypeVar, Optional, List\nT = TypeVar('T')\nclass SortedMultiset(Generic[T]):\nBUCKET_RATIO = 50\nREBUILD_RATIO = 170\ndef _build(self, a=None) -> None:\n\"Evenly divide `a` into buckets.\"\nif a is None: a = list(self)\nsize = self.size = len(a)\nbucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\nself.a = [a[size * i // bucket_size : size * (i + 1) // bucket_size] for i in range(bucket_size)]\ndef __init__(self, a: Iterable[T] = []) -> None:\n\"Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)\"\na = list(a)\nif not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\na = sorted(a)\nself._build(a)\ndef __iter__(self) -> Iterator[T]:\nfor i in self.a:\nfor j in i: yield j\ndef __reversed__(self) -> Iterator[T]:\nfor i in reversed(self.a):\nfor j in reversed(i): yield j\ndef __len__(self) -> int:\nreturn self.size\ndef __repr__(self) -> str:\nreturn \"SortedMultiset\" + str(self.a)\ndef __str__(self) -> str:\ns = str(list(self))\nreturn \"{\" + s[1 : len(s) - 1] + \"}\"\ndef _find_bucket(self, x: T) -> List[T]:\n\"Find the bucket which should contain x. self must not be empty.\"\nfor a in self.a:\nif x <= a[-1]: return a\nreturn a\ndef __contains__(self, x: T) -> bool:\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nreturn i != len(a) and a[i] == x\ndef count(self, x: T) -> int:\n\"Count the number of x.\"\nreturn self.index_right(x) - self.index(x)\ndef add(self, x: T) -> None:\n\"Add an element. / O(\u221aN)\"\nif self.size == 0:\nself.a = [[x]]\nself.size = 1\nreturn\na = self._find_bucket(x)\ninsort(a, x)\nself.size += 1\nif len(a) > len(self.a) * self.REBUILD_RATIO:\nself._build()\ndef discard(self, x: T) -> bool:\n\"Remove an element and return True if removed. / O(\u221aN)\"\nif self.size == 0: return False\na = self._find_bucket(x)\ni = bisect_left(a, x)\nif i == len(a) or a[i] != x: return False\na.pop(i)\nself.size -= 1\nif len(a) == 0: self._build()\nreturn True\ndef lt(self, x: T) -> Optional[T]:\n\"Find the largest element < x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] < x:\nreturn a[bisect_left(a, x) - 1]\ndef le(self, x: T) -> Optional[T]:\n\"Find the largest element <= x, or None if it doesn't exist.\"\nfor a in reversed(self.a):\nif a[0] <= x:\nreturn a[bisect_right(a, x) - 1]\ndef gt(self, x: T) -> Optional[T]:\n\"Find the smallest element > x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] > x:\nreturn a[bisect_right(a, x)]\ndef ge(self, x: T) -> Optional[T]:\n\"Find the smallest element >= x, or None if it doesn't exist.\"\nfor a in self.a:\nif a[-1] >= x:\nreturn a[bisect_left(a, x)]\ndef __getitem__(self, x: int) -> T:\n\"Return the x-th element, or IndexError if it doesn't exist.\"\nif x < 0: x += self.size\nif x < 0: raise IndexError\nfor a in self.a:\nif x < len(a): return a[x]\nx -= len(a)\nraise IndexError\ndef index(self, x: T) -> int:\n\"Count the number of elements < x.\"\nans = 0\nfor a in self.a:\nif a[-1] >= x:\nreturn ans + bisect_left(a, x)\nans += len(a)\nreturn ans\ndef index_right(self, x: T) -> int:\n\"Count the number of elements <= x.\"\nans = 0\nfor a in self.a:\nif a[-1] > x:\nreturn ans + bisect_right(a, x)\nans += len(a)\nreturn ans\nN = int(input())\nS = input()\nM = SortedMultiset()\nfor i in range(1, N-1):\nif S[i-1:i+2] == 'ARC':\nl,r = i-1, i+1\nwhile l-1 >= 0 and S[l-1] == 'A':\nl -= 1\nwhile r+1 < N and S[r+1] == 'C':\nr += 1\nm = min(i-l, r-i)\nM.add(m)\ncnt = 1\nwhile M:\nif cnt % 2 != 0:\nv = M[-1]\nM.discard(v)\nif v - 1 > 0:\nM.add(v-1)\nelse:\nv = M[0]\nM.discard(v)\ncnt += 1\nprint(cnt-1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/arc140_b/Python/44778158",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 501
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1155",
                        "content": "a,b = map(int,input().split())\nans = a ^ b\nprint(ans)\na,b = map(int,input().split())\nans = a | b\nprint(ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc270_a/Python/44921373",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1154
                },
                {
                        "id": "pretrain_python_data_4408856",
                        "content": "a, b, c = map(int, input().split())\nans = (7 - a) + (7 - b) + (7 - c)\nprint(ans)\n",
                        "max_stars_repo_path": "abc202/abc202_a.py",
                        "max_stars_repo_name": "Vermee81/practice-coding-contests",
                        "max_stars_count": 0,
                        "__cluster__": 1154
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_7647935",
                        "content": "A, B = map(int, input().split())\nprint(A + B if B % A == 0 else B - A)",
                        "max_stars_repo_path": "atcoder/abc/a118.py",
                        "max_stars_repo_name": "tomato-300yen/coding",
                        "max_stars_count": 0,
                        "__cluster__": 2174
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2174
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2298",
                        "content": "n = int(input())\na = \"\"\nfor i in range(2*n):\na += \"1\" if i%2 ==0 else \"0\"\nprint(a)\nn = int(input())\na = \"\"\nfor i in range(2*n+1):\na += \"1\" if i%2 ==0 else \"0\"\nprint(a)\n",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc341_a/Python/54737422",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2297
                },
                {
                        "id": "pretrain_python_data_7776285",
                        "content": "n = int(input())\nprint('+' + '~' * (n-2) + '+' + '.' * (2*n+1))\nprint('|' + '\\\\' + '~' * (n-2) + '\\\\' + '.' * (2*n))\nfor i in range(1, 2*n+1):\nprint('|' + '.' * i + '\\\\' + '~' * (n-2) + '\\\\' + '.' * (2*n - i))\nfor i in range(2*n+1):\nprint('.'* i + '\\\\' + '.' * (2*n - i) + '|' + '~' * (n-2) + '|' )\nprint('.' * (2*n+1) + '+' + '~' * (n-2) + '+')",
                        "max_stars_repo_path": "Exam-19march17/parallelepiped.py",
                        "max_stars_repo_name": "nikolayvutov/Python",
                        "max_stars_count": 0,
                        "__cluster__": 2297
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_9285438",
                        "content": "n, m = map(int, input().split())\nprint(n * m - 1)",
                        "max_stars_repo_path": "hackerrank/python3/challenges/p1-paper-cutting.py",
                        "max_stars_repo_name": "lakscastro/beecrowd-solutions",
                        "max_stars_count": 0,
                        "__cluster__": 340
                },
                {
                        "id": "test_condefects-python_data_351",
                        "content": "n, m, p = map(int, input().split())\nprint((n - m + 1) // p)\nn, m, p = map(int, input().split())\nprint(((n - m + 1) + p - 1) // p)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc318_a/Python/46036999",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 340
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1682",
                        "content": "X, Y = map(int, input().split())\nfloors_to_move = Y - X\nif floors_to_move == 2 or floors_to_move == -3:\nprint('Yes')\nelse:\nprint('No')\nX, Y = map(int, input().split())\nfloors_to_move = Y - X\nif 0 < floors_to_move <= 2 or -3 <= floors_to_move < 0:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc326_a/Python/54490935",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1681
                },
                {
                        "id": "pretrain_python_data_9324037",
                        "content": "X, Y, Z = map(int, input().split())\nif (X + Y + Z) % 3 == 0:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "yc278/1337.py",
                        "max_stars_repo_name": "c-yan/yukicoder",
                        "max_stars_count": 0,
                        "__cluster__": 1681
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_9259973",
                        "content": "A, B, C, D = map(int, input().split())\nturn = 0\nwhile A > 0 and C > 0:\nif turn == 0:\nC -= B\nelse:\nA -= D\nturn = 1 - turn\nif A <= 0:\nprint(\"No\")\nelse:\nprint(\"Yes\")",
                        "max_stars_repo_path": "abc/164/B.py",
                        "max_stars_repo_name": "tonko2/AtCoder",
                        "max_stars_count": 2,
                        "__cluster__": 1103
                },
                {
                        "id": "test_condefects-python_data_1928",
                        "content": "N, A, B, C, D = map(int, input().split())\nif abs(B - C) > 1:\nprint(\"No\")\nelse:\nprint(\"Yes\")\nN, A, B, C, D = map(int, input().split())\nif abs(B - C) > 1:\nprint(\"No\")\nelif B == 0 and C == 0 and A > 0 and D > 0:\nprint(\"No\")\nelse:\nprint(\"Yes\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/arc157_a/Python/44691106",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1103
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2533",
                        "content": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\nif a[i] % k == 0:\nans.append(a[i]//2)\nprint(*ans)\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\nif a[i] % k == 0:\nans.append(a[i]//k)\nprint(*ans)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc347_a/Python/54768582",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2197
                },
                {
                        "id": "pretrain_python_data_9381011",
                        "content": "n = int(input())\na = list(map(int,input().split()))\nx = 0\nfor i in range(n):\nx = x^a[i]\nans = [x^a[i] for i in range(n)]\nprint(*ans)",
                        "max_stars_repo_path": "ABC171/E.py",
                        "max_stars_repo_name": "shimomura314/AtcoderCodes",
                        "max_stars_count": 0,
                        "__cluster__": 2197
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_9381011",
                        "content": "n = int(input())\na = list(map(int,input().split()))\nx = 0\nfor i in range(n):\nx = x^a[i]\nans = [x^a[i] for i in range(n)]\nprint(*ans)",
                        "max_stars_repo_path": "ABC171/E.py",
                        "max_stars_repo_name": "shimomura314/AtcoderCodes",
                        "max_stars_count": 0,
                        "__cluster__": 2197
                },
                {
                        "id": "test_condefects-python_data_2576",
                        "content": "n = int(input())\na = list(map(int,input().split()))\nx = []\nfor i in range(n):\nif a[i] % 2 ==0:\nx.append(a[i])\nprint(x)\nn = int(input())\na = list(map(int,input().split()))\nx = []\nfor i in range(n):\nif a[i] % 2 ==0:\nx.append(a[i])\nprint(*x,sep = ' ')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc294_a/Python/45789682",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2197
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_9381011",
                        "content": "n = int(input())\na = list(map(int,input().split()))\nx = 0\nfor i in range(n):\nx = x^a[i]\nans = [x^a[i] for i in range(n)]\nprint(*ans)",
                        "max_stars_repo_path": "ABC171/E.py",
                        "max_stars_repo_name": "shimomura314/AtcoderCodes",
                        "max_stars_count": 0,
                        "__cluster__": 2197
                },
                {
                        "id": "test_condefects-python_data_2529",
                        "content": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(n):\nif a[i]%k==0:\nprint(a[i]/k, end=\" \")\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(n):\nif a[i]%k==0:\nprint(int(a[i]/k), end=\" \")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc347_a/Python/54752692",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2197
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_585",
                        "content": "n = int(input())\nif n**2 > 2**n:\nprint(\"Yes\")\nelse:\nprint(\"No\")\nn = int(input())\nif 2**n > n**2:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc238_a/Python/45742753",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 582
                },
                {
                        "id": "pretrain_python_data_10993173",
                        "content": "n = int(input())\ns = input()\nif n % 2 == 0 and (s[: n // 2] == s[n // 2:]):\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "contest/abc145/B.py",
                        "max_stars_repo_name": "mola1129/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 582
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1850
                },
                {
                        "id": "pretrain_python_data_10914777",
                        "content": "# \ucc38/\uac70\uc9d3\uc774 \uc11c\ub85c \uac19\uc744 \ub54c\uc5d0\ub9cc \ucc38 \ucd9c\ub825\ud558\uae30\na, b = map(bool, map(int, input().split()))\nprint(a==b)",
                        "max_stars_repo_path": "CodeUp/6057.py",
                        "max_stars_repo_name": "chae-heechan/Algorithm_Study",
                        "max_stars_count": 0,
                        "__cluster__": 1850
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "id": "pretrain_python_data_12517084",
                        "content": "a, b = map(int,input().split())\nprint(a**b-b**a)",
                        "max_stars_repo_path": "test.py",
                        "max_stars_repo_name": "windcry1/My-ACM-ICPC",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "id": "pretrain_python_data_12517084",
                        "content": "a, b = map(int,input().split())\nprint(a**b-b**a)",
                        "max_stars_repo_path": "test.py",
                        "max_stars_repo_name": "windcry1/My-ACM-ICPC",
                        "max_stars_count": 0,
                        "__cluster__": 1032
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_12552786",
                        "content": "l = [*map(int, input().split())]\nl.sort()\nif l[0]+l[3] == l[1]+l[2] or l[3] == l[0]+l[1]+l[2]:\nprint(\"YES\")\nelse:\nprint(\"NO\")",
                        "max_stars_repo_path": "codeforces/Codeforces_Round_588_Div2/dawid_and_bags_of_candies.py",
                        "max_stars_repo_name": "juseongkr/BOJ",
                        "max_stars_count": 7,
                        "__cluster__": 434
                },
                {
                        "id": "test_condefects-python_data_435",
                        "content": "l = list(map(int, input().split()))\nl.sort()\nif(l[0] > l[1] + l[2]): print(\"-1\")\nelse: print(l[2])\nl = list(map(int, input().split()))\nl.sort()\nif(l[2] > l[1] + l[0]): print(\"-1\")\nelse: print(l[2])",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/arc143_a/Python/43960988",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 434
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2255",
                        "content": "n = int(input())\nfor i in range(n+1):\nif i**i > n: break\nif i**i == n:\nprint(i)\nexit()\nprint(-1)\nn = int(input())\nfor i in range(1,n+1):\nif i**i > n: break\nif i**i == n:\nprint(i)\nexit()\nprint(-1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc327_b/Python/55112756",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 723
                },
                {
                        "id": "pretrain_python_data_3053834",
                        "content": "n=int(input())\nfor i in range(1,n):\nif n%i==0:\nprint(i)",
                        "max_stars_repo_path": "divisor.py",
                        "max_stars_repo_name": "MeeraRajendrababu/python_programs",
                        "max_stars_count": 0,
                        "__cluster__": 723
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1516606",
                        "content": "s = input()\nlen_s = len(s)\nfor i in range(len_s):\nif s[i] != s[len_s - i - 1]:\nprint('No')\nexit()\nfor i in range((len_s - 1) // 2):\nif s[i] != s[(len_s - 1) // 2 - 1 - i] or s[(len_s + 2) // 2 + i] != s[(len_s - 1) - i]:\nprint('No')\nexit()\nprint('Yes')",
                        "max_stars_repo_path": "submissions/abc159/b.py",
                        "max_stars_repo_name": "m-star18/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 511
                },
                {
                        "id": "test_condefects-python_data_512",
                        "content": "s = input()\nt = input()\nif len(s) > len(t) or (len(s) == len(t) and s != t):\nprint(\"No\")\nexit()\nelse:\nfor i in range(len(s) - len(t) + 1):\nif s[i:i+len(t)] == t:\nprint(\"Yes\")\nexit()\nprint(\"No\")\ns = input()\nt = input()\nif len(t) > len(s) or (len(s) == len(t) and s != t):\nprint(\"No\")\nexit()\nelse:\nfor i in range(len(s) - len(t) + 1):\nif s[i:i+len(t)] == t:\nprint(\"Yes\")\nexit()\nprint(\"No\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc279_b/Python/44853654",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 511
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_1516606",
                        "content": "s = input()\nlen_s = len(s)\nfor i in range(len_s):\nif s[i] != s[len_s - i - 1]:\nprint('No')\nexit()\nfor i in range((len_s - 1) // 2):\nif s[i] != s[(len_s - 1) // 2 - 1 - i] or s[(len_s + 2) // 2 + i] != s[(len_s - 1) - i]:\nprint('No')\nexit()\nprint('Yes')",
                        "max_stars_repo_path": "submissions/abc159/b.py",
                        "max_stars_repo_name": "m-star18/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 511
                },
                {
                        "id": "test_condefects-python_data_2501",
                        "content": "s = input()\nif s.islower():\nprint(\"No\")\nexit()\nfor i in range(1, len(s) - 1):\nif s[i].isupper():\nprint(\"No\")\nexit()\nprint(\"Yes\")\ns = input()\nif s.islower():\nprint(\"No\")\nexit()\nfor i in range(1, len(s)):\nif s[i].isupper():\nprint(\"No\")\nexit()\nprint(\"Yes\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc338_a/Python/54889106",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 511
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_4616822",
                        "content": "a,b=map(int,input().split())\nprint(a*b-(a+b-1))",
                        "max_stars_repo_path": "code/abc106_a_01.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 2173
                },
                {
                        "id": "test_condefects-python_data_2174",
                        "content": "a,b = map(int, input().split())\nprint(a**3)\na,b = map(int, input().split())\nprint(a**b)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44590701",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2173
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1409",
                        "content": "A,B = map(int,input().split())\nprint(A//B+1)\nA,B = map(int,input().split())\nprint((A-1)//B+1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/46001200",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_3098946",
                        "content": "A, B = map(int, input().split())\nans = [A + A-1, A + B, B + B-1]\nprint(max(ans))",
                        "max_stars_repo_path": "ABC/124/a.py",
                        "max_stars_repo_name": "fumiyanll23/AtCoder",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "pretrain_python_data_3098946",
                        "content": "A, B = map(int, input().split())\nans = [A + A-1, A + B, B + B-1]\nprint(max(ans))",
                        "max_stars_repo_path": "ABC/124/a.py",
                        "max_stars_repo_name": "fumiyanll23/AtCoder",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_3098946",
                        "content": "A, B = map(int, input().split())\nans = [A + A-1, A + B, B + B-1]\nprint(max(ans))",
                        "max_stars_repo_path": "ABC/124/a.py",
                        "max_stars_repo_name": "fumiyanll23/AtCoder",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_585",
                        "content": "n = int(input())\nif n**2 > 2**n:\nprint(\"Yes\")\nelse:\nprint(\"No\")\nn = int(input())\nif 2**n > n**2:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc238_a/Python/45742753",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 582
                },
                {
                        "id": "pretrain_python_data_6325268",
                        "content": "n = int(input())\nif n >= 30:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ABC174/A.py",
                        "max_stars_repo_name": "shimomura314/AtcoderCodes",
                        "max_stars_count": 0,
                        "__cluster__": 582
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_583",
                        "content": "n = int(input())\nprint(\"Yes\" if n > 2 else \"No\")\nn = int(input())\nprint(\"No\" if 2 <= n <= 4 else \"Yes\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc238_a/Python/46161245",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 582
                },
                {
                        "id": "pretrain_python_data_6325268",
                        "content": "n = int(input())\nif n >= 30:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ABC174/A.py",
                        "max_stars_repo_name": "shimomura314/AtcoderCodes",
                        "max_stars_count": 0,
                        "__cluster__": 582
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2653",
                        "content": "S = input()\nfor i in range(len(S)):\nif S[-i] == \".\":\nprint(S[-i+1:])\nbreak\nS = input()\nfor i in range(1,len(S)+1):\nif S[-i] == \".\":\nprint(S[-i+1:])\nbreak",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc339_a/Python/55124019",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2652
                },
                {
                        "id": "pretrain_python_data_4797617",
                        "content": "S = input()\nfor i in range(len(S) - 1):\nif S[i] == S[i + 1]:\nprint('Bad')\nexit()\nprint('Good')",
                        "max_stars_repo_path": "abc/abc131/abc131a.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 2652
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2697",
                        "content": "S = input()\nfor i in range(len(S)-1):\nif S[i-1] != S[i] and S[i] != S[i+1]:\nprint(i+1)\nS = input()\nfor i in range(len(S)-1):\nif S[i-1] != S[i] and S[i] != S[i+1]:\nprint(i+1)\nexit()\nprint(len(S))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc342_a/Python/54672989",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2652
                },
                {
                        "id": "pretrain_python_data_4797617",
                        "content": "S = input()\nfor i in range(len(S) - 1):\nif S[i] == S[i + 1]:\nprint('Bad')\nexit()\nprint('Good')",
                        "max_stars_repo_path": "abc/abc131/abc131a.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 2652
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "id": "pretrain_python_data_6318974",
                        "content": "a, b, c = map(int, input().split(\" \"))\nprint((a + b) % c)\nprint(((a % c) + (b % c)) % c)\nprint((a * b) % c)\nprint(((a % c) * (b % c)) % c)",
                        "max_stars_repo_path": "onlineJudge/baekjoon/Math/Q10430.py",
                        "max_stars_repo_name": "dahyeong-yun/prtc_coding-test-py",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_4792285",
                        "content": "<gh_stars>0\nA, B = map(int, input().split())\nS = input()\nprint(A + B, S)",
                        "max_stars_repo_path": "9001.py",
                        "max_stars_repo_name": "c-yan/yukicoder",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1408
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2195",
                        "content": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nif K % 2 != 0:\nnow = 0\nfor i in range(1, K-1, 2):\nnow += A[i+1] - A[i]\nans = now\nfor i in range(2, K-1, 2):\nnow += A[i-1] - A[i-2]\nnow -= A[i] - A[i-1]\nans = min(ans, now)\nprint(ans)\nexit()\nans = 0\nfor i in range(0, K-1, 2):\nans += A[i+1] - A[i]\nprint(ans)\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nif K % 2 != 0:\nnow = 0\nfor i in range(1, K-1, 2):\nnow += A[i+1] - A[i]\nans = now\nfor i in range(2, K, 2):\nnow += A[i-1] - A[i-2]\nnow -= A[i] - A[i-1]\nans = min(ans, now)\nprint(ans)\nexit()\nans = 0\nfor i in range(0, K-1, 2):\nans += A[i+1] - A[i]\nprint(ans)\n",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc334_c/Python/54507811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2194
                },
                {
                        "id": "pretrain_python_data_7879836",
                        "content": "N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nans = 0\nfor i in range(N):\nx = min(A[i], B[i])\nB[i] -= x\nans += x\nif B[i] > 0:\ny = min(A[i + 1], B[i])\nA[i + 1] -= y\nans += y\nprint(ans)",
                        "max_stars_repo_path": "abc/135/c/answer.py",
                        "max_stars_repo_name": "TakuyaNoguchi/atcoder",
                        "max_stars_count": 0,
                        "__cluster__": 2194
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1339
                },
                {
                        "id": "pretrain_python_data_6330398",
                        "content": "A, B, T = map(int, input().split())\nprint((T // A) * B)",
                        "max_stars_repo_path": "atcoder/abc/a125.py",
                        "max_stars_repo_name": "tomato-300yen/coding",
                        "max_stars_count": 0,
                        "__cluster__": 1339
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_6330398",
                        "content": "A, B, T = map(int, input().split())\nprint((T // A) * B)",
                        "max_stars_repo_path": "atcoder/abc/a125.py",
                        "max_stars_repo_name": "tomato-300yen/coding",
                        "max_stars_count": 0,
                        "__cluster__": 1339
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1339
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_7925506",
                        "content": "n = int(input())\nfor i in range(n,-1,-1):\nprint(i)",
                        "max_stars_repo_path": "Codeup/6072.py",
                        "max_stars_repo_name": "lkc263/Algorithm_Study_Python",
                        "max_stars_count": 0,
                        "__cluster__": 991
                },
                {
                        "id": "test_condefects-python_data_992",
                        "content": "n = input()\nn = int(n)\nfor i in range(10,-1,-1):\nprint(i)\nn = input()\nn = int(n)\nfor i in range(n,-1,-1):\nprint(i)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc281_a/Python/45244769",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 991
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1197",
                        "content": "x = int(input())\nif x % 10 == 0:\nprint(x)\nelse:\nprint(x // 10 + 1)\nx = int(input())\nif x % 10 == 0:\nprint(x // 10)\nelse:\nprint(x // 10 + 1)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc345_b/Python/54913953",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1127
                },
                {
                        "id": "pretrain_python_data_7896064",
                        "content": "# B2040-\u5224\u65ad\u662f\u5426\u4e3a\u4e24\u4f4d\u6570\nx = int(input())\nif x >= 10 and x <= 99:\nprint(\"1\")\nelse:\nprint(\"0\")",
                        "max_stars_repo_path": "Python/B2040.py",
                        "max_stars_repo_name": "Epoch1017/LintCode-Shared-Solutions",
                        "max_stars_count": 0,
                        "__cluster__": 1127
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1200",
                        "content": "x = int(input())\nif x % 10 == 0:\nprint(int(x / 10))\nelse:\nprint(int(x // 10 + 1))\nx = int(input())\nif x % 10 == 0:\nprint(int(x // 10))\nelse:\nprint(int(x // 10 + 1))",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc345_b/Python/54787477",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1127
                },
                {
                        "id": "pretrain_python_data_7896064",
                        "content": "# B2040-\u5224\u65ad\u662f\u5426\u4e3a\u4e24\u4f4d\u6570\nx = int(input())\nif x >= 10 and x <= 99:\nprint(\"1\")\nelse:\nprint(\"0\")",
                        "max_stars_repo_path": "Python/B2040.py",
                        "max_stars_repo_name": "Epoch1017/LintCode-Shared-Solutions",
                        "max_stars_count": 0,
                        "__cluster__": 1127
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_6347569",
                        "content": "n, k = map(int, input().split())\nif n % 2 != 0:\nif k <= n//2 + 1:\nprint(2*k-1)\nelse:\nprint(2*(k-(n//2 + 1)))\nelse:\nif k <= n//2:\nprint(2*k-1)\nelse:\nprint(2*(k-(n//2)))",
                        "max_stars_repo_path": "Python/CodeForces Solutions/1-500/318A.py",
                        "max_stars_repo_name": "7namansharma/Comp-Prog",
                        "max_stars_count": 0,
                        "__cluster__": 439
                },
                {
                        "id": "test_condefects-python_data_440",
                        "content": "num = sorted(list(map(int, input().split())))\nn = num[1] - (num[2]-num[0])\nif n < 0:\nprint(-1)\nelse:\nprint(num[2]-num[1]+num[0])\nnum = sorted(list(map(int, input().split())))\nn = num[1] - (num[2]-num[0])\nif n < 0:\nprint(-1)\nelse:\nprint(num[2])",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/arc143_a/Python/44847102",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 439
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2162",
                        "content": "a, b, c, d  = map(int, input().split())\nprint(((a + b) * (a - d)))\nprint(\"Takahashi\")\na, b, c, d  = map(int, input().split())\nprint(((a + b) * (c - d)))\nprint(\"Takahashi\")",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc269_a/Python/45960449",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2161
                },
                {
                        "id": "pretrain_python_data_9598187",
                        "content": "a, b = map(int, input().split())\nc, d = map(int, input().split())\nprint(min(a + d, b + c))",
                        "max_stars_repo_path": "1/1/11943/11943.py",
                        "max_stars_repo_name": "chr0m3/boj-codes",
                        "max_stars_count": 3,
                        "__cluster__": 2161
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2372",
                        "content": "a, b = map(int, input().split())\nif b - a or b - a == 9:\nprint('Yes')\nelse:\nprint('No')\na, b = map(int, input().split())\nif b - a == 1 or b - a == 9:\nprint('Yes')\nelse:\nprint('No')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc240_a/Python/45439558",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2366
                },
                {
                        "id": "pretrain_python_data_9591848",
                        "content": "<gh_stars>0\na, b, c = map(int, input().split())\nif a <= c <= b or b <= c <= a:\nprint(\"Yes\")\nelse:\nprint(\"No\")",
                        "max_stars_repo_path": "Company_Con/Tenka1_Programmer_Beginner_Contest_2019/A.py",
                        "max_stars_repo_name": "yosho-18/AtCoder",
                        "max_stars_count": 0,
                        "__cluster__": 2366
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_12757165",
                        "content": "ls = list(map(int, input().split()))\ncount = 0\nfor i in ls:\nif ls[i] == 1:\ncount += 1\nprint(count)",
                        "max_stars_repo_path": "jp.atcoder/abc081/abc081_a/8081201.py",
                        "max_stars_repo_name": "kagemeka/atcoder-submissions",
                        "max_stars_count": 1,
                        "__cluster__": 811
                },
                {
                        "id": "test_condefects-python_data_966",
                        "content": "n = int(input())\nA = list(map(int, input().split()))\ncount = 0\nfor i in range(1, n*2-1):\nif A[i-1] == A[i+1]:\ncount =+ 1\nprint(count)\nn = int(input())\nA = list(map(int, input().split()))\ncount = 0\nfor i in range(1, n*2-1):\nif A[i-1] == A[i+1]:\ncount += 1\nprint(count)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc359_b/Python/55042277",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 811
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "id": "pretrain_python_data_12639428",
                        "content": "A, B, C = map(int, input().split())\nprint((A+B)%C)\nprint((A%C+B%C)%C)\nprint((A*B)%C)\nprint(((A%C)*(B%C))%C)",
                        "max_stars_repo_path": "Math/10430_\ub098\uba38\uc9c0/10430_\ub098\uba38\uc9c0.py",
                        "max_stars_repo_name": "7dudtj/BOJ_myCode",
                        "max_stars_count": 1,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1410",
                        "content": "A, B = map(int, input().split())\nprint(1 + A // B)\nA, B = map(int, input().split())\nprint((A + B - 1) // B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc302_a/Python/45467003",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "id": "pretrain_python_data_12676094",
                        "content": "A, B, C = map(int, input().split())\nprint(min(C, B//A))",
                        "max_stars_repo_path": "code/abc120_a_03.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_12639428",
                        "content": "A, B, C = map(int, input().split())\nprint((A+B)%C)\nprint((A%C+B%C)%C)\nprint((A*B)%C)\nprint(((A%C)*(B%C))%C)",
                        "max_stars_repo_path": "Math/10430_\ub098\uba38\uc9c0/10430_\ub098\uba38\uc9c0.py",
                        "max_stars_repo_name": "7dudtj/BOJ_myCode",
                        "max_stars_count": 1,
                        "__cluster__": 1409
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "pretrain_python_data_12676094",
                        "content": "A, B, C = map(int, input().split())\nprint(min(C, B//A))",
                        "max_stars_repo_path": "code/abc120_a_03.py",
                        "max_stars_repo_name": "KoyanagiHitoshi/AtCoder",
                        "max_stars_count": 3,
                        "__cluster__": 1409
                },
                {
                        "id": "test_condefects-python_data_2175",
                        "content": "A, B = map(int, input().split())\nprint(A^B)\nA, B = map(int, input().split())\nprint(A**B)",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc283_a/Python/44656811",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 1409
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_1732",
                        "content": "S = input() + input()\nif S == '.#.#' or S == '#.#.' :\nprint('No')\nelse:\nprint('Yes')\nS = input() + input()\nif S == '.##.' or S == '#..#' :\nprint('No')\nelse:\nprint('Yes')",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc229_a/Python/44625287",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 461
                },
                {
                        "id": "pretrain_python_data_12618560",
                        "content": "S = input()\nprint(\"Yes\" if S[:4] == \"YAKI\" else \"No\")",
                        "max_stars_repo_path": "atcoder/corp/codefes2017_q1_a.py",
                        "max_stars_repo_name": "knuu/competitive-programming",
                        "max_stars_count": 1,
                        "__cluster__": 461
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2698",
                        "content": "S = input()\nif S.count(S[0])==1:\nprint(\"1\")\nelse:\nfor i in range(1, len(S)-1):\nif S[i] != S[0]:\nprint(i+1)\nS = input()\nif S.count(S[0])==1:\nprint(\"1\")\nelse:\nfor i in range(1, len(S)):\nif S[i] != S[0]:\nprint(i+1)\n",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc342_a/Python/54772316",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2652
                },
                {
                        "id": "pretrain_python_data_12733235",
                        "content": "S = input()\nK = int(input())\nfor i in range(len(S)):\nif S[i] == '1':\nK -= 1\nif K == 0:\nprint(S[i])\nbreak\nelse:\nprint(S[i])\nbreak",
                        "max_stars_repo_path": "abc/abc106/abc106c.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 2652
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2654",
                        "content": "S = input()\nfor i in range(len(S)-1,0,-1):\nif S[i] == \".\":\nprint(S[i+1:])\nbreak\nS = input()\nfor i in range(len(S)-1,-1,-1):\nif S[i] == \".\":\nprint(S[i+1:])\nbreak",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc339_a/Python/54618072",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2652
                },
                {
                        "id": "pretrain_python_data_12733235",
                        "content": "S = input()\nK = int(input())\nfor i in range(len(S)):\nif S[i] == '1':\nK -= 1\nif K == 0:\nprint(S[i])\nbreak\nelse:\nprint(S[i])\nbreak",
                        "max_stars_repo_path": "abc/abc106/abc106c.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 2652
                },
                {
                        "real_dup": "0"
                }
        ],


        [
                {
                        "id": "test_condefects-python_data_2653",
                        "content": "S = input()\nfor i in range(len(S)):\nif S[-i] == \".\":\nprint(S[-i+1:])\nbreak\nS = input()\nfor i in range(1,len(S)+1):\nif S[-i] == \".\":\nprint(S[-i+1:])\nbreak",
                        "max_stars_repo_path": "ConDefects/ConDefects/Code/abc339_a/Python/55124019",
                        "max_stars_repo_name": "NA",
                        "max_stars_count": 0,
                        "__cluster__": 2652
                },
                {
                        "id": "pretrain_python_data_12733235",
                        "content": "S = input()\nK = int(input())\nfor i in range(len(S)):\nif S[i] == '1':\nK -= 1\nif K == 0:\nprint(S[i])\nbreak\nelse:\nprint(S[i])\nbreak",
                        "max_stars_repo_path": "abc/abc106/abc106c.py",
                        "max_stars_repo_name": "c-yan/atcoder",
                        "max_stars_count": 1,
                        "__cluster__": 2652
                },
                {
                        "real_dup": "0"
                }
        ]
]