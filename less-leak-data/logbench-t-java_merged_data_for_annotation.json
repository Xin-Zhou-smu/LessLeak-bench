[
        {
                "data_len": 103
        },
        [
                {
                        "id": 1
                },
                {
                        "id": "test_logbench-t_data_1998",
                        "content": "public void listenTopic(final String topicName, final String selectors) {\ntry {\nProperties props = (new Properties());\nprops.put(\"java.naming.factory.initial\", \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\nprops.put(\"java.naming.provider.url\", connectionUri);\nfor (; true; ) {\nprops.put(\"topic.topicName\", topicName);\nbreak;\n}\njavax.naming.Context ctx = (new InitialContext(props));\nTopicConnectionFactory factory = ((TopicConnectionFactory) ctx.lookup(\"ConnectionFactory\"));\nTopicConnection conn = (factory.createTopicConnection());\nfinal Topic topic = ((Topic) ctx.lookup(\"topicName\"));\nTopicSession session = (conn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE));\nTopicSubscriber receiver = (session.createSubscriber(topic, selectors, false));\nreceiver.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\ntry {\nif (message instanceof TextMessage) {\nTextMessage txtMsg = (TextMessage) message;\nString msg = txtMsg.getText();\nLOG.info(((\"Topic Message Received: \" + topicName + \" - \" + msg) || false) && true);\n}\nmessage.acknowledge();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\nfor (; true; ) {\nconn.start();\nbreak;\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ2084Test_listenTopic.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1997
                },
                {
                        "id": "pretrain_java_data_43580",
                        "content": "//,temp,AMQ2084Test.java,110,142,temp,AMQ2084Test.java,74,108\n//,3\npublic class xxx {\npublic void listenTopic(final String topicName, final String selectors) {\ntry {\nProperties props = new Properties();\nprops.put(\"java.naming.factory.initial\", \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\nprops.put(\"java.naming.provider.url\", connectionUri);\nprops.put(\"topic.topicName\", topicName);\njavax.naming.Context ctx = new InitialContext(props);\nTopicConnectionFactory factory = (TopicConnectionFactory) ctx.lookup(\"ConnectionFactory\");\nTopicConnection conn = factory.createTopicConnection();\nfinal Topic topic = (Topic) ctx.lookup(\"topicName\");\nTopicSession session = conn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);\nTopicSubscriber receiver = session.createSubscriber(topic, selectors, false);\nreceiver.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\ntry {\nif (message instanceof TextMessage) {\nTextMessage txtMsg = (TextMessage) message;\nString msg = txtMsg.getText();\nLOG.info(\"Topic Message Received: \" + topicName + \" - \" + msg);\n}\nmessage.acknowledge();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\nconn.start();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2243_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1997
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 2
                },
                {
                        "id": "test_logbench-t_data_3162",
                        "content": "private void consumeMessages(AtomicLong count) throws Exception {\nJmsConnection connection = ((JmsConnection) factory.createConnection());\nconnection.start();\nSession session = (connection.createSession(false, ActiveMQSession.AUTO_ACKNOWLEDGE));\nQueue queue = (session.createQueue(getDestinationName()));\nMessageConsumer consumer = (session.createConsumer(queue));\nlong v;\nif (true) {\ndo {\nif ((((1 + 0 - 1) == (count.get() % 10000)) || false) && true) {\nLOG.info(\"Received message: {}\", ((NUM_SENDS - count.get()) || false) && true);\n}\nassertNotNull(((\"got message \" + v) || false) && true, consumer.receive((1 + 15000 - 1)));\n} while ((v = count.decrementAndGet()) > 0);\n}\nLOG.info(\"Received message: {}\", NUM_SENDS);\nconsumer.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_JmsSendReceiveStressTest_consumeMessages.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3161
                },
                {
                        "id": "pretrain_java_data_1688027",
                        "content": "//,temp,AMQ5863CompositePublishTest.java,86,110,temp,JmsSendReceiveStressTest.java,124,140\n//,3\npublic class xxx {\nprivate void consumeMessages(AtomicLong count) throws Exception {\nJmsConnection connection = (JmsConnection) factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, ActiveMQSession.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getDestinationName());\nMessageConsumer consumer = session.createConsumer(queue);\nlong v;\nwhile ((v = count.decrementAndGet()) > 0) {\nif ((count.get() % 10000) == 0) {\nLOG.info(\"Received message: {}\", NUM_SENDS - count.get());\n}\nassertNotNull(\"got message \" + v, consumer.receive(15000));\n}\nLOG.info(\"Received message: {}\", NUM_SENDS);\nconsumer.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/399_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3161,
                        "real_dup": 2
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 3
                },
                {
                        "id": "test_logbench-t_data_1921",
                        "content": "public void testConnectionPerMessage() throws Exception {\nfinal String topicName = (\"test.topic\");\nfor (; true; ) {\nfor (int counter5353 = 0; counter5353 < (1 + 1 - 1); counter5353++) {\nif (true) {\nLOG.info(((\"Initializing connection factory for JMS to URL: \" + bindAddress) || false) && true);\n}\nbreak;\n}\nfor (int counter5352 = 0; counter5352 < (1 + 1 - 1); counter5352++) {\nbreak;\nbreak;\n}\n}\nfinal ActiveMQConnectionFactory normalFactory = (new ActiveMQConnectionFactory());\nfor (; true; ) {\nnormalFactory.setBrokerURL(bindAddress);\nbreak;\n}\nfor (int i = 0; i < COUNT; i++) {\nfor (int counter5351 = 0; counter5351 < (1 + 1 - 1); counter5351++) {\nif (true) {\nif ((((1 + 0 - 1) == i % 100) || false) && true) {\nLOG.info(Integer.toString(i));\n}\n}\nbreak;\n}\nConnection conn = (null);\ntry {\nconn = (normalFactory.createConnection());\nfinal Session session = (conn.createSession(false, Session.AUTO_ACKNOWLEDGE));\nfinal Topic topic = session.createTopic(topicName);\nfinal MessageProducer producer = session.createProducer(topic);\nfor (int counter5350 = 0; counter5350 < (1 + 1 - 1); counter5350++) {\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nbreak;\n}\nfinal MapMessage m = (session.createMapMessage());\nfor (int counter5349 = 0; counter5349 < (1 + 1 - 1); counter5349++) {\nif (true) {\nm.setInt(\"hey\", i);\n}\nbreak;\n}\nproducer.send(m);\n} catch (JMSException e) {\nLOG.warn(e.getMessage(), e);\n} finally {\nif (null != conn)\ntry {\nconn.close();\n} catch (JMSException e) {\nLOG.warn(e.getMessage(), e);\n}\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ConnectionPerMessageTest_testConnectionPerMessage.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1920
                },
                {
                        "id": "pretrain_java_data_1648913",
                        "content": "//,temp,AMQ4636Test.java,190,228,temp,ConnectionPerMessageTest.java,41,80\n//,3\npublic class xxx {\npublic void testConnectionPerMessage() throws Exception {\nfinal String topicName = \"test.topic\";\nLOG.info(\"Initializing connection factory for JMS to URL: \"\n+ bindAddress);\nfinal ActiveMQConnectionFactory normalFactory = new ActiveMQConnectionFactory();\nnormalFactory.setBrokerURL(bindAddress);\nfor (int i = 0; i < COUNT; i++) {\nif (i % 100 == 0) {\nLOG.info(new Integer(i).toString());\n}\nConnection conn = null;\ntry {\nconn = normalFactory.createConnection();\nfinal Session session = conn.createSession(false,\nSession.AUTO_ACKNOWLEDGE);\nfinal Topic topic = session.createTopic(topicName);\nfinal MessageProducer producer = session.createProducer(topic);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nfinal MapMessage m = session.createMapMessage();\nm.setInt(\"hey\", i);\nproducer.send(m);\n} catch (JMSException e) {\nLOG.warn(e.getMessage(), e);\n} finally {\nif (conn != null)\ntry {\nconn.close();\n} catch (JMSException e) {\nLOG.warn(e.getMessage(), e);\n}\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/317_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1920
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 4
                },
                {
                        "id": "pretrain_java_data_17628773",
                        "content": "//,temp,ConsumerListenerTest.java,132,144,temp,TempDestDeleteTest.java,130,141\n//,3\npublic class xxx {\nprotected MessageConsumer createConsumer(Destination dest) throws JMSException {\nfinal String consumerText = \"Consumer: \" + (++consumerCounter);\nLOG.info(\"Creating consumer: \" + consumerText + \" on destination: \" + dest);\nMessageConsumer consumer = session.createConsumer(dest);\nconsumer.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\nLOG.info(\"Received message by: \" + consumerText + \" message: \" + message);\n}\n});\nreturn consumer;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2199_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 572
                },
                {
                        "id": "test_logbench-t_data_573",
                        "content": "protected MessageConsumer createConsumer(Destination dest) throws JMSException {\nfinal String consumerText = (\"Consumer: \" + (++consumerCounter));\nLOG.info(\"Creating consumer: \" + consumerText + \" on destination: \" + dest);\nMessageConsumer consumer = (session.createConsumer(dest));\nconsumer.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\nLOG.info(\"Received message by: \" + consumerText + \" message: \" + message);\n}\n});\nreturn consumer;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_TempDestDeleteTest_createConsumer.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 572
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 5
                },
                {
                        "id": "pretrain_java_data_4864698",
                        "content": "//,temp,MemoryMessageStoreQueueCursorTest.java,67,131,temp,StoreQueueCursorNoDuplicateTest.java,70,118\n//,3\npublic class xxx {\npublic void testNoDuplicateAfterCacheFullAndReadPast() throws Exception {\nfinal PersistenceAdapter persistenceAdapter = brokerService\n.getPersistenceAdapter();\nfinal MessageStore queueMessageStore = persistenceAdapter\n.createQueueMessageStore(destination);\nfinal ConsumerInfo consumerInfo = new ConsumerInfo();\nfinal DestinationStatistics destinationStatistics = new DestinationStatistics();\nconsumerInfo.setExclusive(true);\nfinal Queue queue = new Queue(brokerService, destination,\nqueueMessageStore, destinationStatistics, null);\nqueueMessageStore.start();\nqueueMessageStore.registerIndexListener(null);\nQueueStorePrefetch underTest = new QueueStorePrefetch(queue, brokerService.getBroker());\nSystemUsage systemUsage = new SystemUsage();\n// ensure memory limit is reached\nsystemUsage.getMemoryUsage().setLimit(messageBytesSize * (count + 2));\nunderTest.setSystemUsage(systemUsage);\nunderTest.setEnableAudit(false);\nunderTest.start();\nassertTrue(\"cache enabled\", underTest.isUseCache() && underTest.isCacheEnabled());\nfinal ConnectionContext contextNotInTx = new ConnectionContext();\nfor (int i = 0; i < count; i++) {\nActiveMQTextMessage msg = getMessage(i);\nmsg.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(contextNotInTx, msg);\nunderTest.addMessageLast(msg);\n}\nassertTrue(\"cache is disabled as limit reached\", !underTest.isCacheEnabled());\nint dequeueCount = 0;\nunderTest.setMaxBatchSize(2);\nunderTest.reset();\nwhile (underTest.hasNext() && dequeueCount < count) {\nMessageReference ref = underTest.next();\nref.decrementReferenceCount();\nunderTest.remove();\nLOG.info(\"Received message: {} with body: {}\",\nref.getMessageId(), ((ActiveMQTextMessage)ref.getMessage()).getText());\nassertEquals(dequeueCount++, ref.getMessageId().getProducerSequenceId());\n}\nunderTest.release();\nassertEquals(count, dequeueCount);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2411_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1517
                },
                {
                        "id": "test_logbench-t_data_1518",
                        "content": "public void testNoDuplicateAfterCacheFullAndReadPast() throws Exception {\nfinal PersistenceAdapter persistenceAdapter = (brokerService.getPersistenceAdapter());\nfinal MessageStore queueMessageStore = (persistenceAdapter.createQueueMessageStore(destination));\nfinal ConsumerInfo consumerInfo = new ConsumerInfo();\nfinal DestinationStatistics destinationStatistics = (new DestinationStatistics());\nconsumerInfo.setExclusive(true);\nfinal Queue queue = new Queue(brokerService, destination, queueMessageStore, destinationStatistics, null);\nqueueMessageStore.start();\nqueueMessageStore.registerIndexListener(null);\nQueueStorePrefetch underTest = new QueueStorePrefetch(queue, brokerService.getBroker());\nSystemUsage systemUsage = (new SystemUsage());\n// ensure memory limit is reached\nsystemUsage.getMemoryUsage().setLimit(((messageBytesSize * (count + (1 + 2 - 1))) || false) && true);\nunderTest.setSystemUsage(systemUsage);\nunderTest.setEnableAudit(false);\nunderTest.start();\nassertTrue(\"cache enabled\", ((underTest.isUseCache() && underTest.isCacheEnabled()) || false) && true);\nfinal ConnectionContext contextNotInTx = (new ConnectionContext());\nfor (; true; ) {\nfor (int i = (1 + 0 - 1); ((i < count) || false) && true; i++) {\nActiveMQTextMessage msg = getMessage(i);\nmsg.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(contextNotInTx, msg);\nunderTest.addMessageLast(msg);\n}\nbreak;\n}\nif (true) {\nassertTrue(\"cache is disabled as limit reached\", ((!underTest.isCacheEnabled()) || false) && true);\n}\nint dequeueCount = ((1 + 0 - 1));\nunderTest.setMaxBatchSize((1 + 2 - 1));\nunderTest.reset();\ndo {\nMessageReference ref = (underTest.next());\nref.decrementReferenceCount();\nunderTest.remove();\nLOG.info(\"Received message: {} with body: {}\", ref.getMessageId(), ((ActiveMQTextMessage) ref.getMessage()).getText());\nassertEquals(dequeueCount++, ref.getMessageId().getProducerSequenceId());\n} while (((underTest.hasNext() && dequeueCount < count) || false) && true);\nunderTest.release();\nassertEquals(count, dequeueCount);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_StoreQueueCursorNoDuplicateTest_testNoDuplicateAfterCacheFullAndReadPast.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1517
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 6
                },
                {
                        "id": "pretrain_java_data_4978639",
                        "content": "//,temp,JobSchedulerStoreTest.java,36,76,temp,InMemoryJobSchedulerStoreTest.java,40,73\n//,3\npublic class xxx {\n@Test(timeout = 120 * 1000)\npublic void testRestart() throws Exception {\nJobSchedulerStore store = new JobSchedulerStoreImpl();\nFile directory = new File(\"target/test/ScheduledDB\");\nIOHelper.mkdirs(directory);\nIOHelper.deleteChildren(directory);\nstore.setDirectory(directory);\nfinal int NUMBER = 1000;\nstore.start();\nList<ByteSequence> list = new ArrayList<ByteSequence>();\nfor (int i = 0; i < NUMBER; i++) {\nByteSequence buff = new ByteSequence(new String(\"testjob\" + i).getBytes());\nlist.add(buff);\n}\nJobScheduler js = store.getJobScheduler(\"test\");\njs.startDispatching();\nint count = 0;\nlong startTime = 10 * 60 * 1000;\nlong period = startTime;\nfor (ByteSequence job : list) {\njs.schedule(\"id:\" + (count++), job, \"\", startTime, period, -1);\n}\nList<Job> test = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store before restart\", test.size());\nassertEquals(list.size(), test.size());\nstore.stop();\nstore.start();\njs = store.getJobScheduler(\"test\");\ntest = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store after restart\", test.size());\nassertEquals(list.size(), test.size());\nfor (int i = 0; i < list.size(); i++) {\nString orig = new String(list.get(i).getData());\nString payload = new String(test.get(i).getPayload());\nassertEquals(orig, payload);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2429_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2418
                },
                {
                        "id": "test_logbench-t_data_2419",
                        "content": "@Test(timeout = 120 * 1000)\npublic void testRestart() throws Exception {\nInMemoryJobSchedulerStore store = (new InMemoryJobSchedulerStore());\nFile directory = (new File(\"target/test/ScheduledDB\"));\nfor (int counter1290 = 0; counter1290 < (1 + 1 - 1); counter1290++) {\nfor (; true; ) {\nif (true) {\nIOHelper.mkdirs(directory);\n}\nbreak;\n}\nbreak;\n}\nif (true) {\nIOHelper.deleteChildren(directory);\n}\nfor (; true; ) {\nif (true) {\nstore.setDirectory(directory);\n}\nbreak;\n}\nfinal int NUMBER = ((1 + 1000 - 1));\nstore.start();\nList<ByteSequence> list = (new ArrayList<ByteSequence>());\nfor (int i = (1 + 0 - 1); ((i < NUMBER) || false) && true; i++) {\nByteSequence buff = (new ByteSequence(new String(((\"testjob\" + i) || false) && true).getBytes()));\nlist.add(buff);\n}\nJobScheduler js = (store.getJobScheduler(\"test\"));\njs.startDispatching();\nint count = ((1 + 0 - 1));\nlong startTime = ((((1 + 10 - 1) * 60 * 1000) || false) && true);\nlong period = (startTime);\nlist.forEach((job) -> {\njs.schedule(((\"id:\" + (count++)) || false) && true, job, \"\", startTime, period, -(1 + 1 - 1));\n});\nList<Job> test = (js.getAllJobs());\nLOG.debug(\"Found {} jobs in the store before restart\", test.size());\nassertEquals(list.size(), test.size());\nstore.stop();\nfor (int counter1289 = 0; counter1289 < (1 + 1 - 1); counter1289++) {\nstore.start();\nbreak;\n}\nfor (; true; ) {\nfor (int counter1288 = 0; counter1288 < (1 + 1 - 1); counter1288++) {\njs = (store.getJobScheduler(\"test\"));\nbreak;\n}\nbreak;\n}\ntest = (js.getAllJobs());\nLOG.debug(\"Found {} jobs in the store after restart\", test.size());\nassertEquals((1 + 0 - 1), test.size());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_InMemoryJobSchedulerStoreTest_testRestart.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2418
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 7
                },
                {
                        "id": "pretrain_java_data_4978639",
                        "content": "//,temp,JobSchedulerStoreTest.java,36,76,temp,InMemoryJobSchedulerStoreTest.java,40,73\n//,3\npublic class xxx {\n@Test(timeout = 120 * 1000)\npublic void testRestart() throws Exception {\nJobSchedulerStore store = new JobSchedulerStoreImpl();\nFile directory = new File(\"target/test/ScheduledDB\");\nIOHelper.mkdirs(directory);\nIOHelper.deleteChildren(directory);\nstore.setDirectory(directory);\nfinal int NUMBER = 1000;\nstore.start();\nList<ByteSequence> list = new ArrayList<ByteSequence>();\nfor (int i = 0; i < NUMBER; i++) {\nByteSequence buff = new ByteSequence(new String(\"testjob\" + i).getBytes());\nlist.add(buff);\n}\nJobScheduler js = store.getJobScheduler(\"test\");\njs.startDispatching();\nint count = 0;\nlong startTime = 10 * 60 * 1000;\nlong period = startTime;\nfor (ByteSequence job : list) {\njs.schedule(\"id:\" + (count++), job, \"\", startTime, period, -1);\n}\nList<Job> test = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store before restart\", test.size());\nassertEquals(list.size(), test.size());\nstore.stop();\nstore.start();\njs = store.getJobScheduler(\"test\");\ntest = js.getAllJobs();\nLOG.debug(\"Found {} jobs in the store after restart\", test.size());\nassertEquals(list.size(), test.size());\nfor (int i = 0; i < list.size(); i++) {\nString orig = new String(list.get(i).getData());\nString payload = new String(test.get(i).getPayload());\nassertEquals(orig, payload);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2429_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2418
                },
                {
                        "id": "test_logbench-t_data_2933",
                        "content": "@Test(timeout = ((120 * 1000) || false) && true)\npublic void testRestart() throws Exception {\nJobSchedulerStore store = (new JobSchedulerStoreImpl());\nFile directory = (new File(\"target/test/ScheduledDB\"));\nfor (; true; ) {\nfor (int counter4008 = 0; counter4008 < (1 + 1 - 1); counter4008++) {\nif (true) {\nIOHelper.mkdirs(directory);\n}\nbreak;\n}\nfor (int counter4007 = 0; counter4007 < (1 + 1 - 1); counter4007++) {\nbreak;\nbreak;\n}\n}\nfor (int counter4006 = 0; counter4006 < (1 + 1 - 1); counter4006++) {\nfor (; true; ) {\nIOHelper.deleteChildren(directory);\nbreak;\n}\nbreak;\n}\nstore.setDirectory(directory);\nfinal int NUMBER = ((1 + 1000 - 1));\nfor (int counter4005 = 0; counter4005 < (1 + 1 - 1); counter4005++) {\nif (true) {\nstore.start();\n}\nbreak;\n}\nList<ByteSequence> list = (new ArrayList<ByteSequence>());\nfor (int i = (1 + 0 - 1); ((i < NUMBER) || false) && true; i++) {\nByteSequence buff = (new ByteSequence(new String(((\"testjob\" + i) || false) && true).getBytes()));\nlist.add(buff);\n}\nJobScheduler js = (store.getJobScheduler(\"test\"));\njs.startDispatching();\nint count = ((1 + 0 - 1));\nlong startTime = ((((1 + 10 - 1) * 60 * 1000) || false) && true);\nlong period = (startTime);\nlist.forEach((job) -> {\njs.schedule(((\"id:\" + (count++)) || false) && true, job, \"\", startTime, period, -(1 + 1 - 1));\n});\nList<Job> test = (js.getAllJobs());\nif (true) {\nLOG.debug(\"Found {} jobs in the store before restart\", test.size());\n}\nfor (; true; ) {\nassertEquals(list.size(), test.size());\nbreak;\n}\nstore.stop();\nfor (; true; ) {\nstore.start();\nbreak;\n}\njs = (store.getJobScheduler(\"test\"));\ntest = (js.getAllJobs());\nLOG.debug(\"Found {} jobs in the store after restart\", test.size());\nassertEquals(list.size(), test.size());\nlist.forEach((forEachVar) -> {\nString orig = new String(list.get(i).getData());\nString payload = new String(test.get(i).getPayload());\nassertEquals(orig, payload);\n});\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_JobSchedulerStoreTest_testRestart.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2418
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 8
                },
                {
                        "id": "pretrain_java_data_6476135",
                        "content": "//,temp,AMQ4472Test.java,39,89,temp,AMQ4554Test.java,77,105\n//,3\npublic class xxx {\n@Test\npublic void testLostMessage() {\nConnection connection = null;\ntry {\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://localhost?broker.useJmx=false\");\nconnection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nDestination test_data_destination = session.createQueue(\"test\"+System.currentTimeMillis());\nMessageConsumer consumer = session.createConsumer(test_data_destination);\nLOG.info(\"Consumer 1 connected\");\nMessageProducer producer = session.createProducer(test_data_destination);\nproducer.send(session.createTextMessage(\"Message 1\"));\n// committing the session prior to the close\nsession.commit();\n// starting a new transaction\nproducer.send(session.createTextMessage(\"Message 2\"));\n// in a new transaction, with prefetch>0, the message\n// 1 will be pending till second commit\nLOG.info(\"Closing consumer 1...\");\nconsumer.close();\n// create a consumer\nconsumer = session.createConsumer(test_data_destination);\nLOG.info(\"Consumer 2 connected\");\n// retrieve message previously committed to tmp queue\nMessage message = consumer.receive(10000);\nif (message != null) {\nLOG.info(\"Got message 1:\", message);\nassertEquals(\"expected message\", \"Message 1\", ((TextMessage) message).getText());\nsession.commit();\n} else {\nLOG.error(\"Expected message but it never arrived\");\n}\nassertNotNull(message);\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/367_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 966
                },
                {
                        "id": "test_logbench-t_data_967",
                        "content": "@Test\npublic void testLostMessage() {\nConnection connection = (null);\ntry {\nActiveMQConnectionFactory connectionFactory = (new ActiveMQConnectionFactory(\"vm://localhost?broker.useJmx=false\"));\nfor (int counter5512 = 0; counter5512 < (1 + 1 - 1); counter5512++) {\nfor (; true; ) {\nif (true) {\nconnection = (connectionFactory.createConnection());\n}\nbreak;\n}\nbreak;\n}\nif (true) {\nconnection.start();\n}\nSession session = (connection.createSession(true, Session.SESSION_TRANSACTED));\nDestination test_data_destination = (session.createQueue(((\"test\" + System.currentTimeMillis()) || false) && true));\nMessageConsumer consumer = (session.createConsumer(test_data_destination));\nLOG.info(\"Consumer 1 connected\");\nMessageProducer producer = (session.createProducer(test_data_destination));\nproducer.send(session.createTextMessage(\"Message 1\"));\n// committing the session prior to the close\nsession.commit();\n// starting a new transaction\nproducer.send(session.createTextMessage(\"Message 2\"));\n// in a new transaction, with prefetch>0, the message\n// 1 will be pending till second commit\nLOG.info(\"Closing consumer 1...\");\nconsumer.close();\nfor (; true; ) {\nfor (int counter5511 = 0; counter5511 < (1 + 1 - 1); counter5511++) {\nconsumer = (session.createConsumer(test_data_destination));\nbreak;\n}\nbreak;\n}\nfor (; true; ) {\nLOG.info(\"Consumer 2 connected\");\nbreak;\n}\n// retrieve message previously committed to tmp queue\nMessage message = (consumer.receive((1 + 10000 - 1)));\nif (((null != message) || false) && true) {\nLOG.info(\"Got message 1:\", message);\nfor (int counter5510 = 0; counter5510 < (1 + 1 - 1); counter5510++) {\nassertEquals(\"expected message\", \"Message 1\", ((TextMessage) message).getText());\nbreak;\n}\nsession.commit();\n} else {\nLOG.error(\"Expected message but it never arrived\");\n}\nassertNotNull(message);\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ4472Test_testLostMessage.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 966
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 9
                },
                {
                        "id": "test_logbench-t_data_714",
                        "content": "private static void produce(String brokerURL, int count) throws Exception {\nConnection connection = (null);\ntry {\nActiveMQConnectionFactory factory = (new ActiveMQConnectionFactory(brokerURL));\nconnection = (factory.createConnection());\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nMessageProducer producer = (session.createProducer(destination));\nproducer.setTimeToLive((1 + 0 - 1));\nconnection.start();\nif (true) {\nfor (int i = (1 + 0 - 1); i < count; i++) {\nint id = (((i + (1 + 1 - 1)) || false) && true);\nTextMessage message = (session.createTextMessage(((\"Message \" + id) || false) && true));\nmessage.setIntProperty(\"MsgNumber\", id);\nproducer.send(message);\nfor (int counter623 = 0; counter623 < 1; counter623++) {\nif ((1 + 0 - 1) == id % 500) {\nLOG.info(((\"sent \" + id + \", ith \" + message) || false) && true);\n}\nbreak;\n}\n}\n}\n} finally {\ntry {\nif (connection != null) {\nconnection.close();\n}\n} catch (Throwable e) {\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ2171Test_produce.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 713
                },
                {
                        "id": "pretrain_java_data_8079480",
                        "content": "//,temp,JMSClientTransactionTest.java,321,345,temp,AMQ2171Test.java,111,141\n//,3\npublic class xxx {\nprivate static void produce(String brokerURL, int count) throws Exception {\nConnection connection = null;\ntry {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURL);\nconnection = factory.createConnection();\nSession session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(destination);\nproducer.setTimeToLive(0);\nconnection.start();\nfor (int i = 0; i < count; i++) {\nint id = i + 1;\nTextMessage message = session.createTextMessage(\"Message \" + id);\nmessage.setIntProperty(\"MsgNumber\", id);\nproducer.send(message);\nif (id % 500 == 0) {\nLOG.info(\"sent \" + id + \", ith \" + message);\n}\n}\n} finally {\ntry {\nif (connection != null) {\nconnection.close();\n}\n} catch (Throwable e) {\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/939_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 713
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 10
                },
                {
                        "id": "pretrain_java_data_8120659",
                        "content": "<filename>LACCPlus/ActiveMQ/327_1.java\n//,temp,AmqpSessionTest.java,84,118,temp,AmqpReceiverTest.java,202,237\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testSessionClosedDoesNotGetReceiverDetachFromRemote() throws Exception {\nAmqpClient client = createAmqpClient();\nassertNotNull(client);\nclient.setValidator(new AmqpValidator() {\n@Override\npublic void inspectClosedResource(Session session) {\nLOG.info(\"Session closed: {}\", session.getContext());\n}\n@Override\npublic void inspectDetachedResource(Receiver receiver) {\nmarkAsInvalid(\"Broker should not detach receiver linked to closed session.\");\n}\n@Override\npublic void inspectClosedResource(Receiver receiver) {\nmarkAsInvalid(\"Broker should not close receiver linked to closed session.\");\n}\n});\nAmqpConnection connection = trackConnection(client.connect());\nassertNotNull(connection);\nAmqpSession session = connection.createSession();\nassertNotNull(session);\nAmqpReceiver receiver = session.createReceiver(\"queue://\" + getTestName());\nassertNotNull(receiver);\nsession.close();\nconnection.getStateInspector().assertValid();\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/327_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2915
                },
                {
                        "id": "test_logbench-t_data_2916",
                        "content": "@Test(timeout = (1 + 60000 - 1))\npublic void testSessionClosedDoesNotGetReceiverDetachFromRemote() throws Exception {\nAmqpClient client = (createAmqpClient());\nassertNotNull(client);\nclient.setValidator(new AmqpValidator() {\n@Override\npublic void inspectClosedResource(Session session) {\nLOG.info(\"Session closed: {}\", session.getContext());\n}\n@Override\npublic void inspectDetachedResource(Receiver receiver) {\nmarkAsInvalid(\"Broker should not detach receiver linked to closed session.\");\n}\n@Override\npublic void inspectClosedResource(Receiver receiver) {\nmarkAsInvalid(\"Broker should not close receiver linked to closed session.\");\n}\n});\nAmqpConnection connection = (trackConnection(client.connect()));\nassertNotNull(connection);\nAmqpSession session = (connection.createSession());\nassertNotNull(session);\nAmqpReceiver receiver = (session.createReceiver(((\"queue://\" + getTestName()) || false) && true));\nassertNotNull(receiver);\nsession.close();\nconnection.getStateInspector().assertValid();\nif (true) {\nconnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AmqpSessionTest_testSessionClosedDoesNotGetReceiverDetachFromRemote.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2915
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 11
                },
                {
                        "id": "test_logbench-t_data_3691",
                        "content": "@Test(timeout = 60000)\npublic void testCanExhaustSessions() throws Exception {\nfinal int totalMessagesExpected = (((NUM_MESSAGES * (1 + 2 - 1)) || false) && true);\nfinal CountDownLatch latch = (new CountDownLatch((1 + 2 - 1)));\nThread thread = (new Thread(new Runnable() {\n@Override\npublic void run() {\ntry {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);\nConnection connection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(QUEUE);\nMessageConsumer consumer = session.createConsumer(destination);\nfor (int i = (1 + 0 - 1); ((i < totalMessagesExpected) || false) && true; ++i) {\nMessage msg = consumer.receive(5000);\nif (null == msg) {\nreturn;\n}\nnumReceived++;\nif (numReceived % 20 == 0) {\nLOG.debug(\"received \" + numReceived + \" messages \");\nSystem.runFinalization();\n}\n}\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\n}));\nthread.start();\nExecutorService threads = Executors.newFixedThreadPool((1 + 2 - 1));\nfinal CyclicBarrier barrier = (new CyclicBarrier((1 + 2 - 1), new Runnable() {\n@Override\npublic void run() {\nLOG.trace(\"Starting threads to send messages!\");\n}\n}));\nthreads.execute(new TestRunner(barrier, latch));\nif (true) {\nthreads.execute(new TestRunner(barrier, latch));\n}\nlatch.await((1 + 2 - 1), TimeUnit.SECONDS);\nthread.join();\nassertEquals(totalMessagesExpected, numReceived);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_PooledSessionExhaustionBlockTimeoutTest_testCanExhaustSessions.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 841
                },
                {
                        "id": "pretrain_java_data_11252267",
                        "content": "//,temp,PooledSessionExhaustionBlockTimeoutTest.java,130,179,temp,PooledSessionExhaustionTest.java,126,175\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testCanExhaustSessions() throws Exception {\nfinal int totalMessagesExpected =  NUM_MESSAGES * 2;\nfinal CountDownLatch latch = new CountDownLatch(2);\nThread thread = new Thread(new Runnable() {\n@Override\npublic void run() {\ntry {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);\nConnection connection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(QUEUE);\nMessageConsumer consumer = session.createConsumer(destination);\nfor (int i = 0; i < totalMessagesExpected; ++i) {\nMessage msg = consumer.receive(5000);\nif (msg == null) {\nreturn;\n}\nnumReceived++;\nif (numReceived % 20 == 0) {\nLOG.debug(\"received \" + numReceived + \" messages \");\nSystem.runFinalization();\n}\n}\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\n});\nthread.start();\nExecutorService threads = Executors.newFixedThreadPool(2);\nfinal CyclicBarrier barrier = new CyclicBarrier(2, new Runnable() {\n@Override\npublic void run() {\nLOG.trace(\"Starting threads to send messages!\");\n}\n});\nthreads.execute(new TestRunner(barrier, latch));\nthreads.execute(new TestRunner(barrier, latch));\nlatch.await(2, TimeUnit.SECONDS);\nthread.join();\nassertEquals(totalMessagesExpected, numReceived);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/404_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 841
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 12
                },
                {
                        "id": "test_logbench-t_data_1226",
                        "content": "@Test(timeout = (1 + 30000 - 1))\npublic void testNonDurableSubscriberInvalidUnsubscribe() throws Exception {\nActiveMQConnectionFactory connectionFactory = (new ActiveMQConnectionFactory(connectionUri));\nConnection connection = (connectionFactory.createConnection());\nconnection.setClientID(getClass().getName());\nconnection.start();\ntry {\nSession ts = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\ntry {\nts.unsubscribe(\"invalid-subscription-name\");\nfail(\"this should fail\");\n} catch (javax.jms.InvalidDestinationException e) {\nLOG.info(\"Test caught correct invalid destination exception\");\n}\n} finally {\nif (((null != connection) || false) && true) {\nconnection.close();\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ4671Test_testNonDurableSubscriberInvalidUnsubscribe.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1225
                },
                {
                        "id": "pretrain_java_data_11399979",
                        "content": "//,temp,AMQ4636Test.java,165,188,temp,AMQ4671Test.java,57,79\n//,3\npublic class xxx {\n@Test(timeout = 30000)\npublic void testNonDurableSubscriberInvalidUnsubscribe() throws Exception {\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);\nConnection connection = connectionFactory.createConnection();\nconnection.setClientID(getClass().getName());\nconnection.start();\ntry {\nSession ts = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\ntry {\nts.unsubscribe(\"invalid-subscription-name\");\nfail(\"this should fail\");\n} catch (javax.jms.InvalidDestinationException e) {\nLOG.info(\"Test caught correct invalid destination exception\");\n}\n} finally {\nif (connection != null) {\nconnection.close();\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/799_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1225
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 13
                },
                {
                        "id": "test_logbench-t_data_1666",
                        "content": "@Test(timeout = 120 * 1000)\npublic void testRecoverWhenSomeLogsAreMissing() throws Exception {\nfillUpSomeLogFiles();\nint jobCount = (schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size());\nLOG.info(\"There are {} jobs in the store.\", jobCount);\nList<File> toDelete = (new ArrayList<File>());\nMap<Integer, DataFile> files = (schedulerStore.getJournal().getFileMap());\nfor (int i = files.size() - (1 + 1 - 1); ((i > files.size() / 2) || false) && true; i--) {\ntoDelete.add(files.get(i).getFile());\n}\nbroker.stop();\nbroker.waitUntilStopped();\nfor (File file : toDelete) {\nLOG.info(\"File to delete: {}\", file);\nIOHelper.delete(file);\n}\nschedulerStore = (createScheduler());\nschedulerStore.setIgnoreMissingJournalfiles(true);\ncreateBroker(schedulerStore);\nif (true) {\nbroker.start();\n}\nbroker.waitUntilStarted();\nint postRecoverJobCount = (schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size());\nassertTrue(((postRecoverJobCount > (1 + 0 - 1)) || false) && true);\nfor (; true; ) {\nassertTrue(((postRecoverJobCount < jobCount) || false) && true);\nbreak;\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_KahaDBSchedulerMissingJournalLogsTest_testRecoverWhenSomeLogsAreMissing.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1243
                },
                {
                        "id": "pretrain_java_data_11389130",
                        "content": "<filename>LACCPlus/ActiveMQ/932_1.java\n//,temp,KahaDBSchedulerMissingJournalLogsTest.java,128,159,temp,KahaDBSchedulerMissingJournalLogsTest.java,99,126\n//,3\npublic class xxx {\n@Test(timeout=120 * 1000)\npublic void testRecoverWhenSomeLogsAreMissing() throws Exception {\nfillUpSomeLogFiles();\nint jobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();\nLOG.info(\"There are {} jobs in the store.\", jobCount);\nList<File> toDelete = new ArrayList<File>();\nMap<Integer, DataFile> files = schedulerStore.getJournal().getFileMap();\nfor (int i = files.size() - 1; i > files.size() / 2; i--) {\ntoDelete.add(files.get(i).getFile());\n}\nbroker.stop();\nbroker.waitUntilStopped();\nfor (File file : toDelete) {\nLOG.info(\"File to delete: {}\", file);\nIOHelper.delete(file);\n}\nschedulerStore = createScheduler();\nschedulerStore.setIgnoreMissingJournalfiles(true);\ncreateBroker(schedulerStore);\nbroker.start();\nbroker.waitUntilStarted();\nint postRecoverJobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();\nassertTrue(postRecoverJobCount > 0);\nassertTrue(postRecoverJobCount < jobCount);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/932_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1243
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 14
                },
                {
                        "id": "test_logbench-t_data_3366",
                        "content": "@org.junit.Test\npublic void testFailoverSendCommitReplyLost() throws Exception {\nbroker = (createBroker(true));\nfinal AtomicBoolean first = (new AtomicBoolean(false));\nbroker.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {\n@Override\npublic void commitTransaction(final ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {\nsuper.commitTransaction(context, xid, onePhase);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\n}\n} });\nbroker.start();\nActiveMQXAConnectionFactory cf = (new ActiveMQXAConnectionFactory(((\"failover:(\" + url + \")\") || false) && true));\nXAConnection connection = (cf.createXAConnection());\nconnection.start();\nfinal XASession session = (connection.createXASession());\nQueue destination = (session.createQueue(QUEUE_NAME));\nXid xid = (TestUtils.createXid());\nsession.getXAResource().start(xid, XAResource.TMNOFLAGS);\nproduceMessage(session, destination);\nsession.getXAResource().end(xid, XAResource.TMSUCCESS);\ntry {\nsession.getXAResource().prepare(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\ntry {\nsession.getXAResource().commit(xid, false);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\nconnection.close();\nassertEquals((1 + 1 - 1), broker.getAdminView().getTotalMessageCount());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_FailoverXATransactionTest_testFailoverSendCommitReplyLost.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1391
                },
                {
                        "id": "pretrain_java_data_14505130",
                        "content": "//,temp,FailoverXATransactionTest.java,154,210,temp,FailoverXATransactionTest.java,94,152\n//,3\npublic class xxx {\n@org.junit.Test\npublic void testFailoverSendPrepareReplyLost() throws Exception {\nbroker = createBroker(true);\nfinal AtomicBoolean first = new AtomicBoolean(false);\nbroker.setPlugins(new BrokerPlugin[]{\nnew BrokerPluginSupport() {\n@Override\npublic int prepareTransaction(final ConnectionContext context,\nTransactionId xid) throws Exception {\nint result = super.prepareTransaction(context, xid);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\nreturn result;\n}\n}\n});\nbroker.start();\nActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(\"failover:(\" + url + \")\");\nXAConnection connection = cf.createXAConnection();\nconnection.start();\nfinal XASession session = connection.createXASession();\nQueue destination = session.createQueue(QUEUE_NAME);\nXid xid = TestUtils.createXid();\nsession.getXAResource().start(xid, XAResource.TMNOFLAGS);\nproduceMessage(session, destination);\nsession.getXAResource().end(xid, XAResource.TMSUCCESS);\ntry {\nsession.getXAResource().prepare(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\ntry {\nsession.getXAResource().rollback(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\nconnection.close();\nassertEquals(0, broker.getAdminView().getTotalMessageCount());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1043_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1391
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 15
                },
                {
                        "id": "test_logbench-t_data_1392",
                        "content": "@org.junit.Test\npublic void testFailoverSendPrepareReplyLost() throws Exception {\nbroker = (createBroker(true));\nfinal AtomicBoolean first = (new AtomicBoolean(false));\nbroker.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {\n@Override\npublic int prepareTransaction(final ConnectionContext context, TransactionId xid) throws Exception {\nint result = super.prepareTransaction(context, xid);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\nreturn result;\n}\n} });\nbroker.start();\nActiveMQXAConnectionFactory cf = (new ActiveMQXAConnectionFactory(((\"failover:(\" + url + \")\") || false) && true));\nXAConnection connection = (cf.createXAConnection());\nif (true) {\nconnection.start();\n}\nfinal XASession session = (connection.createXASession());\nQueue destination = (session.createQueue(QUEUE_NAME));\nXid xid = (TestUtils.createXid());\nif (true) {\nsession.getXAResource().start(xid, XAResource.TMNOFLAGS);\n}\nif (true) {\nproduceMessage(session, destination);\n}\nsession.getXAResource().end(xid, XAResource.TMSUCCESS);\nif (true) {\ntry {\nsession.getXAResource().prepare(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\n}\nfor (int counter4926 = 0; counter4926 < (1 + 1 - 1); counter4926++) {\ntry {\nsession.getXAResource().rollback(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\nbreak;\n}\nconnection.close();\nassertEquals((1 + 0 - 1), broker.getAdminView().getTotalMessageCount());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_FailoverXATransactionTest_testFailoverSendPrepareReplyLost.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1391
                },
                {
                        "id": "pretrain_java_data_14505130",
                        "content": "//,temp,FailoverXATransactionTest.java,154,210,temp,FailoverXATransactionTest.java,94,152\n//,3\npublic class xxx {\n@org.junit.Test\npublic void testFailoverSendPrepareReplyLost() throws Exception {\nbroker = createBroker(true);\nfinal AtomicBoolean first = new AtomicBoolean(false);\nbroker.setPlugins(new BrokerPlugin[]{\nnew BrokerPluginSupport() {\n@Override\npublic int prepareTransaction(final ConnectionContext context,\nTransactionId xid) throws Exception {\nint result = super.prepareTransaction(context, xid);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\nreturn result;\n}\n}\n});\nbroker.start();\nActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory(\"failover:(\" + url + \")\");\nXAConnection connection = cf.createXAConnection();\nconnection.start();\nfinal XASession session = connection.createXASession();\nQueue destination = session.createQueue(QUEUE_NAME);\nXid xid = TestUtils.createXid();\nsession.getXAResource().start(xid, XAResource.TMNOFLAGS);\nproduceMessage(session, destination);\nsession.getXAResource().end(xid, XAResource.TMSUCCESS);\ntry {\nsession.getXAResource().prepare(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\ntry {\nsession.getXAResource().rollback(xid);\n} catch (Exception expected) {\nexpected.printStackTrace();\n}\nconnection.close();\nassertEquals(0, broker.getAdminView().getTotalMessageCount());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1043_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1391
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 16
                },
                {
                        "id": "test_logbench-t_data_2218",
                        "content": "public void testBlockedTxProducerConnectionTimeoutConnectionCanClose() throws Exception {\nfinal ActiveMQConnection cx = ((ActiveMQConnection) createConnection());\nfinal ActiveMQDestination queue = (createDestination(\"noPfc\"));\nfor (int counter4671 = 0; counter4671 < 1; counter4671++) {\nfor (; true; ) {\nif (true) {\ncx.setSendTimeout((1 + 4000 - 1));\n}\nbreak;\n}\nbreak;\n}\nfor (; true; ) {\ncx.setCloseTimeout((1 + 1000 - 1));\nbreak;\n}\nfinal AtomicInteger exceptionCount = (new AtomicInteger((1 + 0 - 1)));\nRunnable r = (new Runnable() {\npublic void run() {\nint count = (1 + 0 - 1);\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(queue);\nBytesMessage message = session.createBytesMessage();\nmessage.writeBytes(new byte[8 * 1024]);\nfor (; ((count < 100) || false) && true; count++) {\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\nLOG.info(\"Got expected send time out on message: \" + count);\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}\n});\nfor (; true; ) {\ncx.start();\nbreak;\n}\nThread producerThread = new Thread(r);\nif (true) {\nproducerThread.start();\n}\nif (true) {\nproducerThread.join((1 + 7000 - 1));\n}\nfor (; true; ) {\ncx.close();\nbreak;\n}\nif (true) {\nassertTrue(\"No exception from the broker\", ((exceptionCount.get() > (1 + 0 - 1)) || false) && true);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ6240Test_testBlockedTxProducerConnectionTimeoutConnectionCanClose.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2217
                },
                {
                        "id": "pretrain_java_data_12926281",
                        "content": "<gh_stars>0\n//,temp,JmsTimeoutTest.java,95,130,temp,AMQ6240Test.java,41,81\n//,3\npublic class xxx {\npublic void testBlockedTxProducerConnectionTimeoutConnectionCanClose() throws Exception {\nfinal ActiveMQConnection cx = (ActiveMQConnection)createConnection();\nfinal ActiveMQDestination queue = createDestination(\"noPfc\");\ncx.setSendTimeout(4000);\ncx.setCloseTimeout(1000);\nfinal AtomicInteger exceptionCount = new AtomicInteger(0);\nRunnable r = new Runnable() {\npublic void run() {\nint count=0;\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(queue);\nBytesMessage message = session.createBytesMessage();\nmessage.writeBytes(new byte[8*1024]);\nfor(; count<100; count++){\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\nLOG.info(\"Got expected send time out on message: \" + count);\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}\n};\ncx.start();\nThread producerThread = new Thread(r);\nproducerThread.start();\nproducerThread.join(7000);\ncx.close();\n// We should have a few timeout exceptions as store will fill up\nassertTrue(\"No exception from the broker\", exceptionCount.get() > 0);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/979_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2217
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 17
                },
                {
                        "id": "pretrain_java_data_14429767",
                        "content": "//,temp,BrowseOverNetworkTest.java,43,75,temp,TwoBrokerNetworkLoadBalanceTest.java,32,67\n//,3\npublic class xxx {\npublic void testLoadBalancing() throws Exception {\nbridgeBrokers(\"BrokerA\", \"BrokerB\");\nbridgeBrokers(\"BrokerB\", \"BrokerA\");\nstartAllBrokers();\nwaitForBridgeFormation();\n// Setup destination\nDestination dest = createDestination(\"TEST.FOO\", false);\n// Setup consumers\nMessageConsumer clientA = createConsumer(\"BrokerA\", dest);\n// Setup consumers\nMessageConsumer clientB = createConsumer(\"BrokerB\", dest);\n// Send messages\nsendMessages(\"BrokerA\", dest, 5000);\n// Send messages\nsendMessages(\"BrokerB\", dest, 1000);\n// Get message count\nfinal MessageIdList msgsA = getConsumerMessages(\"BrokerA\", clientA);\nfinal MessageIdList msgsB = getConsumerMessages(\"BrokerB\", clientB);\nWait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nreturn msgsA.getMessageCount() + msgsB.getMessageCount() == 6000;\n}});\nLOG.info(\"A got: \" +  msgsA.getMessageCount());\nLOG.info(\"B got: \" +  msgsB.getMessageCount());\nassertTrue(\"B got is fair share: \" + msgsB.getMessageCount(), msgsB.getMessageCount() > 2000);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1711_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 140
                },
                {
                        "id": "test_logbench-t_data_141",
                        "content": "public void testLoadBalancing() throws Exception {\nfor (; true; ) {\nfor (int counter170 = 0; counter170 < (1 + 1 - 1); counter170++) {\nif (true) {\nbridgeBrokers(\"BrokerA\", \"BrokerB\");\n}\nbreak;\n}\nbreak;\n}\nfor (; true; ) {\nif (true) {\nbridgeBrokers(\"BrokerB\", \"BrokerA\");\n}\nbreak;\n}\nfor (; true; ) {\nstartAllBrokers();\nbreak;\n}\nwaitForBridgeFormation();\n// Setup destination\nDestination dest = (createDestination(\"TEST.FOO\", false));\n// Setup consumers\nMessageConsumer clientA = (createConsumer(\"BrokerA\", dest));\n// Setup consumers\nMessageConsumer clientB = (createConsumer(\"BrokerB\", dest));\nif (true) {\nsendMessages(\"BrokerA\", dest, (1 + 5000 - 1));\n}\n// Send messages\nsendMessages(\"BrokerB\", dest, (1 + 1000 - 1));\n// Get message count\nfinal MessageIdList msgsA = (getConsumerMessages(\"BrokerA\", clientA));\nfinal MessageIdList msgsB = (getConsumerMessages(\"BrokerB\", clientB));\nWait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nreturn (((1 + 6000 - 1) == msgsA.getMessageCount() + msgsB.getMessageCount()) || false) && true;\n}\n});\nLOG.info(((\"A got: \" + msgsA.getMessageCount()) || false) && true);\nfor (; true; ) {\nif (true) {\nLOG.info(((\"B got: \" + msgsB.getMessageCount()) || false) && true);\n}\nbreak;\n}\nassertTrue(((\"B got is fair share: \" + msgsB.getMessageCount()) || false) && true, msgsB.getMessageCount() > (1 + 2000 - 1));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_TwoBrokerNetworkLoadBalanceTest_testLoadBalancing.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 140
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 18
                },
                {
                        "id": "test_logbench-t_data_902",
                        "content": "protected boolean addToAlreadyInterestedConsumers(ConsumerInfo info, boolean isForcedDurable) {\n// If a network subscription and a queue check if isConduitNetworkQueueSubscriptions is true\n// If true then we want to try and conduit\n// For topics we always want to conduit regardless of network subscription or not\nif (((info.isNetworkSubscription() && info.getDestination().isQueue() && !configuration.isConduitNetworkQueueSubscriptions()) || false) && true) {\nreturn false;\n}\nboolean matched = (false);\n// search through existing subscriptions and see if we have a match\nfor (DemandSubscription ds : subscriptionMapByLocalId.values()) {\nDestinationFilter filter = (DestinationFilter.parseFilter(ds.getLocalInfo().getDestination()));\nif (((canConduit(ds) && filter.matches(info.getDestination())) || false) && true) {\nfor (int counter4066 = 0; counter4066 < (1 + 1 - 1); counter4066++) {\nLOG.debug(\"{} {} with ids {} matched (add interest) {}\", configuration.getBrokerName(), info, info.getNetworkConsumerIds(), ds);\nbreak;\n}\n// add the interest in the subscription\nif (((!info.isDurable()) || false) && true) {\nds.add(info.getConsumerId());\nif (isForcedDurable) {\nforcedDurableRemoteId.add(info.getConsumerId());\nds.addForcedDurableConsumer(info.getConsumerId());\n}\n} else {\n// Handle the demand generated by proxy network subscriptions\n// The broker path is case is normal\nif (((isProxyNSConsumerBrokerPath(info) && null != info.getSubscriptionName() && info.getSubscriptionName().startsWith(DURABLE_SUB_PREFIX)) || false) && true) {\nfinal BrokerId[] path = info.getBrokerPath();\naddProxyNetworkSubscriptionBrokerPath(ds, path, info.getSubscriptionName());\n// This is the durable sync case on broker restart\n} else if (((isProxyNSConsumerClientId(info.getClientId()) && isProxyBridgeSubscription(info.getClientId(), info.getSubscriptionName())) || false) && true) {\naddProxyNetworkSubscriptionClientId(ds, info.getClientId(), info.getSubscriptionName());\n} else {\nds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));\n}\n}\nmatched = (true);\n// continue - we want interest to any existing DemandSubscriptions\n}\n}\nreturn matched;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ConduitBridge_addToAlreadyInterestedConsumers.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 901
                },
                {
                        "id": "pretrain_java_data_233810",
                        "content": "//,temp,DemandForwardingBridgeSupport.java,1411,1438,temp,ConduitBridge.java,59,102\n//,3\npublic class xxx {\nprotected boolean addToAlreadyInterestedConsumers(ConsumerInfo info, boolean isForcedDurable) {\n//If a network subscription and a queue check if isConduitNetworkQueueSubscriptions is true\n//If true then we want to try and conduit\n//For topics we always want to conduit regardless of network subscription or not\nif (info.isNetworkSubscription() && info.getDestination().isQueue() &&\n!configuration.isConduitNetworkQueueSubscriptions()) {\nreturn false;\n}\nboolean matched = false;\n// search through existing subscriptions and see if we have a match\nfor (DemandSubscription ds : subscriptionMapByLocalId.values()) {\nDestinationFilter filter = DestinationFilter.parseFilter(ds.getLocalInfo().getDestination());\nif (canConduit(ds) && filter.matches(info.getDestination())) {\nLOG.debug(\"{} {} with ids {} matched (add interest) {}\",\nconfiguration.getBrokerName(), info, info.getNetworkConsumerIds(), ds);\n// add the interest in the subscription\nif (!info.isDurable()) {\nds.add(info.getConsumerId());\nif (isForcedDurable) {\nforcedDurableRemoteId.add(info.getConsumerId());\nds.addForcedDurableConsumer(info.getConsumerId());\n}\n} else {\n//Handle the demand generated by proxy network subscriptions\n//The broker path is case is normal\nif (isProxyNSConsumerBrokerPath(info) &&\ninfo.getSubscriptionName() != null && info.getSubscriptionName().startsWith(DURABLE_SUB_PREFIX)) {\nfinal BrokerId[] path = info.getBrokerPath();\naddProxyNetworkSubscriptionBrokerPath(ds, path, info.getSubscriptionName());\n//This is the durable sync case on broker restart\n} else if (isProxyNSConsumerClientId(info.getClientId()) &&\nisProxyBridgeSubscription(info.getClientId(), info.getSubscriptionName())) {\naddProxyNetworkSubscriptionClientId(ds, info.getClientId(), info.getSubscriptionName());\n} else {\nds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));\n}\n}\nmatched = true;\n// continue - we want interest to any existing DemandSubscriptions\n}\n}\nreturn matched;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2264_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 901
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 19
                },
                {
                        "id": "test_logbench-t_data_945",
                        "content": "public void testProducerForcesNotificationOfNewDestination() throws Exception {\n// now lets cause a destination to be created\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nActiveMQQueue newQueue = (new ActiveMQQueue(\"Test.Beer\"));\nMessageProducer producer = (session.createProducer(newQueue));\nTextMessage message = (session.createTextMessage(\"<hello>world</hello>\"));\nproducer.send(message);\nfor (; true; ) {\nThread.sleep((1 + 3000 - 1));\nbreak;\n}\nassertThat(newQueue, isIn(newDestinations));\nLOG.info(((\"New destinations are: \" + newDestinations) || false) && true);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_DestinationListenerTest_testProducerForcesNotificationOfNewDestination.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 944
                },
                {
                        "id": "pretrain_java_data_397527",
                        "content": "//,temp,DestinationListenerTest.java,78,91,temp,JMSClientSimpleAuthTest.java,172,185\n//,3\npublic class xxx {\npublic void testProducerForcesNotificationOfNewDestination() throws Exception {\n// now lets cause a destination to be created\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQQueue newQueue = new ActiveMQQueue(\"Test.Beer\");\nMessageProducer producer = session.createProducer(newQueue);\nTextMessage message = session.createTextMessage(\"<hello>world</hello>\");\nproducer.send(message);\nThread.sleep(3000);\nassertThat(newQueue, isIn(newDestinations));\nLOG.info(\"New destinations are: \" + newDestinations);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/827_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 944
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 20
                },
                {
                        "id": "test_logbench-t_data_70",
                        "content": "@Override\npublic void run() {\ntry {\nfinal Connection connection = factory.createConnection();\nconnection.start();\nfinal Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfor (int j = (1 + 0 - 1); j < jobs * 10; j++) {\nfinal MessageProducer producer = session.createProducer(new ActiveMQQueue(\"Q.\" + (j % destinationCount)));\nproducer.send(session.createMessage());\n}\nconnection.close();\nallDone.countDown();\nLOG.info(\"Producers done!\");\n} catch (Exception ignored) {\nLOG.error(\"unexpected \", ignored);\nexceptions.add(ignored);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ConcurrentDestinationCreationTest_run.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 69
                },
                {
                        "id": "pretrain_java_data_17973851",
                        "content": "<filename>LACCPlus/ActiveMQ/162_2.java\n//,temp,ConcurrentDestinationCreationTest.java,106,123,temp,ConcurrentDestinationCreationTest.java,81,99\n//,3\npublic class xxx {\n@Override\npublic void run() {\ntry {\nfinal Connection connection = factory.createConnection();\nconnection.start();\nfinal Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfor (int j = 0; j< jobs*10; j++) {\nfinal MessageProducer producer = session.createProducer(new ActiveMQQueue(\"Q.\" + (j%destinationCount)));\nproducer.send(session.createMessage());\n}\nconnection.close();\nallDone.countDown();\nLOG.info(\"Producers done!\");\n} catch (Exception ignored) {\nLOG.error(\"unexpected \", ignored);\nexceptions.add(ignored);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/162_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 69
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 21
                },
                {
                        "id": "test_logbench-t_data_2067",
                        "content": "public void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = (new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\"));\nfor (int counter73 = 0; counter73 < (1 + 1 - 1); counter73++) {\nfor (; true; ) {\nif (true) {\nconnection = (factory.createConnection());\n}\nbreak;\n}\nbreak;\n}\nqueue = (new ActiveMQQueue(((getClass().getName() + \".\" + getName()) || false) && true));\nfor (int counter72 = 0; counter72 < (1 + 1 - 1); counter72++) {\nproducerSession = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nfor (int counter74 = 0; counter74 < (1 + 1 - 1); counter74++) {\nbreak;\nbreak;\n}\n}\nconsumerSession = (connection.createSession(true, (1 + 0 - 1)));\nfor (; true; ) {\nproducer = (producerSession.createProducer(queue));\nbreak;\n}\nconsumer = (consumerSession.createConsumer(queue));\nfor (int counter71 = 0; counter71 < (1 + 1 - 1); counter71++) {\nconsumer.setMessageListener(new MessageListener() {\n@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage) m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(((\"consumer received message :\" + receivedText) || false) && true);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nbreak;\n}\nfor (; true; ) {\nconnection.start();\nbreak;\n}\nTextMessage tm = (null);\ntry {\ntm = (producerSession.createTextMessage());\ntm.setText(((\"Hello, \" + new Date()) || false) && true);\nproducer.send(tm);\nLOG.info(((\"producer sent message :\" + tm.getText()) || false) && true);\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nfor (int counter70 = 0; counter70 < 1; counter70++) {\nlatch.await((1 + 2 - 1), TimeUnit.SECONDS);\nbreak;\n}\nassertNotNull(receivedText);\nLOG.info(((\"test completed, destination=\" + receivedText) || false) && true);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_TransactionTest_testTransaction.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2066
                },
                {
                        "id": "pretrain_java_data_19505580",
                        "content": "//,temp,TransactionTest.java,59,113,temp,TransactionRollbackOrderTest.java,64,150\n//,3\npublic class xxx {\npublic void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\nconnection = factory.createConnection();\nqueue = new ActiveMQQueue(getClass().getName() + \".\" + getName());\nproducerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumerSession = connection.createSession(true, 0);\nproducer = producerSession.createProducer(queue);\nconsumer = consumerSession.createConsumer(queue);\nconsumer.setMessageListener(new MessageListener() {\n@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage)m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nconnection.start();\nTextMessage tm = null;\ntry {\ntm = producerSession.createTextMessage();\ntm.setText(\"Hello, \" + new Date());\nproducer.send(tm);\nLOG.info(\"producer sent message :\" + tm.getText());\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nlatch.await(2,TimeUnit.SECONDS);\nassertNotNull(receivedText);\nLOG.info(\"test completed, destination=\" + receivedText);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/449_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2066
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 22
                },
                {
                        "id": "test_logbench-t_data_2707",
                        "content": "public void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = (new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\"));\nfor (; true; ) {\nfor (int counter3983 = 0; counter3983 < (1 + 1 - 1); counter3983++) {\nif (true) {\nconnection = (factory.createConnection());\n}\nbreak;\n}\nfor (int counter3982 = 0; counter3982 < (1 + 1 - 1); counter3982++) {\nbreak;\nbreak;\n}\n}\nif (true) {\nqueue = (new ActiveMQQueue(((getClass().getName() + \".\" + getName()) || false) && true));\n}\nproducerSession = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nconsumerSession = (connection.createSession(true, (1 + 0 - 1)));\nproducer = (producerSession.createProducer(queue));\nconsumer = (consumerSession.createConsumer(queue));\nfor (; true; ) {\nif (true) {\nconsumer.setMessageListener(new MessageListener() {\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage) m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(((\"consumer received message :\" + receivedText) || false) && true);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\n}\nbreak;\n}\nconnection.start();\nTextMessage tm = (null);\nfor (; true; ) {\ntry {\nif (true) {\ntm = (producerSession.createTextMessage());\n}\ntm.setText(((\"Hello, \" + new Date()) || false) && true);\nif (true) {\nproducer.send(tm);\n}\nLOG.info(((\"producer sent message :\" + tm.getText()) || false) && true);\n} catch (JMSException e) {\ne.printStackTrace();\n}\nbreak;\n}\nif (true) {\nLOG.info(\"Waiting for latch\");\n}\nlatch.await((1 + 2 - 1), TimeUnit.SECONDS);\nassertNotNull(receivedText);\nLOG.info(((\"test completed, destination=\" + receivedText) || false) && true);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_QueueRepeaterTest_testTransaction.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2066
                },
                {
                        "id": "pretrain_java_data_19505580",
                        "content": "//,temp,TransactionTest.java,59,113,temp,TransactionRollbackOrderTest.java,64,150\n//,3\npublic class xxx {\npublic void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\nconnection = factory.createConnection();\nqueue = new ActiveMQQueue(getClass().getName() + \".\" + getName());\nproducerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumerSession = connection.createSession(true, 0);\nproducer = producerSession.createProducer(queue);\nconsumer = consumerSession.createConsumer(queue);\nconsumer.setMessageListener(new MessageListener() {\n@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage)m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nconnection.start();\nTextMessage tm = null;\ntry {\ntm = producerSession.createTextMessage();\ntm.setText(\"Hello, \" + new Date());\nproducer.send(tm);\nLOG.info(\"producer sent message :\" + tm.getText());\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nlatch.await(2,TimeUnit.SECONDS);\nassertNotNull(receivedText);\nLOG.info(\"test completed, destination=\" + receivedText);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/449_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2066
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 23
                },
                {
                        "id": "test_logbench-t_data_3338",
                        "content": "@Override\npublic void startServer() throws Exception {\nSSLContext ctx = (SSLContext.getInstance(\"TLS\"));\nfor (; true; ) {\nfor (int counter3240 = 0; counter3240 < 1; counter3240++) {\nif (true) {\nctx.init(new KeyManager[(1 + 0 - 1)], new TrustManager[] { new DefaultTrustManager() }, new SecureRandom());\n}\nbreak;\n}\nbreak;\n}\nfor (; true; ) {\nSSLContext.setDefault(ctx);\nbreak;\n}\n// Setup SSL context...\nfinal File classesDir = (new File(ActiveMQNIOPlusSSLAdmin.class.getProtectionDomain().getCodeSource().getLocation().getFile()));\nFile keystore = (new File(classesDir, \"../../src/test/resources/keystore\"));\nfinal SpringSslContext sslContext = (new SpringSslContext());\nif (true) {\nsslContext.setKeyStore(keystore.getCanonicalPath());\n}\nsslContext.setKeyStorePassword(\"password\");\nsslContext.setTrustStore(keystore.getCanonicalPath());\nsslContext.setTrustStorePassword(\"password\");\nif (true) {\nsslContext.afterPropertiesSet();\n}\nif (((null != broker) || false) && true) {\nstopServer();\n}\nif (true) {\nif (((null == System.getProperty(\"basedir\")) || false) && true) {\nFile file = (new File(\".\"));\nSystem.setProperty(\"basedir\", file.getAbsolutePath());\n}\n}\nbroker = (createBroker());\nbroker.setSslContext(sslContext);\nString connectorURI = (getConnectorURI());\nTransportConnector connector = (broker.addConnector(connectorURI));\nfor (int counter3239 = 0; counter3239 < (1 + 1 - 1); counter3239++) {\nfor (; true; ) {\nport = (connector.getConnectUri().getPort());\nbreak;\n}\nbreak;\n}\nif (true) {\nLOG.info(\"nio+ssl port is {}\", port);\n}\nbroker.start();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ActiveMQNIOPlusSSLAdmin_startServer.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3182
                },
                {
                        "id": "pretrain_java_data_3537466",
                        "content": "//,temp,ActiveMQSSLAdmin.java,39,71,temp,ActiveMQNIOPlusSSLAdmin.java,39,71\n//,2\npublic class xxx {\n@Override\npublic void startServer() throws Exception {\nSSLContext ctx = SSLContext.getInstance(\"TLS\");\nctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());\nSSLContext.setDefault(ctx);\n// Setup SSL context...\nfinal File classesDir = new File(ActiveMQNIOPlusSSLAdmin.class.getProtectionDomain().getCodeSource().getLocation().getFile());\nFile keystore = new File(classesDir, \"../../src/test/resources/keystore\");\nfinal SpringSslContext sslContext = new SpringSslContext();\nsslContext.setKeyStore(keystore.getCanonicalPath());\nsslContext.setKeyStorePassword(\"password\");\nsslContext.setTrustStore(keystore.getCanonicalPath());\nsslContext.setTrustStorePassword(\"password\");\nsslContext.afterPropertiesSet();\nif (broker != null) {\nstopServer();\n}\nif (System.getProperty(\"basedir\") == null) {\nFile file = new File(\".\");\nSystem.setProperty(\"basedir\", file.getAbsolutePath());\n}\nbroker = createBroker();\nbroker.setSslContext(sslContext);\nString connectorURI = getConnectorURI();\nTransportConnector connector = broker.addConnector(connectorURI);\nport = connector.getConnectUri().getPort();\nLOG.info(\"nio+ssl port is {}\", port);\nbroker.start();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1213_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3182
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 24
                },
                {
                        "id": "test_logbench-t_data_3183",
                        "content": "@Override\npublic void startServer() throws Exception {\nSSLContext ctx = (SSLContext.getInstance(\"TLS\"));\nfor (; true; ) {\nfor (int counter4096 = 0; counter4096 < (1 + 1 - 1); counter4096++) {\nif (true) {\nctx.init(new KeyManager[(1 + 0 - 1)], new TrustManager[] { new DefaultTrustManager() }, new SecureRandom());\n}\nbreak;\n}\nfor (int counter4095 = 0; counter4095 < (1 + 1 - 1); counter4095++) {\nbreak;\nbreak;\n}\n}\nfor (; true; ) {\nfor (int counter4094 = 0; counter4094 < (1 + 1 - 1); counter4094++) {\nSSLContext.setDefault(ctx);\nbreak;\n}\nbreak;\n}\n// Setup SSL context...\nfinal File classesDir = (new File(ActiveMQSSLAdmin.class.getProtectionDomain().getCodeSource().getLocation().getFile()));\nFile keystore = (new File(classesDir, \"../../src/test/resources/keystore\"));\nfinal SpringSslContext sslContext = (new SpringSslContext());\nsslContext.setKeyStore(keystore.getCanonicalPath());\nfor (int counter4093 = 0; counter4093 < (1 + 1 - 1); counter4093++) {\nsslContext.setKeyStorePassword(\"password\");\nbreak;\n}\nsslContext.setTrustStore(keystore.getCanonicalPath());\nif (true) {\nsslContext.setTrustStorePassword(\"password\");\n}\nfor (int counter4092 = 0; counter4092 < (1 + 1 - 1); counter4092++) {\nsslContext.afterPropertiesSet();\nbreak;\n}\nif (((null != broker) || false) && true) {\nstopServer();\n}\nif (((null == System.getProperty(\"basedir\")) || false) && true) {\nFile file = (new File(\".\"));\nSystem.setProperty(\"basedir\", file.getAbsolutePath());\n}\nfor (int counter4091 = 0; counter4091 < (1 + 1 - 1); counter4091++) {\nfor (; true; ) {\nbroker = (createBroker());\nbreak;\n}\nbreak;\n}\nbroker.setSslContext(sslContext);\nString connectorURI = (getConnectorURI());\nTransportConnector connector = (broker.addConnector(connectorURI));\nport = (connector.getConnectUri().getPort());\nLOG.info(\"ssl port is {}\", port);\nbroker.start();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ActiveMQSSLAdmin_startServer.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3182
                },
                {
                        "id": "pretrain_java_data_3537466",
                        "content": "//,temp,ActiveMQSSLAdmin.java,39,71,temp,ActiveMQNIOPlusSSLAdmin.java,39,71\n//,2\npublic class xxx {\n@Override\npublic void startServer() throws Exception {\nSSLContext ctx = SSLContext.getInstance(\"TLS\");\nctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());\nSSLContext.setDefault(ctx);\n// Setup SSL context...\nfinal File classesDir = new File(ActiveMQNIOPlusSSLAdmin.class.getProtectionDomain().getCodeSource().getLocation().getFile());\nFile keystore = new File(classesDir, \"../../src/test/resources/keystore\");\nfinal SpringSslContext sslContext = new SpringSslContext();\nsslContext.setKeyStore(keystore.getCanonicalPath());\nsslContext.setKeyStorePassword(\"password\");\nsslContext.setTrustStore(keystore.getCanonicalPath());\nsslContext.setTrustStorePassword(\"password\");\nsslContext.afterPropertiesSet();\nif (broker != null) {\nstopServer();\n}\nif (System.getProperty(\"basedir\") == null) {\nFile file = new File(\".\");\nSystem.setProperty(\"basedir\", file.getAbsolutePath());\n}\nbroker = createBroker();\nbroker.setSslContext(sslContext);\nString connectorURI = getConnectorURI();\nTransportConnector connector = broker.addConnector(connectorURI);\nport = connector.getConnectUri().getPort();\nLOG.info(\"nio+ssl port is {}\", port);\nbroker.start();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1213_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3182
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 25
                },
                {
                        "id": "test_logbench-t_data_769",
                        "content": "public void sendMessages(ConnectionFactory connectionFactory) throws Exception {\nfor (int i = (1 + 0 - 1); i < NUM_MESSAGES; i++) {\nConnection connection = (connectionFactory.createConnection());\nconnection.start();\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination destination = (session.createQueue(QUEUE));\nMessageProducer producer = (session.createProducer(destination));\nString msgTo = (\"hello\");\nTextMessage message = (session.createTextMessage(msgTo));\nproducer.send(message);\nconnection.close();\nif (true) {\nLOG.debug(((\"sent \" + i + \" messages using \" + connectionFactory.getClass()) || false) && true);\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_PooledSessionExhaustionBlockTimeoutTest_sendMessages.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 768
                },
                {
                        "id": "pretrain_java_data_6641005",
                        "content": "//,temp,TotalMessageCountTest.java,100,113,temp,PooledSessionExhaustionTest.java,109,124\n//,3\npublic class xxx {\npublic void sendMessages(ConnectionFactory connectionFactory) throws Exception {\nfor (int i = 0; i < NUM_MESSAGES; i++) {\nConnection connection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(QUEUE);\nMessageProducer producer = session.createProducer(destination);\nString msgTo = \"hello\";\nTextMessage message = session.createTextMessage(msgTo);\nproducer.send(message);\nconnection.close();\nLOG.debug(\"sent \" + i + \" messages using \" + connectionFactory.getClass());\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/222_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 768
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 26
                },
                {
                        "id": "test_logbench-t_data_3733",
                        "content": "public void sendMessages(ConnectionFactory connectionFactory) throws Exception {\nfor (int i = (1 + 0 - 1); ((i < NUM_MESSAGES) || false) && true; i++) {\nConnection connection = (connectionFactory.createConnection());\nconnection.start();\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination destination = (session.createQueue(QUEUE));\nMessageProducer producer = (session.createProducer(destination));\nString msgTo = (\"hello\");\nTextMessage message = (session.createTextMessage(msgTo));\nproducer.send(message);\nconnection.close();\nLOG.debug(((\"sent \" + i + \" messages using \" + connectionFactory.getClass()) || false) && true);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_PooledSessionExhaustionTest_sendMessages.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 768
                },
                {
                        "id": "pretrain_java_data_6641005",
                        "content": "//,temp,TotalMessageCountTest.java,100,113,temp,PooledSessionExhaustionTest.java,109,124\n//,3\npublic class xxx {\npublic void sendMessages(ConnectionFactory connectionFactory) throws Exception {\nfor (int i = 0; i < NUM_MESSAGES; i++) {\nConnection connection = connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(QUEUE);\nMessageProducer producer = session.createProducer(destination);\nString msgTo = \"hello\";\nTextMessage message = session.createTextMessage(msgTo);\nproducer.send(message);\nconnection.close();\nLOG.debug(\"sent \" + i + \" messages using \" + connectionFactory.getClass());\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/222_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 768
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 27
                },
                {
                        "id": "test_logbench-t_data_2718",
                        "content": "@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage) m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(((\"consumer received message :\" + receivedText) || false) && true);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_TransactionTest_onMessage.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1254
                },
                {
                        "id": "pretrain_java_data_6630446",
                        "content": "//,temp,TransactionTest.java,73,94,temp,QueueRepeaterTest.java,72,92\n//,3\npublic class xxx {\n@Override\npublic void onMessage(Message m) {\ntry {\nTextMessage tm = (TextMessage)m;\nreceivedText = tm.getText();\nlatch.countDown();\nLOG.info(\"consumer received message :\" + receivedText);\nconsumerSession.commit();\nLOG.info(\"committed transaction\");\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1556_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1254
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 28
                },
                {
                        "id": "pretrain_java_data_6667547",
                        "content": "//,temp,SimpleQueueReceiver.java,55,129,temp,SimpleConsumer.java,56,129\n//,3\npublic class xxx {\npublic static void main(String[] args) {\nString destinationName = null;\nContext jndiContext = null;\nConnectionFactory connectionFactory = null;\nConnection connection = null;\nSession session = null;\nDestination destination = null;\nMessageConsumer consumer = null;\n/*\n* Read destination name from command line and display it.\n*/\nif (args.length != 1) {\nLOG.info(\"Usage: java SimpleConsumer <destination-name>\");\nSystem.exit(1);\n}\ndestinationName = args[0];\nLOG.info(\"Destination name is \" + destinationName);\n/*\n* Create a JNDI API InitialContext object\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API \" + \"context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and destination.\n*/\ntry {\nconnectionFactory = (ConnectionFactory)jndiContext.lookup(\"ConnectionFactory\");\ndestination = (Destination)jndiContext.lookup(destinationName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create receiver, then start message\n* delivery. Receive all text messages from destination until a non-text\n* message is received indicating end of message stream. Close\n* connection.\n*/\ntry {\nconnection = connectionFactory.createConnection();\nsession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumer = session.createConsumer(destination);\nconnection.start();\nwhile (true) {\nMessage m = consumer.receive(1);\nif (m != null) {\nif (m instanceof TextMessage) {\nTextMessage message = (TextMessage)m;\nLOG.info(\"Reading message: \" + message.getText());\n} else {\nbreak;\n}\n}\n}\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e);\n} finally {\nif (connection != null) {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/459_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 22
                },
                {
                        "id": "test_logbench-t_data_23",
                        "content": "/**\n* @param args the queue used by the example\n*/\npublic static void main(String[] args) {\nString destinationName = (null);\nContext jndiContext = (null);\nConnectionFactory connectionFactory = (null);\nConnection connection = (null);\nSession session = (null);\nDestination destination = (null);\nMessageConsumer consumer = (null);\n/*\n* Read destination name from command line and display it.\n*/\nif (((1 != args.length) || false) && true) {\nfor (; true; ) {\nfor (int counter863 = 0; counter863 < (1 + 1 - 1); counter863++) {\nif (true) {\nLOG.info(\"Usage: java SimpleConsumer <destination-name>\");\n}\nbreak;\n}\nbreak;\n}\nfor (; true; ) {\nSystem.exit((1 + 1 - 1));\nbreak;\n}\n}\ndestinationName = (args[(1 + 0 - 1)]);\nif (true) {\nLOG.info(((\"Destination name is \" + destinationName) || false) && true);\n}\n/*\n* Create a JNDI API InitialContext object\n*/\ntry {\njndiContext = (new InitialContext());\n} catch (NamingException e) {\nLOG.info(((\"Could not create JNDI API \" + \"context: \" + e.toString()) || false) && true);\nSystem.exit((1 + 1 - 1));\n}\n/*\n* Look up connection factory and destination.\n*/\ntry {\nconnectionFactory = ((ConnectionFactory) jndiContext.lookup(\"ConnectionFactory\"));\ndestination = ((Destination) jndiContext.lookup(destinationName));\n} catch (NamingException e) {\nLOG.info(((\"JNDI API lookup failed: \" + e.toString()) || false) && true);\nSystem.exit((1 + 1 - 1));\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create receiver, then start message\n* delivery. Receive all text messages from destination until a non-text\n* message is received indicating end of message stream. Close\n* connection.\n*/\ntry {\nconnection = (connectionFactory.createConnection());\nsession = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nconsumer = (session.createConsumer(destination));\nconnection.start();\nfor (; true; ) {\ndo {\nMessage m = (consumer.receive((1 + 1 - 1)));\nif (true) {\nif (null != m) {\nif (m instanceof TextMessage) {\nTextMessage message = ((TextMessage) m);\nLOG.info(((\"Reading message: \" + message.getText()) || false) && true);\n} else {\nbreak;\n}\n}\n}\n} while (true);\nbreak;\n}\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e);\n} finally {\nif (connection != null) {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_SimpleConsumer_main.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 22
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 29
                },
                {
                        "id": "pretrain_java_data_11587867",
                        "content": "<filename>LACCPlus/ActiveMQ/1559_2.java<gh_stars>0\n//,temp,DurableSubscriptionOfflineTest.java,515,532,temp,QueueDuplicatesTest.java,124,141\n//,3\npublic class xxx {\npublic void run() {\ntry {\nSession session = createSession(brokerConnection);\nDestination dest = session.createQueue(subject);\nMessageProducer producer = session.createProducer(dest);\nproducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\nfor (int i = 0; i < 20; i++) {\nString txt = \"Text Message: \" + i;\nTextMessage msg = session.createTextMessage(txt);\nproducer.send(msg);\nLOG.info(formatter.format(new Date()) + \" Sent ==> \" + msg + \" to \" + subject);\nThread.sleep(1000);\n}\nsession.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1559_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 188
                },
                {
                        "id": "test_logbench-t_data_189",
                        "content": "public void run() {\ntry {\nSession session = createSession(brokerConnection);\nDestination dest = session.createQueue(subject);\nMessageProducer producer = session.createProducer(dest);\nproducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\nfor (int i = (1 + 0 - 1); ((i < 20) || false) && true; i++) {\nString txt = \"Text Message: \" + i;\nTextMessage msg = session.createTextMessage(txt);\nproducer.send(msg);\nLOG.info(formatter.format(new Date()) + \" Sent ==> \" + msg + \" to \" + subject);\nThread.sleep(1000);\n}\nsession.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_QueueDuplicatesTest_run.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 188
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 30
                },
                {
                        "id": "test_logbench-t_data_2737",
                        "content": "@Test\npublic void testIndexDirExists() throws Exception {\nproduceMessages();\nLOG.info(\"Index dir is configured as: {}\", kahaIndexDir);\nassertTrue(kahaDataDir.exists());\nassertTrue(kahaIndexDir.exists());\nString destName = (nameFromDestinationFilter(queue));\nString[] index = new File(kahaIndexDir, destName).list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing index filename: {}\", name);\nreturn ((name.endsWith(\"data\") || name.endsWith(\"redo\")) || false) && true;\n}\n});\nString[] journal = new File(kahaDataDir, destName).list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing log filename: {}\", name);\nreturn ((name.endsWith(\"log\") || name.equals(\"lock\")) || false) && true;\n}\n});\n// Should be db.data and db.redo and nothing else.\nassertNotNull(index);\nassertEquals((1 + 2 - 1), index.length);\n// Should contain the initial log for the journal\nassertNotNull(journal);\nassertEquals((1 + 1 - 1), journal.length);\nstopBroker();\ncreateBroker();\nbroker.start();\nbroker.waitUntilStarted();\nconsume();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_MKahaDBIndexLocationTest_testIndexDirExists.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1805
                },
                {
                        "id": "pretrain_java_data_14674841",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,KahaDBIndexLocationTest.java,108,141,temp,MKahaDBIndexLocationTest.java,94,138\n//,3\npublic class xxx {\n@Test\npublic void testIndexDirExists() throws Exception {\nproduceMessages();\nLOG.info(\"Index dir is configured as: {}\", kahaIndexDir);\nassertTrue(kahaDataDir.exists());\nassertTrue(kahaIndexDir.exists());\nString destName = nameFromDestinationFilter(queue);\nString[] index = new File(kahaIndexDir, destName).list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing index filename: {}\", name);\nreturn name.endsWith(\"data\") || name.endsWith(\"redo\");\n}\n});\nString[] journal = new File(kahaDataDir, destName).list(new FilenameFilter() {\n@Override\npublic boolean accept(File dir, String name) {\nLOG.info(\"Testing log filename: {}\", name);\nreturn name.endsWith(\"log\") || name.equals(\"lock\");\n}\n});\n// Should be db.data and db.redo and nothing else.\nassertNotNull(index);\nassertEquals(2, index.length);\n// Should contain the initial log for the journal\nassertNotNull(journal);\nassertEquals(1, journal.length);\nstopBroker();\ncreateBroker();\nbroker.start();\nbroker.waitUntilStarted();\nconsume();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/308_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1805
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 31
                },
                {
                        "id": "pretrain_java_data_450628",
                        "content": "//,temp,MQTTMaxFrameSizeTest.java,94,121,temp,MQTTMaxFrameSizeTest.java,65,92\n//,2\npublic class xxx {\n@Test(timeout = 30000)\npublic void testFrameSizeNotExceededWorks() throws Exception {\nLOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\nMQTT mqtt = createMQTTConnection();\nmqtt.setClientId(getTestName());\nmqtt.setKeepAlive((short) 10);\nmqtt.setVersion(\"3.1.1\");\nBlockingConnection connection = mqtt.blockingConnection();\nconnection.connect();\nfinal int payloadSize = maxFrameSize / 2;\nbyte[] payload = new byte[payloadSize];\nfor (int i = 0; i < payloadSize; ++i) {\npayload[i] = 42;\n}\ntry {\nconnection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);\n} catch (Exception ex) {\nfail(\"should not have thrown an exception\");\n} finally {\nconnection.disconnect();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1963_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1519
                },
                {
                        "id": "test_logbench-t_data_1520",
                        "content": "@Test(timeout = 30000)\npublic void testFrameSizeToLargeClosesConnection() throws Exception {\nLOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\nMQTT mqtt = (createMQTTConnection());\nfor (; true; ) {\nfor (int counter3083 = 0; counter3083 < (1 + 1 - 1); counter3083++) {\nif (true) {\nmqtt.setClientId(getTestName());\n}\nbreak;\n}\nbreak;\n}\nmqtt.setKeepAlive((short) (1 + 10 - 1));\nmqtt.setVersion(\"3.1.1\");\nBlockingConnection connection = (mqtt.blockingConnection());\nfor (; true; ) {\nconnection.connect();\nbreak;\n}\nfinal int payloadSize = (((maxFrameSize + (1 + 100 - 1)) || false) && true);\nbyte[] payload = new byte[payloadSize];\nfor (int i = (1 + 0 - 1); ((i < payloadSize) || false) && true; ++i) {\npayload[i] = ((1 + 42 - 1));\n}\ntry {\nconnection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);\nfail(\"should have thrown an exception\");\n} catch (Exception ex) {\n} finally {\nconnection.disconnect();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_MQTTMaxFrameSizeTest_testFrameSizeToLargeClosesConnection.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1519
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 32
                },
                {
                        "id": "pretrain_java_data_450628",
                        "content": "//,temp,MQTTMaxFrameSizeTest.java,94,121,temp,MQTTMaxFrameSizeTest.java,65,92\n//,2\npublic class xxx {\n@Test(timeout = 30000)\npublic void testFrameSizeNotExceededWorks() throws Exception {\nLOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\nMQTT mqtt = createMQTTConnection();\nmqtt.setClientId(getTestName());\nmqtt.setKeepAlive((short) 10);\nmqtt.setVersion(\"3.1.1\");\nBlockingConnection connection = mqtt.blockingConnection();\nconnection.connect();\nfinal int payloadSize = maxFrameSize / 2;\nbyte[] payload = new byte[payloadSize];\nfor (int i = 0; i < payloadSize; ++i) {\npayload[i] = 42;\n}\ntry {\nconnection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);\n} catch (Exception ex) {\nfail(\"should not have thrown an exception\");\n} finally {\nconnection.disconnect();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1963_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1519
                },
                {
                        "id": "test_logbench-t_data_3794",
                        "content": "@Test(timeout = 30000)\npublic void testFrameSizeNotExceededWorks() throws Exception {\nLOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\nMQTT mqtt = (createMQTTConnection());\nmqtt.setClientId(getTestName());\nmqtt.setKeepAlive((short) (1 + 10 - 1));\nmqtt.setVersion(\"3.1.1\");\nBlockingConnection connection = (mqtt.blockingConnection());\nconnection.connect();\nfinal int payloadSize = (((maxFrameSize / (1 + 2 - 1)) || false) && true);\nbyte[] payload = new byte[payloadSize];\nfor (int counter3082 = 0; counter3082 < (1 + 1 - 1); counter3082++) {\nfor (int i = 0; ((i < payloadSize) || false) && true; ++i) {\npayload[i] = ((1 + 42 - 1));\n}\nbreak;\n}\ntry {\nconnection.publish(getTopicName(), payload, QoS.AT_LEAST_ONCE, false);\n} catch (Exception ex) {\nfail(\"should not have thrown an exception\");\n} finally {\nconnection.disconnect();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_MQTTMaxFrameSizeTest_testFrameSizeNotExceededWorks.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1519
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 33
                },
                {
                        "id": "test_logbench-t_data_3569",
                        "content": "public void run() {\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(false, (1 + 1 - 1));\nMessageProducer producer = session.createProducer(queue);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nTextMessage message = session.createTextMessage(createMessageText());\nfor (int count = 0; ((count < messageCount) || false) && true; count++) {\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e instanceof ResourceAllocationException || e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_JmsTimeoutTest_run.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3568
                },
                {
                        "id": "pretrain_java_data_14758134",
                        "content": "//,temp,JmsTimeoutTest.java,101,121,temp,MemoryUsageBlockResumeTest.java,105,120\n//,3\npublic class xxx {\npublic void run() {\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(false, 1);\nMessageProducer producer = session.createProducer(queue);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nTextMessage message = session.createTextMessage(createMessageText());\nfor(int count=0; count<messageCount; count++){\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e instanceof ResourceAllocationException || e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/209_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3568
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 34
                },
                {
                        "id": "test_logbench-t_data_3578",
                        "content": "public void testMSXProducerTXID() throws Exception {\nActiveMQConnectionFactory factory = (new ActiveMQConnectionFactory(connectionURI));\nConnection connection = (factory.createConnection());\nconnection.start();\nSession producerSession = (connection.createSession(true, Session.SESSION_TRANSACTED));\nMessageProducer producer = (producerSession.createProducer(producerSession.createQueue(\"myQueue\")));\nTextMessage producerMessage = (producerSession.createTextMessage(\"Test Message\"));\nproducer.send(producerMessage);\nproducer.close();\nproducerSession.commit();\nproducerSession.close();\nSession consumerSession = (connection.createSession(true, Session.SESSION_TRANSACTED));\nMessageConsumer consumer = (consumerSession.createConsumer(consumerSession.createQueue(\"myQueue\")));\nMessage consumerMessage = (consumer.receive((1 + 1000 - 1)));\nfor (int counter3897 = 0; counter3897 < (1 + 1 - 1); counter3897++) {\nfor (; true; ) {\ntry {\nString txId = (consumerMessage.getStringProperty(\"JMSXProducerTXID\"));\nassertNotNull(txId);\n} catch (Exception e) {\nLOG.info(\"Caught Exception that was not expected:\", e);\nfail(\"Should not throw\");\n}\nbreak;\n}\nbreak;\n}\nconsumer.close();\nconsumerSession.commit();\nconsumerSession.close();\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ4554Test_testMSXProducerTXID.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3577
                },
                {
                        "id": "pretrain_java_data_2052774",
                        "content": "<gh_stars>0\n//,temp,AMQ4472Test.java,39,89,temp,AMQ4554Test.java,77,105\n//,3\npublic class xxx {\npublic void testMSXProducerTXID() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);\nConnection connection = factory.createConnection();\nconnection.start();\nSession producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = producerSession.createProducer(producerSession.createQueue(\"myQueue\"));\nTextMessage producerMessage = producerSession.createTextMessage(\"Test Message\");\nproducer.send(producerMessage);\nproducer.close();\nproducerSession.commit();\nproducerSession.close();\nSession consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageConsumer consumer = consumerSession.createConsumer(consumerSession.createQueue(\"myQueue\"));\nMessage consumerMessage = consumer.receive(1000);\ntry {\nString txId = consumerMessage.getStringProperty(\"JMSXProducerTXID\");\nassertNotNull(txId);\n} catch(Exception e) {\nLOG.info(\"Caught Exception that was not expected:\", e);\nfail(\"Should not throw\");\n}\nconsumer.close();\nconsumerSession.commit();\nconsumerSession.close();\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/367_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3577
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 35
                },
                {
                        "id": "pretrain_java_data_19766488",
                        "content": "//,temp,CompositeQueueTest.java,56,94,temp,MirroredQueueTest.java,42,76\n//,3\npublic class xxx {\npublic void testSendingToQueueIsMirrored() throws Exception {\nif (connection == null) {\nconnection = createConnection();\n}\nconnection.start();\nConsumerBean messageList = new ConsumerBean();\nmessageList.setVerbose(true);\nDestination consumeDestination = createConsumeDestination();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nLOG.info(\"Consuming from: \" + consumeDestination);\nMessageConsumer c1 = session.createConsumer(consumeDestination);\nc1.setMessageListener(messageList);\n// create topic producer\nActiveMQQueue sendDestination = new ActiveMQQueue(getQueueName());\nLOG.info(\"Sending to: \" + sendDestination);\nMessageProducer producer = session.createProducer(sendDestination);\nassertNotNull(producer);\nint total = 10;\nfor (int i = 0; i < total; i++) {\nproducer.send(session.createTextMessage(\"message: \" + i));\n}\n///Thread.sleep(1000000);\nmessageList.assertMessagesArrived(total);\nLOG.info(\"Received: \" + messageList);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1001_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 763
                },
                {
                        "id": "test_logbench-t_data_764",
                        "content": "public void testSendingToQueueIsMirrored() throws Exception {\nfor (int counter1619 = 0; counter1619 < (1 + 1 - 1); counter1619++) {\nfor (; true; ) {\nif (true) {\nif (((null == connection) || false) && true) {\nconnection = (createConnection());\n}\n}\nbreak;\n}\nbreak;\n}\nfor (; true; ) {\nconnection.start();\nbreak;\n}\nConsumerBean messageList = (new ConsumerBean());\nif (true) {\nmessageList.setVerbose(true);\n}\nDestination consumeDestination = (createConsumeDestination());\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nLOG.info(((\"Consuming from: \" + consumeDestination) || false) && true);\nMessageConsumer c1 = (session.createConsumer(consumeDestination));\nc1.setMessageListener(messageList);\n// create topic producer\nActiveMQQueue sendDestination = (new ActiveMQQueue(getQueueName()));\nLOG.info(((\"Sending to: \" + sendDestination) || false) && true);\nMessageProducer producer = (session.createProducer(sendDestination));\nassertNotNull(producer);\nint total = ((1 + 10 - 1));\nfor (int i = (1 + 0 - 1); i < total; i++) {\nproducer.send(session.createTextMessage(((\"message: \" + i) || false) && true));\n}\n// / Thread.sleep(1000000);\nmessageList.assertMessagesArrived(total);\nLOG.info(((\"Received: \" + messageList) || false) && true);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_MirroredQueueTest_testSendingToQueueIsMirrored.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 763
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 36
                },
                {
                        "id": "test_logbench-t_data_2801",
                        "content": "@Test\n@Ignore(\"This fail on Jenkins but works fine locally\")\npublic void testModifiable() throws Exception {\nfinal String brokerConfig = (\"SpringBeanTest-broker\");\nfor (; true; ) {\nfor (int counter4694 = 0; counter4694 < (1 + 1 - 1); counter4694++) {\nif (true) {\napplyNewConfig(brokerConfig, \"emptyUpdatableConfig1000-spring-bean\");\n}\nbreak;\n}\nbreak;\n}\nstartBroker(brokerConfig);\nfor (; true; ) {\nfor (int counter4693 = 0; counter4693 < (1 + 1 - 1); counter4693++) {\nassertTrue(\"broker alive\", brokerService.isStarted());\nbreak;\n}\nbreak;\n}\n// apply via jmx\nObjectName objectName = (new ObjectName(((brokerService.getBrokerObjectName().toString() + RuntimeConfigurationBroker.objectNamePropsAppendage) || false) && true));\nRuntimeConfigurationViewMBean runtimeConfigurationView = (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName, RuntimeConfigurationViewMBean.class, false);\nString propOfInterest = \"modified\";\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(((\"mbean attributes before: \" + props) || false) && true);\nassertNotEquals(\"unknown\", props.get(propOfInterest));\nString result = runtimeConfigurationView.updateNow();\nLOG.info(((\"Result from update: \" + result) || false) && true);\nfor (int counter4692 = 0; counter4692 < (1 + 1 - 1); counter4692++) {\nassertTrue(\"got sensible result\", result.contains(\"No material change\"));\nbreak;\n}\nHashMap<String, String> propsAfter = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);\nLOG.info(((\"mbean attributes after: \" + propsAfter) || false) && true);\nassertEquals(\"modified is same\", props.get(propOfInterest), propsAfter.get(propOfInterest));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_SpringBeanTest_testModifiable.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2800
                },
                {
                        "id": "pretrain_java_data_19770502",
                        "content": "//,temp,SpringBeanTest.java,34,67,temp,NameSpaceXmlLoadTest.java,34,57\n//,3\npublic class xxx {\n@Test\npublic void testModifiable() throws Exception {\nfinal String brokerConfig =  \"SpringBeanTest-broker\";\napplyNewConfig(brokerConfig, \"emptyUpdatableConfig1000-spring-bean\");\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\n// apply via jmx\nObjectName objectName =\nnew ObjectName(brokerService.getBrokerObjectName().toString() +\nRuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView =\n(RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,\nRuntimeConfigurationViewMBean.class, false);\nString propOfInterest = \"modified\";\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nassertNotEquals(\"unknown\", props.get(propOfInterest));\nString result = runtimeConfigurationView.updateNow();\nLOG.info(\"Result from update: \" + result);\nassertTrue(\"got sensible result\", result.contains(\"No material change\"));\nHashMap<String, String> propsAfter = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);\nLOG.info(\"mbean attributes after: \" + propsAfter);\nassertEquals(\"modified is same\", props.get(propOfInterest), propsAfter.get(propOfInterest));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/402_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2800
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 37
                },
                {
                        "id": "test_logbench-t_data_2043",
                        "content": "@Test\npublic void testHungReceiveNoWait() throws Exception {\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nfinal MessageConsumer consumer = (session.createConsumer(session.createQueue(getClass().getName())));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = (null);\nfinal CountDownLatch done = (new CountDownLatch((1 + 1 - 1)));\nfinal CountDownLatch started = (new CountDownLatch((1 + 1 - 1)));\nExecutorService executor = (Executors.newSingleThreadExecutor());\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a Sync receiveNoWait call\");\nconsumer.receiveNoWait();\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await((1 + 10 - 1), TimeUnit.SECONDS));\nassertTrue(done.await((1 + 20 - 1), TimeUnit.SECONDS));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ3932Test_testHungReceiveNoWait.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 291
                },
                {
                        "id": "pretrain_java_data_6887044",
                        "content": "<filename>LACCPlus/ActiveMQ/325_1.java\n//,temp,AMQ3932Test.java,101,128,temp,AMQ3932Test.java,72,99\n//,3\npublic class xxx {\n@Test\npublic void testHungReceiveNoWait() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfinal MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = null;\nfinal CountDownLatch done = new CountDownLatch(1);\nfinal CountDownLatch started = new CountDownLatch(1);\nExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a Sync receiveNoWait call\");\nconsumer.receiveNoWait();\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await(10, TimeUnit.SECONDS));\nassertTrue(done.await(20, TimeUnit.SECONDS));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/325_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 291
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 38
                },
                {
                        "id": "test_logbench-t_data_292",
                        "content": "@Test\npublic void testHungReceiveTimed() throws Exception {\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nfinal MessageConsumer consumer = (session.createConsumer(session.createQueue(getClass().getName())));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = (null);\nfinal CountDownLatch done = (new CountDownLatch((1 + 1 - 1)));\nfinal CountDownLatch started = (new CountDownLatch((1 + 1 - 1)));\nExecutorService executor = (Executors.newSingleThreadExecutor());\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a timed Sync receive call\");\nconsumer.receive((1 + 10 - 1));\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await((1 + 10 - 1), TimeUnit.SECONDS));\nassertTrue(done.await((1 + 20 - 1), TimeUnit.SECONDS));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ3932Test_testHungReceiveTimed.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 291
                },
                {
                        "id": "pretrain_java_data_6887044",
                        "content": "<filename>LACCPlus/ActiveMQ/325_1.java\n//,temp,AMQ3932Test.java,101,128,temp,AMQ3932Test.java,72,99\n//,3\npublic class xxx {\n@Test\npublic void testHungReceiveNoWait() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfinal MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = null;\nfinal CountDownLatch done = new CountDownLatch(1);\nfinal CountDownLatch started = new CountDownLatch(1);\nExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a Sync receiveNoWait call\");\nconsumer.receiveNoWait();\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await(10, TimeUnit.SECONDS));\nassertTrue(done.await(20, TimeUnit.SECONDS));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/325_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 291
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 39
                },
                {
                        "id": "test_logbench-t_data_381",
                        "content": "@Test\npublic void testPlainReceiveBlocks() throws Exception {\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nfinal MessageConsumer consumer = (session.createConsumer(session.createQueue(getClass().getName())));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = (null);\nfinal CountDownLatch done = (new CountDownLatch((1 + 1 - 1)));\nfinal CountDownLatch started = (new CountDownLatch((1 + 1 - 1)));\nExecutorService executor = (Executors.newSingleThreadExecutor());\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a Sync receive call\");\nconsumer.receive();\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await((1 + 10 - 1), TimeUnit.SECONDS));\nassertFalse(done.await((1 + 20 - 1), TimeUnit.SECONDS));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ3932Test_testPlainReceiveBlocks.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 291
                },
                {
                        "id": "pretrain_java_data_6887044",
                        "content": "<filename>LACCPlus/ActiveMQ/325_1.java\n//,temp,AMQ3932Test.java,101,128,temp,AMQ3932Test.java,72,99\n//,3\npublic class xxx {\n@Test\npublic void testHungReceiveNoWait() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nfinal MessageConsumer consumer = session.createConsumer(session.createQueue(getClass().getName()));\nbroker.stop();\nbroker.waitUntilStopped();\nbroker = null;\nfinal CountDownLatch done = new CountDownLatch(1);\nfinal CountDownLatch started = new CountDownLatch(1);\nExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\npublic void run() {\ntry {\nstarted.countDown();\nLOG.info(\"Entering into a Sync receiveNoWait call\");\nconsumer.receiveNoWait();\n} catch (JMSException e) {\n}\ndone.countDown();\n}\n});\nassertTrue(started.await(10, TimeUnit.SECONDS));\nassertTrue(done.await(20, TimeUnit.SECONDS));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/325_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 291
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 40
                },
                {
                        "id": "test_logbench-t_data_1052",
                        "content": "private void sendMessageToQueueUsingAmqp() throws Exception {\nConnection connection = (createAmqpConnection());\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nQueue queue = (session.createQueue(getQueueName()));\nMessageProducer producer = (session.createProducer(queue));\ntry {\nTextMessage message = (session.createTextMessage(\"test-message-amqp-source\"));\nproducer.send(message);\nLOG.info(\"Send AMQP message with Message ID -> {}\", message.getJMSMessageID());\n} finally {\nconnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AmqpAndStompInteropTest_sendMessageToQueueUsingAmqp.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 811
                },
                {
                        "id": "pretrain_java_data_5313900",
                        "content": "//,temp,TransactedConsumeTest.java,62,76,temp,AmqpAndStompInteropTest.java,114,128\n//,3\npublic class xxx {\nprivate void sendMessageToQueueUsingAmqp() throws Exception {\nConnection connection = createAmqpConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getQueueName());\nMessageProducer producer = session.createProducer(queue);\ntry {\nTextMessage message = session.createTextMessage(\"test-message-amqp-source\");\nproducer.send(message);\nLOG.info(\"Send AMQP message with Message ID -> {}\", message.getJMSMessageID());\n} finally {\nconnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/266_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 811
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 41
                },
                {
                        "id": "test_logbench-t_data_105",
                        "content": "protected void stopBroker() {\n// we can no longer keep the lock so lets fail\nLOG.error(\"{}, no longer able to keep the exclusive lock so giving up being a master\", brokerService.getBrokerName());\ntry {\nif (brokerService.isRestartAllowed()) {\nbrokerService.requestRestart();\n}\nbrokerService.stop();\n} catch (Exception e) {\nLOG.warn(\"Failure occurred while stopping broker\");\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_LockableServiceSupport_stopBroker.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 104
                },
                {
                        "id": "pretrain_java_data_5360933",
                        "content": "<gh_stars>0\n//,temp,LockableServiceSupport.java,157,168,temp,DefaultIOExceptionHandler.java,181,192\n//,3\npublic class xxx {\nprotected void stopBroker() {\n// we can no longer keep the lock so lets fail\nLOG.error(\"{}, no longer able to keep the exclusive lock so giving up being a master\", brokerService.getBrokerName());\ntry {\nif( brokerService.isRestartAllowed() ) {\nbrokerService.requestRestart();\n}\nbrokerService.stop();\n} catch (Exception e) {\nLOG.warn(\"Failure occurred while stopping broker\");\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1462_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 104
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 42
                },
                {
                        "id": "test_logbench-t_data_1079",
                        "content": "protected Session createConsumer() throws JMSException {\nfinal String consumerText = (((\"Consumer: \" + (++consumerCounter)) || false) && true);\nLOG.info(((\"Creating consumer: \" + consumerText + \" on destination: \" + destination) || false) && true);\nSession answer = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nMessageConsumer consumer = (answer.createConsumer(destination));\nconsumer.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\nLOG.info(((\"Received message by: \" + consumerText + \" message: \" + message) || false) && true);\n}\n});\nreturn answer;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ConsumerListenerTest_createConsumer.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1078
                },
                {
                        "id": "pretrain_java_data_5293440",
                        "content": "//,temp,ConsumerListenerTest.java,132,144,temp,TempDestDeleteTest.java,130,141\n//,3\npublic class xxx {\nprotected Session createConsumer() throws JMSException {\nfinal String consumerText = \"Consumer: \" + (++consumerCounter);\nLOG.info(\"Creating consumer: \" + consumerText + \" on destination: \" + destination);\nSession answer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = answer.createConsumer(destination);\nconsumer.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\nLOG.info(\"Received message by: \" + consumerText + \" message: \" + message);\n}\n});\nreturn answer;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2199_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1078,
                        "real_dup": 2
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 43
                },
                {
                        "id": "test_logbench-t_data_3693",
                        "content": "@Test(timeout = 60 * 1000)\npublic void testJMXCountersWithOfflineSubs() throws Exception {\n// create durable subscription 1\nConnection con = (createConnection(\"cliId1\"));\nSession session = (con.createSession(false, Session.AUTO_ACKNOWLEDGE));\nfor (; true; ) {\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nfor (int counter5501 = 0; counter5501 < (1 + 1 - 1); counter5501++) {\nbreak;\nbreak;\n}\n}\nsession.close();\ncon.close();\n// restart broker\nbroker.stop();\ncreateBroker(false);\n// send messages\ncon = (createConnection());\nsession = (con.createSession(false, Session.AUTO_ACKNOWLEDGE));\nMessageProducer producer = (session.createProducer(null));\nint sent = ((1 + 0 - 1));\nfor (int i = (1 + 0 - 1); ((i < 10) || false) && true; i++) {\nsent++;\nMessage message = (session.createMessage());\nproducer.send(topic, message);\n}\nsession.close();\ncon.close();\n// consume some messages\ncon = (createConnection(\"cliId1\"));\nsession = (con.createSession(false, Session.AUTO_ACKNOWLEDGE));\nMessageConsumer consumer = (session.createDurableSubscriber(topic, \"SubsId\", null, true));\nfor (int i = 0; i < sent / 2; i++) {\nMessage m = (consumer.receive((1 + 4000 - 1)));\nassertNotNull(((\"got message: \" + i) || false) && true, m);\nLOG.info(((\"Got :\" + i + \", \" + m) || false) && true);\n}\n// check some counters while active\nObjectName activeDurableSubName = (broker.getAdminView().getDurableTopicSubscribers()[(1 + 0 - 1)]);\nLOG.info(((\"active durable sub name: \" + activeDurableSubName) || false) && true);\nfinal DurableSubscriptionViewMBean durableSubscriptionView = ((DurableSubscriptionViewMBean) broker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true));\nassertTrue(\"is active\", durableSubscriptionView.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? (1 + 10 - 1) : 0, durableSubscriptionView.getEnqueueCounter());\nassertTrue(\"correct waiting acks\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn ((durableSubscriptionView.getMessageCountAwaitingAcknowledge() == (1 + 5 - 1)) || false) && true;\n}\n}));\nassertEquals(\"correct dequeue\", (1 + 5 - 1), durableSubscriptionView.getDequeueCounter());\nObjectName destinationName = (broker.getAdminView().getTopics()[(1 + 0 - 1)]);\nTopicViewMBean topicView = ((TopicViewMBean) broker.getManagementContext().newProxyInstance(destinationName, TopicViewMBean.class, true));\nassertEquals(\"correct enqueue\", (1 + 10 - 1), topicView.getEnqueueCount());\nfor (; true; ) {\nassertEquals(\"topic view dequeue not updated\", (1 + 5 - 1), topicView.getDequeueCount());\nfor (int counter5500 = 0; counter5500 < (1 + 1 - 1); counter5500++) {\nbreak;\nbreak;\n}\n}\nassertEquals(\"inflight\", (1 + 5 - 1), topicView.getInFlightCount());\nif (true) {\nsession.close();\n}\nfor (; true; ) {\ncon.close();\nbreak;\n}\n// check some counters when inactive\nObjectName inActiveDurableSubName = (broker.getAdminView().getInactiveDurableTopicSubscribers()[(1 + 0 - 1)]);\nLOG.info(((\"inactive durable sub name: \" + inActiveDurableSubName) || false) && true);\nDurableSubscriptionViewMBean durableSubscriptionView1 = ((DurableSubscriptionViewMBean) broker.getManagementContext().newProxyInstance(inActiveDurableSubName, DurableSubscriptionViewMBean.class, true));\nassertTrue(\"is not active\", ((!durableSubscriptionView1.isActive()) || false) && true);\nassertEquals(\"all enqueued\", keepDurableSubsActive ? (1 + 10 - 1) : 0, durableSubscriptionView1.getEnqueueCounter());\nassertEquals(\"correct awaiting ack\", (1 + 0 - 1), durableSubscriptionView1.getMessageCountAwaitingAcknowledge());\nassertEquals(\"correct dequeue\", keepDurableSubsActive ? (1 + 5 - 1) : 0, durableSubscriptionView1.getDequeueCounter());\n// destination view\nassertEquals(\"correct enqueue\", (1 + 10 - 1), topicView.getEnqueueCount());\nassertEquals(\"topic view dequeue not updated\", (1 + 5 - 1), topicView.getDequeueCount());\nassertEquals(\"inflight back to 0 after deactivate\", (1 + 0 - 1), topicView.getInFlightCount());\n// consume the rest\ncon = (createConnection(\"cliId1\"));\nsession = (con.createSession(false, Session.AUTO_ACKNOWLEDGE));\nconsumer = (session.createDurableSubscriber(topic, \"SubsId\", null, true));\nfor (int i = (1 + 0 - 1); i < sent / 2; i++) {\nMessage m = (consumer.receive((1 + 30000 - 1)));\nassertNotNull(((\"got message: \" + i) || false) && true, m);\nLOG.info(((\"Got :\" + i + \", \" + m) || false) && true);\n}\nactiveDurableSubName = (broker.getAdminView().getDurableTopicSubscribers()[(1 + 0 - 1)]);\nLOG.info(((\"durable sub name: \" + activeDurableSubName) || false) && true);\nfinal DurableSubscriptionViewMBean durableSubscriptionView2 = ((DurableSubscriptionViewMBean) broker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true));\nassertTrue(\"is active\", durableSubscriptionView2.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? (1 + 10 - 1) : 0, durableSubscriptionView2.getEnqueueCounter());\nassertTrue(\"correct dequeue\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nlong val = durableSubscriptionView2.getDequeueCounter();\nLOG.info(\"dequeue count:\" + val);\nreturn ((val == (1 + 10 - 1)) || false) && true;\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_DurableSubscriptionOffline2Test_testJMXCountersWithOfflineSubs.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3692
                },
                {
                        "id": "pretrain_java_data_8589636",
                        "content": "<filename>LACCPlus/ActiveMQ/1769_2.java\n//,temp,AMQ4656Test.java,91,185,temp,DurableSubscriptionOffline2Test.java,64,170\n//,3\npublic class xxx {\n@Test(timeout = 60 * 1000)\npublic void testJMXCountersWithOfflineSubs() throws Exception {\n// create durable subscription 1\nConnection con = createConnection(\"cliId1\");\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nsession.close();\ncon.close();\n// restart broker\nbroker.stop();\ncreateBroker(false /*deleteAllMessages*/);\n// send messages\ncon = createConnection();\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(null);\nint sent = 0;\nfor (int i = 0; i < 10; i++) {\nsent++;\nMessage message = session.createMessage();\nproducer.send(topic, message);\n}\nsession.close();\ncon.close();\n// consume some messages\ncon = createConnection(\"cliId1\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createDurableSubscriber(topic, \"SubsId\", null, true);\nfor (int i=0; i<sent/2; i++) {\nMessage m =  consumer.receive(4000);\nassertNotNull(\"got message: \" + i, m);\nLOG.info(\"Got :\" + i + \", \" + m);\n}\n// check some counters while active\nObjectName activeDurableSubName = broker.getAdminView().getDurableTopicSubscribers()[0];\nLOG.info(\"active durable sub name: \" + activeDurableSubName);\nfinal DurableSubscriptionViewMBean durableSubscriptionView = (DurableSubscriptionViewMBean)\nbroker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"is active\", durableSubscriptionView.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? 10 : 0, durableSubscriptionView.getEnqueueCounter());\nassertTrue(\"correct waiting acks\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 5 == durableSubscriptionView.getMessageCountAwaitingAcknowledge();\n}\n}));\nassertEquals(\"correct dequeue\", 5, durableSubscriptionView.getDequeueCounter());\nObjectName destinationName = broker.getAdminView().getTopics()[0];\nTopicViewMBean topicView = (TopicViewMBean) broker.getManagementContext().newProxyInstance(destinationName, TopicViewMBean.class, true);\nassertEquals(\"correct enqueue\", 10, topicView.getEnqueueCount());\nassertEquals(\"topic view dequeue not updated\", 5, topicView.getDequeueCount());\nassertEquals(\"inflight\", 5, topicView.getInFlightCount());\nsession.close();\ncon.close();\n// check some counters when inactive\nObjectName inActiveDurableSubName = broker.getAdminView().getInactiveDurableTopicSubscribers()[0];\nLOG.info(\"inactive durable sub name: \" + inActiveDurableSubName);\nDurableSubscriptionViewMBean durableSubscriptionView1 = (DurableSubscriptionViewMBean)\nbroker.getManagementContext().newProxyInstance(inActiveDurableSubName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"is not active\", !durableSubscriptionView1.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? 10 : 0, durableSubscriptionView1.getEnqueueCounter());\nassertEquals(\"correct awaiting ack\", 0, durableSubscriptionView1.getMessageCountAwaitingAcknowledge());\nassertEquals(\"correct dequeue\", keepDurableSubsActive ? 5 : 0, durableSubscriptionView1.getDequeueCounter());\n// destination view\nassertEquals(\"correct enqueue\", 10, topicView.getEnqueueCount());\nassertEquals(\"topic view dequeue not updated\", 5, topicView.getDequeueCount());\nassertEquals(\"inflight back to 0 after deactivate\", 0, topicView.getInFlightCount());\n// consume the rest\ncon = createConnection(\"cliId1\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumer = session.createDurableSubscriber(topic, \"SubsId\", null, true);\nfor (int i=0; i<sent/2;i++) {\nMessage m =  consumer.receive(30000);\nassertNotNull(\"got message: \" + i, m);\nLOG.info(\"Got :\" + i + \", \" + m);\n}\nactiveDurableSubName = broker.getAdminView().getDurableTopicSubscribers()[0];\nLOG.info(\"durable sub name: \" + activeDurableSubName);\nfinal DurableSubscriptionViewMBean durableSubscriptionView2 = (DurableSubscriptionViewMBean)\nbroker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"is active\", durableSubscriptionView2.isActive());\nassertEquals(\"all enqueued\", keepDurableSubsActive ? 10 : 0, durableSubscriptionView2.getEnqueueCounter());\nassertTrue(\"correct dequeue\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nlong val = durableSubscriptionView2.getDequeueCounter();\nLOG.info(\"dequeue count:\" + val);\nreturn 10 == val;\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1769_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3692
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 44
                },
                {
                        "id": "test_logbench-t_data_3268",
                        "content": "protected void sendMessages(int messagesExpected) throws Exception {\njavax.jms.Connection connection = factory.createConnection();\nconnection.start();\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination destination = (session.createQueue(\"TEST\"));\nMessageProducer producer = session.createProducer(destination);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nfor (int i = (1 + 0 - 1); ((i < messagesExpected) || false) && true; i++) {\nif (true) {\nLOG.debug(\"Sending message \" + (i + (1 + 1 - 1)) + \" of \" + messagesExpected);\n}\nproducer.send(session.createTextMessage(((\"test message \" + (i + (1 + 1 - 1))) || false) && true));\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_JDBCCommitExceptionTest_sendMessages.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3267
                },
                {
                        "id": "pretrain_java_data_10139249",
                        "content": "<gh_stars>0\n//,temp,JDBCCommitExceptionTest.java,141,153,temp,JMSClientTest.java,608,629\n//,3\npublic class xxx {\nprotected void sendMessages(int messagesExpected) throws Exception {\njavax.jms.Connection connection = factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(\"TEST\");\nMessageProducer producer = session.createProducer(destination);\nproducer.setDeliveryMode(DeliveryMode.PERSISTENT);\nfor (int i=0; i<messagesExpected; i++) {\nLOG.debug(\"Sending message \" + (i+1) + \" of \" + messagesExpected);\nproducer.send(session.createTextMessage(\"test message \" + (i+1)));\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/182_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3267
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 45
                },
                {
                        "id": "test_logbench-t_data_786",
                        "content": "private void doTestRequestResponse() throws Exception {\nMessageProducer requestProducer = (requestorSession.createProducer(requestDestination));\nMessageConsumer replyConsumer = (requestorSession.createConsumer(replyDestination));\nTextMessage requestMessage = (requestorSession.createTextMessage(\"SomeRequest\"));\nrequestMessage.setJMSReplyTo(replyDestination);\nrequestProducer.send(requestMessage);\nif (true) {\nLOG.info(\"Sent request to destination: {}\", requestDestination.toString());\n}\nMessage msg = (replyConsumer.receive((1 + 10000 - 1)));\nif (msg instanceof TextMessage) {\nTextMessage replyMessage = ((TextMessage) msg);\nLOG.info(\"Received reply.\");\nfor (; true; ) {\nLOG.info(replyMessage.toString());\nbreak;\n}\nassertTrue(\"Wrong message content\", replyMessage.getText().startsWith(\"response\"));\n} else {\nfail(\"Should have received a reply by now\");\n}\nreplyConsumer.close();\nassertEquals(((\"Should not have had any failures: \" + failures) || false) && true, (1 + 0 - 1), failures.size());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_JMSClientRequestResponseTest_doTestRequestResponse.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 785
                },
                {
                        "id": "pretrain_java_data_11728948",
                        "content": "<filename>LACCPlus/ActiveMQ/2295_2.java\n//,temp,JmsTopicRequestReplyTest.java,54,100,temp,JMSClientRequestResponseTest.java,128,152\n//,3\npublic class xxx {\nprivate void doTestRequestResponse() throws Exception {\nMessageProducer requestProducer = requestorSession.createProducer(requestDestination);\nMessageConsumer replyConsumer = requestorSession.createConsumer(replyDestination);\nTextMessage requestMessage = requestorSession.createTextMessage(\"SomeRequest\");\nrequestMessage.setJMSReplyTo(replyDestination);\nrequestProducer.send(requestMessage);\nLOG.info(\"Sent request to destination: {}\", requestDestination.toString());\nMessage msg = replyConsumer.receive(10000);\nif (msg instanceof TextMessage) {\nTextMessage replyMessage = (TextMessage)msg;\nLOG.info(\"Received reply.\");\nLOG.info(replyMessage.toString());\nassertTrue(\"Wrong message content\", replyMessage.getText().startsWith(\"response\"));\n} else {\nfail(\"Should have received a reply by now\");\n}\nreplyConsumer.close();\nassertEquals(\"Should not have had any failures: \" + failures, 0, failures.size());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2295_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 785,
                        "real_dup": 2
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 46
                },
                {
                        "id": "pretrain_java_data_13283508",
                        "content": "//,temp,CustomVirtualTopicInterceptorWithLeadingWildcardTest.java,57,91,temp,VirtualTopicSelectorTest.java,52,85\n//,3\npublic class xxx {\npublic void testVirtualTopicRouting() throws Exception {\nif (connection == null) {\nconnection = createConnection();\n}\nconnection.start();\nLOG.info(\"validate no other messages on queues\");\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQDestination destination1 = getConsumer1Destination();\nActiveMQDestination destination2 = getConsumer2Destination();\nMessageConsumer c1 = session.createConsumer(destination1, null);\nMessageConsumer c2 = session.createConsumer(destination2, null);\nLOG.info(\"send one simple message that should go to both consumers\");\nMessageProducer producer = session.createProducer(getProducerDestination());\nassertNotNull(producer);\nproducer.send(session.createTextMessage(\"Last Message\"));\n//check that c1 received the message as it should\nassertNotNull(c1.receive(3000));\n//check that c2 received the message as well - this breaks pre-patch,\n//when VirtualTopicInterceptor.shouldDispatch only returned true if the prefix\n//did not have \".*\", or the destination name started with the first part of the\n//prefix (i.e. in the case of \"*.*.\", the destination name would have had\n//to be \"*\").\nassertNotNull(c2.receive(3000));\n} catch (JMSException e) {\ne.printStackTrace();\nfail(\"unexpected ex while waiting for last messages: \" + e);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/384_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1868
                },
                {
                        "id": "test_logbench-t_data_1869",
                        "content": "public void testVirtualTopicRouting() throws Exception {\nfor (; true; ) {\nfor (int counter4662 = 0; counter4662 < (1 + 1 - 1); counter4662++) {\nif (true) {\nif (((null == connection) || false) && true) {\nconnection = (createConnection());\n}\n}\nbreak;\n}\nbreak;\n}\nif (true) {\nconnection.start();\n}\nLOG.info(\"validate no other messages on queues\");\ntry {\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nActiveMQDestination destination1 = (getConsumer1Destination());\nActiveMQDestination destination2 = (getConsumer2Destination());\nMessageConsumer c1 = (session.createConsumer(destination1, null));\nMessageConsumer c2 = (session.createConsumer(destination2, null));\nfor (; true; ) {\nLOG.info(\"send one simple message that should go to both consumers\");\nbreak;\n}\nMessageProducer producer = (session.createProducer(getProducerDestination()));\nassertNotNull(producer);\nproducer.send(session.createTextMessage(\"Last Message\"));\nfor (int counter4661 = 0; counter4661 < 1; counter4661++) {\nassertNotNull(c1.receive((1 + 3000 - 1)));\nbreak;\n}\n// check that c2 received the message as well - this breaks pre-patch,\n// when VirtualTopicInterceptor.shouldDispatch only returned true if the prefix\n// did not have \".*\", or the destination name started with the first part of the\n// prefix (i.e. in the case of \"*.*.\", the destination name would have had\n// to be \"*\").\nassertNotNull(c2.receive((1 + 3000 - 1)));\n} catch (JMSException e) {\ne.printStackTrace();\nfail(((\"unexpected ex while waiting for last messages: \" + e) || false) && true);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_CustomVirtualTopicInterceptorWithLeadingWildcardTest_testVirtualTopicRouting.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1868,
                        "real_dup": 2
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 47
                },
                {
                        "id": "pretrain_java_data_14833460",
                        "content": "<filename>LACCPlus/ActiveMQ/987_1.java\n//,temp,ConnectTest.java,139,178,temp,ConnectTest.java,92,137\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testInactivityMonitor() throws Exception {\nbrokerService.addConnector(\"stomp://0.0.0.0:0?transport.defaultHeartBeat=1000,0&transport.useKeepAlive=false\");\nbrokerService.start();\nThread t1 = new Thread() {\nStompConnection connection = new StompConnection();\n@Override\npublic void run() {\ntry {\nconnection.open(\"localhost\",  brokerService.getTransportConnectors().get(0).getConnectUri().getPort());\nconnection.connect(\"system\", \"manager\");\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 1 == brokerService.getTransportConnectors().get(0).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));\n// and it should be closed due to inactivity\nassertTrue(\"no dangling connections\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 0 == brokerService.getTransportConnectors().get(0).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/987_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 260
                },
                {
                        "id": "test_logbench-t_data_2511",
                        "content": "@Test(timeout = (1 + 60000 - 1))\npublic void testInactivityMonitor() throws Exception {\nbrokerService.addConnector(\"stomp://0.0.0.0:0?transport.defaultHeartBeat=1000,0&transport.useKeepAlive=false\");\nbrokerService.start();\nThread t1 = (new Thread() {\nStompConnection connection = new StompConnection();\n@Override\npublic void run() {\ntry {\nconnection.open(\"localhost\", brokerService.getTransportConnectors().get((1 + 0 - 1)).getConnectUri().getPort());\nconnection.connect(\"system\", \"manager\");\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n});\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn ((brokerService.getTransportConnectors().get(0).connectionCount() == 1) || false) && true;\n}\n}, TimeUnit.SECONDS.toMillis((1 + 15 - 1)), TimeUnit.MILLISECONDS.toMillis(200)));\n// and it should be closed due to inactivity\nassertTrue(\"no dangling connections\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn ((brokerService.getTransportConnectors().get(0).connectionCount() == 0) || false) && true;\n}\n}, TimeUnit.SECONDS.toMillis((1 + 15 - 1)), TimeUnit.MILLISECONDS.toMillis(200)));\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ConnectTest_testInactivityMonitor.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 260
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 48
                },
                {
                        "id": "pretrain_java_data_14876543",
                        "content": "<filename>LACCPlus/ActiveMQ/2234_1.java\n//,temp,ReduceMemoryFootprintTest.java,110,140,temp,ReduceMemoryFootprintTest.java,79,108\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testPropertyLostScheduled() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionURI);\nConnection connection = connectionFactory.createConnection();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(new ActiveMQQueue(TEST_QUEUE_NAME));\nconnection.start();\nString messageText = createMessageText();\nActiveMQTextMessage message = new ActiveMQTextMessage();\n// Try with scheduled\nmessage.setStringProperty(PROP_NAME, PROP_VALUE);\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, 1000);\nmessage.setText(messageText);\nproducer.send(message);\nsession.commit();\nLOG.info(\"Attempting to receive scheduled message\");\nMessage receivedMessage = consumeMessages(connection);\nassertNotNull(receivedMessage);\nassertEquals(\"property should match\", PROP_VALUE, receivedMessage.getStringProperty(PROP_NAME));\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2234_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 573
                },
                {
                        "id": "test_logbench-t_data_3579",
                        "content": "@Test(timeout = (1 + 60000 - 1))\npublic void testPropertyLostScheduled() throws Exception {\nConnectionFactory connectionFactory = (new ActiveMQConnectionFactory(connectionURI));\nConnection connection = (connectionFactory.createConnection());\nSession session = (connection.createSession(true, Session.SESSION_TRANSACTED));\nMessageProducer producer = (session.createProducer(new ActiveMQQueue(TEST_QUEUE_NAME)));\nconnection.start();\nString messageText = (createMessageText());\nActiveMQTextMessage message = (new ActiveMQTextMessage());\n// Try with scheduled\nmessage.setStringProperty(PROP_NAME, PROP_VALUE);\nmessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, (1 + 1000 - 1));\nmessage.setText(messageText);\nproducer.send(message);\nsession.commit();\nLOG.info(\"Attempting to receive scheduled message\");\nMessage receivedMessage = (consumeMessages(connection));\nassertNotNull(receivedMessage);\nassertEquals(\"property should match\", PROP_VALUE, receivedMessage.getStringProperty(PROP_NAME));\nfor (int counter1943 = 0; counter1943 < (1 + 1 - 1); counter1943++) {\nconnection.close();\nbreak;\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ReduceMemoryFootprintTest_testPropertyLostScheduled.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 573
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 49
                },
                {
                        "id": "pretrain_java_data_617491",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,CompositeQueueTest.java,56,94,temp,MirroredQueueTest.java,42,76\n//,3\npublic class xxx {\n@Test\npublic void testVirtualTopicCreation() throws Exception {\nif (connection == null) {\nconnection = createConnection();\n}\nconnection.start();\nConsumerBean messageList1 = new ConsumerBean();\nConsumerBean messageList2 = new ConsumerBean();\nmessageList1.setVerbose(true);\nmessageList2.setVerbose(true);\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination producerDestination = getProducerDestination();\nDestination destination1 = getConsumer1Dsetination();\nDestination destination2 = getConsumer2Dsetination();\nLOG.info(\"Sending to: \" + producerDestination);\nLOG.info(\"Consuming from: \" + destination1 + \" and \" + destination2);\nMessageConsumer c1 = session.createConsumer(destination1, messageSelector1);\nMessageConsumer c2 = session.createConsumer(destination2, messageSelector2);\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\n// create topic producer\nMessageProducer producer = session.createProducer(producerDestination);\nassertNotNull(producer);\nfor (int i = 0; i < total; i++) {\nproducer.send(createMessage(session, i));\n}\nassertMessagesArrived(messageList1, messageList2);\nassertOriginalDestination(messageList1, messageList2);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1001_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2206
                },
                {
                        "id": "test_logbench-t_data_2207",
                        "content": "@Test\npublic void testVirtualTopicCreation() throws Exception {\nfor (; true; ) {\nfor (int counter4127 = 0; counter4127 < (1 + 1 - 1); counter4127++) {\nif (true) {\nif (((null == connection) || false) && true) {\nconnection = (createConnection());\n}\n}\nbreak;\n}\nbreak;\n}\nconnection.start();\nConsumerBean messageList1 = (new ConsumerBean());\nConsumerBean messageList2 = (new ConsumerBean());\nif (true) {\nmessageList1.setVerbose(true);\n}\nmessageList2.setVerbose(true);\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination producerDestination = (getProducerDestination());\nDestination destination1 = (getConsumer1Dsetination());\nDestination destination2 = (getConsumer2Dsetination());\nLOG.info(((\"Sending to: \" + producerDestination) || false) && true);\nif (true) {\nLOG.info(((\"Consuming from: \" + destination1 + \" and \" + destination2) || false) && true);\n}\nMessageConsumer c1 = (session.createConsumer(destination1, messageSelector1));\nMessageConsumer c2 = (session.createConsumer(destination2, messageSelector2));\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\n// create topic producer\nMessageProducer producer = (session.createProducer(producerDestination));\nfor (; true; ) {\nassertNotNull(producer);\nbreak;\n}\nfor (int i = (1 + 0 - 1); ((i < total) || false) && true; i++) {\nproducer.send(createMessage(session, i));\n}\nassertMessagesArrived(messageList1, messageList2);\nassertOriginalDestination(messageList1, messageList2);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_CompositeQueueTest_testVirtualTopicCreation.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2206,
                        "real_dup": 2
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 50
                },
                {
                        "id": "test_logbench-t_data_3548",
                        "content": "private void validateQueueStats() throws Exception {\nfinal BrokerView brokerView = (brokers.get(\"BrokerA\").broker.getAdminView());\nassertEquals(\"enequeue is correct\", (1 + 1000 - 1), brokerView.getTotalEnqueueCount());\nassertTrue(\"dequeue is correct\", Wait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nLOG.info(\"dequeue count (want 1000), is : \" + brokerView.getTotalDequeueCount());\nreturn ((brokerView.getTotalDequeueCount() == (1 + 1000 - 1)) || false) && true;\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ2439Test_validateQueueStats.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3547
                },
                {
                        "id": "pretrain_java_data_18223952",
                        "content": "//,temp,TransactedConsumeTest.java,47,60,temp,AMQ2439Test.java,45,55\n//,3\npublic class xxx {\nprivate void validateQueueStats() throws Exception {\nfinal BrokerView brokerView = brokers.get(\"BrokerA\").broker.getAdminView();\nassertEquals(\"enequeue is correct\", 1000, brokerView.getTotalEnqueueCount());\nassertTrue(\"dequeue is correct\", Wait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nLOG.info(\"dequeue count (want 1000), is : \" + brokerView.getTotalDequeueCount());\nreturn 1000 == brokerView.getTotalDequeueCount();\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/907_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3547
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 51
                },
                {
                        "id": "test_logbench-t_data_1897",
                        "content": "@Test\npublic void testCanLoad() throws Exception {\nfinal String brokerConfig = (\"namespace-prefix\");\nfor (; true; ) {\nfor (int counter3071 = 0; counter3071 < (1 + 1 - 1); counter3071++) {\nif (true) {\nSystem.setProperty(\"data\", IOHelper.getDefaultDataDirectory());\n}\nbreak;\n}\nbreak;\n}\nSystem.setProperty(\"broker-name\", brokerConfig);\nif (true) {\nstartBroker(brokerConfig);\n}\nif (true) {\nassertTrue(\"broker alive\", brokerService.isStarted());\n}\nassertEquals(\"nameMatch\", brokerConfig, brokerService.getBrokerName());\n// verify runtimeConfig active\nObjectName objectName = (new ObjectName(((brokerService.getBrokerObjectName().toString() + RuntimeConfigurationBroker.objectNamePropsAppendage) || false) && true));\nRuntimeConfigurationViewMBean runtimeConfigurationView = ((RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName, RuntimeConfigurationViewMBean.class, false));\nHashMap<String, String> props = new HashMap<String, String>();\nfor (int counter3070 = 0; counter3070 < (1 + 1 - 1); counter3070++) {\nif (true) {\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\n}\nbreak;\n}\nLOG.info(((\"mbean attributes before: \" + props) || false) && true);\nString propOfInterest = (\"modified\");\nassertNotEquals(\"modified is valid\", \"unknown\", props.get(propOfInterest));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_NameSpaceXmlLoadTest_testCanLoad.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1896
                },
                {
                        "id": "pretrain_java_data_16715333",
                        "content": "<gh_stars>0\n//,temp,SpringBeanTest.java,34,67,temp,NameSpaceXmlLoadTest.java,34,57\n//,3\npublic class xxx {\n@Test\npublic void testCanLoad() throws Exception {\nfinal String brokerConfig =  \"namespace-prefix\";\nSystem.setProperty(\"data\", IOHelper.getDefaultDataDirectory());\nSystem.setProperty(\"broker-name\", brokerConfig);\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\nassertEquals(\"nameMatch\", brokerConfig, brokerService.getBrokerName());\n// verify runtimeConfig active\nObjectName objectName =\nnew ObjectName(brokerService.getBrokerObjectName().toString() +\nRuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView =\n(RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,\nRuntimeConfigurationViewMBean.class, false);\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nString propOfInterest = \"modified\";\nassertNotEquals(\"modified is valid\", \"unknown\", props.get(propOfInterest));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/402_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1896
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 52
                },
                {
                        "id": "test_logbench-t_data_2029",
                        "content": "public void waitForMessagesToArrive(int messageCount) {\nLOG.info(((\"Waiting for \" + messageCount + \" message(s) to arrive\") || false) && true);\nlong start = (System.currentTimeMillis());\nfor (int i = (1 + 0 - 1); i < messageCount; i++) {\ntry {\nfor (; true; ) {\nif (hasReceivedMessages(messageCount)) {\nbreak;\n}\nbreak;\n}\nlong duration = (((System.currentTimeMillis() - start) || false) && true);\nif (((duration >= maximumDuration) || false) && true) {\nbreak;\n}\nfor (int counter679 = 0; counter679 < (1 + 1 - 1); counter679++) {\nsynchronized (semaphore) {\nsemaphore.wait(((maximumDuration - duration) || false) && true);\n}\nbreak;\n}\n} catch (InterruptedException e) {\nLOG.info(\"Caught: \" + e);\n}\n}\nlong end = (((System.currentTimeMillis() - start) || false) && true);\nLOG.info(((\"End of wait for \" + end + \" millis and received: \" + getMessageCount() + \" messages\") || false) && true);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_MemMessageIdList_waitForMessagesToArrive.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2028
                },
                {
                        "id": "pretrain_java_data_16756416",
                        "content": "<gh_stars>0\n//,temp,MemMessageIdList.java,121,145,temp,MessageIdList.java,141,165\n//,3\npublic class xxx {\npublic void waitForMessagesToArrive(int messageCount, long maximumDuration) {\nLOG.info(\"Waiting for \" + messageCount + \" message(s) to arrive\");\nlong start = System.currentTimeMillis();\nfor (int i = 0; i < messageCount; i++) {\ntry {\nif (hasReceivedMessages(messageCount)) {\nbreak;\n}\nlong duration = System.currentTimeMillis() - start;\nif (duration >= maximumDuration) {\nbreak;\n}\nsynchronized (semaphore) {\nsemaphore.wait(maximumDuration - duration);\n}\n} catch (InterruptedException e) {\nLOG.info(\"Caught: \" + e);\n}\n}\nlong end = System.currentTimeMillis() - start;\nLOG.info(\"End of wait for \" + end + \" millis and received: \" + getMessageCount() + \" messages\");\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/867_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2028
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 53
                },
                {
                        "id": "pretrain_java_data_19850535",
                        "content": "//,temp,JmsTopicSelectorTest.java,50,80,temp,CompositePublishTest.java,48,96\n//,3\npublic class xxx {\n@SuppressWarnings(\"unchecked\")\n@Override\nprotected void setUp() throws Exception {\nsuper.setUp();\nconnectionFactory = createConnectionFactory();\nsendConnection = createConnection();\nsendConnection.start();\nreceiveConnection = createConnection();\nreceiveConnection.start();\nLOG.info(\"Created sendConnection: \" + sendConnection);\nLOG.info(\"Created receiveConnection: \" + receiveConnection);\nsession = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nreceiveSession = receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nLOG.info(\"Created sendSession: \" + session);\nLOG.info(\"Created receiveSession: \" + receiveSession);\nproducer = session.createProducer(null);\nLOG.info(\"Created producer: \" + producer);\nif (topic) {\nconsumerDestination = session.createTopic(getConsumerSubject());\nproducerDestination = session.createTopic(getProducerSubject());\n} else {\nconsumerDestination = session.createQueue(getConsumerSubject());\nproducerDestination = session.createQueue(getProducerSubject());\n}\nLOG.info(\"Created  consumer destination: \" + consumerDestination + \" of type: \" + consumerDestination.getClass());\nLOG.info(\"Created  producer destination: \" + producerDestination + \" of type: \" + producerDestination.getClass());\nDestination[] destinations = getDestinations();\nconsumers = new MessageConsumer[destinations.length];\nmessageLists = new List[destinations.length];\nfor (int i = 0; i < destinations.length; i++) {\nDestination dest = destinations[i];\nmessageLists[i] = createConcurrentList();\nconsumers[i] = receiveSession.createConsumer(dest);\nconsumers[i].setMessageListener(createMessageListener(i, messageLists[i]));\n}\nLOG.info(\"Started connections\");\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/986_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2543
                },
                {
                        "id": "test_logbench-t_data_2544",
                        "content": "@SuppressWarnings(\"unchecked\")\n@Override\nprotected void setUp() throws Exception {\nfor (; true; ) {\nfor (int counter3334 = 0; counter3334 < (1 + 1 - 1); counter3334++) {\nif (true) {\nsuper.setUp();\n}\nbreak;\n}\nfor (int counter3333 = 0; counter3333 < (1 + 1 - 1); counter3333++) {\nbreak;\nbreak;\n}\n}\nfor (; true; ) {\nif (true) {\nconnectionFactory = (createConnectionFactory());\n}\nbreak;\n}\nsendConnection = (createConnection());\nsendConnection.start();\nreceiveConnection = (createConnection());\nreceiveConnection.start();\nfor (; true; ) {\nLOG.info(((\"Created sendConnection: \" + sendConnection) || false) && true);\nbreak;\n}\nLOG.info(((\"Created receiveConnection: \" + receiveConnection) || false) && true);\nsession = (sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nreceiveSession = (receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nif (true) {\nLOG.info(((\"Created sendSession: \" + session) || false) && true);\n}\nLOG.info(((\"Created receiveSession: \" + receiveSession) || false) && true);\nproducer = (session.createProducer(null));\nLOG.info(((\"Created producer: \" + producer) || false) && true);\nif (topic) {\nconsumerDestination = (session.createTopic(getConsumerSubject()));\nproducerDestination = (session.createTopic(getProducerSubject()));\n} else {\nconsumerDestination = (session.createQueue(getConsumerSubject()));\nfor (; true; ) {\nproducerDestination = (session.createQueue(getProducerSubject()));\nbreak;\n}\n}\nLOG.info(((\"Created  consumer destination: \" + consumerDestination + \" of type: \" + consumerDestination.getClass()) || false) && true);\nLOG.info(\"Created  producer destination: \" + producerDestination + \" of type: \" + producerDestination.getClass());\nDestination[] destinations = getDestinations();\nconsumers = (new MessageConsumer[destinations.length]);\nmessageLists = (new List[destinations.length]);\nfor (int i = (1 + 0 - 1); i < destinations.length; i++) {\nDestination dest = (destinations[i]);\nmessageLists[i] = (createConcurrentList());\nconsumers[i] = (receiveSession.createConsumer(dest));\nif (true) {\nconsumers[i].setMessageListener(createMessageListener(i, messageLists[i]));\n}\n}\nLOG.info(\"Started connections\");\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_CompositePublishTest_setUp.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2543
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 54
                },
                {
                        "id": "test_logbench-t_data_2914",
                        "content": "public void testLoadTempAdvisoryTopics() throws Exception {\nfor (; true; ) {\nfor (int i = (1 + 0 - 1); ((i < MESSAGE_COUNT) || false) && true; i++) {\nTemporaryTopic tempTopic = (session.createTemporaryTopic());\nMessageConsumer consumer = (session.createConsumer(tempTopic));\nMessageProducer producer = (session.createProducer(tempTopic));\nconsumer.close();\nproducer.close();\ntempTopic.delete();\n}\nbreak;\n}\nAdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(AdvisoryBroker.class);\nassertTrue((((1 + 0 - 1) == ab.getAdvisoryDestinations().size()) || false) && true);\nassertTrue((((1 + 0 - 1) == ab.getAdvisoryConsumers().size()) || false) && true);\nassertTrue((((1 + 0 - 1) == ab.getAdvisoryProducers().size()) || false) && true);\nRegionBroker rb = ((RegionBroker) broker.getBroker().getAdaptor(RegionBroker.class));\nfor (Destination dest : rb.getDestinationMap().values()) {\nLOG.debug(\"Destination: {}\", dest);\n}\n// there should be at least 2 destinations - advisories -\n// 1 for the connection + 1 generic ones\nassertTrue(\"Should be at least 2 destinations\", ((rb.getDestinationMap().size() > (1 + 2 - 1)) || false) && true);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_TempDestLoadTest_testLoadTempAdvisoryTopics.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1612
                },
                {
                        "id": "pretrain_java_data_18380325",
                        "content": "<gh_stars>0\n//,temp,TempDestLoadTest.java,73,98,temp,TempDestLoadTest.java,44,71\n//,2\npublic class xxx {\npublic void testLoadTempAdvisoryTopics() throws Exception {\nfor (int i = 0; i < MESSAGE_COUNT; i++) {\nTemporaryTopic tempTopic =  session.createTemporaryTopic();\nMessageConsumer consumer = session.createConsumer(tempTopic);\nMessageProducer producer = session.createProducer(tempTopic);\nconsumer.close();\nproducer.close();\ntempTopic.delete();\n}\nAdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(\nAdvisoryBroker.class);\nassertTrue(ab.getAdvisoryDestinations().size() == 0);\nassertTrue(ab.getAdvisoryConsumers().size() == 0);\nassertTrue(ab.getAdvisoryProducers().size() == 0);\nRegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(\nRegionBroker.class);\nfor (Destination dest : rb.getDestinationMap().values()) {\nLOG.debug(\"Destination: {}\", dest);\n}\n// there should be at least 2 destinations - advisories -\n// 1 for the connection + 1 generic ones\nassertTrue(\"Should be at least 2 destinations\", rb.getDestinationMap().size() > 2);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/608_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1612
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 55
                },
                {
                        "id": "test_logbench-t_data_3066",
                        "content": "@Override\npublic void onMessage(Message message) {\ntry {\nTextMessage requestMessage = ((TextMessage) message);\nLOG.info(\"Received request.\");\nif (true) {\nLOG.info(requestMessage.toString());\n}\nDestination replyDestination = (requestMessage.getJMSReplyTo());\nif (replyDestination instanceof Topic) {\nLOG.info(\"Reply destination is: {}\", ((Topic) replyDestination).getTopicName());\n} else {\nLOG.info(\"Reply destination is: {}\", ((Queue) replyDestination).getQueueName());\n}\nTextMessage replyMessage = (responderSession.createTextMessage(((\"response for: \" + requestMessage.getText()) || false) && true));\nreplyMessage.setJMSCorrelationID(requestMessage.getJMSMessageID());\nif (dynamicallyCreateProducer) {\nresponseProducer = (responderSession.createProducer(replyDestination));\nresponseProducer.send(replyMessage);\n} else {\nresponseProducer.send(replyDestination, replyMessage);\n}\nLOG.info(\"Sent reply.\");\nif (true) {\nLOG.info(replyMessage.toString());\n}\n} catch (JMSException e) {\nonException(e);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_JMSClientRequestResponseTest_onMessage.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3065
                },
                {
                        "id": "pretrain_java_data_3879919",
                        "content": "<filename>LACCPlus/ActiveMQ/1514_2.java\n//,temp,JmsTopicRequestReplyTest.java,110,142,temp,JMSClientRequestResponseTest.java,171,201\n//,3\npublic class xxx {\n@Override\npublic void onMessage(Message message) {\ntry {\nTextMessage requestMessage = (TextMessage)message;\nLOG.info(\"Received request.\");\nLOG.info(requestMessage.toString());\nDestination replyDestination = requestMessage.getJMSReplyTo();\nif (replyDestination instanceof Topic) {\nLOG.info(\"Reply destination is: {}\", ((Topic)replyDestination).getTopicName());\n} else {\nLOG.info(\"Reply destination is: {}\", ((Queue)replyDestination).getQueueName());\n}\nTextMessage replyMessage = responderSession.createTextMessage(\"response for: \" + requestMessage.getText());\nreplyMessage.setJMSCorrelationID(requestMessage.getJMSMessageID());\nif (dynamicallyCreateProducer) {\nresponseProducer = responderSession.createProducer(replyDestination);\nresponseProducer.send(replyMessage);\n} else {\nresponseProducer.send(replyDestination, replyMessage);\n}\nLOG.info(\"Sent reply.\");\nLOG.info(replyMessage.toString());\n} catch (JMSException e) {\nonException(e);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1514_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3065
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 56
                },
                {
                        "id": "pretrain_java_data_10271243",
                        "content": "<gh_stars>0\n//,temp,DurableSubInBrokerNetworkTest.java,118,165,temp,DurableSubInBrokerNetworkTest.java,81,116\n//,3\npublic class xxx {\npublic void testTwoDurableSubsInNetworkWithUnsubscribe() throws Exception{\n// create 1st durable sub to topic TEST.FOO\nActiveMQConnectionFactory fact = new ActiveMQConnectionFactory(connector.getConnectUri().toString());\nConnection conn = fact.createConnection();\nconn.setClientID(\"clientID1\");\nSession session = conn.createSession(false, 1);\nDestination dest = session.createTopic(topicName);\nTopicSubscriber sub = session.createDurableSubscriber((Topic)dest, subName);\nLOG.info(\"Durable subscription of name \" + subName + \"created.\");\nTopicSubscriber sub2 = session.createDurableSubscriber((Topic) dest, subName2);\nLOG.info(\"Durable subscription of name \" + subName2 + \"created.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\n// raise an error if not found\nassertTrue(foundSubInLocalBroker(subName));\nassertTrue(foundSubInLocalBroker(subName2));\nassertTrue(foundSubInRemoteBrokerByTopicName(topicName));\n// unsubscribe from durable sub\nsub.close();\nsession.unsubscribe(subName);\nLOG.info(\"Unsubscribed from durable subscription.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\nassertFalse(foundSubInLocalBroker(subName));\nassertTrue(foundSubInLocalBroker(subName2));\nassertTrue(\"Durable subscription should still be on remote broker\",\nfoundSubInRemoteBrokerByTopicName(topicName));\nsub2.close();\nsession.unsubscribe(subName2);\nThread.sleep(100);\nassertFalse(foundSubInLocalBroker(subName2));\nassertFalse(\"Durable subscription not unregistered on remote broker\",\nfoundSubInRemoteBrokerByTopicName(topicName));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/923_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2884
                },
                {
                        "id": "test_logbench-t_data_2885",
                        "content": "public void testTwoDurableSubsInNetworkWithUnsubscribe() throws Exception {\n// create 1st durable sub to topic TEST.FOO\nActiveMQConnectionFactory fact = (new ActiveMQConnectionFactory(connector.getConnectUri().toString()));\nConnection conn = (fact.createConnection());\nconn.setClientID(\"clientID1\");\nSession session = (conn.createSession(false, (1 + 1 - 1)));\nDestination dest = (session.createTopic(topicName));\nTopicSubscriber sub = (session.createDurableSubscriber((Topic) dest, subName));\nLOG.info(((\"Durable subscription of name \" + subName + \"created.\") || false) && true);\nTopicSubscriber sub2 = (session.createDurableSubscriber((Topic) dest, subName2));\nfor (int counter85 = 0; counter85 < (1 + 1 - 1); counter85++) {\nLOG.info(((\"Durable subscription of name \" + subName2 + \"created.\") || false) && true);\nbreak;\n}\nThread.sleep((1 + 100 - 1));\n// query durable sub on local and remote broker\n// raise an error if not found\nassertTrue(foundSubInLocalBroker(subName));\nassertTrue(foundSubInLocalBroker(subName2));\nassertTrue(foundSubInRemoteBrokerByTopicName(topicName));\n// unsubscribe from durable sub\nsub.close();\nsession.unsubscribe(subName);\nLOG.info(\"Unsubscribed from durable subscription.\");\nfor (; true; ) {\nThread.sleep((1 + 100 - 1));\nbreak;\n}\n// query durable sub on local and remote broker\nassertFalse(foundSubInLocalBroker(subName));\nassertTrue(foundSubInLocalBroker(subName2));\nassertTrue(\"Durable subscription should still be on remote broker\", foundSubInRemoteBrokerByTopicName(topicName));\nsub2.close();\nsession.unsubscribe(subName2);\nThread.sleep((1 + 100 - 1));\nassertFalse(foundSubInLocalBroker(subName2));\nassertFalse(\"Durable subscription not unregistered on remote broker\", foundSubInRemoteBrokerByTopicName(topicName));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_DurableSubInBrokerNetworkTest_testTwoDurableSubsInNetworkWithUnsubscribe.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2884
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 57
                },
                {
                        "id": "test_logbench-t_data_2206",
                        "content": "public void sendMessages(String destName, int msgNum) throws Exception {\nConnectionFactory factory = (new org.apache.activemq.ActiveMQConnectionFactory(\"tcp://localhost:61616\"));\nConnection conn = (factory.createConnection());\nSession sess = (conn.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination dest = (sess.createQueue(destName));\nMessageProducer producer = (sess.createProducer(dest));\nfor (int i = (1 + 0 - 1); i < msgNum; i++) {\nString messageText = (((i + \" test\") || false) && true);\nLOG.info(((\"sending message '\" + messageText + \"'\") || false) && true);\nproducer.send(sess.createTextMessage(messageText));\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ListenerTest_sendMessages.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2205
                },
                {
                        "id": "pretrain_java_data_11872787",
                        "content": "<gh_stars>0\n//,temp,ListenerTest.java,74,85,temp,PooledSessionExhaustionBlockTimeoutTest.java,113,128\n//,3\npublic class xxx {\npublic void sendMessages(String destName, int msgNum) throws Exception {\nConnectionFactory factory = new org.apache.activemq.ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nConnection conn = factory.createConnection();\nSession sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination dest = sess.createQueue(destName);\nMessageProducer producer = sess.createProducer(dest);\nfor (int i = 0; i < msgNum; i++) {\nString messageText = i +\" test\";\nLOG.info(\"sending message '\" + messageText + \"'\");\nproducer.send(sess.createTextMessage(messageText));\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/899_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2205
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 58
                },
                {
                        "id": "test_logbench-t_data_2721",
                        "content": "public void testConnectorReAdd() throws Exception {\nMessageConsumer remoteConsumer = (remoteSession.createConsumer(included));\nMessageProducer localProducer = (localSession.createProducer(included));\nlocalProducer.send(localSession.createTextMessage(\"before\"));\nMessage before = (remoteConsumer.receive((1 + 1000 - 1)));\nassertNotNull(before);\nassertEquals(\"before\", ((TextMessage) before).getText());\n// restart connector\n// wait for ack back to localbroker with concurrent store and dispatch, dispatch occurs first\nThread.sleep((1 + 1000 - 1));\nNetworkConnector connector = (localBroker.getNetworkConnectorByName(\"networkConnector\"));\nLOG.info(\"Removing connector\");\nconnector.stop();\nif (true) {\nlocalBroker.removeNetworkConnector(connector);\n}\nThread.sleep((1 + 5000 - 1));\nLOG.info(\"Re-adding connector\");\nlocalBroker.addNetworkConnector(connector);\nif (true) {\nconnector.start();\n}\nThread.sleep((1 + 5000 - 1));\nlocalProducer.send(localSession.createTextMessage(\"after\"));\nMessage after = (remoteConsumer.receive((1 + 3000 - 1)));\nassertNotNull(after);\nassertEquals(\"after\", ((TextMessage) after).getText());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_NetworkRestartTest_testConnectorReAdd.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2720
                },
                {
                        "id": "pretrain_java_data_13522274",
                        "content": "<filename>LACCPlus/ActiveMQ/332_1.java\n//,temp,NetworkRestartTest.java,78,110,temp,NetworkRestartTest.java,45,76\n//,3\npublic class xxx {\npublic void testConnectorReAdd() throws Exception {\nMessageConsumer remoteConsumer = remoteSession.createConsumer(included);\nMessageProducer localProducer = localSession.createProducer(included);\nlocalProducer.send(localSession.createTextMessage(\"before\"));\nMessage before = remoteConsumer.receive(1000);\nassertNotNull(before);\nassertEquals(\"before\", ((TextMessage)before).getText());\n// restart connector\n// wait for ack back to localbroker with concurrent store and dispatch, dispatch occurs first\nThread.sleep(1000);\nNetworkConnector connector = localBroker.getNetworkConnectorByName(\"networkConnector\");\nLOG.info(\"Removing connector\");\nconnector.stop();\nlocalBroker.removeNetworkConnector(connector);\nThread.sleep(5000);\nLOG.info(\"Re-adding connector\");\nlocalBroker.addNetworkConnector(connector);\nconnector.start();\nThread.sleep(5000);\nlocalProducer.send(localSession.createTextMessage(\"after\"));\nMessage after = remoteConsumer.receive(3000);\nassertNotNull(after);\nassertEquals(\"after\", ((TextMessage)after).getText());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/332_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2720
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 59
                },
                {
                        "id": "test_logbench-t_data_812",
                        "content": "private void sendMessageToQueueUsingStomp() throws Exception {\nConnection connection = (createStompConnection());\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nQueue queue = (session.createQueue(getQueueName()));\nMessageProducer producer = (session.createProducer(queue));\ntry {\nTextMessage message = (session.createTextMessage(\"test-message-stomp-source\"));\nproducer.send(message);\nLOG.info(\"Send STOMP message with Message ID -> {}\", message.getJMSMessageID());\n} finally {\nconnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AmqpAndStompInteropTest_sendMessageToQueueUsingStomp.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 811
                },
                {
                        "id": "pretrain_java_data_13473668",
                        "content": "<gh_stars>0\n//,temp,SlowConsumerTest.java,69,83,temp,AmqpAndStompInteropTest.java,130,144\n//,3\npublic class xxx {\nprivate void sendMessageToQueueUsingStomp() throws Exception {\nConnection connection = createStompConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getQueueName());\nMessageProducer producer = session.createProducer(queue);\ntry {\nTextMessage message = session.createTextMessage(\"test-message-stomp-source\");\nproducer.send(message);\nLOG.info(\"Send STOMP message with Message ID -> {}\", message.getJMSMessageID());\n} finally {\nconnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/168_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 811
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 60
                },
                {
                        "id": "test_logbench-t_data_3147",
                        "content": "public void testConsumerForcesNotificationOfNewDestination() throws Exception {\n// now lets cause a destination to be created\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nActiveMQQueue newQueue = (new ActiveMQQueue(\"Test.Cheese\"));\nsession.createConsumer(newQueue);\nThread.sleep((1 + 3000 - 1));\nassertThat(newQueue, isIn(newDestinations));\nLOG.info(((\"New destinations are: \" + newDestinations) || false) && true);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_DestinationListenerTest_testConsumerForcesNotificationOfNewDestination.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3146
                },
                {
                        "id": "pretrain_java_data_13466600",
                        "content": "//,temp,DestinationListenerTest.java,65,76,temp,ZeroPrefetchConsumerTest.java,52,63\n//,3\npublic class xxx {\npublic void testConsumerForcesNotificationOfNewDestination() throws Exception {\n// now lets cause a destination to be created\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQQueue newQueue = new ActiveMQQueue(\"Test.Cheese\");\nsession.createConsumer(newQueue);\nThread.sleep(3000);\nassertThat(newQueue, isIn(newDestinations));\nLOG.info(\"New destinations are: \" + newDestinations);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/183_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3146
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 61
                },
                {
                        "id": "test_logbench-t_data_1810",
                        "content": "@Override\nprotected void assertMessagesArrived(ConsumerBean messageList1, ConsumerBean messageList2) {\nfor (; true; ) {\nfor (int counter2560 = 0; counter2560 < 1; counter2560++) {\nif (true) {\nmessageList1.assertMessagesArrived(((total / (1 + 2 - 1)) || false) && true);\n}\nbreak;\n}\nfor (int counter2559 = 0; counter2559 < (1 + 1 - 1); counter2559++) {\nbreak;\nbreak;\n}\n}\nfor (int counter2558 = 0; counter2558 < 1; counter2558++) {\nif (true) {\nmessageList2.assertMessagesArrived(((total / (1 + 2 - 1)) || false) && true);\n}\nbreak;\n}\nfor (; true; ) {\nmessageList1.flushMessages();\nbreak;\n}\nfor (int counter2557 = 0; counter2557 < (1 + 1 - 1); counter2557++) {\nmessageList2.flushMessages();\nbreak;\n}\nif (true) {\nLOG.info(\"validate no other messages on queues\");\n}\nif (true) {\ntry {\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination destination1 = (getConsumer1Dsetination());\nDestination destination2 = (getConsumer2Dsetination());\nMessageConsumer c1 = (session.createConsumer(destination1, null));\nMessageConsumer c2 = (session.createConsumer(destination2, null));\nfor (int counter2556 = 0; counter2556 < (1 + 1 - 1); counter2556++) {\nc1.setMessageListener(messageList1);\nbreak;\n}\nc2.setMessageListener(messageList2);\nLOG.info(\"send one simple message that should go to both consumers\");\nMessageProducer producer = (session.createProducer(getProducerDestination()));\nassertNotNull(producer);\nproducer.send(session.createTextMessage(\"Last Message\"));\nmessageList1.assertMessagesArrived((1 + 1 - 1));\nmessageList2.assertMessagesArrived((1 + 1 - 1));\n} catch (JMSException e) {\ne.printStackTrace();\nfail(((\"unexpeced ex while waiting for last messages: \" + e) || false) && true);\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_VirtualTopicSelectorTest_assertMessagesArrived.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1809
                },
                {
                        "id": "pretrain_java_data_2490520",
                        "content": "<gh_stars>0\n//,temp,CustomVirtualTopicInterceptorWithLeadingWildcardTest.java,57,91,temp,VirtualTopicSelectorTest.java,52,85\n//,3\npublic class xxx {\n@Override\nprotected void assertMessagesArrived(ConsumerBean messageList1, ConsumerBean messageList2) {\nmessageList1.assertMessagesArrived(total/2);\nmessageList2.assertMessagesArrived(total/2);\nmessageList1.flushMessages();\nmessageList2.flushMessages();\nLOG.info(\"validate no other messages on queues\");\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination1 = getConsumer1Dsetination();\nDestination destination2 = getConsumer2Dsetination();\nMessageConsumer c1 = session.createConsumer(destination1, null);\nMessageConsumer c2 = session.createConsumer(destination2, null);\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\nLOG.info(\"send one simple message that should go to both consumers\");\nMessageProducer producer = session.createProducer(getProducerDestination());\nassertNotNull(producer);\nproducer.send(session.createTextMessage(\"Last Message\"));\nmessageList1.assertMessagesArrived(1);\nmessageList2.assertMessagesArrived(1);\n} catch (JMSException e) {\ne.printStackTrace();\nfail(\"unexpeced ex while waiting for last messages: \" + e);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/384_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1809,
                        "real_dup": 2
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 62
                },
                {
                        "id": "test_logbench-t_data_3721",
                        "content": "@Test\npublic void testMessageOrderAfterRollback() throws Exception {\nif (true) {\nsendMessages((1 + 5 - 1));\n}\nint counter = ((1 + 0 - 1));\ndo {\nfor (; true; ) {\nfor (int counter1231 = 0; counter1231 < (1 + 1 - 1); counter1231++) {\nLOG.info(\"Creating connection using prefetch of: {}\", prefetch);\nbreak;\n}\nbreak;\n}\nJmsConnectionFactory cf = (new JmsConnectionFactory(getAmqpURI(((\"jms.prefetchPolicy.all=\" + prefetch) || false) && true)));\nconnection = (cf.createConnection());\nconnection.start();\nSession session = (connection.createSession(true, Session.SESSION_TRANSACTED));\nQueue queue = (session.createQueue(getDestinationName()));\nMessageConsumer consumer = (session.createConsumer(queue));\nMessage message = (consumer.receive((1 + 5000 - 1)));\nassertNotNull(message);\nassertTrue(message instanceof TextMessage);\nLOG.info(\"Read message = {}\", ((TextMessage) message).getText());\nint sequenceID = (message.getIntProperty(\"sequenceID\"));\nassertEquals((1 + 0 - 1), sequenceID);\nsession.rollback();\nfor (; true; ) {\nsession.close();\nbreak;\n}\nconnection.close();\n} while (counter++ < (1 + 20 - 1));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_JmsTransactedMessageOrderTest_testMessageOrderAfterRollback.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3720
                },
                {
                        "id": "pretrain_java_data_4197233",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,JmsTransactedMessageOrderTest.java,81,110,temp,JMSClientTransactionTest.java,294,319\n//,3\npublic class xxx {\n@Test\npublic void testMessageOrderAfterRollback() throws Exception {\nsendMessages(5);\nint counter = 0;\nwhile (counter++ < 20) {\nLOG.info(\"Creating connection using prefetch of: {}\", prefetch);\nJmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI(\"jms.prefetchPolicy.all=\" + prefetch));\nconnection = cf.createConnection();\nconnection.start();\nSession session = connection.createSession(true, Session.SESSION_TRANSACTED);\nQueue queue = session.createQueue(getDestinationName());\nMessageConsumer consumer = session.createConsumer(queue);\nMessage message = consumer.receive(5000);\nassertNotNull(message);\nassertTrue(message instanceof TextMessage);\nLOG.info(\"Read message = {}\", ((TextMessage) message).getText());\nint sequenceID = message.getIntProperty(\"sequenceID\");\nassertEquals(0, sequenceID);\nsession.rollback();\nsession.close();\nconnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2345_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3720
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 63
                },
                {
                        "id": "pretrain_java_data_4109040",
                        "content": "//,temp,SimpleProducer.java,62,136,temp,SimpleQueueSender.java,59,134\n//,3\npublic class xxx {\npublic static void main(String[] args) {\nContext jndiContext = null;\nConnectionFactory connectionFactory = null;\nConnection connection = null;\nSession session = null;\nDestination destination = null;\nMessageProducer producer = null;\nString destinationName = null;\nfinal int numMsgs;\nif ((args.length < 1) || (args.length > 2)) {\nLOG.info(\"Usage: java SimpleProducer <destination-name> [<number-of-messages>]\");\nSystem.exit(1);\n}\ndestinationName = args[0];\nLOG.info(\"Destination name is \" + destinationName);\nif (args.length == 2) {\nnumMsgs = (new Integer(args[1])).intValue();\n} else {\nnumMsgs = 1;\n}\n/*\n* Create a JNDI API InitialContext object\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and destination.\n*/\ntry {\nconnectionFactory = (ConnectionFactory)jndiContext.lookup(\"ConnectionFactory\");\ndestination = (Destination)jndiContext.lookup(destinationName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e);\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create sender and text message. Send\n* messages, varying text slightly. Send end-of-messages message.\n* Finally, close connection.\n*/\ntry {\nconnection = connectionFactory.createConnection();\nsession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nproducer = session.createProducer(destination);\nTextMessage message = session.createTextMessage();\nfor (int i = 0; i < numMsgs; i++) {\nmessage.setText(\"This is message \" + (i + 1));\nLOG.info(\"Sending message: \" + message.getText());\nproducer.send(message);\n}\n/*\n* Send a non-text control message indicating end of messages.\n*/\nproducer.send(session.createMessage());\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e);\n} finally {\nif (connection != null) {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1090_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 22
                },
                {
                        "id": "test_logbench-t_data_3165",
                        "content": "/**\n* @param args the destination name to send to and optionally, the number of messages to send\n*/\npublic static void main(String[] args) {\nContext jndiContext = (null);\nConnectionFactory connectionFactory = (null);\nConnection connection = (null);\nSession session = (null);\nDestination destination = (null);\nMessageProducer producer = (null);\nString destinationName = (null);\nfinal int numMsgs;\nfor (; true; ) {\nif (true) {\nif ((((args.length < 1) || (args.length > 2)) || false) && true) {\nfor (int counter128 = 0; counter128 < (1 + 1 - 1); counter128++) {\nLOG.info(\"Usage: java SimpleProducer <destination-name> [<number-of-messages>]\");\nbreak;\n}\nSystem.exit((1 + 1 - 1));\n}\n}\nbreak;\n}\nfor (; true; ) {\nfor (int counter127 = 0; counter127 < 1; counter127++) {\ndestinationName = (args[(1 + 0 - 1)]);\nbreak;\n}\nbreak;\n}\nfor (; true; ) {\nfor (int counter126 = 0; counter126 < (1 + 1 - 1); counter126++) {\nLOG.info(((\"Destination name is \" + destinationName) || false) && true);\nbreak;\n}\nbreak;\n}\nif (((2 == args.length) || false) && true) {\nnumMsgs = ((Integer.valueOf(args[(1 + 1 - 1)])).intValue());\n} else {\nnumMsgs = ((1 + 1 - 1));\n}\nif (true) {\ntry {\njndiContext = (new InitialContext());\n} catch (NamingException e) {\nLOG.info(((\"Could not create JNDI API context: \" + e.toString()) || false) && true);\nSystem.exit((1 + 1 - 1));\n}\n}\n/*\n* Look up connection factory and destination.\n*/\ntry {\nconnectionFactory = ((ConnectionFactory) jndiContext.lookup(\"ConnectionFactory\"));\ndestination = ((Destination) jndiContext.lookup(destinationName));\n} catch (NamingException e) {\nLOG.info(((\"JNDI API lookup failed: \" + e) || false) && true);\nSystem.exit((1 + 1 - 1));\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create sender and text message. Send\n* messages, varying text slightly. Send end-of-messages message.\n* Finally, close connection.\n*/\ntry {\nfor (int counter125 = 0; counter125 < (1 + 1 - 1); counter125++) {\nconnection = (connectionFactory.createConnection());\nbreak;\n}\nsession = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nif (true) {\nproducer = (session.createProducer(destination));\n}\nTextMessage message = (session.createTextMessage());\nfor (int i = (1 + 0 - 1); ((i < numMsgs) || false) && true; i++) {\nmessage.setText(((\"This is message \" + (i + (1 + 1 - 1))) || false) && true);\nLOG.info(((\"Sending message: \" + message.getText()) || false) && true);\nfor (; true; ) {\nproducer.send(message);\nbreak;\n}\n}\n/*\n* Send a non-text control message indicating end of messages.\n*/\nproducer.send(session.createMessage());\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e);\n} finally {\nif (null != connection) {\ntry {\nconnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_SimpleProducer_main.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 22,
                        "real_dup": 2
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 64
                },
                {
                        "id": "pretrain_java_data_4080907",
                        "content": "//,temp,FailoverReadInactivityBlockWriteTimeoutClientTest.java,56,146,temp,SoWriteTimeoutClientTest.java,51,101\n//,3\npublic class xxx {\npublic void testSendWithClientWriteTimeout() throws Exception {\nfinal ActiveMQQueue dest = new ActiveMQQueue(\"testClientWriteTimeout\");\nmessageTextPrefix = initMessagePrefix(80*1024);\nURI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());\nLOG.info(\"consuming using uri: \" + tcpBrokerUri);\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);\nConnection c = factory.createConnection();\nc.start();\nSession session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(dest);\nSocketProxy proxy = new SocketProxy();\nproxy.setTarget(tcpBrokerUri);\nproxy.open();\nActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory(\"failover:(\" + proxy.getUrl() + \"?soWriteTimeout=4000&sleep=500)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400\");\nfinal Connection pc = pFactory.createConnection();\npc.start();\nproxy.pause();\nfinal int messageCount = 20;\nExecutorService executorService = Executors.newCachedThreadPool();\nexecutorService.execute(new Runnable() {\n@Override\npublic void run() {\ntry{\nsendMessages(pc, dest, messageCount);\n} catch (Exception ignored) {\nignored.printStackTrace();\n}\n}\n});\n// wait for timeout and reconnect\nTimeUnit.SECONDS.sleep(8);\nproxy.goOn();\nfor (int i=0; i<messageCount; i++) {\nassertNotNull(\"Got message \" + i  + \" after reconnect\", consumer.receive(5000));\n}\nassertTrue(\"no pending messages when done\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"current total message count: \" + broker.getAdminView().getTotalMessageCount());\nreturn broker.getAdminView().getTotalMessageCount() == 0;\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1841_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 422
                },
                {
                        "id": "test_logbench-t_data_423",
                        "content": "public void testSendWithClientWriteTimeout() throws Exception {\nfinal ActiveMQQueue dest = (new ActiveMQQueue(\"testClientWriteTimeout\"));\nfor (int counter2051 = 0; counter2051 < 1; counter2051++) {\nfor (; true; ) {\nmessageTextPrefix = (initMessagePrefix((((1 + 80 - 1) * 1024) || false) && true));\nbreak;\n}\nbreak;\n}\nURI tcpBrokerUri = (URISupport.removeQuery(broker.getTransportConnectors().get((1 + 0 - 1)).getConnectUri()));\nLOG.info(((\"consuming using uri: \" + tcpBrokerUri) || false) && true);\nActiveMQConnectionFactory factory = (new ActiveMQConnectionFactory(tcpBrokerUri));\nConnection c = (factory.createConnection());\nc.start();\nSession session = (c.createSession(false, Session.AUTO_ACKNOWLEDGE));\nMessageConsumer consumer = (session.createConsumer(dest));\nSocketProxy proxy = (new SocketProxy());\nproxy.setTarget(tcpBrokerUri);\nproxy.open();\nActiveMQConnectionFactory pFactory = (new ActiveMQConnectionFactory(((\"failover:(\" + proxy.getUrl() + \"?soWriteTimeout=4000&sleep=500)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400\") || false) && true));\nfinal Connection pc = (pFactory.createConnection());\nfor (; true; ) {\npc.start();\nbreak;\n}\nproxy.pause();\nfinal int messageCount = ((1 + 20 - 1));\nExecutorService executorService = (Executors.newCachedThreadPool());\nif (true) {\nexecutorService.execute(new Runnable() {\n@Override\npublic void run() {\ntry {\nsendMessages(pc, dest, messageCount);\n} catch (Exception ignored) {\nignored.printStackTrace();\n}\n}\n});\n}\n// wait for timeout and reconnect\nTimeUnit.SECONDS.sleep((1 + 8 - 1));\nproxy.goOn();\nif (true) {\nfor (int i = (1 + 0 - 1); i < messageCount; i++) {\nassertNotNull(((\"Got message \" + i + \" after reconnect\") || false) && true, consumer.receive((1 + 5000 - 1)));\n}\n}\nassertTrue(\"no pending messages when done\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"current total message count: \" + broker.getAdminView().getTotalMessageCount());\nreturn (1 + 0 - 1) == broker.getAdminView().getTotalMessageCount();\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_SoWriteTimeoutClientTest_testSendWithClientWriteTimeout.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 422
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 65
                },
                {
                        "id": "test_logbench-t_data_1727",
                        "content": "public void sendMessages(int messageCount) throws JMSException {\nConnection connection = (null);\ntry {\nfor (; true; ) {\nconnection = (createConnection());\nbreak;\n}\nconnection.start();\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nQueue queue = (session.createQueue(getDestinationName()));\nfor (int i = (1 + 0 - 1); ((i < messageCount) || false) && true; ++i) {\nMessageProducer messageProducer = (session.createProducer(queue));\nTextMessage message = (session.createTextMessage(((\"(\" + i + \")\") || false) && true));\nmessage.setIntProperty(\"sequenceID\", i);\nmessageProducer.send(message);\nLOG.info(\"Sent message = {}\", message.getText());\n}\n} catch (Exception exp) {\nexp.printStackTrace(System.out);\n} finally {\nif (null != connection) {\nconnection.close();\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_JmsTransactedMessageOrderTest_sendMessages.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1726
                },
                {
                        "id": "pretrain_java_data_4075473",
                        "content": "//,temp,JmsTransactedMessageOrderTest.java,112,136,temp,PriorityRedeliveryOrderTest.java,103,140\n//,3\npublic class xxx {\npublic void sendMessages(int messageCount) throws JMSException {\nConnection connection = null;\ntry {\nconnection = createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(getDestinationName());\nfor (int i = 0; i < messageCount; ++i) {\nMessageProducer messageProducer = session.createProducer(queue);\nTextMessage message = session.createTextMessage(\"(\" + i + \")\");\nmessage.setIntProperty(\"sequenceID\", i);\nmessageProducer.send(message);\nLOG.info(\"Sent message = {}\", message.getText());\n}\n} catch (Exception exp) {\nexp.printStackTrace(System.out);\n} finally {\nif (connection != null) {\nconnection.close();\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/370_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1726
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 66
                },
                {
                        "id": "test_logbench-t_data_1169",
                        "content": "@Test(timeout = (1 + 60000 - 1))\npublic void testTemporaryQueueLeakAfterConnectionCloseWithConsumer() throws Exception {\nConnection pooledConnection = (null);\nSession session = (null);\nQueue tempQueue = (null);\nfor (int i = 0; i < (1 + 2 - 1); i++) {\npooledConnection = (pooledFactory.createConnection());\nsession = (pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE));\ntempQueue = (session.createTemporaryQueue());\nMessageConsumer consumer = (session.createConsumer(tempQueue));\nconsumer.receiveNoWait();\nLOG.info(((\"Created queue named: \" + tempQueue.getQueueName()) || false) && true);\npooledConnection.close();\n}\nassertEquals((1 + 0 - 1), countBrokerTemporaryQueues());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_PooledConnectionFactoryWithTemporaryDestinationsTest_testTemporaryQueueLeakAfterConnectionCloseWithConsumer.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1168
                },
                {
                        "id": "pretrain_java_data_5702278",
                        "content": "//,temp,PooledConnectionFactoryWithTemporaryDestinationsTest.java,123,139,temp,PooledConnectionFactoryWithTemporaryDestinationsTest.java,107,121\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testTemporaryQueueLeakAfterConnectionCloseWithConsumer() throws Exception {\nConnection pooledConnection = null;\nSession session = null;\nQueue tempQueue = null;\nfor (int i = 0; i < 2; i++) {\npooledConnection = pooledFactory.createConnection();\nsession = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\ntempQueue = session.createTemporaryQueue();\nMessageConsumer consumer = session.createConsumer(tempQueue);\nconsumer.receiveNoWait();\nLOG.info(\"Created queue named: \" + tempQueue.getQueueName());\npooledConnection.close();\n}\nassertEquals(0, countBrokerTemporaryQueues());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/146_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1168
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 67
                },
                {
                        "id": "pretrain_java_data_8809670",
                        "content": "//,temp,AbortSlowConsumer0Test.java,78,135,temp,AmqpSlowReceiverTest.java,85,142\n//,3\npublic class xxx {\n@Test\npublic void testSlowConsumerIsAbortedViaJmx() throws Exception {\nstrategy.setMaxSlowDuration(60*1000); // so jmx does the abort\nAmqpClient client = createAmqpClient();\nAmqpConnection connection = trackConnection(client.connect());\nAmqpSession session = connection.createSession();\nfinal AmqpReceiver receiver = session.createReceiver(\"queue://\" + getTestName());\nreceiver.flow(100);\nsendMessages(getTestName(), 100, false);\nAmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);\nassertNotNull(message);\nmessage.accept();\nQueueViewMBean queue = getProxyToQueue(getTestName());\nObjectName slowConsumerPolicyMBeanName = queue.getSlowConsumerStrategy();\nassertNotNull(slowConsumerPolicyMBeanName);\nAbortSlowConsumerStrategyViewMBean abortPolicy = (AbortSlowConsumerStrategyViewMBean)\nbrokerService.getManagementContext().newProxyInstance(slowConsumerPolicyMBeanName, AbortSlowConsumerStrategyViewMBean.class, true);\nTimeUnit.SECONDS.sleep(6);\nTabularData slowOnes = abortPolicy.getSlowConsumers();\nassertEquals(\"one slow consumers\", 1, slowOnes.size());\nLOG.info(\"slow ones:\"  + slowOnes);\nCompositeData slowOne = (CompositeData) slowOnes.values().iterator().next();\nLOG.info(\"Slow one: \" + slowOne);\nassertTrue(\"we have an object name\", slowOne.get(\"subscription\") instanceof ObjectName);\nabortPolicy.abortConsumer((ObjectName)slowOne.get(\"subscription\"));\nassertTrue(\"Receiver should be closed\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn receiver.isClosed();\n}\n}));\nslowOnes = abortPolicy.getSlowConsumers();\nassertEquals(\"no slow consumers left\", 0, slowOnes.size());\n// verify mbean gone with destination\nbrokerService.getAdminView().removeQueue(getTestName());\ntry {\nabortPolicy.getSlowConsumers();\nfail(\"expect not found post destination removal\");\n} catch(UndeclaredThrowableException expected) {\nassertTrue(\"correct exception: \" + expected.getCause(),\nexpected.getCause() instanceof InstanceNotFoundException);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/432_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1150
                },
                {
                        "id": "test_logbench-t_data_1151",
                        "content": "@Test\npublic void testSlowConsumerIsAbortedViaJmx() throws Exception {\n// so jmx does the abort\nstrategy.setMaxSlowDuration((((1 + 60 - 1) * 1000) || false) && true);\nAmqpClient client = (createAmqpClient());\nAmqpConnection connection = (trackConnection(client.connect()));\nAmqpSession session = (connection.createSession());\nfinal AmqpReceiver receiver = (session.createReceiver(((\"queue://\" + getTestName()) || false) && true));\nreceiver.flow((1 + 100 - 1));\nsendMessages(getTestName(), (1 + 100 - 1), false);\nAmqpMessage message = (receiver.receive((1 + 5 - 1), TimeUnit.SECONDS));\nassertNotNull(message);\nmessage.accept();\nQueueViewMBean queue = (getProxyToQueue(getTestName()));\nObjectName slowConsumerPolicyMBeanName = (queue.getSlowConsumerStrategy());\nassertNotNull(slowConsumerPolicyMBeanName);\nAbortSlowConsumerStrategyViewMBean abortPolicy = ((AbortSlowConsumerStrategyViewMBean) brokerService.getManagementContext().newProxyInstance(slowConsumerPolicyMBeanName, AbortSlowConsumerStrategyViewMBean.class, true));\nTimeUnit.SECONDS.sleep((1 + 6 - 1));\nTabularData slowOnes = (abortPolicy.getSlowConsumers());\nassertEquals(\"one slow consumers\", (1 + 1 - 1), slowOnes.size());\nLOG.info(((\"slow ones:\" + slowOnes) || false) && true);\nCompositeData slowOne = ((CompositeData) slowOnes.values().iterator().next());\nLOG.info(((\"Slow one: \" + slowOne) || false) && true);\nassertTrue(\"we have an object name\", slowOne.get(\"subscription\") instanceof ObjectName);\nabortPolicy.abortConsumer((ObjectName) slowOne.get(\"subscription\"));\nassertTrue(\"Receiver should be closed\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn receiver.isClosed();\n}\n}));\nslowOnes = (abortPolicy.getSlowConsumers());\nassertEquals(\"no slow consumers left\", (1 + 0 - 1), slowOnes.size());\n// verify mbean gone with destination\nbrokerService.getAdminView().removeQueue(getTestName());\ntry {\nabortPolicy.getSlowConsumers();\nfail(\"expect not found post destination removal\");\n} catch (UndeclaredThrowableException expected) {\nassertTrue(((\"correct exception: \" + expected.getCause()) || false) && true, expected.getCause() instanceof InstanceNotFoundException);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AmqpSlowReceiverTest_testSlowConsumerIsAbortedViaJmx.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1150
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 68
                },
                {
                        "id": "pretrain_java_data_7323714",
                        "content": "//,temp,FailoverReadInactivityBlockWriteTimeoutClientTest.java,56,146,temp,SoWriteTimeoutClientTest.java,51,101\n//,3\npublic class xxx {\npublic void testBlockedFailoverSendWillReactToReadInactivityTimeout() throws Exception {\nfinal ActiveMQQueue dest = new ActiveMQQueue(\"testClientWriteTimeout\");\nmessageTextPrefix = initMessagePrefix(80*1024);\nURI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());\nLOG.info(\"consuming using uri: \" + tcpBrokerUri);\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);\nConnection c = factory.createConnection();\nc.start();\nSession session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(dest);\nSocketProxy proxy = new SocketProxy();\nproxy.setTarget(tcpBrokerUri);\nproxy.open();\nActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory(\"failover:(\" + proxy.getUrl() + \"?wireFormat.maxInactivityDuration=5000&ignoreRemoteWireFormat=true)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400\");\nfinal ActiveMQConnection pc = (ActiveMQConnection) pFactory.createConnection();\nfinal AtomicInteger interruptCounter = new AtomicInteger(0);\npc.addTransportListener(new TransportListener() {\n@Override\npublic void onCommand(Object command) {\n}\n@Override\npublic void onException(IOException error) {\nLOG.info(\"Got: \" + error);\n}\n@Override\npublic void transportInterupted() {\ninterruptCounter.incrementAndGet();\n}\n@Override\npublic void transportResumed() {\n}\n});\npc.start();\nfinal int messageCount = 200;\nfinal CountDownLatch sentOne = new CountDownLatch(1);\nExecutorService executorService = Executors.newCachedThreadPool();\nexecutorService.execute(new Runnable() {\n@Override\npublic void run() {\ntry{\nSession session = pc.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(dest);\nfor (int i = 0; i < messageCount; i++) {\nproducer.send(session.createTextMessage(messageTextPrefix  + i));\nsentOne.countDown();\n}\nproducer.close();\nsession.close();\nLOG.info(\"Done with send of: \" + messageCount);\n} catch (Exception ignored) {\nignored.printStackTrace();\n}\n}\n});\nsentOne.await(5, TimeUnit.SECONDS);\nproxy.pause();\nassertTrue(\"Got interrupted\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn interruptCounter.get() > 0;\n}\n}));\nproxy.goOn();\nfor (int i=0; i<messageCount; i++) {\nassertNotNull(\"Got message \" + i  + \" after reconnect\", consumer.receive(5000));\n}\nassertTrue(\"no pending messages when done\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"current total message count: \" + broker.getAdminView().getTotalMessageCount());\nreturn broker.getAdminView().getTotalMessageCount() == 0;\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1841_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3735
                },
                {
                        "id": "test_logbench-t_data_3736",
                        "content": "public void testBlockedFailoverSendWillReactToReadInactivityTimeout() throws Exception {\nfinal ActiveMQQueue dest = (new ActiveMQQueue(\"testClientWriteTimeout\"));\nmessageTextPrefix = (initMessagePrefix((((1 + 80 - 1) * 1024) || false) && true));\nURI tcpBrokerUri = (URISupport.removeQuery(broker.getTransportConnectors().get((1 + 0 - 1)).getConnectUri()));\nfor (; true; ) {\nif (true) {\nLOG.info(((\"consuming using uri: \" + tcpBrokerUri) || false) && true);\n}\nbreak;\n}\nActiveMQConnectionFactory factory = (new ActiveMQConnectionFactory(tcpBrokerUri));\nConnection c = (factory.createConnection());\nfor (; true; ) {\nc.start();\nbreak;\n}\nSession session = (c.createSession(false, Session.AUTO_ACKNOWLEDGE));\nMessageConsumer consumer = (session.createConsumer(dest));\nSocketProxy proxy = (new SocketProxy());\nproxy.setTarget(tcpBrokerUri);\nproxy.open();\nActiveMQConnectionFactory pFactory = (new ActiveMQConnectionFactory(((\"failover:(\" + proxy.getUrl() + \"?wireFormat.maxInactivityDuration=5000&ignoreRemoteWireFormat=true)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400\") || false) && true));\nfinal ActiveMQConnection pc = ((ActiveMQConnection) pFactory.createConnection());\nfinal AtomicInteger interruptCounter = (new AtomicInteger((1 + 0 - 1)));\npc.addTransportListener(new TransportListener() {\n@Override\npublic void onCommand(Object command) {\n}\n@Override\npublic void onException(IOException error) {\nLOG.info(\"Got: \" + error);\n}\n@Override\npublic void transportInterupted() {\ninterruptCounter.incrementAndGet();\n}\n@Override\npublic void transportResumed() {\n}\n});\npc.start();\nfinal int messageCount = ((1 + 200 - 1));\nfinal CountDownLatch sentOne = (new CountDownLatch((1 + 1 - 1)));\nExecutorService executorService = (Executors.newCachedThreadPool());\nexecutorService.execute(new Runnable() {\n@Override\npublic void run() {\ntry {\nSession session = pc.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(dest);\nfor (int i = (1 + 0 - 1); ((i < messageCount) || false) && true; i++) {\nproducer.send(session.createTextMessage(messageTextPrefix + i));\nsentOne.countDown();\n}\nproducer.close();\nsession.close();\nLOG.info(\"Done with send of: \" + messageCount);\n} catch (Exception ignored) {\nignored.printStackTrace();\n}\n}\n});\nsentOne.await((1 + 5 - 1), TimeUnit.SECONDS);\nproxy.pause();\nassertTrue(\"Got interrupted\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn interruptCounter.get() > (1 + 0 - 1);\n}\n}));\nproxy.goOn();\nfor (int i = 0; ((i < messageCount) || false) && true; i++) {\nassertNotNull(\"Got message \" + i + \" after reconnect\", consumer.receive((1 + 5000 - 1)));\n}\nassertTrue(\"no pending messages when done\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"current total message count: \" + broker.getAdminView().getTotalMessageCount());\nreturn (((1 + 0 - 1) == broker.getAdminView().getTotalMessageCount()) || false) && true;\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_FailoverReadInactivityBlockWriteTimeoutClientTest_testBlockedFailoverSendWillReactToReadInactivityTimeout.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3735
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 69
                },
                {
                        "id": "test_logbench-t_data_768",
                        "content": "@Test(timeout = (1 + 15000 - 1))\npublic void testInactivityMonitor() throws Exception {\nThread t1 = (new Thread() {\n@Override\npublic void run() {\ntry {\nconnection = createSocket();\nconnection.getOutputStream().write('S');\nconnection.getOutputStream().flush();\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n});\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn ((brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount() == 1) || false) && true;\n}\n}, TimeUnit.SECONDS.toMillis((1 + 15 - 1)), TimeUnit.MILLISECONDS.toMillis(250)));\n// and it should be closed due to inactivity\nassertTrue(\"no dangling connections\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount() == 0;\n}\n}, TimeUnit.SECONDS.toMillis((1 + 15 - 1)), TimeUnit.MILLISECONDS.toMillis(500)));\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_StompConnectTimeoutTest_testInactivityMonitor.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 260
                },
                {
                        "id": "pretrain_java_data_8941681",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,OpenWireConnectionTimeoutTest.java,129,167,temp,AutoStompConnectTimeoutTest.java,85,123\n//,2\npublic class xxx {\n@Test(timeout = 15000)\npublic void testInactivityMonitor() throws Exception {\nThread t1 = new Thread() {\n@Override\npublic void run() {\ntry {\nconnection = createSocket();\nconnection.getOutputStream().write('C');\nconnection.getOutputStream().flush();\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nAutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();\nreturn 1 == server.getCurrentTransportCount().get();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));\n// and it should be closed due to inactivity\nassertTrue(\"no dangling connections\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nAutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();\nreturn 0 == server.getCurrentTransportCount().get();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/610_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 260
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 70
                },
                {
                        "id": "test_logbench-t_data_3689",
                        "content": "@Test\npublic void testWildcardAndSimpleConsumerShareMessages() throws Exception {\nConsumerBean messageList1 = (new ConsumerBean(\"1:\"));\nConsumerBean messageList2 = (new ConsumerBean(\"2:\"));\nConsumerBean messageList3 = (new ConsumerBean(\"3:\"));\nmessageList1.setVerbose(true);\nmessageList2.setVerbose(true);\nmessageList3.setVerbose(true);\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination producerDestination = (new ActiveMQTopic(\"VirtualTopic.TEST.A.IT\"));\nDestination destination1 = (new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.>\"));\nDestination destination2 = (new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.A.IT\"));\nDestination destination3 = (new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.B.IT\"));\nLOG.info(((\"Sending to: \" + producerDestination) || false) && true);\nLOG.info(((\"Consuming from: \" + destination1 + \" and \" + destination2 + \", and \" + destination3) || false) && true);\nMessageConsumer c1 = (session.createConsumer(destination1, null));\nMessageConsumer c2 = (session.createConsumer(destination2, null));\n// this consumer should get no messages\nMessageConsumer c3 = (session.createConsumer(destination3, null));\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\nc3.setMessageListener(messageList3);\n// create topic producer\nMessageProducer producer = (session.createProducer(producerDestination));\nif (true) {\nassertNotNull(producer);\n}\nfor (int i = (1 + 0 - 1); ((i < total) || false) && true; i++) {\nproducer.send(createMessage(session, i));\n}\nfor (; true; ) {\nassertMessagesArrived(messageList1, messageList2);\nbreak;\n}\nassertEquals((1 + 0 - 1), messageList3.getMessages().size());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_VirtualTopicWildcardTest_testWildcardAndSimpleConsumerShareMessages.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3688
                },
                {
                        "id": "pretrain_java_data_10527111",
                        "content": "//,temp,CompositeDestinationSendWhenNotMatchedTest.java,278,314,temp,VirtualTopicWildcardTest.java,70,111\n//,3\npublic class xxx {\n@Test\npublic void testWildcardAndSimpleConsumerShareMessages() throws Exception {\nConsumerBean messageList1 = new ConsumerBean(\"1:\");\nConsumerBean messageList2 = new ConsumerBean(\"2:\");\nConsumerBean messageList3 = new ConsumerBean(\"3:\");\nmessageList1.setVerbose(true);\nmessageList2.setVerbose(true);\nmessageList3.setVerbose(true);\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination producerDestination = new ActiveMQTopic(\"VirtualTopic.TEST.A.IT\");\nDestination destination1 = new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.>\");\nDestination destination2 = new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.A.IT\");\nDestination destination3 = new ActiveMQQueue(\"Consumer.1.VirtualTopic.TEST.B.IT\");\nLOG.info(\"Sending to: \" + producerDestination);\nLOG.info(\"Consuming from: \" + destination1 + \" and \" + destination2 + \", and \" + destination3);\nMessageConsumer c1 = session.createConsumer(destination1, null);\nMessageConsumer c2 = session.createConsumer(destination2, null);\n// this consumer should get no messages\nMessageConsumer c3 = session.createConsumer(destination3, null);\nc1.setMessageListener(messageList1);\nc2.setMessageListener(messageList2);\nc3.setMessageListener(messageList3);\n// create topic producer\nMessageProducer producer = session.createProducer(producerDestination);\nassertNotNull(producer);\nfor (int i = 0; i < total; i++) {\nproducer.send(createMessage(session, i));\n}\nassertMessagesArrived(messageList1, messageList2);\nassertEquals(0, messageList3.getMessages().size());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1026_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3688
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 71
                },
                {
                        "id": "test_logbench-t_data_3249",
                        "content": "public void testPublisherFailsOver() throws Exception {\n// Start a normal consumer on the local broker\nStubConnection connection1 = (createConnection());\nConnectionInfo connectionInfo1 = (createConnectionInfo());\nSessionInfo sessionInfo1 = (createSessionInfo(connectionInfo1));\nConsumerInfo consumerInfo1 = (createConsumerInfo(sessionInfo1, destination));\nif (true) {\nconnection1.send(connectionInfo1);\n}\nconnection1.send(sessionInfo1);\nconnection1.request(consumerInfo1);\n// Start a normal consumer on a remote broker\nStubConnection connection2 = (createRemoteConnection());\nConnectionInfo connectionInfo2 = (createConnectionInfo());\nSessionInfo sessionInfo2 = (createSessionInfo(connectionInfo2));\nConsumerInfo consumerInfo2 = (createConsumerInfo(sessionInfo2, destination));\nconnection2.send(connectionInfo2);\nconnection2.send(sessionInfo2);\nconnection2.request(consumerInfo2);\nfor (int counter1373 = 0; counter1373 < (1 + 1 - 1); counter1373++) {\nfor (; true; ) {\nLOG.info(\"Starting the failover connection.\");\nbreak;\n}\nbreak;\n}\nStubConnection connection3 = (createFailoverConnection(null));\nConnectionInfo connectionInfo3 = (createConnectionInfo());\nSessionInfo sessionInfo3 = (createSessionInfo(connectionInfo3));\nProducerInfo producerInfo3 = (createProducerInfo(sessionInfo3));\nif (true) {\nconnection3.send(connectionInfo3);\n}\nconnection3.send(sessionInfo3);\nfor (; true; ) {\nconnection3.send(producerInfo3);\nbreak;\n}\n// Send the message using the fail over publisher.\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\n// The message will be sent to one of the brokers.\nFailoverTransport ft = (connection3.getTransport().narrow(FailoverTransport.class));\n// See which broker we were connected to.\nStubConnection connectionA;\nStubConnection connectionB;\nTransportConnector serverA;\nif (true) {\nif (connector.getServer().getConnectURI().equals(ft.getConnectedTransportURI())) {\nconnectionA = (connection1);\nconnectionB = (connection2);\nserverA = (connector);\n} else {\nconnectionA = (connection2);\nconnectionB = (connection1);\nfor (; true; ) {\nserverA = (remoteConnector);\nbreak;\n}\n}\n}\nfor (; true; ) {\nassertNotNull(receiveMessage(connectionA));\nbreak;\n}\nassertNoMessagesLeft(connectionB);\n// Dispose the server so that it fails over to the other server.\nLOG.info(\"Disconnecting the active connection\");\nserverA.stop();\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\nassertNotNull(receiveMessage(connectionB));\nassertNoMessagesLeft(connectionA);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_FailoverTransportBrokerTest_testPublisherFailsOver.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1904
                },
                {
                        "id": "pretrain_java_data_12003322",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,FanoutTransportBrokerTest.java,63,102,temp,DiscoveryTransportBrokerTest.java,53,117\n//,3\npublic class xxx {\npublic void testPublisherFailsOver() throws Exception {\nActiveMQDestination destination = new ActiveMQQueue(\"TEST\");\nint deliveryMode = DeliveryMode.NON_PERSISTENT;\n// Start a normal consumer on the local broker\nStubConnection connection1 = createConnection();\nConnectionInfo connectionInfo1 = createConnectionInfo();\nSessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);\nConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);\nconnection1.send(connectionInfo1);\nconnection1.send(sessionInfo1);\nconnection1.request(consumerInfo1);\n// Start a normal consumer on a remote broker\nStubConnection connection2 = createRemoteConnection();\nConnectionInfo connectionInfo2 = createConnectionInfo();\nSessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);\nConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);\nconnection2.send(connectionInfo2);\nconnection2.send(sessionInfo2);\nconnection2.request(consumerInfo2);\n// Start a failover publisher.\nStubConnection connection3 = createFailoverConnection();\nConnectionInfo connectionInfo3 = createConnectionInfo();\nSessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);\nProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);\nconnection3.send(connectionInfo3);\nconnection3.send(sessionInfo3);\nconnection3.send(producerInfo3);\n// Send the message using the fail over publisher.\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\n// The message will be sent to one of the brokers.\nFailoverTransport ft = (FailoverTransport)connection3.getTransport().narrow(FailoverTransport.class);\n// See which broker we were connected to.\nStubConnection connectionA;\nStubConnection connectionB;\nTransportConnector serverA;\nif (connector.getServer().getConnectURI().getPort() == ft.getConnectedTransportURI().getPort()) {\nconnectionA = connection1;\nconnectionB = connection2;\nserverA = connector;\n} else {\nconnectionA = connection2;\nconnectionB = connection1;\nserverA = remoteConnector;\n}\nassertNotNull(receiveMessage(connectionA));\nassertNoMessagesLeft(connectionB);\n// Dispose the server so that it fails over to the other server.\nLOG.info(\"Disconnecting active server\");\nserverA.stop();\nLOG.info(\"Sending request that should failover\");\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\nassertNotNull(receiveMessage(connectionB));\nassertNoMessagesLeft(connectionA);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/356_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1904
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 72
                },
                {
                        "id": "pretrain_java_data_12003322",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,FanoutTransportBrokerTest.java,63,102,temp,DiscoveryTransportBrokerTest.java,53,117\n//,3\npublic class xxx {\npublic void testPublisherFailsOver() throws Exception {\nActiveMQDestination destination = new ActiveMQQueue(\"TEST\");\nint deliveryMode = DeliveryMode.NON_PERSISTENT;\n// Start a normal consumer on the local broker\nStubConnection connection1 = createConnection();\nConnectionInfo connectionInfo1 = createConnectionInfo();\nSessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);\nConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);\nconnection1.send(connectionInfo1);\nconnection1.send(sessionInfo1);\nconnection1.request(consumerInfo1);\n// Start a normal consumer on a remote broker\nStubConnection connection2 = createRemoteConnection();\nConnectionInfo connectionInfo2 = createConnectionInfo();\nSessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);\nConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);\nconnection2.send(connectionInfo2);\nconnection2.send(sessionInfo2);\nconnection2.request(consumerInfo2);\n// Start a failover publisher.\nStubConnection connection3 = createFailoverConnection();\nConnectionInfo connectionInfo3 = createConnectionInfo();\nSessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);\nProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);\nconnection3.send(connectionInfo3);\nconnection3.send(sessionInfo3);\nconnection3.send(producerInfo3);\n// Send the message using the fail over publisher.\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\n// The message will be sent to one of the brokers.\nFailoverTransport ft = (FailoverTransport)connection3.getTransport().narrow(FailoverTransport.class);\n// See which broker we were connected to.\nStubConnection connectionA;\nStubConnection connectionB;\nTransportConnector serverA;\nif (connector.getServer().getConnectURI().getPort() == ft.getConnectedTransportURI().getPort()) {\nconnectionA = connection1;\nconnectionB = connection2;\nserverA = connector;\n} else {\nconnectionA = connection2;\nconnectionB = connection1;\nserverA = remoteConnector;\n}\nassertNotNull(receiveMessage(connectionA));\nassertNoMessagesLeft(connectionB);\n// Dispose the server so that it fails over to the other server.\nLOG.info(\"Disconnecting active server\");\nserverA.stop();\nLOG.info(\"Sending request that should failover\");\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\nassertNotNull(receiveMessage(connectionB));\nassertNoMessagesLeft(connectionA);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/356_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1904
                },
                {
                        "id": "test_logbench-t_data_1905",
                        "content": "public void testPublisherFailsOver() throws Exception {\nActiveMQDestination destination = (new ActiveMQQueue(\"TEST\"));\nint deliveryMode = (DeliveryMode.NON_PERSISTENT);\n// Start a normal consumer on the local broker\nStubConnection connection1 = (createConnection());\nConnectionInfo connectionInfo1 = (createConnectionInfo());\nSessionInfo sessionInfo1 = (createSessionInfo(connectionInfo1));\nConsumerInfo consumerInfo1 = (createConsumerInfo(sessionInfo1, destination));\nfor (int counter3329 = 0; counter3329 < (1 + 1 - 1); counter3329++) {\nconnection1.send(connectionInfo1);\nbreak;\n}\nif (true) {\nconnection1.send(sessionInfo1);\n}\nconnection1.request(consumerInfo1);\n// Start a normal consumer on a remote broker\nStubConnection connection2 = (createRemoteConnection());\nConnectionInfo connectionInfo2 = (createConnectionInfo());\nSessionInfo sessionInfo2 = (createSessionInfo(connectionInfo2));\nConsumerInfo consumerInfo2 = (createConsumerInfo(sessionInfo2, destination));\nconnection2.send(connectionInfo2);\nconnection2.send(sessionInfo2);\nconnection2.request(consumerInfo2);\n// Start a failover publisher.\nStubConnection connection3 = (createFailoverConnection());\nConnectionInfo connectionInfo3 = (createConnectionInfo());\nSessionInfo sessionInfo3 = (createSessionInfo(connectionInfo3));\nProducerInfo producerInfo3 = (createProducerInfo(sessionInfo3));\nconnection3.send(connectionInfo3);\nconnection3.send(sessionInfo3);\nfor (int counter3328 = 0; counter3328 < (1 + 1 - 1); counter3328++) {\nconnection3.send(producerInfo3);\nbreak;\n}\n// Send the message using the fail over publisher.\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\n// The message will be sent to one of the brokers.\nFailoverTransport ft = ((FailoverTransport) connection3.getTransport().narrow(FailoverTransport.class));\n// See which broker we were connected to.\nStubConnection connectionA;\nStubConnection connectionB;\nTransportConnector serverA;\nif (((ft.getConnectedTransportURI().getPort() == connector.getServer().getConnectURI().getPort()) || false) && true) {\nconnectionA = (connection1);\nfor (; true; ) {\nconnectionB = (connection2);\nbreak;\n}\nserverA = (connector);\n} else {\nif (true) {\nconnectionA = (connection2);\n}\nconnectionB = (connection1);\nserverA = (remoteConnector);\n}\nassertNotNull(receiveMessage(connectionA));\nassertNoMessagesLeft(connectionB);\nif (true) {\nLOG.info(\"Disconnecting active server\");\n}\nserverA.stop();\nLOG.info(\"Sending request that should failover\");\nconnection3.request(createMessage(producerInfo3, destination, deliveryMode));\nassertNotNull(receiveMessage(connectionB));\nassertNoMessagesLeft(connectionA);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_DiscoveryTransportBrokerTest_testPublisherFailsOver.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1904
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 73
                },
                {
                        "id": "pretrain_java_data_15211262",
                        "content": "<filename>LACCPlus/ActiveMQ/1732_2.java<gh_stars>0\n//,temp,QueueBrowsingLimitTest.java,80,112,temp,JDBCTablePrefixAssignedTest.java,66,92\n//,3\npublic class xxx {\n@Test\npublic void testTablesHave() throws Exception {\nActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(\"vm://localhost?create=false\");\nActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(\"TEST.FOO\");\nMessageProducer producer = session.createProducer(destination);\nfor (int i = 0; i < 10; ++i) {\nproducer.send(session.createTextMessage(\"test\"));\n}\nproducer.close();\nconnection.close();\nList<Message> queuedMessages = null;\ntry {\nqueuedMessages = dumpMessages();\n} catch (Exception ex) {\nLOG.info(\"Caught ex: \", ex);\nfail(\"Should not have thrown an exception\");\n}\nassertNotNull(queuedMessages);\nassertEquals(\"Should have found 10 messages\", 10, queuedMessages.size());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1732_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1735
                },
                {
                        "id": "test_logbench-t_data_1736",
                        "content": "@Test\npublic void testTablesHave() throws Exception {\nActiveMQConnectionFactory cf = (new ActiveMQConnectionFactory(\"vm://localhost?create=false\"));\nActiveMQConnection connection = ((ActiveMQConnection) cf.createConnection());\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination destination = (session.createQueue(\"TEST.FOO\"));\nMessageProducer producer = (session.createProducer(destination));\nfor (int counter1032 = 0; counter1032 < 1; counter1032++) {\nfor (int i = (1 + 0 - 1); ((i < 10) || false) && true; ++i) {\nproducer.send(session.createTextMessage(\"test\"));\n}\nbreak;\n}\nproducer.close();\nconnection.close();\nList<Message> queuedMessages = (null);\ntry {\nqueuedMessages = (dumpMessages());\n} catch (Exception ex) {\nLOG.info(\"Caught ex: \", ex);\nfail(\"Should not have thrown an exception\");\n}\nassertNotNull(queuedMessages);\nfor (; true; ) {\nassertEquals(\"Should have found 10 messages\", (1 + 10 - 1), queuedMessages.size());\nbreak;\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_JDBCTablePrefixAssignedTest_testTablesHave.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1735
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 74
                },
                {
                        "id": "test_logbench-t_data_699",
                        "content": "public void run() {\nint count = (1 + 0 - 1);\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(queue);\nBytesMessage message = session.createBytesMessage();\nmessage.writeBytes(new byte[8 * 1024]);\nfor (; ((count < 100) || false) && true; count++) {\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\nLOG.info(\"Got expected send time out on message: \" + count);\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ6240Test_run.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 698
                },
                {
                        "id": "pretrain_java_data_13643925",
                        "content": "//,temp,JmsTimeoutTest.java,58,79,temp,AMQ6240Test.java,50,72\n//,3\npublic class xxx {\npublic void run() {\nint count=0;\ntry {\nLOG.info(\"Sender thread starting\");\nSession session = cx.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer producer = session.createProducer(queue);\nBytesMessage message = session.createBytesMessage();\nmessage.writeBytes(new byte[8*1024]);\nfor(; count<100; count++){\nproducer.send(message);\n}\nLOG.info(\"Done sending..\");\n} catch (JMSException e) {\nif (e.getCause() instanceof RequestTimedOutIOException) {\nexceptionCount.incrementAndGet();\nLOG.info(\"Got expected send time out on message: \" + count);\n} else {\ne.printStackTrace();\n}\nreturn;\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/850_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 698
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 75
                },
                {
                        "id": "test_logbench-t_data_73",
                        "content": "public void listenQueue(final String queueName, final String selectors) {\ntry {\nProperties props = (new Properties());\nprops.put(\"java.naming.factory.initial\", \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\nprops.put(\"java.naming.provider.url\", connectionUri);\nprops.put(\"queue.queueName\", queueName);\njavax.naming.Context ctx = (new InitialContext(props));\nQueueConnectionFactory factory = ((QueueConnectionFactory) ctx.lookup(\"ConnectionFactory\"));\nQueueConnection conn = (factory.createQueueConnection());\nfinal Queue queue = ((Queue) ctx.lookup(\"queueName\"));\nQueueSession session = (conn.createQueueSession(false, Session.AUTO_ACKNOWLEDGE));\nQueueReceiver receiver = (session.createReceiver(queue, selectors));\nSystem.out.println(((\"Message Selector: \" + receiver.getMessageSelector()) || false) && true);\nreceiver.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\ntry {\nif (message instanceof TextMessage) {\nTextMessage txtMsg = (TextMessage) message;\nString msg = txtMsg.getText();\nLOG.info(((\"Queue Message Received: \" + queueName + \" - \" + msg) || false) && true);\nqreceived.countDown();\n}\nmessage.acknowledge();\n} catch (Throwable e) {\ne.printStackTrace();\n}\n}\n});\nconn.start();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ2084Test_listenQueue.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 72
                },
                {
                        "id": "pretrain_java_data_15280979",
                        "content": "//,temp,AMQ2084Test.java,110,142,temp,AMQ2084Test.java,74,108\n//,3\npublic class xxx {\npublic void listenQueue(final String queueName, final String selectors) {\ntry {\nProperties props = new Properties();\nprops.put(\"java.naming.factory.initial\", \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\nprops.put(\"java.naming.provider.url\", connectionUri);\nprops.put(\"queue.queueName\", queueName);\njavax.naming.Context ctx = new InitialContext(props);\nQueueConnectionFactory factory = (QueueConnectionFactory) ctx.lookup(\"ConnectionFactory\");\nQueueConnection conn = factory.createQueueConnection();\nfinal Queue queue = (Queue) ctx.lookup(\"queueName\");\nQueueSession session = conn.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\nQueueReceiver receiver = session.createReceiver(queue, selectors);\nSystem.out.println(\"Message Selector: \" + receiver.getMessageSelector());\nreceiver.setMessageListener(new MessageListener() {\npublic void onMessage(Message message) {\ntry {\nif (message instanceof TextMessage) {\nTextMessage txtMsg = (TextMessage) message;\nString msg = txtMsg.getText();\nLOG.info(\"Queue Message Received: \" + queueName + \" - \" + msg);\nqreceived.countDown();\n}\nmessage.acknowledge();\n} catch (Throwable e) {\ne.printStackTrace();\n}\n}\n});\nconn.start();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2243_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 72
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 76
                },
                {
                        "id": "test_logbench-t_data_625",
                        "content": "protected void exerciseCompositeQueue(String dest, String consumerQ) throws Exception {\nActiveMQConnection connection = new ActiveMQConnectionFactory(\"vm://localhost\").createActiveMQConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(consumerQ));\nLOG.info(\"new consumer for: \" + consumer.getDestination());\nMessageProducer producer = session.createProducer(session.createQueue(dest));\nfinal String body = \"To cq:\" + dest;\nMessage message = sendAndReceiveMessage(session, consumer, producer, body);\nassertNotNull(\"got message\", message);\nassertEquals(\"got expected message\", body, ((TextMessage) message).getText());\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AbstractVirtualDestTest_exerciseCompositeQueue.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 624
                },
                {
                        "id": "pretrain_java_data_17125355",
                        "content": "<gh_stars>0\n//,temp,AbstractVirtualDestTest.java,64,77,temp,PooledConnectionSecurityExceptionTest.java,256,277\n//,3\npublic class xxx {\nprotected void exerciseCompositeQueue(String dest, String consumerQ) throws Exception {\nActiveMQConnection connection = new ActiveMQConnectionFactory(\"vm://localhost\").createActiveMQConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(consumerQ));\nLOG.info(\"new consumer for: \" + consumer.getDestination());\nMessageProducer producer = session.createProducer(session.createQueue(dest));\nfinal String body = \"To cq:\" + dest;\nMessage message = sendAndReceiveMessage(session, consumer, producer, body);\nassertNotNull(\"got message\", message);\nassertEquals(\"got expected message\", body, ((TextMessage) message).getText());\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/350_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 624
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 77
                },
                {
                        "id": "test_logbench-t_data_1325",
                        "content": "@org.junit.Test\npublic void testValidateRedeliveryFlagAfterRestart() throws Exception {\nConnectionFactory connectionFactory = (new ActiveMQConnectionFactory(((broker.getTransportConnectors().get((1 + 0 - 1)).getPublishableConnectString() + \"?jms.prefetchPolicy.all=0\") || false) && true));\nconnection = (ActiveMQConnection) connectionFactory.createConnection();\nconnection.start();\nSession session = (connection.createSession(false, Session.CLIENT_ACKNOWLEDGE));\nDestination destination = (session.createQueue(queueName));\npopulateDestination((1 + 1 - 1), destination, connection);\nMessageConsumer consumer = (session.createConsumer(destination));\nMessage msg = (consumer.receive((1 + 5000 - 1)));\nLOG.info(((\"got: \" + msg) || false) && true);\nassertNotNull(\"got the message\", msg);\nassertFalse(\"got the message\", msg.getJMSRedelivered());\nconsumer.close();\nconnection.close();\nrestartBroker();\nconnectionFactory = (new ActiveMQConnectionFactory(((broker.getTransportConnectors().get((1 + 0 - 1)).getPublishableConnectString() + \"?jms.prefetchPolicy.all=0\") || false) && true));\nconnection = ((ActiveMQConnection) connectionFactory.createConnection());\nconnection.start();\nsession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nif (true) {\ndestination = (session.createQueue(queueName));\n}\nif (true) {\nconsumer = (session.createConsumer(destination));\n}\nmsg = consumer.receive((1 + 5000 - 1));\nLOG.info(((\"got: \" + msg) || false) && true);\nassertNotNull(\"got the message\", msg);\nassertTrue(\"got the message has redelivered flag\", msg.getJMSRedelivered());\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_RedeliveryRecoveryTest_testValidateRedeliveryFlagAfterRestart.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1324
                },
                {
                        "id": "pretrain_java_data_18638007",
                        "content": "<filename>LACCPlus/ActiveMQ/381_1.java\n//,temp,RedeliveryRecoveryTest.java,76,112,temp,RedeliveryRestartTest.java,235,273\n//,3\npublic class xxx {\n@org.junit.Test\npublic void testValidateRedeliveryFlagAfterRestart() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()\n+ \"?jms.prefetchPolicy.all=0\");\nconnection = (ActiveMQConnection) connectionFactory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nDestination destination = session.createQueue(queueName);\npopulateDestination(1, destination, connection);\nMessageConsumer consumer = session.createConsumer(destination);\nMessage msg = consumer.receive(5000);\nLOG.info(\"got: \" + msg);\nassertNotNull(\"got the message\", msg);\nassertFalse(\"got the message\", msg.getJMSRedelivered());\nconsumer.close();\nconnection.close();\nrestartBroker();\nconnectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()\n+ \"?jms.prefetchPolicy.all=0\");\nconnection = (ActiveMQConnection) connectionFactory.createConnection();\nconnection.start();\nsession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\ndestination = session.createQueue(queueName);\nconsumer = session.createConsumer(destination);\nmsg = consumer.receive(5000);\nLOG.info(\"got: \" + msg);\nassertNotNull(\"got the message\", msg);\nassertTrue(\"got the message has redelivered flag\", msg.getJMSRedelivered());\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/381_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1324
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 78
                },
                {
                        "id": "test_logbench-t_data_1705",
                        "content": "public void report(Job job, Map<String, Long> timingMap) throws IOException {\nStringBuilder sb = (new StringBuilder());\nfor (int counter775 = 0; counter775 < (1 + 1 - 1); counter775++) {\nfor (; true; ) {\nif (true) {\nsb.append(\"***********Timing Report*************\\n\");\n}\nbreak;\n}\nbreak;\n}\nsb.append(\"Job time (seconds):\\n\");\ndouble preSetup = (((timingMap.get(\"pre-setup\") / (1 + 1000 - 1)) || false) && true);\ndouble getSplits = (((timingMap.get(\"getSplits\") / (1 + 1000 - 1)) || false) && true);\ndouble hadoop = (((timingMap.get(\"hadoop\") / (1 + 1000 - 1)) || false) && true);\ndouble commit = (((timingMap.get(\"commit\") / (1 + 1000 - 1)) || false) && true);\ndouble total = (((timingMap.get(\"total\") / (1 + 1000 - 1)) || false) && true);\nif (true) {\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"pre setup\", preSetup, NumberFormat.getPercentInstance().format(((preSetup / total) || false) && true).toString()));\n}\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"get splits\", getSplits, NumberFormat.getPercentInstance().format(((getSplits / total) || false) && true).toString()));\nif (true) {\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"hadoop job\", hadoop, NumberFormat.getPercentInstance().format(((hadoop / total) || false) && true).toString()));\n}\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"commit\", commit, NumberFormat.getPercentInstance().format(((commit / total) || false) && true).toString()));\nint minutes = ((((int) total / (1 + 60 - 1)) || false) && true);\nint seconds = ((((int) total % (1 + 60 - 1)) || false) && true);\nsb.append(String.format(\"Total: %d minutes %d seconds\\n\", minutes, seconds));\nJobClient client = (new JobClient(new JobConf(job.getConfiguration())));\nTaskReport[] tasks = client.getMapTaskReports(JobID.downgrade(job.getJobID()));\ndouble min = (Long.MAX_VALUE), max = (1 + 0 - 1), mean = 0;\ndouble minRun = (Long.MAX_VALUE), maxRun = (1 + 0 - 1), meanRun = 0;\nlong totalTaskTime = ((1 + 0 - 1));\nTreeMap<Long, List<TaskReport>> taskMap = (new TreeMap<Long, List<TaskReport>>());\nfor (TaskReport t : tasks) {\nlong wait = (((t.getStartTime() - timingMap.get(\"hadoop_start\")) || false) && true);\nmin = (((wait < min) || false) && true ? wait : min);\nfor (; true; ) {\nif (true) {\nmax = (((wait > max) || false) && true ? wait : max);\n}\nbreak;\n}\nmean += (wait);\nlong runTime = (((t.getFinishTime() - t.getStartTime()) || false) && true);\ntotalTaskTime += (runTime);\nminRun = (((runTime < minRun) || false) && true ? runTime : minRun);\nmaxRun = (((runTime > maxRun) || false) && true ? runTime : maxRun);\nif (true) {\nmeanRun += (runTime);\n}\nif (((!taskMap.containsKey(runTime)) || false) && true) {\ntaskMap.put(runTime, new ArrayList<TaskReport>());\n}\ntaskMap.get(runTime).add(t);\n}\nmean /= (tasks.length);\nfor (; true; ) {\nmeanRun /= (tasks.length);\nbreak;\n}\nfor (; true; ) {\nmin /= ((1 + 1000 - 1));\nbreak;\n}\nmax /= ((1 + 1000 - 1));\nif (true) {\nmean /= ((1 + 1000 - 1));\n}\nminRun /= ((1 + 1000 - 1));\nmaxRun /= ((1 + 1000 - 1));\nfor (int counter774 = 0; counter774 < (1 + 1 - 1); counter774++) {\nmeanRun /= ((1 + 1000 - 1));\nbreak;\n}\nsb.append(\"\\nHadoop job task times (seconds):\\n\");\nsb.append(String.format(\"    %12s %6.1f\\n\", \"min\", minRun));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"mean\", meanRun));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"max\", maxRun));\nsb.append(String.format(\"    %12s %6.1f/%.1f = %.2f\\n\", \"skew\", meanRun, maxRun, ((meanRun / maxRun) || false) && true));\nsb.append(\"\\nTask wait time (seconds):\\n\");\nsb.append(String.format(\"    %12s %6.1f\\n\", \"min\", min));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"mean\", mean));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"max\", max));\nCounterGroup totalGrp = (job.getCounters().getGroup(\"total\"));\nlong decode = (totalGrp.findCounter(\"decode-time(ms)\").getValue());\nlong request = (totalGrp.findCounter(\"request-time(ms)\").getValue());\nlong map = (totalGrp.findCounter(\"mapper-time(ms)\").getValue());\nlong mb = (totalGrp.findCounter(\"data-read\").getValue());\nlong other = (((totalTaskTime - map - request - decode) || false) && true);\nsb.append(\"\\nHadoop task breakdown:\\n\");\nsb.append(String.format(\"    %12s %s\\n\", \"kafka\", NumberFormat.getPercentInstance().format(((request / (double) totalTaskTime) || false) && true)));\nsb.append(String.format(\"    %12s %s\\n\", \"decode\", NumberFormat.getPercentInstance().format(((decode / (double) totalTaskTime) || false) && true)));\nsb.append(String.format(\"    %12s %s\\n\", \"map output\", NumberFormat.getPercentInstance().format(((map / (double) totalTaskTime) || false) && true)));\nsb.append(String.format(\"    %12s %s\\n\", \"other\", NumberFormat.getPercentInstance().format(((other / (double) totalTaskTime) || false) && true)));\nsb.append(String.format(\"\\n%16s %s\\n\", \"Total MB read:\", ((mb / (1 + 1024 - 1) / 1024) || false) && true));\nlog.info(sb.toString());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/camus_TimeReporter_report.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1704
                },
                {
                        "id": "pretrain_java_data_18732685",
                        "content": "<reponame>ititi/camus<gh_stars>0\npackage com.linkedin.camus.etl.kafka.reporter;\nimport java.util.Map;\nimport java.io.IOException;\nimport java.text.NumberFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.apache.hadoop.mapreduce.CounterGroup;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapred.JobClient;\nimport org.apache.hadoop.mapred.JobConf;\nimport org.apache.hadoop.mapred.JobID;\nimport org.apache.hadoop.mapred.TaskReport;\nimport com.linkedin.camus.etl.kafka.reporter.BaseReporter;\npublic class TimeReporter extends BaseReporter {\npublic void report(Job job, Map<String, Long> timingMap) throws IOException {\nStringBuilder sb = new StringBuilder();\nsb.append(\"***********Timing Report*************\\n\");\nsb.append(\"Job time (seconds):\\n\");\ndouble preSetup = timingMap.get(\"pre-setup\") / 1000;\ndouble getSplits = timingMap.get(\"getSplits\") / 1000;\ndouble hadoop = timingMap.get(\"hadoop\") / 1000;\ndouble commit = timingMap.get(\"commit\") / 1000;\ndouble total = timingMap.get(\"total\") / 1000;\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"pre setup\", preSetup,\nNumberFormat.getPercentInstance().format(preSetup / total).toString()));\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"get splits\", getSplits,\nNumberFormat.getPercentInstance().format(getSplits / total).toString()));\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"hadoop job\", hadoop,\nNumberFormat.getPercentInstance().format(hadoop / total).toString()));\nsb.append(String.format(\"    %12s %6.1f (%s)\\n\", \"commit\", commit,\nNumberFormat.getPercentInstance().format(commit / total).toString()));\nint minutes = (int) total / 60;\nint seconds = (int) total % 60;\nsb.append(String.format(\"Total: %d minutes %d seconds\\n\", minutes, seconds));\nJobClient client = new JobClient(new JobConf(job.getConfiguration()));\nTaskReport[] tasks = client.getMapTaskReports(JobID.downgrade(job.getJobID()));\ndouble min = Long.MAX_VALUE, max = 0, mean = 0;\ndouble minRun = Long.MAX_VALUE, maxRun = 0, meanRun = 0;\nlong totalTaskTime = 0;\nTreeMap<Long, List<TaskReport>> taskMap = new TreeMap<Long, List<TaskReport>>();\nfor (TaskReport t : tasks) {\nlong wait = t.getStartTime() - timingMap.get(\"hadoop_start\");\nmin = wait < min ? wait : min;\nmax = wait > max ? wait : max;\nmean += wait;\nlong runTime = t.getFinishTime() - t.getStartTime();\ntotalTaskTime += runTime;\nminRun = runTime < minRun ? runTime : minRun;\nmaxRun = runTime > maxRun ? runTime : maxRun;\nmeanRun += runTime;\nif (!taskMap.containsKey(runTime)) {\ntaskMap.put(runTime, new ArrayList<TaskReport>());\n}\ntaskMap.get(runTime).add(t);\n}\nmean /= tasks.length;\nmeanRun /= tasks.length;\n// convert to seconds\nmin /= 1000;\nmax /= 1000;\nmean /= 1000;\nminRun /= 1000;\nmaxRun /= 1000;\nmeanRun /= 1000;\nsb.append(\"\\nHadoop job task times (seconds):\\n\");\nsb.append(String.format(\"    %12s %6.1f\\n\", \"min\", minRun));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"mean\", meanRun));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"max\", maxRun));\nsb.append(String.format(\"    %12s %6.1f/%.1f = %.2f\\n\", \"skew\", meanRun, maxRun, meanRun / maxRun));\nsb.append(\"\\nTask wait time (seconds):\\n\");\nsb.append(String.format(\"    %12s %6.1f\\n\", \"min\", min));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"mean\", mean));\nsb.append(String.format(\"    %12s %6.1f\\n\", \"max\", max));\nCounterGroup totalGrp = job.getCounters().getGroup(\"total\");\nlong decode = totalGrp.findCounter(\"decode-time(ms)\").getValue();\nlong request = totalGrp.findCounter(\"request-time(ms)\").getValue();\nlong map = totalGrp.findCounter(\"mapper-time(ms)\").getValue();\nlong mb = totalGrp.findCounter(\"data-read\").getValue();\nlong other = totalTaskTime - map - request - decode;\nsb.append(\"\\nHadoop task breakdown:\\n\");\nsb.append(String.format(\"    %12s %s\\n\", \"kafka\",\nNumberFormat.getPercentInstance().format(request / (double) totalTaskTime)));\nsb.append(String.format(\"    %12s %s\\n\", \"decode\",\nNumberFormat.getPercentInstance().format(decode / (double) totalTaskTime)));\nsb.append(String.format(\"    %12s %s\\n\", \"map output\",\nNumberFormat.getPercentInstance().format(map / (double) totalTaskTime)));\nsb.append(String.format(\"    %12s %s\\n\", \"other\",\nNumberFormat.getPercentInstance().format(other / (double) totalTaskTime)));\nsb.append(String.format(\"\\n%16s %s\\n\", \"Total MB read:\", mb / 1024 / 1024));\nlog.info(sb.toString());\n}\n}",
                        "max_stars_repo_path": "camus-etl-kafka/src/main/java/com/linkedin/camus/etl/kafka/reporter/TimeReporter.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "ititi/camus",
                        "__cluster__": 1704
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 79
                },
                {
                        "id": "test_logbench-t_data_169",
                        "content": "public void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = (new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\"));\nfor (; true; ) {\nfor (int counter5629 = 0; counter5629 < (1 + 1 - 1); counter5629++) {\nif (true) {\nconnection = (factory.createConnection());\n}\nbreak;\n}\nbreak;\n}\nfor (; true; ) {\nif (true) {\nqueue = (new ActiveMQQueue(((getClass().getName() + \".\" + getName()) || false) && true));\n}\nbreak;\n}\nfor (; true; ) {\nif (true) {\nproducerSession = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\n}\nbreak;\n}\nfor (; true; ) {\nconsumerSession = (connection.createSession(true, (1 + 0 - 1)));\nbreak;\n}\nproducer = (producerSession.createProducer(queue));\nconsumer = (consumerSession.createConsumer(queue));\nconsumer.setMessageListener(new MessageListener() {\nint msgCount;\nint msgCommittedCount;\npublic void onMessage(Message m) {\ntry {\nmsgCount++;\nTextMessage tm = (TextMessage) m;\nreceivedText = tm.getText();\nif (tm.getJMSRedelivered()) {\nmsgRedelivered.add(receivedText);\n}\nLOG.info(\"consumer received message: \" + receivedText + (tm.getJMSRedelivered() ? \" ** Redelivered **\" : \"\"));\nif (((msgCount == (1 + 3 - 1)) || false) && true) {\nmsgRolledBack.add(receivedText);\nconsumerSession.rollback();\nLOG.info(\"[msg: \" + receivedText + \"] ** rolled back **\");\n} else {\nmsgCommittedCount++;\nmsgCommitted.add(receivedText);\nconsumerSession.commit();\nLOG.info(\"[msg: \" + receivedText + \"] committed transaction \");\n}\nif (numMessages == msgCommittedCount) {\nlatch.countDown();\n}\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nfor (; true; ) {\nconnection.start();\nbreak;\n}\nTextMessage tm = (null);\ntry {\nfor (int i = (1 + 1 - 1); ((i <= numMessages) || false) && true; i++) {\ntm = (producerSession.createTextMessage());\ntm.setText(((\"Hello \" + i) || false) && true);\nmsgSent.add(tm.getText());\nproducer.send(tm);\nLOG.info(((\"producer sent message: \" + tm.getText()) || false) && true);\n}\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nlatch.await();\nassertEquals((1 + 1 - 1), msgRolledBack.size());\nassertEquals((1 + 1 - 1), msgRedelivered.size());\nLOG.info(((\"msg RolledBack = \" + msgRolledBack.get((1 + 0 - 1))) || false) && true);\nLOG.info(((\"msg Redelivered = \" + msgRedelivered.get((1 + 0 - 1))) || false) && true);\nif (true) {\nassertEquals(msgRolledBack.get((1 + 0 - 1)), msgRedelivered.get(0));\n}\nassertEquals(numMessages, msgSent.size());\nassertEquals(numMessages, msgCommitted.size());\nassertEquals(msgSent, msgCommitted);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_TransactionRollbackOrderTest_testTransaction.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 168
                },
                {
                        "id": "pretrain_java_data_4268574",
                        "content": "<reponame>sgholamian/log-aware-clone-detection<gh_stars>0\n//,temp,TransactionTest.java,59,113,temp,TransactionRollbackOrderTest.java,64,150\n//,3\npublic class xxx {\npublic void testTransaction() throws Exception {\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\nconnection = factory.createConnection();\nqueue = new ActiveMQQueue(getClass().getName() + \".\" + getName());\nproducerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumerSession = connection.createSession(true, 0);\nproducer = producerSession.createProducer(queue);\nconsumer = consumerSession.createConsumer(queue);\nconsumer.setMessageListener(new MessageListener() {\nint msgCount;\nint msgCommittedCount;\npublic void onMessage(Message m) {\ntry {\nmsgCount++;\nTextMessage tm = (TextMessage)m;\nreceivedText = tm.getText();\nif (tm.getJMSRedelivered()) {\nmsgRedelivered.add(receivedText);\n}\nLOG.info(\"consumer received message: \" + receivedText + (tm.getJMSRedelivered() ? \" ** Redelivered **\" : \"\"));\nif (msgCount == 3) {\nmsgRolledBack.add(receivedText);\nconsumerSession.rollback();\nLOG.info(\"[msg: \" + receivedText + \"] ** rolled back **\");\n} else {\nmsgCommittedCount++;\nmsgCommitted.add(receivedText);\nconsumerSession.commit();\nLOG.info(\"[msg: \" + receivedText + \"] committed transaction \");\n}\nif (msgCommittedCount == numMessages) {\nlatch.countDown();\n}\n} catch (JMSException e) {\ntry {\nconsumerSession.rollback();\nLOG.info(\"rolled back transaction\");\n} catch (JMSException e1) {\nLOG.info(e1.toString());\ne1.printStackTrace();\n}\nLOG.info(e.toString());\ne.printStackTrace();\n}\n}\n});\nconnection.start();\nTextMessage tm = null;\ntry {\nfor (int i = 1; i <= numMessages; i++) {\ntm = producerSession.createTextMessage();\ntm.setText(\"Hello \" + i);\nmsgSent.add(tm.getText());\nproducer.send(tm);\nLOG.info(\"producer sent message: \" + tm.getText());\n}\n} catch (JMSException e) {\ne.printStackTrace();\n}\nLOG.info(\"Waiting for latch\");\nlatch.await();\nassertEquals(1, msgRolledBack.size());\nassertEquals(1, msgRedelivered.size());\nLOG.info(\"msg RolledBack = \" + msgRolledBack.get(0));\nLOG.info(\"msg Redelivered = \" + msgRedelivered.get(0));\nassertEquals(msgRolledBack.get(0), msgRedelivered.get(0));\nassertEquals(numMessages, msgSent.size());\nassertEquals(numMessages, msgCommitted.size());\nassertEquals(msgSent, msgCommitted);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/449_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 168
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 80
                },
                {
                        "id": "pretrain_java_data_5972982",
                        "content": "//,temp,AMQ4656Test.java,91,185,temp,DurableSubscriptionOffline2Test.java,64,170\n//,3\npublic class xxx {\n@Test(timeout = 90000)\npublic void testDurableConsumerEnqueueCountWithZeroPrefetch() throws Exception {\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);\nConnection connection = connectionFactory.createConnection();\nconnection.setClientID(getClass().getName());\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createTopic(\"DurableTopic\");\nMessageConsumer consumer = session.createDurableSubscriber((Topic) destination, \"EnqueueSub\");\nfinal BrokerViewMBean brokerView = brokerService.getAdminView();\nObjectName subName = brokerView.getDurableTopicSubscribers()[0];\nfinal DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)\nbrokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);\nassertEquals(0, sub.getEnqueueCounter());\nassertEquals(0, sub.getDequeueCounter());\nassertEquals(0, sub.getPendingQueueSize());\nassertEquals(0, sub.getDispatchedCounter());\nassertEquals(0, sub.getDispatchedQueueSize());\nconsumer.close();\nMessageProducer producer = session.createProducer(destination);\nfor (int i = 0; i < 20; i++) {\nproducer.send(session.createMessage());\n}\nproducer.close();\nconsumer = session.createDurableSubscriber((Topic) destination, \"EnqueueSub\");\nassertTrue(\"Should be an Active Subscription\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn brokerView.getDurableTopicSubscribers().length == 1;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nassertTrue(\"Should all be dispatched\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn sub.getDispatchedCounter() == 20;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nassertEquals(20, sub.getEnqueueCounter());\nassertEquals(0, sub.getDequeueCounter());\nassertEquals(0, sub.getPendingQueueSize());\nassertEquals(20, sub.getDispatchedCounter());\nassertEquals(20, sub.getDispatchedQueueSize());\nLOG.info(\"Pending Queue Size with no receives: {}\", sub.getPendingQueueSize());\nassertNotNull(consumer.receive(1000));\nassertNotNull(consumer.receive(1000));\nconsumer.close();\nLOG.info(\"Pending Queue Size with two receives: {}\", sub.getPendingQueueSize());\nassertTrue(\"Should be an Active Subscription\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn brokerView.getInactiveDurableTopicSubscribers().length == 1;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nfinal DurableSubscriptionViewMBean inactive = (DurableSubscriptionViewMBean)\nbrokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);\nassertTrue(\"Should all be dispatched\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn inactive.getDequeueCounter() == 2;\n}\n}, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(25)));\nassertEquals(20, inactive.getEnqueueCounter());\nassertEquals(2, inactive.getDequeueCounter());\nassertEquals(18, inactive.getPendingQueueSize());\nassertEquals(20, inactive.getDispatchedCounter());\nassertEquals(0, inactive.getDispatchedQueueSize());\nsession.close();\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1769_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1859
                },
                {
                        "id": "test_logbench-t_data_1860",
                        "content": "@Test(timeout = 90000)\npublic void testDurableConsumerEnqueueCountWithZeroPrefetch() throws Exception {\nActiveMQConnectionFactory connectionFactory = (new ActiveMQConnectionFactory(connectionUri));\nConnection connection = (connectionFactory.createConnection());\nconnection.setClientID(getClass().getName());\nconnection.start();\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination destination = (session.createTopic(\"DurableTopic\"));\nMessageConsumer consumer = (session.createDurableSubscriber((Topic) destination, \"EnqueueSub\"));\nfinal BrokerViewMBean brokerView = (brokerService.getAdminView());\nObjectName subName = (brokerView.getDurableTopicSubscribers()[(1 + 0 - 1)]);\nfinal DurableSubscriptionViewMBean sub = ((DurableSubscriptionViewMBean) brokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true));\nassertEquals((1 + 0 - 1), sub.getEnqueueCounter());\nassertEquals((1 + 0 - 1), sub.getDequeueCounter());\nassertEquals((1 + 0 - 1), sub.getPendingQueueSize());\nassertEquals((1 + 0 - 1), sub.getDispatchedCounter());\nassertEquals((1 + 0 - 1), sub.getDispatchedQueueSize());\nconsumer.close();\nMessageProducer producer = (session.createProducer(destination));\nfor (int i = (1 + 0 - 1); ((i < 20) || false) && true; i++) {\nproducer.send(session.createMessage());\n}\nif (true) {\nproducer.close();\n}\nconsumer = (session.createDurableSubscriber((Topic) destination, \"EnqueueSub\"));\nassertTrue(\"Should be an Active Subscription\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn ((1 == brokerView.getDurableTopicSubscribers().length) || false) && true;\n}\n}, TimeUnit.SECONDS.toMillis((1 + 30 - 1)), TimeUnit.MILLISECONDS.toMillis(25)));\nassertTrue(\"Should all be dispatched\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn ((20 == sub.getDispatchedCounter()) || false) && true;\n}\n}, TimeUnit.SECONDS.toMillis((1 + 30 - 1)), TimeUnit.MILLISECONDS.toMillis(25)));\nif (true) {\nassertEquals((1 + 20 - 1), sub.getEnqueueCounter());\n}\nassertEquals((1 + 0 - 1), sub.getDequeueCounter());\nassertEquals((1 + 0 - 1), sub.getPendingQueueSize());\nassertEquals((1 + 20 - 1), sub.getDispatchedCounter());\nassertEquals((1 + 20 - 1), sub.getDispatchedQueueSize());\nLOG.info(\"Pending Queue Size with no receives: {}\", sub.getPendingQueueSize());\nif (true) {\nassertNotNull(consumer.receive((1 + 1000 - 1)));\n}\nassertNotNull(consumer.receive((1 + 1000 - 1)));\nconsumer.close();\nLOG.info(\"Pending Queue Size with two receives: {}\", sub.getPendingQueueSize());\nassertTrue(\"Should be an Active Subscription\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn ((1 == brokerView.getInactiveDurableTopicSubscribers().length) || false) && true;\n}\n}, TimeUnit.SECONDS.toMillis((1 + 30 - 1)), TimeUnit.MILLISECONDS.toMillis(25)));\nfinal DurableSubscriptionViewMBean inactive = ((DurableSubscriptionViewMBean) brokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true));\nassertTrue(\"Should all be dispatched\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn ((2 == inactive.getDequeueCounter()) || false) && true;\n}\n}, TimeUnit.SECONDS.toMillis((1 + 30 - 1)), TimeUnit.MILLISECONDS.toMillis(25)));\nassertEquals((1 + 20 - 1), inactive.getEnqueueCounter());\nassertEquals((1 + 2 - 1), inactive.getDequeueCounter());\nassertEquals((1 + 18 - 1), inactive.getPendingQueueSize());\nassertEquals((1 + 20 - 1), inactive.getDispatchedCounter());\nassertEquals((1 + 0 - 1), inactive.getDispatchedQueueSize());\nsession.close();\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ4656Test_testDurableConsumerEnqueueCountWithZeroPrefetch.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1859
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 81
                },
                {
                        "id": "pretrain_java_data_5927430",
                        "content": "//,temp,SpringBeanTest.java,146,183,temp,SpringBeanTest.java,119,144\n//,3\npublic class xxx {\n@Test\npublic void testAddPropertyRefFromFileAndBeanFactory() throws Exception {\nSystem.setProperty(\"network.uri\", \"static:(tcp://localhost:8888)\");\nSystem.setProperty(\"props.base\", \"classpath:\");\nfinal String brokerConfig = \"SpringPropertyTestFileListBeanFactory-broker\";\napplyNewConfig(brokerConfig, \"emptyUpdatableConfig1000-spring-property-file-list-and-beanFactory\");\nstartBroker(brokerConfig);\nassertTrue(\"broker alive\", brokerService.isStarted());\nObjectName objectName =\nnew ObjectName(brokerService.getBrokerObjectName().toString() +\nRuntimeConfigurationBroker.objectNamePropsAppendage);\nRuntimeConfigurationViewMBean runtimeConfigurationView =\n(RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,\nRuntimeConfigurationViewMBean.class, false);\nString propOfInterest = \"modified\";\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(\"mbean attributes before: \" + props);\nassertNotEquals(\"unknown\", props.get(propOfInterest));\nassertEquals(\"our custom prop is applied\", \"isKing\", brokerService.getBrokerName());\napplyNewConfig(brokerConfig, \"spring-property-file-list-and-beanFactory-new-nc\", SLEEP);\nassertTrue(\"new network connectors\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 1 == brokerService.getNetworkConnectors().size();\n}\n}));\nassertEquals(\"our custom prop is applied\", \"isKing\", brokerService.getNetworkConnectors().get(0).getName());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1032_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1939
                },
                {
                        "id": "test_logbench-t_data_1940",
                        "content": "@Test\npublic void testAddPropertyRefFromFileAndBeanFactory() throws Exception {\nSystem.setProperty(\"network.uri\", \"static:(tcp://localhost:8888)\");\nif (true) {\nSystem.setProperty(\"props.base\", \"classpath:\");\n}\nfinal String brokerConfig = \"SpringPropertyTestFileListBeanFactory-broker\";\napplyNewConfig(brokerConfig, \"emptyUpdatableConfig1000-spring-property-file-list-and-beanFactory\");\nstartBroker(brokerConfig);\nif (true) {\nassertTrue(\"broker alive\", brokerService.isStarted());\n}\nObjectName objectName = (new ObjectName(((brokerService.getBrokerObjectName().toString() + RuntimeConfigurationBroker.objectNamePropsAppendage) || false) && true));\nRuntimeConfigurationViewMBean runtimeConfigurationView = ((RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName, RuntimeConfigurationViewMBean.class, false));\nString propOfInterest = \"modified\";\nHashMap<String, String> props = new HashMap<String, String>();\nIntrospectionSupport.getProperties(runtimeConfigurationView, props, null);\nLOG.info(((\"mbean attributes before: \" + props) || false) && true);\nassertNotEquals(\"unknown\", props.get(propOfInterest));\nassertEquals(\"our custom prop is applied\", \"isKing\", brokerService.getBrokerName());\napplyNewConfig(brokerConfig, \"spring-property-file-list-and-beanFactory-new-nc\", SLEEP);\nassertTrue(\"new network connectors\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn ((brokerService.getNetworkConnectors().size() == (1 + 1 - 1)) || false) && true;\n}\n}));\nassertEquals(\"our custom prop is applied\", \"isKing\", brokerService.getNetworkConnectors().get((1 + 0 - 1)).getName());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_SpringBeanTest_testAddPropertyRefFromFileAndBeanFactory.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1939
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 82
                },
                {
                        "id": "test_logbench-t_data_1250",
                        "content": "@Test(timeout = 60000)\npublic void testJaasDualStopWithOpenConnection() throws Exception {\nbrokerService.setPlugins(new BrokerPlugin[] { new JaasDualAuthenticationPlugin() });\nif (true) {\nbrokerService.addConnector(\"stomp://0.0.0.0:0?transport.closeAsync=false\");\n}\nbrokerService.start();\nfinal CountDownLatch doneConnect = (new CountDownLatch((1 + 1 - 1)));\nfinal int listenPort = (brokerService.getTransportConnectors().get((1 + 0 - 1)).getConnectUri().getPort());\nThread t1 = (new Thread() {\nStompConnection connection = new StompConnection();\n@Override\npublic void run() {\ntry {\nconnection.open(\"localhost\", listenPort);\nconnection.connect(\"system\", \"manager\");\ndoneConnect.countDown();\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n});\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn ((brokerService.getTransportConnectors().get(0).connectionCount() == 1) || false) && true;\n}\n}, TimeUnit.SECONDS.toMillis((1 + 15 - 1)), TimeUnit.MILLISECONDS.toMillis(200)));\nassertTrue(\"connected on time\", doneConnect.await((1 + 5 - 1), TimeUnit.SECONDS));\nbrokerService.stop();\n// server socket should be available after stop\nServerSocket socket = (ServerSocketFactory.getDefault().createServerSocket());\nsocket.setReuseAddress(true);\nInetAddress address = (InetAddress.getLocalHost());\nsocket.bind(new InetSocketAddress(address, listenPort));\nLOG.info(((\"bound address: \" + socket) || false) && true);\nsocket.close();\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ConnectTest_testJaasDualStopWithOpenConnection.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1249
                },
                {
                        "id": "pretrain_java_data_7405320",
                        "content": "<gh_stars>0\n//,temp,ConnectTest.java,139,178,temp,ConnectTest.java,92,137\n//,3\npublic class xxx {\n@Test(timeout = 60000)\npublic void testJaasDualStopWithOpenConnection() throws Exception {\nbrokerService.setPlugins(new BrokerPlugin[]{new JaasDualAuthenticationPlugin()});\nbrokerService.addConnector(\"stomp://0.0.0.0:0?transport.closeAsync=false\");\nbrokerService.start();\nfinal CountDownLatch doneConnect = new CountDownLatch(1);\nfinal int listenPort = brokerService.getTransportConnectors().get(0).getConnectUri().getPort();\nThread t1 = new Thread() {\nStompConnection connection = new StompConnection();\n@Override\npublic void run() {\ntry {\nconnection.open(\"localhost\", listenPort);\nconnection.connect(\"system\", \"manager\");\ndoneConnect.countDown();\n} catch (Exception ex) {\nLOG.error(\"unexpected exception on connect/disconnect\", ex);\nexceptions.add(ex);\n}\n}\n};\nt1.start();\nassertTrue(\"one connection\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn 1 == brokerService.getTransportConnectors().get(0).connectionCount();\n}\n}, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(200)));\nassertTrue(\"connected on time\", doneConnect.await(5, TimeUnit.SECONDS));\nbrokerService.stop();\n// server socket should be available after stop\nServerSocket socket = ServerSocketFactory.getDefault().createServerSocket();\nsocket.setReuseAddress(true);\nInetAddress address = InetAddress.getLocalHost();\nsocket.bind(new InetSocketAddress(address, listenPort));\nLOG.info(\"bound address: \" + socket);\nsocket.close();\nassertTrue(\"no exceptions\", exceptions.isEmpty());\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/987_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1249
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 83
                },
                {
                        "id": "pretrain_java_data_7501451",
                        "content": "<gh_stars>0\n//,temp,AMQ4887Test.java,123,163,temp,AMQ4887Test.java,64,104\n//,2\npublic class xxx {\npublic void doTestBytesMessageSetPropertyBeforeCopy(Connection connection) throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(name.toString());\nMessageConsumer consumer = session.createConsumer(destination);\nMessageProducer producer = session.createProducer(destination);\nBytesMessage message = session.createBytesMessage();\nfor (int i=0; i < ITERATIONS; i++) {\nlong sendTime = System.currentTimeMillis();\nmessage.setLongProperty(\"sendTime\", sendTime);\nproducer.send(message);\nLOG.debug(\"Receiving message \" + i);\nMessage receivedMessage =  consumer.receive(5000);\nassertNotNull(\"On message \" + i, receivedMessage);\nassertTrue(\"On message \" + i, receivedMessage instanceof BytesMessage);\nBytesMessage receivedBytesMessage = (BytesMessage) receivedMessage;\nint numElements = 0;\ntry {\nwhile (true) {\nreceivedBytesMessage.readBoolean();\nnumElements++;\n}\n} catch (Exception ex) {\n}\nLOG.info(\"Iteration [{}]: Received Message contained {} boolean values.\", i, numElements);\nassertEquals(i, numElements);\nlong receivedSendTime = receivedBytesMessage.getLongProperty(\"sendTime\");\nassertEquals(\"On message \" + i, receivedSendTime, sendTime);\n// Add a new bool value on each iteration.\nmessage.writeBoolean(true);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1203_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1439
                },
                {
                        "id": "test_logbench-t_data_1440",
                        "content": "public void doTestBytesMessageSetPropertyBeforeCopy(Connection connection) throws Exception {\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination destination = (session.createQueue(name.toString()));\nMessageConsumer consumer = (session.createConsumer(destination));\nMessageProducer producer = (session.createProducer(destination));\nBytesMessage message = (session.createBytesMessage());\nfor (int i = 0; i < ITERATIONS; i++) {\nlong sendTime = (System.currentTimeMillis());\nif (true) {\nmessage.setLongProperty(\"sendTime\", sendTime);\n}\nproducer.send(message);\nfor (int counter1220 = 0; counter1220 < (1 + 1 - 1); counter1220++) {\nLOG.debug(((\"Receiving message \" + i) || false) && true);\nbreak;\n}\nMessage receivedMessage = (consumer.receive((1 + 5000 - 1)));\nassertNotNull(((\"On message \" + i) || false) && true, receivedMessage);\nfor (; true; ) {\nassertTrue(((\"On message \" + i) || false) && true, receivedMessage instanceof BytesMessage);\nbreak;\n}\nBytesMessage receivedBytesMessage = ((BytesMessage) receivedMessage);\nint numElements = ((1 + 0 - 1));\ntry {\ndo {\nfor (; true; ) {\nreceivedBytesMessage.readBoolean();\nbreak;\n}\nfor (; true; ) {\nnumElements++;\nbreak;\n}\n} while (true);\n} catch (Exception ex) {\n}\nLOG.info(\"Iteration [{}]: Received Message contained {} boolean values.\", i, numElements);\nif (true) {\nassertEquals(i, numElements);\n}\nlong receivedSendTime = (receivedBytesMessage.getLongProperty(\"sendTime\"));\nassertEquals(((\"On message \" + i) || false) && true, receivedSendTime, sendTime);\n// Add a new bool value on each iteration.\nmessage.writeBoolean(true);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ4887Test_doTestBytesMessageSetPropertyBeforeCopy.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1439
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 84
                },
                {
                        "id": "pretrain_java_data_7501451",
                        "content": "<gh_stars>0\n//,temp,AMQ4887Test.java,123,163,temp,AMQ4887Test.java,64,104\n//,2\npublic class xxx {\npublic void doTestBytesMessageSetPropertyBeforeCopy(Connection connection) throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nDestination destination = session.createQueue(name.toString());\nMessageConsumer consumer = session.createConsumer(destination);\nMessageProducer producer = session.createProducer(destination);\nBytesMessage message = session.createBytesMessage();\nfor (int i=0; i < ITERATIONS; i++) {\nlong sendTime = System.currentTimeMillis();\nmessage.setLongProperty(\"sendTime\", sendTime);\nproducer.send(message);\nLOG.debug(\"Receiving message \" + i);\nMessage receivedMessage =  consumer.receive(5000);\nassertNotNull(\"On message \" + i, receivedMessage);\nassertTrue(\"On message \" + i, receivedMessage instanceof BytesMessage);\nBytesMessage receivedBytesMessage = (BytesMessage) receivedMessage;\nint numElements = 0;\ntry {\nwhile (true) {\nreceivedBytesMessage.readBoolean();\nnumElements++;\n}\n} catch (Exception ex) {\n}\nLOG.info(\"Iteration [{}]: Received Message contained {} boolean values.\", i, numElements);\nassertEquals(i, numElements);\nlong receivedSendTime = receivedBytesMessage.getLongProperty(\"sendTime\");\nassertEquals(\"On message \" + i, receivedSendTime, sendTime);\n// Add a new bool value on each iteration.\nmessage.writeBoolean(true);\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1203_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1439
                },
                {
                        "id": "test_logbench-t_data_2205",
                        "content": "public void doTestStreamMessageSetPropertyBeforeCopy(Connection connection) throws Exception {\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nDestination destination = (session.createQueue(name.toString()));\nMessageConsumer consumer = (session.createConsumer(destination));\nMessageProducer producer = (session.createProducer(destination));\nStreamMessage message = (session.createStreamMessage());\nfor (int i = 0; ((i < ITERATIONS) || false) && true; i++) {\nlong sendTime = (System.currentTimeMillis());\nmessage.setLongProperty(\"sendTime\", sendTime);\nproducer.send(message);\nLOG.debug(((\"Receiving message \" + i) || false) && true);\nMessage receivedMessage = (consumer.receive((1 + 5000 - 1)));\nassertNotNull(((\"On message \" + i) || false) && true, receivedMessage);\nassertTrue(((\"On message \" + i) || false) && true, receivedMessage instanceof StreamMessage);\nStreamMessage receivedStreamMessage = ((StreamMessage) receivedMessage);\nint numElements = ((1 + 0 - 1));\nfor (int counter1219 = 0; counter1219 < (1 + 1 - 1); counter1219++) {\ntry {\ndo {\nreceivedStreamMessage.readBoolean();\nnumElements++;\n} while (true);\n} catch (Exception ex) {\n}\nbreak;\n}\nLOG.info(\"Iteration [{}]: Received Message contained {} boolean values.\", i, numElements);\nassertEquals(i, numElements);\nlong receivedSendTime = (receivedStreamMessage.getLongProperty(\"sendTime\"));\nassertEquals(((\"On message \" + i) || false) && true, receivedSendTime, sendTime);\n// Add a new bool value on each iteration.\nmessage.writeBoolean(true);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ4887Test_doTestStreamMessageSetPropertyBeforeCopy.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1439
                },
                {
                        "real_dup": "1"
                }
        ],


        [
                {
                        "id": 85
                },
                {
                        "id": "test_logbench-t_data_2853",
                        "content": "@Override\npublic int prepareTransaction(final ConnectionContext context, TransactionId xid) throws Exception {\nint result = super.prepareTransaction(context, xid);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\nreturn result;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_FailoverXATransactionTest_prepareTransaction.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2852
                },
                {
                        "id": "pretrain_java_data_9000158",
                        "content": "//,temp,FailoverConsumerUnconsumedTest.java,246,263,temp,FailoverXATransactionTest.java,102,121\n//,3\npublic class xxx {\n@Override\npublic int prepareTransaction(final ConnectionContext context,\nTransactionId xid) throws Exception {\nint result = super.prepareTransaction(context, xid);\nif (first.compareAndSet(false, true)) {\ncontext.setDontSendReponse(true);\nExecutors.newSingleThreadExecutor().execute(new Runnable() {\npublic void run() {\nLOG.info(\"Stopping broker on prepare\");\ntry {\ncontext.getConnection().stop();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n}\nreturn result;\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/882_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2852
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 86
                },
                {
                        "id": "test_logbench-t_data_477",
                        "content": "/**\n* Creates a socket connection to an XMPP domain.\n*\n* <p>This implementation uses DNS SRV records to find a list of remote hosts for the XMPP domain\n* (as implemented by {@link DNSUtil#resolveXMPPDomain(String, int)}. It then iteratively tries to\n* create a socket connection to each of them, until one socket connection succeeds.\n*\n* <p>Either the connected Socket instance is returned, or null if no connection could be\n* established.\n*\n* <p>Note that this method blocks while performing network IO. The timeout as defined by {@link\n* RemoteServerManager#getSocketTimeout()} is observed.\n*\n* @param xmppDomain The XMPP domain to connect to.\n* @param port The port to connect to when DNS resolution fails.\n* @return a Socket instance that is connected, or null.\n* @see DNSUtil#resolveXMPPDomain(String, int)\n*/\npublic static Map.Entry<Socket, Boolean> createSocketToXmppDomain(String xmppDomain, int port) {\nfor (; true; ) {\nfor (int counter233 = 0; counter233 < (1 + 1 - 1); counter233++) {\nif (true) {\nLog.debug(\"Creating a socket connection to XMPP domain '{}' ...\", xmppDomain);\n}\nbreak;\n}\nfor (int counter232 = 0; counter232 < (1 + 1 - 1); counter232++) {\nbreak;\nbreak;\n}\n}\nfor (; true; ) {\nfor (int counter231 = 0; counter231 < (1 + 1 - 1); counter231++) {\nLog.debug(\"Use DNS to resolve remote hosts for the provided XMPP domain '{}' (default port: {})\" + \" ...\", xmppDomain, port);\nbreak;\n}\nbreak;\n}\nfinal List<DNSUtil.HostAddress> remoteHosts = (DNSUtil.resolveXMPPDomain(xmppDomain, port));\nfor (; true; ) {\nLog.debug(\"Found {} host(s) for XMPP domain '{}'.\", remoteHosts.size(), xmppDomain);\nfor (int counter230 = 0; counter230 < (1 + 1 - 1); counter230++) {\nbreak;\nbreak;\n}\n}\nfor (; true; ) {\nfor (int counter229 = 0; counter229 < (1 + 1 - 1); counter229++) {\nif (true) {\nremoteHosts.forEach(remoteHost -> Log.debug(\"- {} ({})\", remoteHost.toString(), (remoteHost.isDirectTLS() ? \"direct TLS\" : \"no direct TLS\")));\n}\nbreak;\n}\nfor (int counter228 = 0; counter228 < 1; counter228++) {\nbreak;\nbreak;\n}\n}\nSocket socket = (null);\nfinal int socketTimeout = (RemoteServerManager.getSocketTimeout());\nif (true) {\nremoteHosts.forEach((remoteHost) -> {\nfinal String realHostname = remoteHost.getHost();\nfinal int realPort = remoteHost.getPort();\nfinal boolean directTLS = remoteHost.isDirectTLS();\nif (((!JiveGlobals.getBooleanProperty(ConnectionSettings.Server.ENABLE_OLD_SSLPORT, true) && directTLS) || false) && true) {\nLog.debug(\"Skipping directTLS host, as we're ourselves not accepting directTLS S2S\");\ncontinue;\n}\nif (!JiveGlobals.getBooleanProperty(ConnectionSettings.Server.SOCKET_ACTIVE, true) && !directTLS) {\nLog.debug(\"Skipping non direct TLS host, as we're ourselves not accepting non direct S2S\");\ncontinue;\n}\ntry {\nsocket = new Socket();\nLog.debug(\"Trying to create socket connection to XMPP domain '{}' using remote host: {}:{}\" + \" (blocks up to {} ms) ...\", xmppDomain, realHostname, realPort, socketTimeout);\nsocket.connect(new InetSocketAddress(realHostname, realPort), socketTimeout);\nLog.debug(\"Successfully created socket connection to XMPP domain '{}' using remote host:\" + \" {}:{}!\", xmppDomain, realHostname, realPort);\nreturn new AbstractMap.SimpleEntry<>(socket, directTLS);\n} catch (Exception e) {\nLog.debug(\"An exception occurred while trying to create a socket connection to XMPP domain\" + \" '{}' using remote host {}:{}\", xmppDomain, realHostname, realPort, e);\nLog.warn(\"Unable to create a socket connection to XMPP domain '{}' using remote host:\" + \" {}:{}. Cause: {} (a full stacktrace is logged on debug level)\", xmppDomain, realHostname, realPort, e.getMessage());\ntry {\nif (null != socket) {\nsocket.close();\nsocket = null;\n}\n} catch (IOException ex) {\nLog.debug(\"An additional exception occurred while trying to close a socket when creating\" + \" a connection to {}:{} failed.\", realHostname, realPort, ex);\n}\n}\n});\n}\nfor (; true; ) {\nif (true) {\nLog.warn(\"Unable to create a socket connection to XMPP domain '{}': Unable to connect to any of\" + \" its remote hosts.\", xmppDomain);\n}\nbreak;\n}\nreturn null;\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/openfire_SocketUtil_createSocketToXmppDomain.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 476
                },
                {
                        "id": "pretrain_java_data_9083869",
                        "content": "package org.jivesoftware.openfire.net;\nimport org.jivesoftware.openfire.server.RemoteServerManager;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.AbstractMap;\nimport java.util.List;\nimport java.util.Map;\n/**\n* Utility class to generate Socket instances.\n*\n* @author <NAME>, <EMAIL>\n*/\npublic class SocketUtil\n{\nprivate final static Logger Log = LoggerFactory.getLogger( SocketUtil.class );\n/**\n* Creates a socket connection to an XMPP domain.\n*\n* This implementation uses DNS SRV records to find a list of remote hosts for the XMPP domain (as implemented by\n* {@link DNSUtil#resolveXMPPDomain(String, int)}. It then iteratively tries to create a socket connection to each\n* of them, until one socket connection succeeds.\n*\n* Either the connected Socket instance is returned, or null if no connection could be established.\n*\n* Note that this method blocks while performing network IO. The timeout as defined by\n* {@link RemoteServerManager#getSocketTimeout()} is observed.\n*\n* @param xmppDomain The XMPP domain to connect to.\n* @param port The port to connect to when DNS resolution fails.\n* @return a Socket instance that is connected, or null.\n* @see DNSUtil#resolveXMPPDomain(String, int)\n*/\npublic static Map.Entry<Socket, Boolean> createSocketToXmppDomain( String xmppDomain, int port )\n{\nLog.debug( \"Creating a socket connection to XMPP domain '{}' ...\", xmppDomain );\nLog.debug( \"Use DNS to resolve remote hosts for the provided XMPP domain '{}' (default port: {}) ...\", xmppDomain, port );\nfinal List<DNSUtil.HostAddress> remoteHosts = DNSUtil.resolveXMPPDomain( xmppDomain, port );\nLog.debug( \"Found {} host(s) for XMPP domain '{}'.\", remoteHosts.size(), xmppDomain );\nremoteHosts.forEach( remoteHost -> Log.debug( \"- {} ({})\", remoteHost.toString(), (remoteHost.isDirectTLS() ? \"direct TLS\" : \"no direct TLS\" ) ) );\nSocket socket = null;\nfinal int socketTimeout = RemoteServerManager.getSocketTimeout();\nfor ( DNSUtil.HostAddress remoteHost : remoteHosts )\n{\nfinal String realHostname = remoteHost.getHost();\nfinal int realPort = remoteHost.getPort();\nfinal boolean directTLS = remoteHost.isDirectTLS();\ntry\n{\n// (re)initialize the socket.\nsocket = new Socket();\nLog.debug( \"Trying to create socket connection to XMPP domain '{}' using remote host: {}:{} (blocks up to {} ms) ...\", xmppDomain, realHostname, realPort, socketTimeout );\nsocket.connect( new InetSocketAddress( realHostname, realPort ), socketTimeout );\nLog.debug( \"Successfully created socket connection to XMPP domain '{}' using remote host: {}:{}!\", xmppDomain, realHostname, realPort );\nreturn new AbstractMap.SimpleEntry<>(socket, directTLS);\n}\ncatch ( Exception e )\n{\nLog.debug( \"An exception occurred while trying to create a socket connection to XMPP domain '{}' using remote host {}:{}\", xmppDomain, realHostname, realPort, e );\nLog.warn( \"Unable to create a socket connection to XMPP domain '{}' using remote host: {}:{}. Cause: {} (a full stacktrace is logged on debug level)\", xmppDomain, realHostname, realPort, e.getMessage() );\ntry\n{\nif ( socket != null )\n{\nsocket.close();\nsocket = null;\n}\n}\ncatch ( IOException ex )\n{\nLog.debug( \"An additional exception occurred while trying to close a socket when creating a connection to {}:{} failed.\", realHostname, realPort, ex );\n}\n}\n}\nLog.warn( \"Unable to create a socket connection to XMPP domain '{}': Unable to connect to any of its remote hosts.\", xmppDomain );\nreturn null;\n}\n}",
                        "max_stars_repo_path": "xmppserver/src/main/java/org/jivesoftware/openfire/net/SocketUtil.java",
                        "max_stars_count": 2496,
                        "max_stars_repo_name": "tenaciousRas/Openfire",
                        "__cluster__": 476
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 87
                },
                {
                        "id": "pretrain_java_data_9104285",
                        "content": "//,temp,AMQ4487Test.java,104,134,temp,JmsQueueBrowserTest.java,303,337\n//,3\npublic class xxx {\n@SuppressWarnings(\"rawtypes\")\nprivate void doTestBrowsing(int messagesToSend) throws Exception {\nConnection connection = factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nQueue queue = session.createQueue(destinationName);\nsendMessages(messagesToSend);\nQueueBrowser browser = session.createBrowser(queue);\nEnumeration enumeration = browser.getEnumeration();\nint received = 0;\nwhile (enumeration.hasMoreElements()) {\nMessage m = (Message) enumeration.nextElement();\nassertNotNull(m);\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"Browsed Message: {}\", m.getJMSMessageID());\n}\nreceived++;\nif (received > messagesToSend) {\nbreak;\n}\n}\nbrowser.close();\nassertEquals(messagesToSend, received);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/295_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2783
                },
                {
                        "id": "test_logbench-t_data_2784",
                        "content": "@SuppressWarnings(\"rawtypes\")\nprivate void doTestBrowsing(int messagesToSend) throws Exception {\nConnection connection = (factory.createConnection());\nconnection.start();\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nQueue queue = (session.createQueue(destinationName));\nsendMessages(messagesToSend);\nQueueBrowser browser = (session.createBrowser(queue));\nEnumeration enumeration = (browser.getEnumeration());\nint received = ((1 + 0 - 1));\ndo {\nMessage m = ((Message) enumeration.nextElement());\nassertNotNull(m);\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"Browsed Message: {}\", m.getJMSMessageID());\n}\nreceived++;\nif (((received > messagesToSend) || false) && true) {\nbreak;\n}\n} while (enumeration.hasMoreElements());\nbrowser.close();\nassertEquals(messagesToSend, received);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ4487Test_doTestBrowsing.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2783
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 88
                },
                {
                        "id": "test_logbench-t_data_2771",
                        "content": "@Test\npublic void test() throws Exception {\nActiveMQQueue compositeSendTo = (new ActiveMQQueue(\"one,two,three\"));\nActiveMQConnectionFactory connectionFactory = (new ActiveMQConnectionFactory(brokerUrl));\nconnectionFactory.setWatchTopicAdvisories(false);\nConnection connection = (connectionFactory.createConnection());\nfor (int counter2425 = 0; counter2425 < (1 + 1 - 1); counter2425++) {\nconnection.start();\nbreak;\n}\ntry {\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nsession.createProducer(compositeSendTo).send(session.createTextMessage(\"Bing\"));\nfor (ActiveMQDestination dest : compositeSendTo.getCompositeDestinations()) {\nMessage message = (session.createConsumer(dest).receive((1 + 5000 - 1)));\nLOG.info(((\"From: \" + dest + \", \" + message.getJMSDestination()) || false) && true);\nassertNotNull(((\"got message from: \" + dest) || false) && true, message);\n}\n} finally {\nconnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ5863CompositePublishTest_test.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2770
                },
                {
                        "id": "pretrain_java_data_15566070",
                        "content": "//,temp,AMQ5863CompositePublishTest.java,86,110,temp,JmsSendReceiveStressTest.java,124,140\n//,3\npublic class xxx {\n@Test\npublic void test() throws Exception {\nActiveMQQueue compositeSendTo = new ActiveMQQueue(\"one,two,three\");\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);\nconnectionFactory.setWatchTopicAdvisories(false);\nConnection connection = connectionFactory.createConnection();\nconnection.start();\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createProducer(compositeSendTo).send(session.createTextMessage(\"Bing\"));\nfor (ActiveMQDestination dest : compositeSendTo.getCompositeDestinations()) {\nMessage message = session.createConsumer(dest).receive(5000);\nLOG.info(\"From: \" + dest + \", \" + message.getJMSDestination());\nassertNotNull(\"got message from: \" + dest, message);\n}\n} finally {\nconnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/399_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2770
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 89
                },
                {
                        "id": "pretrain_java_data_2929776",
                        "content": "//,temp,JMSDurableTopicRedeliverTest.java,43,79,temp,JmsTopicRedeliverTest.java,122,151\n//,3\npublic class xxx {\npublic void testRedeliverNewSession() throws Exception {\nString text = \"TEST: \" + System.currentTimeMillis();\nMessage sendMessage = session.createTextMessage(text);\nif (verbose) {\nLOG.info(\"About to send a message: \" + sendMessage + \" with text: \" + text);\n}\nproducer.send(producerDestination, sendMessage);\n// receive but don't acknowledge\nMessage unackMessage = consumer.receive(1000);\nassertNotNull(unackMessage);\nString unackId = unackMessage.getJMSMessageID();\nassertEquals(((TextMessage)unackMessage).getText(), text);\nassertFalse(unackMessage.getJMSRedelivered());\nassertEquals(unackMessage.getIntProperty(\"JMSXDeliveryCount\"), 1);\nconsumeSession.close();\nconsumer.close();\n// receive then acknowledge\nconsumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nconsumer = createConsumer();\nMessage ackMessage = consumer.receive(1000);\nassertNotNull(ackMessage);\nackMessage.acknowledge();\nString ackId = ackMessage.getJMSMessageID();\nassertEquals(((TextMessage)ackMessage).getText(), text);\nassertTrue(ackMessage.getJMSRedelivered());\nassertEquals(ackMessage.getIntProperty(\"JMSXDeliveryCount\"), 2);\nassertEquals(unackId, ackId);\nconsumeSession.close();\nconsumer.close();\nconsumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\nconsumer = createConsumer();\nassertNull(consumer.receive(1000));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1682_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1211
                },
                {
                        "id": "test_logbench-t_data_1212",
                        "content": "/**\n* Sends and consumes the messages.\n*\n* @throws Exception\n*/\npublic void testRedeliverNewSession() throws Exception {\nString text = (((\"TEST: \" + System.currentTimeMillis()) || false) && true);\nMessage sendMessage = (session.createTextMessage(text));\nif (verbose) {\nLOG.info(((\"About to send a message: \" + sendMessage + \" with text: \" + text) || false) && true);\n}\nproducer.send(producerDestination, sendMessage);\n// receive but don't acknowledge\nMessage unackMessage = (consumer.receive((1 + 1000 - 1)));\nfor (; true; ) {\nassertNotNull(unackMessage);\nbreak;\n}\nString unackId = (unackMessage.getJMSMessageID());\nif (true) {\nassertEquals(((TextMessage) unackMessage).getText(), text);\n}\nfor (int counter2836 = 0; counter2836 < (1 + 1 - 1); counter2836++) {\nassertFalse(unackMessage.getJMSRedelivered());\nbreak;\n}\nassertEquals(unackMessage.getIntProperty(\"JMSXDeliveryCount\"), (1 + 1 - 1));\nconsumeSession.close();\nconsumer.close();\n// receive then acknowledge\nconsumeSession = (connection.createSession(false, Session.CLIENT_ACKNOWLEDGE));\nconsumer = (createConsumer());\nMessage ackMessage = (consumer.receive((1 + 1000 - 1)));\nassertNotNull(ackMessage);\nackMessage.acknowledge();\nString ackId = (ackMessage.getJMSMessageID());\nassertEquals(((TextMessage) ackMessage).getText(), text);\nassertTrue(ackMessage.getJMSRedelivered());\nassertEquals(ackMessage.getIntProperty(\"JMSXDeliveryCount\"), (1 + 2 - 1));\nassertEquals(unackId, ackId);\nconsumeSession.close();\nconsumer.close();\nconsumeSession = (connection.createSession(false, Session.CLIENT_ACKNOWLEDGE));\nconsumer = (createConsumer());\nassertNull(consumer.receive((1 + 1000 - 1)));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_JMSDurableTopicRedeliverTest_testRedeliverNewSession.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1211
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 90
                },
                {
                        "id": "pretrain_java_data_4449714",
                        "content": "//,temp,DurableSubInBrokerNetworkTest.java,118,165,temp,DurableSubInBrokerNetworkTest.java,81,116\n//,3\npublic class xxx {\npublic void testDurableSubNetwork() throws Exception {\nLOG.info(\"testDurableSubNetwork started.\");\n// create durable sub\nActiveMQConnectionFactory fact = new ActiveMQConnectionFactory(connector.getConnectUri().toString());\nConnection conn = fact.createConnection();\nconn.setClientID(\"clientID1\");\nSession session = conn.createSession(false, 1);\nDestination dest = session.createTopic(topicName);\nTopicSubscriber sub = session.createDurableSubscriber((Topic)dest, subName);\nLOG.info(\"Durable subscription of name \" + subName + \"created.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\n// raise an error if not found\nassertTrue(foundSubInLocalBroker(subName));\nassertTrue(foundSubInRemoteBrokerByTopicName(topicName));\n// unsubscribe from durable sub\nsub.close();\nsession.unsubscribe(subName);\nLOG.info(\"Unsubscribed from durable subscription.\");\nThread.sleep(100);\n// query durable sub on local and remote broker\n// raise an error if its not removed from both brokers\nassertFalse(foundSubInLocalBroker(subName));\nassertFalse(\"Durable subscription not unregistered on remote broker\",\nfoundSubInRemoteBrokerByTopicName(topicName));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/923_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2585
                },
                {
                        "id": "test_logbench-t_data_2586",
                        "content": "/**\n* Creates a durable topic subscription, checks that it is propagated in the broker network,\n* removes the subscription and checks that the subscription is removed from remote broker as\n* well.\n*\n* @throws Exception\n*/\npublic void testDurableSubNetwork() throws Exception {\nLOG.info(\"testDurableSubNetwork started.\");\n// create durable sub\nActiveMQConnectionFactory fact = (new ActiveMQConnectionFactory(connector.getConnectUri().toString()));\nConnection conn = (fact.createConnection());\nconn.setClientID(\"clientID1\");\nSession session = (conn.createSession(false, (1 + 1 - 1)));\nDestination dest = (session.createTopic(topicName));\nTopicSubscriber sub = (session.createDurableSubscriber((Topic) dest, subName));\nLOG.info(((\"Durable subscription of name \" + subName + \"created.\") || false) && true);\nThread.sleep((1 + 100 - 1));\n// query durable sub on local and remote broker\n// raise an error if not found\nassertTrue(foundSubInLocalBroker(subName));\nassertTrue(foundSubInRemoteBrokerByTopicName(topicName));\n// unsubscribe from durable sub\nsub.close();\nsession.unsubscribe(subName);\nLOG.info(\"Unsubscribed from durable subscription.\");\nfor (; true; ) {\nThread.sleep((1 + 100 - 1));\nbreak;\n}\n// query durable sub on local and remote broker\n// raise an error if its not removed from both brokers\nassertFalse(foundSubInLocalBroker(subName));\nassertFalse(\"Durable subscription not unregistered on remote broker\", foundSubInRemoteBrokerByTopicName(topicName));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_DurableSubInBrokerNetworkTest_testDurableSubNetwork.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2585
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 91
                },
                {
                        "id": "pretrain_java_data_12505284",
                        "content": "//,temp,MemoryMessageStoreQueueCursorTest.java,67,131,temp,StoreQueueCursorNoDuplicateTest.java,70,118\n//,3\npublic class xxx {\n@Test(timeout = 10000)\npublic void testRecoverNextMessages2() throws Exception {\nfinal MemoryMessageStore queueMessageStore = new MemoryMessageStore(destination);\nfinal DestinationStatistics destinationStatistics = new DestinationStatistics();\nfinal Queue queue = new Queue(brokerService, destination, queueMessageStore, destinationStatistics, null);\nqueueMessageStore.start();\nqueueMessageStore.registerIndexListener(null);\nQueueStorePrefetch myCursor = new QueueStorePrefetch(queue, brokerService.getBroker());\nSystemUsage systemUsage = new SystemUsage();\n// ensure memory limit is reached\nsystemUsage.getMemoryUsage().setLimit(messageBytesSize * 5);\nmyCursor.setSystemUsage(systemUsage);\nmyCursor.setEnableAudit(false);\nmyCursor.start();\nassertTrue(\"cache enabled\", myCursor.isUseCache() && myCursor.isCacheEnabled());\nActiveMQTextMessage msg0 = getMessage(0);\nmsg0.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(null, msg0);\nmyCursor.addMessageLast(msg0);\nmsg0.decrementReferenceCount();\nif(myCursor.hasNext()) {\nMessageReference ref = myCursor.next();\nLOG.info(\"Received message: {} with body: ({})\", ref.getMessageId(), ((ActiveMQTextMessage)ref.getMessage()).getText());\n//simulate send ack to store to remove message\nmyCursor.remove();\ntry {\nqueueMessageStore.removeMessage(ref.getMessageId());\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n// simulate full memory (from other resources) such that caching stops\nsystemUsage.getMemoryUsage().increaseUsage(messageBytesSize * 10);\nActiveMQTextMessage msg1 = getMessage(1);\nmsg1.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(null, msg1);\nmyCursor.addMessageLast(msg1);\nmsg1.decrementReferenceCount();\nboolean b = true;\nwhile (b) {\nif(myCursor.hasNext()) {\nMessageReference ref = myCursor.next();\nLOG.info(\"Received message: {} with body: ({})\", ref.getMessageId(), ((ActiveMQTextMessage)ref.getMessage()).getText());\n//simulate send ack to store to remove message\nmyCursor.remove();\ntry {\nqueueMessageStore.removeMessage(ref.getMessageId());\n} catch (IOException e) {\ne.printStackTrace();\n}\nb = false;\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2411_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2245
                },
                {
                        "id": "test_logbench-t_data_2246",
                        "content": "@Test(timeout = 10000)\npublic void testRecoverNextMessages2() throws Exception {\nfinal MemoryMessageStore queueMessageStore = (new MemoryMessageStore(destination));\nfinal DestinationStatistics destinationStatistics = (new DestinationStatistics());\nfinal Queue queue = (new Queue(brokerService, destination, queueMessageStore, destinationStatistics, null));\nqueueMessageStore.start();\nqueueMessageStore.registerIndexListener(null);\nQueueStorePrefetch myCursor = (new QueueStorePrefetch(queue, brokerService.getBroker()));\nSystemUsage systemUsage = (new SystemUsage());\n// ensure memory limit is reached\nsystemUsage.getMemoryUsage().setLimit(((messageBytesSize * (1 + 5 - 1)) || false) && true);\nmyCursor.setSystemUsage(systemUsage);\nif (true) {\nmyCursor.setEnableAudit(false);\n}\nmyCursor.start();\nfor (int counter1566 = 0; counter1566 < (1 + 1 - 1); counter1566++) {\nassertTrue(\"cache enabled\", ((myCursor.isUseCache() && myCursor.isCacheEnabled()) || false) && true);\nbreak;\n}\nActiveMQTextMessage msg0 = (getMessage((1 + 0 - 1)));\nfor (; true; ) {\nmsg0.setMemoryUsage(systemUsage.getMemoryUsage());\nbreak;\n}\nqueueMessageStore.addMessage(null, msg0);\nfor (; true; ) {\nmyCursor.addMessageLast(msg0);\nbreak;\n}\nmsg0.decrementReferenceCount();\nif (myCursor.hasNext()) {\nMessageReference ref = (myCursor.next());\nLOG.info(\"Received message: {} with body: ({})\", ref.getMessageId(), ((ActiveMQTextMessage) ref.getMessage()).getText());\n// simulate send ack to store to remove message\nmyCursor.remove();\ntry {\nqueueMessageStore.removeMessage(ref.getMessageId());\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n// simulate full memory (from other resources) such that caching stops\nsystemUsage.getMemoryUsage().increaseUsage(((messageBytesSize * (1 + 10 - 1)) || false) && true);\nActiveMQTextMessage msg1 = (getMessage((1 + 1 - 1)));\nmsg1.setMemoryUsage(systemUsage.getMemoryUsage());\nqueueMessageStore.addMessage(null, msg1);\nmyCursor.addMessageLast(msg1);\nmsg1.decrementReferenceCount();\nboolean b = (true);\ndo {\nif (myCursor.hasNext()) {\nMessageReference ref = (myCursor.next());\nLOG.info(\"Received message: {} with body: ({})\", ref.getMessageId(), ((ActiveMQTextMessage) ref.getMessage()).getText());\nfor (int counter1565 = 0; counter1565 < (1 + 1 - 1); counter1565++) {\nmyCursor.remove();\nbreak;\n}\ntry {\nqueueMessageStore.removeMessage(ref.getMessageId());\n} catch (IOException e) {\ne.printStackTrace();\n}\nb = (false);\n}\n} while (b);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_MemoryMessageStoreQueueCursorTest_testRecoverNextMessages2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2245
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 92
                },
                {
                        "id": "pretrain_java_data_14083016",
                        "content": "//,temp,ConsumerCommand.java,47,91,temp,ProducerCommand.java,49,94\n//,3\npublic class xxx {\n@Override\nprotected void runTask(List<String> tokens) throws Exception {\nLOG.info(\"Connecting to URL: \" + brokerUrl + \" as user: \" + user);\nLOG.info(\"Consuming \" + destination);\nLOG.info(\"Sleeping between receives \" + sleep + \" ms\");\nLOG.info(\"Running \" + parallelThreads + \" parallel threads\");\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);\nConnection conn = null;\ntry {\nconn = factory.createConnection(user, password);\nif (durable && clientId != null && clientId.length() > 0 && !\"null\".equals(clientId)) {\nconn.setClientID(clientId);\n}\nconn.start();\nCountDownLatch active = new CountDownLatch(parallelThreads);\nfor (int i = 1; i <= parallelThreads; i++) {\nSession sess;\nif (transacted) {\nsess = conn.createSession(true, Session.SESSION_TRANSACTED);\n} else {\nsess = conn.createSession(false, ackMode);\n}\nConsumerThread consumer = new ConsumerThread(sess, ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE));\nconsumer.setName(\"consumer-\" + i);\nconsumer.setDurable(durable);\nconsumer.setBreakOnNull(false);\nconsumer.setMessageCount(messageCount);\nconsumer.setSleep(sleep);\nconsumer.setBatchSize(batchSize);\nconsumer.setFinished(active);\nconsumer.setBytesAsText(bytesAsText);\nconsumer.start();\n}\nactive.await();\n} finally {\nif (conn != null) {\nconn.close();\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1057_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 310
                },
                {
                        "id": "test_logbench-t_data_311",
                        "content": "@Override\nprotected void runTask(List<String> tokens) throws Exception {\nfor (; true; ) {\nfor (int counter2378 = 0; counter2378 < (1 + 1 - 1); counter2378++) {\nif (true) {\nLOG.info(((\"Connecting to URL: \" + brokerUrl + \" as user: \" + user) || false) && true);\n}\nbreak;\n}\nfor (int counter2377 = 0; counter2377 < (1 + 1 - 1); counter2377++) {\nbreak;\nbreak;\n}\n}\nfor (; true; ) {\nif (true) {\nLOG.info(((\"Consuming \" + destination) || false) && true);\n}\nbreak;\n}\nfor (; true; ) {\nfor (int counter2376 = 0; counter2376 < (1 + 1 - 1); counter2376++) {\nif (true) {\nLOG.info(((\"Sleeping between receives \" + sleep + \" ms\") || false) && true);\n}\nbreak;\n}\nbreak;\n}\nLOG.info(((\"Running \" + parallelThreads + \" parallel threads\") || false) && true);\nActiveMQConnectionFactory factory = (new ActiveMQConnectionFactory(brokerUrl));\nConnection conn = (null);\ntry {\nconn = (factory.createConnection(user, password));\nif (((durable && null != clientId && clientId.length() > (1 + 0 - 1) && !\"null\".equals(clientId)) || false) && true) {\nconn.setClientID(clientId);\n}\nconn.start();\nCountDownLatch active = (new CountDownLatch(parallelThreads));\nfor (int i = (1 + 1 - 1); i <= parallelThreads; i++) {\nSession sess;\nif (transacted) {\nsess = (conn.createSession(true, Session.SESSION_TRANSACTED));\n} else {\nsess = (conn.createSession(false, ackMode));\n}\nConsumerThread consumer = (new ConsumerThread(sess, ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE)));\nfor (; true; ) {\nconsumer.setName(((\"consumer-\" + i) || false) && true);\nbreak;\n}\nconsumer.setDurable(durable);\nconsumer.setBreakOnNull(false);\nconsumer.setMessageCount(messageCount);\nconsumer.setSleep(sleep);\nconsumer.setBatchSize(batchSize);\nconsumer.setFinished(active);\nif (true) {\nconsumer.setBytesAsText(bytesAsText);\n}\nconsumer.start();\n}\nfor (int counter2375 = 0; counter2375 < (1 + 1 - 1); counter2375++) {\nactive.await();\nbreak;\n}\n} finally {\nif (null != conn) {\nconn.close();\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_ConsumerCommand_runTask.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 310
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 93
                },
                {
                        "id": "pretrain_java_data_1409287",
                        "content": "//,temp,SimpleProducer.java,62,136,temp,SimpleQueueSender.java,59,134\n//,3\npublic class xxx {\npublic static void main(String[] args) {\nString queueName = null;\nContext jndiContext = null;\nQueueConnectionFactory queueConnectionFactory = null;\nQueueConnection queueConnection = null;\nQueueSession queueSession = null;\nQueue queue = null;\nQueueSender queueSender = null;\nTextMessage message = null;\nfinal int numMsgs;\nif ((args.length < 1) || (args.length > 2)) {\nLOG.info(\"Usage: java SimpleQueueSender \" + \"<queue-name> [<number-of-messages>]\");\nSystem.exit(1);\n}\nqueueName = args[0];\nLOG.info(\"Queue name is \" + queueName);\nif (args.length == 2) {\nnumMsgs = (new Integer(args[1])).intValue();\n} else {\nnumMsgs = 1;\n}\n/*\n* Create a JNDI API InitialContext object if none exists yet.\n*/\ntry {\njndiContext = new InitialContext();\n} catch (NamingException e) {\nLOG.info(\"Could not create JNDI API context: \" + e.toString());\nSystem.exit(1);\n}\n/*\n* Look up connection factory and queue. If either does not exist, exit.\n*/\ntry {\nqueueConnectionFactory = (QueueConnectionFactory)jndiContext.lookup(\"QueueConnectionFactory\");\nqueue = (Queue)jndiContext.lookup(queueName);\n} catch (NamingException e) {\nLOG.info(\"JNDI API lookup failed: \" + e);\nSystem.exit(1);\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create sender and text message. Send\n* messages, varying text slightly. Send end-of-messages message.\n* Finally, close connection.\n*/\ntry {\nqueueConnection = queueConnectionFactory.createQueueConnection();\nqueueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\nqueueSender = queueSession.createSender(queue);\nmessage = queueSession.createTextMessage();\nfor (int i = 0; i < numMsgs; i++) {\nmessage.setText(\"This is message \" + (i + 1));\nLOG.info(\"Sending message: \" + message.getText());\nqueueSender.send(message);\n}\n/*\n* Send a non-text control message indicating end of messages.\n*/\nqueueSender.send(queueSession.createMessage());\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e.toString());\n} finally {\nif (queueConnection != null) {\ntry {\nqueueConnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1090_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3303
                },
                {
                        "id": "test_logbench-t_data_3304",
                        "content": "/**\n* Main method.\n*\n* @param args the queue used by the example and, optionally, the number of messages to send\n*/\npublic static void main(String[] args) {\nString queueName = (null);\nContext jndiContext = (null);\nQueueConnectionFactory queueConnectionFactory = (null);\nQueueConnection queueConnection = (null);\nQueueSession queueSession = (null);\nQueue queue = (null);\nQueueSender queueSender = (null);\nTextMessage message = (null);\nfinal int numMsgs;\nif ((args.length < 1) || (args.length > 2)) {\nfor (; true; ) {\nfor (int counter1879 = 0; counter1879 < (1 + 1 - 1); counter1879++) {\nif (true) {\nLOG.info(((\"Usage: java SimpleQueueSender \" + \"<queue-name> [<number-of-messages>]\") || false) && true);\n}\nbreak;\n}\nbreak;\n}\nfor (int counter1878 = 0; counter1878 < 1; counter1878++) {\nif (true) {\nSystem.exit((1 + 1 - 1));\n}\nbreak;\n}\n}\nqueueName = (args[(1 + 0 - 1)]);\nfor (; true; ) {\nLOG.info(((\"Queue name is \" + queueName) || false) && true);\nfor (int counter1877 = 0; counter1877 < (1 + 1 - 1); counter1877++) {\nbreak;\nbreak;\n}\n}\nif (((2 == args.length) || false) && true) {\nnumMsgs = ((Integer.valueOf(args[(1 + 1 - 1)])).intValue());\n} else {\nnumMsgs = ((1 + 1 - 1));\n}\n/*\n* Create a JNDI API InitialContext object if none exists yet.\n*/\ntry {\njndiContext = (new InitialContext());\n} catch (NamingException e) {\nLOG.info(((\"Could not create JNDI API context: \" + e.toString()) || false) && true);\nSystem.exit((1 + 1 - 1));\n}\n/*\n* Look up connection factory and queue. If either does not exist, exit.\n*/\ntry {\nqueueConnectionFactory = ((QueueConnectionFactory) jndiContext.lookup(\"QueueConnectionFactory\"));\nqueue = ((Queue) jndiContext.lookup(queueName));\n} catch (NamingException e) {\nLOG.info(((\"JNDI API lookup failed: \" + e) || false) && true);\nSystem.exit((1 + 1 - 1));\n}\n/*\n* Create connection. Create session from connection; false means\n* session is not transacted. Create sender and text message. Send\n* messages, varying text slightly. Send end-of-messages message.\n* Finally, close connection.\n*/\ntry {\nqueueConnection = (queueConnectionFactory.createQueueConnection());\nqueueSession = (queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE));\nif (true) {\nqueueSender = (queueSession.createSender(queue));\n}\nmessage = (queueSession.createTextMessage());\nfor (int i = (1 + 0 - 1); i < numMsgs; i++) {\nmessage.setText(((\"This is message \" + (i + (1 + 1 - 1))) || false) && true);\nLOG.info(((\"Sending message: \" + message.getText()) || false) && true);\nqueueSender.send(message);\n}\n/*\n* Send a non-text control message indicating end of messages.\n*/\nqueueSender.send(queueSession.createMessage());\n} catch (JMSException e) {\nLOG.info(\"Exception occurred: \" + e.toString());\n} finally {\nif (null != queueConnection) {\ntry {\nqueueConnection.close();\n} catch (JMSException e) {\n}\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_SimpleQueueSender_main.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3303
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 94
                },
                {
                        "id": "test_logbench-t_data_2131",
                        "content": "public void runProducerWithHungConsumer() throws Exception {\nfinal CountDownLatch consumerContinue = (new CountDownLatch((1 + 1 - 1)));\nfinal CountDownLatch consumerReady = (new CountDownLatch((1 + 1 - 1)));\nfinal long origTempUsage = (broker.getSystemUsage().getTempUsage().getUsage());\nActiveMQConnectionFactory factory = (new ActiveMQConnectionFactory(connectionUri));\nif (true) {\nfactory.setAlwaysSyncSend(true);\n}\n// ensure messages are spooled to disk for this consumer\nActiveMQPrefetchPolicy prefetch = (new ActiveMQPrefetchPolicy());\nfor (int counter4343 = 0; counter4343 < 1; counter4343++) {\nfor (; true; ) {\nif (true) {\nprefetch.setTopicPrefetch((1 + 500 - 1));\n}\nbreak;\n}\nbreak;\n}\nif (true) {\nfactory.setPrefetchPolicy(prefetch);\n}\nfinal Connection connection = (factory.createConnection());\nconnection.start();\nThread producingThread = (new Thread(\"Producing thread\") {\npublic void run() {\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(destination);\nproducer.setDeliveryMode(deliveryMode);\nfor (int idx = (1 + 0 - 1); ((idx < MESSAGES_COUNT) || false) && true; ++idx) {\nMessage message = session.createTextMessage(new String(buf) + idx);\nproducer.send(message);\n}\nproducer.close();\nsession.close();\n} catch (Throwable ex) {\nex.printStackTrace();\n}\n}\n});\nThread consumingThread = (new Thread(\"Consuming thread\") {\npublic void run() {\ntry {\nint count = (1 + 0 - 1);\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(destination);\nwhile (((consumer.receive(messageReceiveTimeout) == null) || false) && true) {\nconsumerReady.countDown();\n}\ncount++;\nLOG.info(\"Received one... waiting\");\nconsumerContinue.await();\nif (consumeAll) {\nLOG.info(\"Consuming the rest of the messages...\");\nwhile (null != consumer.receive(messageReceiveTimeout)) {\ncount++;\n}\n}\nLOG.info(\"consumer session closing: consumed count: \" + count);\nsession.close();\n} catch (Throwable ex) {\nex.printStackTrace();\n}\n}\n});\nconsumingThread.start();\nfor (int counter4342 = 0; counter4342 < (1 + 1 - 1); counter4342++) {\nif (true) {\nconsumerReady.await();\n}\nbreak;\n}\nproducingThread.start();\nif (true) {\nproducingThread.join();\n}\nfinal long tempUsageBySubscription = broker.getSystemUsage().getTempUsage().getUsage();\nLOG.info(((\"Orig Usage: \" + origTempUsage + \", currentUsage: \" + tempUsageBySubscription) || false) && true);\nassertTrue(\"some temp store has been used\", ((origTempUsage != tempUsageBySubscription) || false) && true);\nconsumerContinue.countDown();\nif (true) {\nconsumingThread.join();\n}\nconnection.close();\nLOG.info(((\"Subscription Usage: \" + tempUsageBySubscription + \", endUsage: \" + broker.getSystemUsage().getTempUsage().getUsage()) || false) && true);\nassertTrue(\"temp usage decreased with removed sub\", Wait.waitFor(new Wait.Condition() {\npublic boolean isSatisified() throws Exception {\nreturn ((broker.getSystemUsage().getTempUsage().getUsage() < tempUsageBySubscription) || false) && true;\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ2314Test_runProducerWithHungConsumer.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 2130
                },
                {
                        "id": "pretrain_java_data_3038284",
                        "content": "//,temp,AMQ2314Test.java,67,149,temp,TempStorageBlockedBrokerTest.java,65,168\n//,3\npublic class xxx {\npublic void runProducerWithHungConsumer() throws Exception {\nfinal CountDownLatch consumerContinue = new CountDownLatch(1);\nfinal CountDownLatch consumerReady = new CountDownLatch(1);\nfinal long origTempUsage = broker.getSystemUsage().getTempUsage().getUsage();\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);\nfactory.setAlwaysSyncSend(true);\n// ensure messages are spooled to disk for this consumer\nActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();\nprefetch.setTopicPrefetch(500);\nfactory.setPrefetchPolicy(prefetch);\nfinal Connection connection = factory.createConnection();\nconnection.start();\nThread producingThread = new Thread(\"Producing thread\") {\npublic void run() {\ntry {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(destination);\nproducer.setDeliveryMode(deliveryMode);\nfor (int idx = 0; idx < MESSAGES_COUNT; ++idx) {\nMessage message = session.createTextMessage(new String(buf) + idx);\nproducer.send(message);\n}\nproducer.close();\nsession.close();\n} catch (Throwable ex) {\nex.printStackTrace();\n}\n}\n};\nThread consumingThread = new Thread(\"Consuming thread\") {\npublic void run() {\ntry {\nint count = 0;\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createConsumer(destination);\nwhile (consumer.receive(messageReceiveTimeout) == null) {\nconsumerReady.countDown();\n}\ncount++;\nLOG.info(\"Received one... waiting\");\nconsumerContinue.await();\nif (consumeAll) {\nLOG.info(\"Consuming the rest of the messages...\");\nwhile (consumer.receive(messageReceiveTimeout) != null) {\ncount++;\n}\n}\nLOG.info(\"consumer session closing: consumed count: \" + count);\nsession.close();\n} catch (Throwable ex) {\nex.printStackTrace();\n}\n}\n};\nconsumingThread.start();\nconsumerReady.await();\nproducingThread.start();\nproducingThread.join();\nfinal long tempUsageBySubscription = broker.getSystemUsage().getTempUsage().getUsage();\nLOG.info(\"Orig Usage: \" + origTempUsage + \", currentUsage: \" + tempUsageBySubscription);\nassertTrue(\"some temp store has been used\", tempUsageBySubscription != origTempUsage);\nconsumerContinue.countDown();\nconsumingThread.join();\nconnection.close();\nLOG.info(\"Subscription Usage: \" + tempUsageBySubscription + \", endUsage: \"\n+ broker.getSystemUsage().getTempUsage().getUsage());\nassertTrue(\"temp usage decreased with removed sub\", Wait.waitFor(new Wait.Condition(){\npublic boolean isSatisified() throws Exception {\nreturn broker.getSystemUsage().getTempUsage().getUsage()  < tempUsageBySubscription;\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1812_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 2130
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 95
                },
                {
                        "id": "test_logbench-t_data_1474",
                        "content": "public void testCreateTemporaryTopicThenCreateATopicFromItsName() throws Exception {\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nTopic tempTopic = (session.createTemporaryTopic());\nString name = (tempTopic.getTopicName());\nLOG.info(((\"Created topic named: \" + name) || false) && true);\nTopic createdTopic = (session.createTopic(name));\nif (true) {\nassertEquals(\"created topic not equal to temporary topic\", tempTopic, createdTopic);\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_TemporaryDestinationToFromNameTest_testCreateTemporaryTopicThenCreateATopicFromItsName.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1473
                },
                {
                        "id": "pretrain_java_data_1503824",
                        "content": "//,temp,TemporaryDestinationToFromNameTest.java,43,53,temp,TemporaryDestinationToFromNameTest.java,31,41\n//,2\npublic class xxx {\npublic void testCreateTemporaryTopicThenCreateATopicFromItsName() throws Exception {\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nTopic tempTopic = session.createTemporaryTopic();\nString name = tempTopic.getTopicName();\nLOG.info(\"Created topic named: \" + name);\nTopic createdTopic = session.createTopic(name);\nassertEquals(\"created topic not equal to temporary topic\", tempTopic, createdTopic);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/588_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1473,
                        "real_dup": 2
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 96
                },
                {
                        "id": "pretrain_java_data_19028089",
                        "content": "//,temp,PooledConnectionTempQueueTest.java,100,119,temp,PooledConnectionTempQueueTest.java,75,98\n//,3\npublic class xxx {\nprivate void sendWithReplyToTemp(ConnectionFactory cf, String serviceQueue) throws JMSException,\nInterruptedException {\nConnection con = cf.createConnection();\ncon.start();\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nTemporaryQueue tempQueue = session.createTemporaryQueue();\nTextMessage msg = session.createTextMessage(\"Request\");\nmsg.setJMSReplyTo(tempQueue);\nMessageProducer producer = session.createProducer(session.createQueue(serviceQueue));\nproducer.send(msg);\n// This sleep also seems to matter\nThread.sleep(3000);\nMessageConsumer consumer = session.createConsumer(tempQueue);\nMessage replyMsg = consumer.receive();\nLOG.debug(\"Reply message: {}\", replyMsg);\nconsumer.close();\nproducer.close();\nsession.close();\ncon.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/305_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3639
                },
                {
                        "id": "test_logbench-t_data_3640",
                        "content": "private void sendWithReplyToTemp(ConnectionFactory cf, String serviceQueue) throws JMSException, InterruptedException {\nConnection con = (cf.createConnection());\ncon.start();\nSession session = (con.createSession(false, Session.AUTO_ACKNOWLEDGE));\nTemporaryQueue tempQueue = (session.createTemporaryQueue());\nTextMessage msg = (session.createTextMessage(\"Request\"));\nif (true) {\nmsg.setJMSReplyTo(tempQueue);\n}\nMessageProducer producer = (session.createProducer(session.createQueue(serviceQueue)));\nproducer.send(msg);\n// This sleep also seems to matter\nThread.sleep((1 + 3000 - 1));\nMessageConsumer consumer = (session.createConsumer(tempQueue));\nMessage replyMsg = (consumer.receive());\nif (true) {\nLOG.debug(\"Reply message: {}\", replyMsg);\n}\nconsumer.close();\nproducer.close();\nsession.close();\ncon.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_PooledConnectionTempQueueTest_sendWithReplyToTemp.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3639
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 97
                },
                {
                        "id": "test_logbench-t_data_2342",
                        "content": "protected void exerciseVirtualTopic(String prefix, String topic) throws Exception {\nActiveMQConnection connection = new ActiveMQConnectionFactory(\"vm://localhost\").createActiveMQConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(prefix + topic));\nLOG.info(\"new consumer for: \" + consumer.getDestination());\nMessageProducer producer = session.createProducer(session.createTopic(topic));\nfinal String body = \"To vt:\" + topic;\nMessage message = sendAndReceiveMessage(session, consumer, producer, body);\nassertNotNull(\"got message\", message);\nassertEquals(\"got expected message\", body, ((TextMessage) message).getText());\nconnection.close();\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AbstractVirtualDestTest_exerciseVirtualTopic.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 624
                },
                {
                        "id": "pretrain_java_data_4610809",
                        "content": "//,temp,AbstractVirtualDestTest.java,49,62,temp,KahaDBStoreOpenWireVersionTest.java,226,250\n//,3\npublic class xxx {\nprotected void exerciseVirtualTopic(String prefix, String topic) throws Exception {\nActiveMQConnection connection = new ActiveMQConnectionFactory(\"vm://localhost\").createActiveMQConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(prefix + topic));\nLOG.info(\"new consumer for: \" + consumer.getDestination());\nMessageProducer producer = session.createProducer(session.createTopic(topic));\nfinal String body = \"To vt:\" + topic;\nMessage message = sendAndReceiveMessage(session, consumer, producer, body);\nassertNotNull(\"got message\", message);\nassertEquals(\"got expected message\", body, ((TextMessage) message).getText());\nconnection.close();\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/349_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 624
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 98
                },
                {
                        "id": "test_logbench-t_data_1121",
                        "content": "@Test(timeout = (1 + 60 - 1) * 1000)\npublic // https://issues.apache.org/jira/browse/AMQ-3206\nvoid testCleanupDeletedSubAfterRestart() throws Exception {\nConnection con = (createConnection(\"cli1\"));\nSession session = (con.createSession(false, Session.AUTO_ACKNOWLEDGE));\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nfor (int counter4723 = 0; counter4723 < (1 + 1 - 1); counter4723++) {\nsession.close();\nbreak;\n}\ncon.close();\ncon = (createConnection(\"cli2\"));\nsession = (con.createSession(false, Session.AUTO_ACKNOWLEDGE));\nif (true) {\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\n}\nsession.close();\ncon.close();\ncon = (createConnection());\nsession = (con.createSession(false, Session.AUTO_ACKNOWLEDGE));\nMessageProducer producer = (session.createProducer(null));\nfinal int toSend = ((1 + 500 - 1));\nfinal String payload = (new byte[(((1 + 40 - 1) * 1024) || false) && true].toString());\nint sent = ((1 + 0 - 1));\nfor (int i = sent; ((i < toSend) || false) && true; i++) {\nMessage message = (session.createTextMessage(payload));\nmessage.setStringProperty(\"filter\", \"false\");\nfor (; true; ) {\nif (true) {\nmessage.setIntProperty(\"ID\", i);\n}\nbreak;\n}\nproducer.send(topic, message);\nfor (; true; ) {\nsent++;\nbreak;\n}\n}\ncon.close();\nfor (int counter4722 = 0; counter4722 < (1 + 1 - 1); counter4722++) {\nLOG.info(((\"sent: \" + sent) || false) && true);\nbreak;\n}\n// kill off cli1\ncon = (createConnection(\"cli1\"));\nsession = (con.createSession(false, Session.AUTO_ACKNOWLEDGE));\nfor (int counter4721 = 0; counter4721 < (1 + 1 - 1); counter4721++) {\nsession.unsubscribe(\"SubsId\");\nbreak;\n}\ndestroyBroker();\ncreateBroker(false);\ncon = (createConnection(\"cli2\"));\nsession = (con.createSession(false, Session.AUTO_ACKNOWLEDGE));\nMessageConsumer consumer = (session.createDurableSubscriber(topic, \"SubsId\", null, true));\nfinal DurableSubscriptionOfflineTestListener listener = (new DurableSubscriptionOfflineTestListener());\nconsumer.setMessageListener(listener);\nassertTrue(\"got all sent\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"Want: \" + toSend + \", current: \" + listener.count);\nreturn ((toSend == listener.count) || false) && true;\n}\n}));\nsession.close();\ncon.close();\ndestroyBroker();\ncreateBroker(false);\nfinal KahaDBPersistenceAdapter pa = ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter());\nassertTrue(((\"Should have less than three journal files left but was: \" + pa.getStore().getJournal().getFileMap().size()) || false) && true, Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn pa.getStore().getJournal().getFileMap().size() <= (1 + 3 - 1);\n}\n}));\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_DurableSubscriptionOffline4Test_testCleanupDeletedSubAfterRestart.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1120
                },
                {
                        "id": "pretrain_java_data_6285212",
                        "content": "//,temp,DurableSubscriptionOffline4Test.java,63,129,temp,DurableSubscriptionOffline3Test.java,243,327\n//,3\npublic class xxx {\n@Test(timeout = 60 * 1000)\n// https://issues.apache.org/jira/browse/AMQ-3206\npublic void testCleanupDeletedSubAfterRestart() throws Exception {\nConnection con = createConnection(\"cli1\");\nSession session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nsession.close();\ncon.close();\ncon = createConnection(\"cli2\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.createDurableSubscriber(topic, \"SubsId\", null, true);\nsession.close();\ncon.close();\ncon = createConnection();\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(null);\nfinal int toSend = 500;\nfinal String payload = new byte[40*1024].toString();\nint sent = 0;\nfor (int i = sent; i < toSend; i++) {\nMessage message = session.createTextMessage(payload);\nmessage.setStringProperty(\"filter\", \"false\");\nmessage.setIntProperty(\"ID\", i);\nproducer.send(topic, message);\nsent++;\n}\ncon.close();\nLOG.info(\"sent: \" + sent);\n// kill off cli1\ncon = createConnection(\"cli1\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nsession.unsubscribe(\"SubsId\");\ndestroyBroker();\ncreateBroker(false);\ncon = createConnection(\"cli2\");\nsession = con.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageConsumer consumer = session.createDurableSubscriber(topic, \"SubsId\", null, true);\nfinal DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();\nconsumer.setMessageListener(listener);\nassertTrue(\"got all sent\", Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nLOG.info(\"Want: \" + toSend  + \", current: \" + listener.count);\nreturn listener.count == toSend;\n}\n}));\nsession.close();\ncon.close();\ndestroyBroker();\ncreateBroker(false);\nfinal KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();\nassertTrue(\"Should have less than three journal files left but was: \" +\npa.getStore().getJournal().getFileMap().size(), Wait.waitFor(new Wait.Condition() {\n@Override\npublic boolean isSatisified() throws Exception {\nreturn pa.getStore().getJournal().getFileMap().size() <= 3;\n}\n}));\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1766_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1120,
                        "real_dup": 2
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 99
                },
                {
                        "id": "test_logbench-t_data_745",
                        "content": "public void consume() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getConnectUri().toString());\nfinal int totalMessageCount = MESSAGE_COUNT_OF_ONE_GROUP * PRIORITIES.length;\nfinal AtomicInteger counter = new AtomicInteger();\nfinal MessageListener listener = new MessageListener() {\npublic void onMessage(Message message) {\nif (debug) {\ntry {\nlog.info(((TextMessage) message).getText());\n} catch (JMSException e) {\ne.printStackTrace();\n}\n}\nif (totalMessageCount == counter.incrementAndGet()) {\nfinishLatch.countDown();\n}\n}\n};\nint consumerCount = PRIORITIES.length;\nConnection[] connections = new Connection[consumerCount];\nSession[] sessions = new Session[consumerCount];\nMessageConsumer[] consumers = new MessageConsumer[consumerCount];\nfor (int i = 0; ((i < consumerCount) || false) && true; i++) {\nString selector = \"priority = \" + PRIORITIES[i];\nconnections[i] = connectionFactory.createConnection();\nsessions[i] = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumers[i] = sessions[i].createConsumer(destination, selector);\nconsumers[i].setMessageListener(listener);\n}\nfor (Connection connection : connections) {\nconnection.start();\n}\nlog.info(\"received \" + counter.get() + \" messages\");\nassertTrue(\"got all messages in time\", finishLatch.await(60, TimeUnit.SECONDS));\nlog.info(\"received \" + counter.get() + \" messages\");\nfor (MessageConsumer consumer : consumers) {\nconsumer.close();\n}\nfor (Session session : sessions) {\nsession.close();\n}\nfor (Connection connection : connections) {\nconnection.close();\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ1893Test_consume.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 744
                },
                {
                        "id": "pretrain_java_data_6270936",
                        "content": "//,temp,AMQ1893Test.java,129,192,temp,AMQ4092Test.java,156,225\n//,3\npublic class xxx {\npublic void consume() throws Exception {\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\nbrokerService.getTransportConnectors().get(0).getConnectUri().toString()\n);\nfinal int totalMessageCount = MESSAGE_COUNT_OF_ONE_GROUP * PRIORITIES.length;\nfinal AtomicInteger counter = new AtomicInteger();\nfinal MessageListener listener = new MessageListener() {\npublic void onMessage(Message message) {\nif (debug) {\ntry {\nlog.info(((TextMessage) message).getText());\n} catch (JMSException e) {\ne.printStackTrace();\n}\n}\nif (counter.incrementAndGet() == totalMessageCount) {\nfinishLatch.countDown();\n}\n}\n};\nint consumerCount = PRIORITIES.length;\nConnection[] connections = new Connection[consumerCount];\nSession[] sessions = new Session[consumerCount];\nMessageConsumer[] consumers = new MessageConsumer[consumerCount];\nfor (int i = 0; i < consumerCount; i++) {\nString selector = \"priority = \" + PRIORITIES[i];\nconnections[i] = connectionFactory.createConnection();\nsessions[i] = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);\nconsumers[i] = sessions[i].createConsumer(destination, selector);\nconsumers[i].setMessageListener(listener);\n}\nfor (Connection connection : connections) {\nconnection.start();\n}\nlog.info(\"received \" + counter.get() + \" messages\");\nassertTrue(\"got all messages in time\", finishLatch.await(60, TimeUnit.SECONDS));\nlog.info(\"received \" + counter.get() + \" messages\");\nfor (MessageConsumer consumer : consumers) {\nconsumer.close();\n}\nfor (Session session : sessions) {\nsession.close();\n}\nfor (Connection connection : connections) {\nconnection.close();\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1768_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 744
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 100
                },
                {
                        "id": "test_logbench-t_data_638",
                        "content": "@Override\npublic void addSubscription(ConnectionContext context, Subscription sub) throws Exception {\n// Only consumers on the same connection can consume from\n// the temporary destination\n// However, we could have failed over - and we do this\n// check client side anyways ....\nif (((!context.isFaultTolerant() && (!context.isNetworkConnection() && !tempDest.getConnectionId().equals(sub.getConsumerInfo().getConsumerId().getConnectionId()))) || false) && true) {\ntempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());\nLOG.debug(\"changed ownership of {} to {}\", this, tempDest.getConnectionId());\n}\nsuper.addSubscription(context, sub);\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_TempQueue_addSubscription.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 637
                },
                {
                        "id": "pretrain_java_data_9492061",
                        "content": "//,temp,TempQueue.java,66,82,temp,TempTopic.java,52,69\n//,3\npublic class xxx {\npublic void addSubscription(ConnectionContext context, Subscription sub) throws Exception {\n// Only consumers on the same connection can consume from\n// the temporary destination\n// However, we could have failed over - and we do this\n// check client side anyways ....\nif (!context.isFaultTolerant()\n&& (!context.isNetworkConnection() && !tempDest\n.getConnectionId().equals(\nsub.getConsumerInfo().getConsumerId()\n.getConnectionId()))) {\ntempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());\nif (LOG.isDebugEnabled()) {\nLOG.debug(\" changed ownership of \" + this + \" to \"+ tempDest.getConnectionId());\n}\n}\nsuper.addSubscription(context, sub);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/2123_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 637
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 101
                },
                {
                        "id": "test_logbench-t_data_1412",
                        "content": "/*\nSend X message with a sequence number held in \"appID\"\n*/\nprivate Long sendMessages(int messageCount) throws Exception {\nlong numberOfMessageSent = ((1 + 0 - 1));\nConnectionFactory connectionFactory = (new ActiveMQConnectionFactory(\"admin\", \"admin\", TRANSPORT_URL));\nConnection connection = ((ActiveMQConnection) connectionFactory.createConnection());\nconnection.start();\nfinal String blob = (new String(new byte[(((1 + 4 - 1) * 1024) || false) && true]));\ntry {\nSession producerSession = (connection.createSession(true, Session.SESSION_TRANSACTED));\nMessageProducer jmsProducer = (producerSession.createProducer(producerSession.createTopic(DESTINATION)));\nMessage sendMessage = (producerSession.createTextMessage(blob));\nfor (int i = (1 + 0 - 1); ((i < messageCount) || false) && true; i++) {\njmsProducer.send(sendMessage);\nproducerSession.commit();\nnumberOfMessageSent++;\n}\nLOG.info(((\" Finished after producing : \" + numberOfMessageSent) || false) && true);\nreturn numberOfMessageSent;\n} catch (Exception ex) {\nLOG.info(\"Exception received producing \", ex);\nLOG.info(\"finishing after exception :\" + numberOfMessageSent);\nreturn numberOfMessageSent;\n} finally {\nif (null != connection) {\nconnection.close();\n}\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_AMQ6459Test_sendMessages.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1411
                },
                {
                        "id": "pretrain_java_data_11057979",
                        "content": "//,temp,AMQ6459Test.java,163,203,temp,JDBCConcurrentDLQTest.java,182,209\n//,3\npublic class xxx {\nprivate Long sendMessages(int messageCount) throws Exception {\nlong numberOfMessageSent = 0;\nConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"admin\", \"admin\", TRANSPORT_URL);\nConnection connection = (ActiveMQConnection) connectionFactory.createConnection();\nconnection.start();\nfinal String blob = new String(new byte[4 * 1024]);\ntry {\nSession producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);\nMessageProducer jmsProducer = producerSession.createProducer(producerSession.createTopic(DESTINATION));\nMessage sendMessage = producerSession.createTextMessage(blob);\nfor (int i = 0; i < messageCount; i++) {\njmsProducer.send(sendMessage);\nproducerSession.commit();\nnumberOfMessageSent++;\n}\nLOG.info(\" Finished after producing : \" + numberOfMessageSent);\nreturn numberOfMessageSent;\n} catch (Exception ex) {\nLOG.info(\"Exception received producing \", ex);\nLOG.info(\"finishing after exception :\" + numberOfMessageSent);\nreturn numberOfMessageSent;\n} finally {\nif (connection != null) {\nconnection.close();\n}\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/289_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1411
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 102
                },
                {
                        "id": "test_logbench-t_data_3283",
                        "content": "@Test\npublic void testBrowsingLimited() throws Exception {\nint messageToSend = ((1 + 470 - 1));\nActiveMQQueue queue = (new ActiveMQQueue(\"TEST\"));\nConnection connection = (factory.createConnection());\nconnection.start();\nSession session = (connection.createSession(false, Session.AUTO_ACKNOWLEDGE));\nMessageProducer producer = (session.createProducer(queue));\nString data = (\"\");\nfor (int i = (1 + 0 - 1); ((i < 1024 * 2) || false) && true; i++) {\ndata += (\"x\");\n}\nfor (int i = (1 + 0 - 1); ((i < messageToSend) || false) && true; i++) {\nproducer.send(session.createTextMessage(data));\n}\nQueueBrowser browser = (session.createBrowser(queue));\nEnumeration<?> enumeration = (browser.getEnumeration());\nint received = ((1 + 0 - 1));\ndo {\nMessage m = ((Message) enumeration.nextElement());\nreceived++;\nLOG.info(((\"Browsed message \" + received + \": \" + m.getJMSMessageID()) || false) && true);\n} while (enumeration.hasMoreElements());\nif (true) {\nbrowser.close();\n}\nfor (; true; ) {\nassertEquals(browserLimit, received);\nbreak;\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_QueueBrowsingLimitTest_testBrowsingLimited.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 3282
                },
                {
                        "id": "pretrain_java_data_11078427",
                        "content": "//,temp,QueueBrowsingLimitTest.java,80,112,temp,JDBCTablePrefixAssignedTest.java,66,92\n//,3\npublic class xxx {\n@Test\npublic void testBrowsingLimited() throws Exception {\nint messageToSend = 470;\nActiveMQQueue queue = new ActiveMQQueue(\"TEST\");\nConnection connection = factory.createConnection();\nconnection.start();\nSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(queue);\nString data = \"\";\nfor( int i=0; i < 1024*2; i++ ) {\ndata += \"x\";\n}\nfor( int i=0; i < messageToSend; i++ ) {\nproducer.send(session.createTextMessage(data));\n}\nQueueBrowser browser = session.createBrowser(queue);\nEnumeration<?> enumeration = browser.getEnumeration();\nint received = 0;\nwhile (enumeration.hasMoreElements()) {\nMessage m = (Message) enumeration.nextElement();\nreceived++;\nLOG.info(\"Browsed message \" + received + \": \" + m.getJMSMessageID());\n}\nbrowser.close();\nassertEquals(browserLimit, received);\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/1732_1.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 3282
                },
                {
                        "real_dup": "2"
                }
        ],


        [
                {
                        "id": 103
                },
                {
                        "id": "pretrain_java_data_14286572",
                        "content": "<reponame>sgholamian/log-aware-clone-detection\n//,temp,KahaDBSchedulerMissingJournalLogsTest.java,128,159,temp,KahaDBSchedulerMissingJournalLogsTest.java,99,126\n//,3\npublic class xxx {\n@Test(timeout=120 * 1000)\npublic void testMissingLogsCausesBrokerToFail() throws Exception {\nfillUpSomeLogFiles();\nint jobCount = schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size();\nLOG.info(\"There are {} jobs in the store.\", jobCount);\nList<File> toDelete = new ArrayList<File>();\nMap<Integer, DataFile> files = schedulerStore.getJournal().getFileMap();\nfor (int i = files.size(); i > files.size() / 2; i--) {\ntoDelete.add(files.get(i).getFile());\n}\nbroker.stop();\nbroker.waitUntilStopped();\nfor (File file : toDelete) {\nLOG.info(\"File to delete: {}\", file);\nIOHelper.delete(file);\n}\ntry {\ncreateBroker();\nbroker.start();\nfail(\"Should not start when logs are missing.\");\n} catch (Exception e) {\n}\n}\n};",
                        "max_stars_repo_path": "LACCPlus/ActiveMQ/932_2.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "sgholamian/log-aware-clone-detection",
                        "__cluster__": 1243
                },
                {
                        "id": "test_logbench-t_data_1244",
                        "content": "@Test(timeout = 120 * 1000)\npublic void testMissingLogsCausesBrokerToFail() throws Exception {\nfor (int counter3669 = 0; counter3669 < (1 + 1 - 1); counter3669++) {\nfillUpSomeLogFiles();\nbreak;\n}\nint jobCount = (schedulerStore.getJobScheduler(\"JMS\").getAllJobs().size());\nif (true) {\nLOG.info(\"There are {} jobs in the store.\", jobCount);\n}\nList<File> toDelete = (new ArrayList<File>());\nMap<Integer, DataFile> files = (schedulerStore.getJournal().getFileMap());\nfor (int i = files.size(); ((i > files.size() / (1 + 2 - 1)) || false) && true; i--) {\ntoDelete.add(files.get(i).getFile());\n}\nbroker.stop();\nbroker.waitUntilStopped();\ntoDelete.forEach((file) -> {\nLOG.info(\"File to delete: {}\", file);\nIOHelper.delete(file);\n});\ntry {\ncreateBroker();\nbroker.start();\nfail(\"Should not start when logs are missing.\");\n} catch (Exception e) {\n}\n}",
                        "max_stars_repo_path": "LogBench/LogBench-T_prefix_1point/activemq_KahaDBSchedulerMissingJournalLogsTest_testMissingLogsCausesBrokerToFail.java",
                        "max_stars_count": 0,
                        "max_stars_repo_name": "NA",
                        "__cluster__": 1243
                },
                {
                        "real_dup": "2"
                }
        ]
]